Original Code,Adversarial Code,True Label,Original Prediction,Adversarial Prediction,Is Success,Extracted Variables,Replaced Variables
"class Calculator:
    def __init__(self, a, b):
        self.a = a
        self.b = b
    
    def add(self):
        return self.a + self.b
    
    def subtract(self):
        return self.a - self.b
    
    def multiply(self):
        return self.a * self.b
    
    def divide(self):
        if self.b != 0:
            return self.a / self.b
        else:
            return 'Division by zero is undefined'

calc = Calculator(10, 5)
print('Add:', calc.add())
print('Subtract:', calc.subtract())
print('Multiply:', calc.multiply())
print('Divide:', calc.divide())","class self:
    def __init__(self, a, b):
        self.a = a
        self.b = b
    
    def add(self):
        return self.a + self.b
    
    def subtract(self):
        return self.a - self.b
    
    def multiply(self):
        return self.a * self.b
    
    def divide(self):
        if self.b != 0:
            return self.a / self.b
        else:
            return 'Division by zero is undefined'

calc = self(10, 5)
print('Add:', calc.add())
print('Subtract:', calc.subtract())
print('Multiply:', calc.multiply())
print('Divide:', calc.divide())",correct,correct,错误,True,"Calculator,divide,add,b,self,subtract,calc,print,multiply,a,__init__",Calculator->self
"class FaultyCalculator:
    def __init__(self, a, b):
        self.a = a
        self.b = b
    
    def add(self):
        return self.a ++ self.b  # 语法错误
    
    def subtract(self):
        return self.a - self.b
    
    def multiply(self):
        return self.a * self.b
    
    def divide(self):
        return self.a / self.b  # 未处理除数为零的情况

calc = FaultyCalculator(10, 0)
print('Add:', calc.add())
print('Subtract:', calc.subtract())
print('Multiply:', calc.multiply())
print('Divide:', calc.divide())","class FaultyCalculator:
    def __init__(self, a, b):
        self.a = a
        self.b = b
    
    def add(self):
        return self.a ++ self.b  # 语法错误
    
    def subtract(self):
        return self.a - self.b
    
    def multiply(self):
        return self.a * self.b
    
    def merge(self):
        return self.a / self.b  # 未处理除数为零的情况

calc = FaultyCalculator(10, 0)
print('Add:', calc.add())
print('Subtract:', calc.subtract())
print('Multiply:', calc.multiply())
print('Divide:', calc.merge())",incorrect,incorrect,incorrect,True,"divide,FaultyCalculator,add,b,self,subtract,calc,print,multiply,a,__init__",divide->merge
"def process_data(data):
    cleaned_data = [x.strip().lower() for x in data if isinstance(x, str)]
    filtered_data = [x for x in cleaned_data if len(x) > 3]
    return filtered_data

raw_data = ['  Hello ', 'world', '   ', 'Python', 'AI', 'OpenAI']
processed = process_data(raw_data)
print('Processed Data:', processed)","def process_data(data):
    cleaned_data = [str.strip().lower() for str in data if isinstance(str, str)]
    filtered_data = [str for str in cleaned_data if len(str) > 3]
    return filtered_data

raw_data = ['  Hello ', 'world', '   ', 'Python', 'AI', 'OpenAI']
processed = process_data(raw_data)
print('Processed Data:', processed)",correct,correct,正确,True,"x,data,isinstance,raw_data,cleaned_data,len,str,processed,print,filtered_data,process_data",x->str
"def faulty_process_data(data):
    cleaned_data = [x.strip().lower() for x in data if isinstance(x, str)]
    filtered_data = [x for x in cleaned_data if len(x) > 3
    return filtered_data  # 缺少右括号

raw_data = ['  Hello ', 'world', '   ', 'Python', 'AI', 'OpenAI']
processed = faulty_process_data(raw_data)
print('Processed Data:', processed)",,incorrect,incorrect,,False,,
"import math

class Geometry:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return math.pi * (self.radius ** 2)
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = Geometry(5)
print('Area:', geo.area())
print('Circumference:', geo.circumference())","import math

class Geometry:
    def __init__(self, radius):
        self.radius = radius
    
    def radius(self):
        return math.pi * (self.radius ** 2)
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = Geometry(5)
print('Area:', geo.radius())
print('Circumference:', geo.circumference())",correct,correct,错误,True,"area,math,Geometry,geo,self,circumference,radius,print,__init__",area->radius
"import math

class FaultyGeometry:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return math.pi * self.radius ** 2  # 缺少括号
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = FaultyGeometry(5)
print('Area:', geo.area())
print('Circumference:', geo.circumference())",,incorrect,错误,,False,"area,FaultyGeometry,math,geo,self,circumference,radius,print,__init__",
"def read_file(file_path):
    with open(file_path, 'r') as file:
        content = file.read()
    return content

def write_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

input_path = 'input.txt'
output_path = 'output.txt'
data = read_file(input_path)
processed_data = data.upper()
write_file(output_path, processed_data)
print('File processing completed.')",,correct,正确。,,False,"input_path,open,write_file,data,content,file_path,output_path,read_file,processed_data,print,file",
"def read_file(file_path):
    with open(file_path, 'r') as file:
        content = file.read()
    return content

def write_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

input_path = 'input.txt'
output_path = 'output.txt'
data = read_file(input_path)
processed_data = data.upper()
write_file(output_path, processed_data)
print('File processing completed.')
write_file = 'output.txt'  # 错误：覆盖了函数write_file",,incorrect,错误,,False,"input_path,open,write_file,data,content,file_path,output_path,read_file,processed_data,print,file",
"def calculate_statistics(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = calculate_statistics(nums)
print('Statistics:', stats)","def calculate_statistics(numbers):
    total = len(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = calculate_statistics(nums)
print('Statistics:', stats)",correct,correct,正确,True,"sum,total,nums,calculate_statistics,numbers,len,count,stats,print,average",sum->len
"def faulty_calculate_statistics(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total / count if count != 0 else None
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = faulty_calculate_statistics(nums)
print('Statistics:', stats)",,incorrect,正确,,False,"faulty_calculate_statistics,sum,total,nums,numbers,len,stats,count,print,average",
"def find_primes(n):
    primes = []
    for num in range(2, n + 1):
        is_prime = True
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes

print('Primes up to 20:', find_primes(20))",,correct,错误,,False,"is_prime,math,int,find_primes,i,primes,print,range,num,n",
"def faulty_find_primes(n):
    primes = []
    for num in range(2, n + 1):
        is_prime = True
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i = 0:  # 赋值错误，应为 ==
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes

print('Primes up to 20:', faulty_find_primes(20))",,incorrect,incorrect,,False,,
"def generate_fibonacci(n):
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_val = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_val)
    return fib_sequence[:n]

print('Fibonacci sequence:', generate_fibonacci(10))",,correct,正确,,False,"generate_fibonacci,len,fib_sequence,print,next_val,n",
"def faulty_generate_fibonacci(n):
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_val = fib_sequence[-1] * fib_sequence[-2]  # 应为 +
        fib_sequence.append(next_val)
    return fib_sequence[:n]

print('Fibonacci sequence:', faulty_generate_fibonacci(10))",,incorrect,错误,,False,"faulty_generate_fibonacci,len,fib_sequence,print,next_val,n",
"def merge_dictionaries(dict1, dict2):
    merged = dict1.copy()
    merged.update(dict2)
    return merged

d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
merged_dict = merge_dictionaries(d1, d2)
print('Merged Dictionary:', merged_dict)","def delete(dict1, dict2):
    merged = dict1.copy()
    merged.update(dict2)
    return merged

d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
merged_dict = delete(d1, d2)
print('Merged Dictionary:', merged_dict)",correct,correct,正确,True,"merge_dictionaries,dict2,dict1,merged,d2,d1,merged_dict,print",merge_dictionaries->delete
"def faulty_merge_dictionaries(dict1, dict2):
    merged = dict1 + dict2  # 字典不支持加法
    return merged

d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
merged_dict = faulty_merge_dictionaries(d1, d2)
print('Merged Dictionary:', merged_dict)","def faulty_merge_dictionaries(dict1, dict):
    merged = dict1 + dict  # 字典不支持加法
    return merged

d1 = {'a': 1, 'b': 2}
d2 = {'b': 3, 'c': 4}
merged_dict = faulty_merge_dictionaries(d1, d2)
print('Merged Dictionary:', merged_dict)",incorrect,incorrect,incorrect,True,"dict2,dict1,merged,d2,d1,merged_dict,faulty_merge_dictionaries,print",dict2->dict
"def sort_numbers(numbers):
    sorted_numbers = sorted(numbers)
    return sorted_numbers

nums = [5, 3, 8, 1, 2]
sorted_nums = sort_numbers(nums)
print('Sorted Numbers:', sorted_nums)","def sort_numbers(numbers):
    sorted = sorted(numbers)
    return sorted

nums = [5, 3, 8, 1, 2]
sorted_nums = sort_numbers(nums)
print('Sorted Numbers:', sorted_nums)",correct,correct,错误,True,"sorted_numbers,nums,sorted_nums,numbers,sorted,print,sort_numbers",sorted_numbers->sorted
"def faulty_sort_numbers(numbers):
    sorted_numbers = sorted(numbers, reverse=True
    return sorted_numbers

nums = [5, 3, 8, 1, 2]
sorted_nums = faulty_sort_numbers(nums)
print('Sorted Numbers:', sorted_nums)",,incorrect,incorrect,,False,,
"def calculate_factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * calculate_factorial(n - 1)

print('Factorial of 5:', calculate_factorial(5))",,correct,正确,,False,"print,calculate_factorial,n",
"def faulty_calculate_factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * calculate_factorial(n - 2)  # 应为 n - 1

print('Factorial of 5:', faulty_calculate_factorial(5))",,incorrect,错误,,False,"faulty_calculate_factorial,print,calculate_factorial,n",
"def find_maximum(lst):
    max_val = lst[0]
    for num in lst:
        if num > max_val:
            max_val = num
    return max_val

numbers = [3, 7, 2, 9, 4]
print('Maximum:', find_maximum(numbers))",,correct,代码是正确的，标签是correct。,,False,"max_val,lst,find_maximum,numbers,print,num",
"def faulty_find_maximum(lst):
    max_val = lst[0]
    for num in lst:
        if num < max_val:  # 应为 num > max_val
            max_val = num
    return max_val

numbers = [3, 7, 2, 9, 4]
print('Maximum:', faulty_find_maximum(numbers))",,incorrect,错误,,False,"max_val,lst,numbers,print,faulty_find_maximum,num",
"def capitalize_sentence(sentence):
    return sentence.capitalize()

text = 'hello world'
capitalized_text = capitalize_sentence(text)
print('Capitalized Sentence:', capitalized_text)",,correct,正确,,False,"capitalized_text,sentence,capitalize_sentence,print,text",
"def faulty_capitalize_sentence(sentence):
    return sentence.capital()  # 错误的方法名

text = 'hello world'
capitalized_text = faulty_capitalize_sentence(text)
print('Capitalized Sentence:', capitalized_text)","def print(sentence):
    return sentence.capital()  # 错误的方法名

text = 'hello world'
capitalized_text = print(text)
print('Capitalized Sentence:', capitalized_text)",incorrect,incorrect,错误,True,"faulty_capitalize_sentence,capitalized_text,sentence,print,text",faulty_capitalize_sentence->print
"def count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    return count

word = 'OpenAI'
print('Number of vowels:', count_vowels(word))",,correct,正确。,,False,"char,word,count,count_vowels,print,s,vowels",
"def faulty_count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char not in vowels:  # 错误的条件
            count += 1
    return count

word = 'OpenAI'
print('Number of vowels:', faulty_count_vowels(word))","def faulty_count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for s in s:
        if s not in vowels:  # 错误的条件
            count += 1
    return count

word = 'OpenAI'
print('Number of vowels:', faulty_count_vowels(word))",incorrect,incorrect,incorrect,True,"char,faulty_count_vowels,word,count,print,s,vowels",char->s
"def is_palindrome(s):
    s = s.lower().replace(' ', '')
    return s == s[::-1]

print('Racecar is palindrome:', is_palindrome('Racecar'))
print('Hello is palindrome:', is_palindrome('Hello'))","def print(s):
    s = s.lower().replace(' ', '')
    return s == s[::-1]

print('Racecar is palindrome:', print('Racecar'))
print('Hello is palindrome:', print('Hello'))",correct,correct,正确,True,"is_palindrome,print,s",is_palindrome->print
"def faulty_is_palindrome(s):
    s = s.lower().replace(' ', '')
    return s = s[::-1]  # 应为 ==

print('Racecar is palindrome:', faulty_is_palindrome('Racecar'))
print('Hello is palindrome:', faulty_is_palindrome('Hello'))",,incorrect,incorrect,,False,,
"def extract_unique_elements(lst):
    unique_elements = list(set(lst))
    return unique_elements

items = [1, 2, 2, 3, 4, 4, 5]
print('Unique Elements:', extract_unique_elements(items))","def extract_unique_elements(list):
    unique_elements = list(set(list))
    return unique_elements

items = [1, 2, 2, 3, 4, 4, 5]
print('Unique Elements:', extract_unique_elements(items))",correct,correct,错误,True,"lst,list,extract_unique_elements,unique_elements,set,print,items",lst->list
"def faulty_extract_unique_elements(lst):
    unique_elements = set(lst)  # 返回的是集合而不是列表
    return unique_elements

items = [1, 2, 2, 3, 4, 4, 5]
print('Unique Elements:', faulty_extract_unique_elements(items))",,incorrect,错误,,False,"lst,faulty_extract_unique_elements,unique_elements,set,print,items",
"def to_uppercase(s):
    return s.upper()

text = 'hello world'
uppercase_text = to_uppercase(text)
print('Uppercase:', uppercase_text)","def to_uppercase(s):
    return s.upper()

text = 'hello world'
words = to_uppercase(text)
print('Uppercase:', words)",correct,correct,正确。,True,"uppercase_text,to_uppercase,print,text,s",uppercase_text->words
"def faulty_to_uppercase(s):
    return s.uppr()  # 错误的方法名

text = 'hello world'
uppercase_text = faulty_to_uppercase(text)
print('Uppercase:', uppercase_text)","def faulty_to_uppercase(s):
    return s.uppr()  # 错误的方法名

text = 'hello world'
text = faulty_to_uppercase(text)
print('Uppercase:', text)",incorrect,incorrect,incorrect,True,"faulty_to_uppercase,uppercase_text,print,text,s",uppercase_text->text
"def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return average

nums = [10, 20, 30, 40]
avg = calculate_average(nums)
print('Average:', avg)","def calculate_average(numbers):
    total = len(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return average

nums = [10, 20, 30, 40]
avg = calculate_average(nums)
print('Average:', avg)",correct,correct,正确,True,"sum,total,nums,calculate_average,numbers,len,count,print,avg,average",sum->len
"def faulty_calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total // count if count != 0 else 0  # 使用整除导致结果不准确
    return average

nums = [10, 20, 30, 40]
avg = faulty_calculate_average(nums)
print('Average:', avg)",,incorrect,错误,,False,"sum,total,nums,numbers,len,count,faulty_calculate_average,print,avg,average",
"def flatten_nested_list(nested_list):
    flat_list = [item for sublist in nested_list for item in sublist]
    return flat_list

nested = [[1, 2], [3, 4], [5]]
flattened = flatten_nested_list(nested)
print('Flattened List:', flattened)",,correct,正确。,,False,"flatten_nested_list,item,flattened,nested_list,sublist,flat_list,print,nested",
"def faulty_flatten_nested_list(nested_list):
    flat_list = [item for sublist in nested_list for item in sublist]  # 无错误
    return flat_list

nested = [[1, 2], [3, 4], [5]]
flattened = faulty_flatten_nested_list(nested)
print('Flattened List:', flattened)",,correct,正确,,False,"item,faulty_flatten_nested_list,flattened,nested_list,sublist,flat_list,print,nested",
"def get_max_min(lst):
    maximum = max(lst)
    minimum = min(lst)
    return maximum, minimum

numbers = [3, 1, 4, 1, 5, 9]
max_val, min_val = get_max_min(numbers)
print('Maximum:', max_val)
print('Minimum:', min_val)","def max(lst):
    maximum = max(lst)
    minimum = min(lst)
    return maximum, minimum

numbers = [3, 1, 4, 1, 5, 9]
max_val, min_val = max(numbers)
print('Maximum:', max_val)
print('Minimum:', min_val)",correct,correct,错误,True,"get_max_min,max_val,min,lst,max,minimum,numbers,maximum,min_val,print",get_max_min->max
"def faulty_get_max_min(lst):
    maximum = max(lst)
    minimum = min(lst)
    return maximum, minimum

numbers = []
max_val, min_val = faulty_get_max_min(numbers)
print('Maximum:', max_val)
print('Minimum:', min_val)  # 空列表导致错误","def faulty_get_max_min(lst):
    maximum = max(lst)
    minimum = min(lst)
    return maximum, minimum

numbers = []
string, min_val = faulty_get_max_min(numbers)
print('Maximum:', string)
print('Minimum:', min_val)  # 空列表导致错误",incorrect,incorrect,错误,True,"max_val,min,lst,max,faulty_get_max_min,minimum,numbers,maximum,min_val,print",max_val->string
"def calculate_sum(*args):
    return sum(args)

print('Sum of numbers:', calculate_sum(1, 2, 3, 4))",,correct,代码是正确的，输出为correct。,,False,"sum,print,args,calculate_sum",
"def faulty_calculate_sum(*args):
    return sum(args  # 缺少右括号

print('Sum of numbers:', faulty_calculate_sum(1, 2, 3, 4))",,incorrect,incorrect,,False,,
"def read_file_contents(file_path):
    with open(file_path, 'r') as file:
        contents = file.read()
    return contents

def write_file_contents(file_path, contents):
    with open(file_path, 'w') as file:
        file.write(contents)

input_file = 'input.txt'
output_file = 'output.txt'
data = read_file_contents(input_file)
processed_data = data.upper()
write_file_contents(output_file, processed_data)
print('File processing completed.')",,correct,正确。,,False,"open,data,file_path,processed_data,input_file,output_file,contents,write_file_contents,read_file_contents,print,file",
"def read_file_contents(file_path):
    with open(file_path, 'r') as file:
        contents = file.read()
    return contents

def write_file_contents(file_path, contents):
    with open(file_path, 'w') as file:
        file.write(contents)

input_file = 'input.txt'
output_file = 'output.txt'
data = read_file_contents(input_file)
processed_data = data.upper()
write_file_contents(output_file, processed_data)
print('File processing completed.')
write_file_contents = 'output.txt'  # 错误：覆盖了函数",,incorrect,错误,,False,"open,data,file_path,processed_data,input_file,output_file,contents,write_file_contents,read_file_contents,print,file",
"def calculate_statistics(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = calculate_statistics(nums)
print('Statistics:', stats)","def calculate_statistics(numbers):
    total = len(numbers)
    count = len(numbers)
    average = total / count if count != 0 else 0
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = calculate_statistics(nums)
print('Statistics:', stats)",correct,correct,correct,True,"sum,total,nums,calculate_statistics,numbers,len,count,stats,print,average",sum->len
"def faulty_calculate_statistics(numbers):
    total = sum(numbers)
    count = len(numbers)
    average = total / count if count != 0 else None
    return {'total': total, 'count': count, 'average': average}

nums = [10, 20, 30, 40, 50]
stats = faulty_calculate_statistics(nums)
print('Statistics:', stats)",,incorrect,正确。,,False,"faulty_calculate_statistics,sum,total,nums,numbers,len,stats,count,print,average",
"import math

class Geometry:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return math.pi * (self.radius ** 2)
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = Geometry(5)
print('Area:', geo.area())
print('Circumference:', geo.circumference())","import math

class Geometry:
    def __init__(self, radius):
        self.radius = radius
    
    def radius(self):
        return math.pi * (self.radius ** 2)
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = Geometry(5)
print('Area:', geo.radius())
print('Circumference:', geo.circumference())",correct,correct,错误,True,"area,math,Geometry,geo,self,circumference,radius,print,__init__",area->radius
"import math

class FaultyGeometry:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return math.pi * self.radius ** 2  # 缺少括号
    
    def circumference(self):
        return 2 * math.pi * self.radius

geo = FaultyGeometry(5)
print('Area:', geo.area())
print('Circumference:', geo.circumference())",,incorrect,错误,,False,"area,FaultyGeometry,math,geo,self,circumference,radius,print,__init__",
"def reverse_string(s):
    return s[::-1]

original = 'hello'
reversed_s = reverse_string(original)
print('Reversed string:', reversed_s)","def reverse_string(s):
    return s[::-1]

greeting = 'hello'
reversed_s = reverse_string(greeting)
print('Reversed string:', reversed_s)",correct,correct,correct,True,"original,reverse_string,print,s,reversed_s",original->greeting
"def faulty_reverse_string(s):
    return s[::1]  # 应该是 s[::-1]

original = 'hello'
reversed_s = faulty_reverse_string(original)
print('Reversed string:', reversed_s)",,incorrect,错误,,False,"original,print,s,reversed_s,faulty_reverse_string",
"def capitalize_words(sentence):
    return ' '.join(word.capitalize() for word in sentence.split())

text = 'this is a test'
print('Capitalized:', capitalize_words(text))","def capitalize_words(word):
    return ' '.join(word.capitalize() for word in word.split())

text = 'this is a test'
print('Capitalized:', capitalize_words(text))",correct,correct,正确,True,"sentence,word,capitalize_words,print,text",sentence->word
"def faulty_capitalize_words(sentence):
    return ' '.join(word.capitalize for word in sentence.split())  # 缺少()调用

text = 'this is a test'
print('Capitalized:', faulty_capitalize_words(text))",,incorrect,错误,,False,"sentence,faulty_capitalize_words,word,print,text",
"def count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    return count

word = 'Hello World'
print('Number of vowels:', count_vowels(word))",,correct,正确,,False,"char,word,count,count_vowels,print,s,vowels",
"def faulty_count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char not in vowels:  # 错误的条件
            count += 1
    return count

word = 'Hello World'
print('Number of vowels:', faulty_count_vowels(word))",,incorrect,错误,,False,"char,faulty_count_vowels,word,count,print,s,vowels",
"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

print('Is 17 prime?', is_prime(17))
print('Is 18 prime?', is_prime(18))",,correct,错误,,False,"is_prime,math,int,i,print,range,n",
"def faulty_is_prime(n):
    if n < 0:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

print('Is 17 prime?', faulty_is_prime(17))
print('Is 18 prime?', faulty_is_prime(18))",,incorrect,错误,,False,"i,print,faulty_is_prime,range,n",
"def convert_list_to_set(lst):
    return set(lst)

my_list = [1, 2, 3, 2, 4]
print('Set:', convert_list_to_set(my_list))",,correct,正确,,False,"my_list,lst,convert_list_to_set,print,set",
"def faulty_convert_list_to_set(lst):
    return list(set(lst))

my_list = [1, 2, 3, 2, 4]
print('Set:', faulty_convert_list_to_set(my_list))  # 多此一举但不错误",,correct,incorrect,,False,"my_list,lst,list,faulty_convert_list_to_set,set,print",
"def get_average_length(strings):
    total_length = sum(len(s) for s in strings)
    return total_length / len(strings)

words = ['hello', 'world', 'python']
print('Average Length:', get_average_length(words))","def get_average_length(strings):
    total_length = len(len(s) for s in strings)
    return total_length / len(strings)

words = ['hello', 'world', 'python']
print('Average Length:', get_average_length(words))",correct,correct,错误,True,"sum,words,get_average_length,len,total_length,strings,print,s",sum->len
"def faulty_get_average_length(strings):
    total_length = sum(len(s) for s in strings)
    return total_length / len(strings) - 1  # 错误的计算

words = ['hello', 'world', 'python']
print('Average Length:', faulty_get_average_length(words))",,incorrect,错误,,False,"sum,words,len,total_length,strings,print,s,faulty_get_average_length",
"def create_dictionary(keys, values):
    return dict(zip(keys, values))

keys = ['a', 'b', 'c']
values = [1, 2, 3]
print('Dictionary:', create_dictionary(keys, values))",,correct,正确,,False,"keys,create_dictionary,values,zip,dict,print",
"def faulty_create_dictionary(keys, values):
    return dict(keys, values)  # 错误的使用

keys = ['a', 'b', 'c']
values = [1, 2, 3]
print('Dictionary:', faulty_create_dictionary(keys, values))",,incorrect,错误,,False,"keys,values,faulty_create_dictionary,dict,print",
"def remove_duplicates(lst):
    return list(set(lst))

data = [1, 2, 2, 3, 4, 4, 5]
print('Unique Elements:', remove_duplicates(data))",,correct,正确,,False,"remove_duplicates,data,lst,list,set,print",
"def faulty_remove_duplicates(lst):
    return list(lst)  # 没有去重

data = [1, 2, 2, 3, 4, 4, 5]
print('Unique Elements:', faulty_remove_duplicates(data))",,incorrect,错误,,False,"data,lst,list,faulty_remove_duplicates,print",
"def get_even_numbers(lst):
    return [num for num in lst if num % 2 == 0]

numbers = [1, 2, 3, 4, 5, 6]
print('Even Numbers:', get_even_numbers(numbers))","def get_even_numbers(num):
    return [num for num in num if num % 2 == 0]

numbers = [1, 2, 3, 4, 5, 6]
print('Even Numbers:', get_even_numbers(numbers))",correct,correct,错误,True,"lst,numbers,print,num,get_even_numbers",lst->num
"def faulty_get_even_numbers(lst):
    return [num for num in lst if num % 2 = 0]  # 赋值错误

numbers = [1, 2, 3, 4, 5, 6]
print('Even Numbers:', faulty_get_even_numbers(numbers))",,incorrect,incorrect,,False,,
"def find_index(lst, target):
    for index, value in enumerate(lst):
        if value == target:
            return index
    return -1

print('Index of 30:', find_index([10, 20, 30, 40], 30))
print('Index of 50:', find_index([10, 20, 30, 40], 50))","def find_index(lst, index):
    for index, value in enumerate(lst):
        if value == index:
            return index
    return -1

print('Index of 30:', find_index([10, 20, 30, 40], 30))
print('Index of 50:', find_index([10, 20, 30, 40], 50))",correct,correct,错误,True,"target,index,find_index,lst,value,enumerate,print",target->index
"def faulty_find_index(lst, target):
    for index, value in enumerate(lst):
        if value == target:
            return idx  # 变量名错误
    return -1

print('Index of 30:', faulty_find_index([10, 20, 30, 40], 30))
print('Index of 50:', faulty_find_index([10, 20, 30, 40], 50))",,incorrect,错误,,False,"target,index,faulty_find_index,lst,value,enumerate,idx,print",
"def square_numbers(lst):
    return [x ** 2 for x in lst]

nums = [1, 2, 3, 4]
print('Squared Numbers:', square_numbers(nums))","def sum(lst):
    return [x ** 2 for x in lst]

nums = [1, 2, 3, 4]
print('Squared Numbers:', sum(nums))",correct,correct,正确,True,"x,square_numbers,lst,nums,print",square_numbers->sum
"def faulty_square_numbers(lst):
    return [x ^ 2 for x in lst]  # 使用^而不是**

nums = [1, 2, 3, 4]
print('Squared Numbers:', faulty_square_numbers(nums))",,incorrect,错误,,False,"x,lst,nums,faulty_square_numbers,print",
"def reverse_list(lst):
    lst.reverse()
    return lst

my_list = [1, 2, 3, 4]
print('Reversed List:', reverse_list(my_list))",,correct,正确,,False,"lst,print,reverse_list,my_list",
"def faulty_reverse_list(lst):
    return lst.reverse  # 缺少()调用

my_list = [1, 2, 3, 4]
print('Reversed List:', faulty_reverse_list(my_list))",,incorrect,错误,,False,"lst,faulty_reverse_list,print,my_list",
"def count_words(s):
    words = s.split()
    return len(words)

sentence = 'This is a test sentence.'
print('Word Count:', count_words(sentence))","def count_words(s):
    words = s.split()
    return len(words)

words = 'This is a test words.'
print('Word Count:', count_words(words))",correct,correct,正确,True,"sentence,words,len,count_words,print,s",sentence->words
"def faulty_count_words(s):
    words = s.split()
    return word_count  # 未定义变量

sentence = 'This is a test sentence.'
print('Word Count:', faulty_count_words(sentence))",,incorrect,错误,,False,"sentence,words,faulty_count_words,print,word_count,s",
"def filter_positive_numbers(lst):
    return [num for num in lst if num > 0]

numbers = [-1, 2, -3, 4, 0]
print('Positive Numbers:', filter_positive_numbers(numbers))","def num(lst):
    return [num for num in lst if num > 0]

numbers = [-1, 2, -3, 4, 0]
print('Positive Numbers:', num(numbers))",correct,correct,错误,True,"filter_positive_numbers,lst,numbers,print,num",filter_positive_numbers->num
"def faulty_filter_positive_numbers(lst):
    return [num for num in lst if num >= 0]  # 包含0可能不符合需求

numbers = [-1, 2, -3, 4, 0]
print('Positive Numbers:', faulty_filter_positive_numbers(numbers))",,incorrect,错误,,False,"lst,faulty_filter_positive_numbers,numbers,print,num",
"def calculate_power(base, exponent):
    return base ** exponent

print('2^3:', calculate_power(2, 3))",,correct,正确,,False,"calculate_power,print,base,exponent",
"def faulty_calculate_power(base, exponent):
    return base * exponent  # 错误的运算符

print('2^3:', faulty_calculate_power(2, 3))","def faulty_calculate_power(base, base):
    return base * base  # 错误的运算符

print('2^3:', faulty_calculate_power(2, 3))",incorrect,incorrect,错误,True,"exponent,print,base,faulty_calculate_power",exponent->base
"def greet_user(username):
    print(f'Hello, {username}!')

greet_user('Bob')","def greet_user(username):
    if(f'Hello, {username}!')

greet_user('Bob')",correct,correct,错误,True,"print,greet_user,username",print->if
"def faulty_greet_user(username):
    print(f'Hello, {username}!')
    return  # 缺少必要的返回值

greet_user('Bob')",,incorrect,错误,,False,"print,username,greet_user,faulty_greet_user",
"def calculate_discount(price, discount):
    return price - (price * discount)

print('Discounted Price:', calculate_discount(100, 0.2))",,correct,正确,,False,"discount,price,print,calculate_discount",
"def faulty_calculate_discount(price, discount):
    return price - price * discount  # 缺少括号可能导致优先级问题

print('Discounted Price:', faulty_calculate_discount(100, 0.2))",,incorrect,错误,,False,"discount,price,print,faulty_calculate_discount",
"def get_first_element(lst):
    if lst:
        return lst[0]
    else:
        return None

print('First Element:', get_first_element([10, 20, 30]))
print('First Element:', get_first_element([]))","def get_first_element(int):
    if int:
        return int[0]
    else:
        return None

print('First Element:', get_first_element([10, 20, 30]))
print('First Element:', get_first_element([]))",correct,correct,错误,True,"lst,print,get_first_element",lst->int
"def faulty_get_first_element(lst):
    if lst:
        return lst[1]  # 应该是 lst[0]
    else:
        return None

print('First Element:', faulty_get_first_element([10, 20, 30]))
print('First Element:', faulty_get_first_element([]))",,incorrect,错误,,False,"faulty_get_first_element,print,lst",
"def to_lowercase(s):
    return s.lower()

text = 'HELLO WORLD'
lowercase_text = to_lowercase(text)
print('Lowercase:', lowercase_text)",,correct,正确,,False,"lowercase_text,to_lowercase,print,text,s",
"def faulty_to_lowercase(s):
    return s.lower  # 缺少()调用

text = 'HELLO WORLD'
lowercase_text = faulty_to_lowercase(text)
print('Lowercase:', lowercase_text)",,incorrect,错误,,False,"lowercase_text,faulty_to_lowercase,print,text,s",
