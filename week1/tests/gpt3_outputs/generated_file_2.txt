下面是一个用C++编写的动态规划函数示例：

```cpp
#include <iostream>
#include <vector>

int dynamicProgramming(int target, std::vector<int>& nums) {
    std::vector<int> dp(target + 1, 0);
    dp[0] = 1;

    for(int i = 1; i <= target; i++) {
        for(int j = 0; j < nums.size(); j++) {
            if(i >= nums[j]) {
                dp[i] += dp[i - nums[j]];
            }
        }
    }

    return dp[target];
}

int main() {
    std::vector<int> nums = {1, 2, 3};
    int target = 4;

    int result = dynamicProgramming(target, nums);
    std::cout << "Number of ways to reach target: " << result << std::endl;

    return 0;
}
```

上面示例中的`dynamicProgramming`函数接受一个整数目标值和一个整数数组作为输入，并返回达到目标值的方式数量。该函数使用动态规划技术来计算达到目标值的方式数量，并且在主函数中演示了如何调用这个函数。