{"code": "class Calculator:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    \n    def add(self):\n        return self.a + self.b\n    \n    def subtract(self):\n        return self.a - self.b\n    \n    def multiply(self):\n        return self.a * self.b\n    \n    def divide(self):\n        if self.b != 0:\n            return self.a / self.b\n        else:\n            return 'Division by zero is undefined'\n\ncalc = Calculator(10, 5)\nprint('Add:', calc.add())\nprint('Subtract:', calc.subtract())\nprint('Multiply:', calc.multiply())\nprint('Divide:', calc.divide())", "label": "correct"}
{"code": "class FaultyCalculator:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    \n    def add(self):\n        return self.a ++ self.b  # 语法错误\n    \n    def subtract(self):\n        return self.a - self.b\n    \n    def multiply(self):\n        return self.a * self.b\n    \n    def divide(self):\n        return self.a / self.b  # 未处理除数为零的情况\n\ncalc = FaultyCalculator(10, 0)\nprint('Add:', calc.add())\nprint('Subtract:', calc.subtract())\nprint('Multiply:', calc.multiply())\nprint('Divide:', calc.divide())", "label": "incorrect"}
{"code": "def process_data(data):\n    cleaned_data = [x.strip().lower() for x in data if isinstance(x, str)]\n    filtered_data = [x for x in cleaned_data if len(x) > 3]\n    return filtered_data\n\nraw_data = ['  Hello ', 'world', '   ', 'Python', 'AI', 'OpenAI']\nprocessed = process_data(raw_data)\nprint('Processed Data:', processed)", "label": "correct"}
{"code": "def faulty_process_data(data):\n    cleaned_data = [x.strip().lower() for x in data if isinstance(x, str)]\n    filtered_data = [x for x in cleaned_data if len(x) > 3\n    return filtered_data  # 缺少右括号\n\nraw_data = ['  Hello ', 'world', '   ', 'Python', 'AI', 'OpenAI']\nprocessed = faulty_process_data(raw_data)\nprint('Processed Data:', processed)", "label": "incorrect"}
{"code": "import math\n\nclass Geometry:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * (self.radius ** 2)\n    \n    def circumference(self):\n        return 2 * math.pi * self.radius\n\ngeo = Geometry(5)\nprint('Area:', geo.area())\nprint('Circumference:', geo.circumference())", "label": "correct"}
{"code": "import math\n\nclass FaultyGeometry:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * self.radius ** 2  # 缺少括号\n    \n    def circumference(self):\n        return 2 * math.pi * self.radius\n\ngeo = FaultyGeometry(5)\nprint('Area:', geo.area())\nprint('Circumference:', geo.circumference())", "label": "incorrect"}
{"code": "def read_file(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    return content\n\ndef write_file(file_path, content):\n    with open(file_path, 'w') as file:\n        file.write(content)\n\ninput_path = 'input.txt'\noutput_path = 'output.txt'\ndata = read_file(input_path)\nprocessed_data = data.upper()\nwrite_file(output_path, processed_data)\nprint('File processing completed.')", "label": "correct"}
{"code": "def read_file(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    return content\n\ndef write_file(file_path, content):\n    with open(file_path, 'w') as file:\n        file.write(content)\n\ninput_path = 'input.txt'\noutput_path = 'output.txt'\ndata = read_file(input_path)\nprocessed_data = data.upper()\nwrite_file(output_path, processed_data)\nprint('File processing completed.')\nwrite_file = 'output.txt'  # 错误：覆盖了函数write_file", "label": "incorrect"}
{"code": "def calculate_statistics(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count if count != 0 else 0\n    return {'total': total, 'count': count, 'average': average}\n\nnums = [10, 20, 30, 40, 50]\nstats = calculate_statistics(nums)\nprint('Statistics:', stats)", "label": "correct"}
{"code": "def faulty_calculate_statistics(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count if count != 0 else None\n    return {'total': total, 'count': count, 'average': average}\n\nnums = [10, 20, 30, 40, 50]\nstats = faulty_calculate_statistics(nums)\nprint('Statistics:', stats)", "label": "incorrect"}
{"code": "def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\nprint('Primes up to 20:', find_primes(20))", "label": "correct"}
{"code": "def faulty_find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i = 0:  # 赋值错误，应为 ==\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\nprint('Primes up to 20:', faulty_find_primes(20))", "label": "incorrect"}
{"code": "def generate_fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        next_val = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_val)\n    return fib_sequence[:n]\n\nprint('Fibonacci sequence:', generate_fibonacci(10))", "label": "correct"}
{"code": "def faulty_generate_fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        next_val = fib_sequence[-1] * fib_sequence[-2]  # 应为 +\n        fib_sequence.append(next_val)\n    return fib_sequence[:n]\n\nprint('Fibonacci sequence:', faulty_generate_fibonacci(10))", "label": "incorrect"}
{"code": "def merge_dictionaries(dict1, dict2):\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nmerged_dict = merge_dictionaries(d1, d2)\nprint('Merged Dictionary:', merged_dict)", "label": "correct"}
{"code": "def faulty_merge_dictionaries(dict1, dict2):\n    merged = dict1 + dict2  # 字典不支持加法\n    return merged\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nmerged_dict = faulty_merge_dictionaries(d1, d2)\nprint('Merged Dictionary:', merged_dict)", "label": "incorrect"}
{"code": "def sort_numbers(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers\n\nnums = [5, 3, 8, 1, 2]\nsorted_nums = sort_numbers(nums)\nprint('Sorted Numbers:', sorted_nums)", "label": "correct"}
{"code": "def faulty_sort_numbers(numbers):\n    sorted_numbers = sorted(numbers, reverse=True\n    return sorted_numbers\n\nnums = [5, 3, 8, 1, 2]\nsorted_nums = faulty_sort_numbers(nums)\nprint('Sorted Numbers:', sorted_nums)", "label": "incorrect"}
{"code": "def calculate_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * calculate_factorial(n - 1)\n\nprint('Factorial of 5:', calculate_factorial(5))", "label": "correct"}
{"code": "def faulty_calculate_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * calculate_factorial(n - 2)  # 应为 n - 1\n\nprint('Factorial of 5:', faulty_calculate_factorial(5))", "label": "incorrect"}
{"code": "def find_maximum(lst):\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nnumbers = [3, 7, 2, 9, 4]\nprint('Maximum:', find_maximum(numbers))", "label": "correct"}
{"code": "def faulty_find_maximum(lst):\n    max_val = lst[0]\n    for num in lst:\n        if num < max_val:  # 应为 num > max_val\n            max_val = num\n    return max_val\n\nnumbers = [3, 7, 2, 9, 4]\nprint('Maximum:', faulty_find_maximum(numbers))", "label": "incorrect"}
{"code": "def capitalize_sentence(sentence):\n    return sentence.capitalize()\n\ntext = 'hello world'\ncapitalized_text = capitalize_sentence(text)\nprint('Capitalized Sentence:', capitalized_text)", "label": "correct"}
{"code": "def faulty_capitalize_sentence(sentence):\n    return sentence.capital()  # 错误的方法名\n\ntext = 'hello world'\ncapitalized_text = faulty_capitalize_sentence(text)\nprint('Capitalized Sentence:', capitalized_text)", "label": "incorrect"}
{"code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nword = 'OpenAI'\nprint('Number of vowels:', count_vowels(word))", "label": "correct"}
{"code": "def faulty_count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char not in vowels:  # 错误的条件\n            count += 1\n    return count\n\nword = 'OpenAI'\nprint('Number of vowels:', faulty_count_vowels(word))", "label": "incorrect"}
{"code": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n\nprint('Racecar is palindrome:', is_palindrome('Racecar'))\nprint('Hello is palindrome:', is_palindrome('Hello'))", "label": "correct"}
{"code": "def faulty_is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s = s[::-1]  # 应为 ==\n\nprint('Racecar is palindrome:', faulty_is_palindrome('Racecar'))\nprint('Hello is palindrome:', faulty_is_palindrome('Hello'))", "label": "incorrect"}
{"code": "def extract_unique_elements(lst):\n    unique_elements = list(set(lst))\n    return unique_elements\n\nitems = [1, 2, 2, 3, 4, 4, 5]\nprint('Unique Elements:', extract_unique_elements(items))", "label": "correct"}
{"code": "def faulty_extract_unique_elements(lst):\n    unique_elements = set(lst)  # 返回的是集合而不是列表\n    return unique_elements\n\nitems = [1, 2, 2, 3, 4, 4, 5]\nprint('Unique Elements:', faulty_extract_unique_elements(items))", "label": "incorrect"}
{"code": "def to_uppercase(s):\n    return s.upper()\n\ntext = 'hello world'\nuppercase_text = to_uppercase(text)\nprint('Uppercase:', uppercase_text)", "label": "correct"}
{"code": "def faulty_to_uppercase(s):\n    return s.uppr()  # 错误的方法名\n\ntext = 'hello world'\nuppercase_text = faulty_to_uppercase(text)\nprint('Uppercase:', uppercase_text)", "label": "incorrect"}
{"code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count if count != 0 else 0\n    return average\n\nnums = [10, 20, 30, 40]\navg = calculate_average(nums)\nprint('Average:', avg)", "label": "correct"}
{"code": "def faulty_calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total // count if count != 0 else 0  # 使用整除导致结果不准确\n    return average\n\nnums = [10, 20, 30, 40]\navg = faulty_calculate_average(nums)\nprint('Average:', avg)", "label": "incorrect"}
{"code": "def flatten_nested_list(nested_list):\n    flat_list = [item for sublist in nested_list for item in sublist]\n    return flat_list\n\nnested = [[1, 2], [3, 4], [5]]\nflattened = flatten_nested_list(nested)\nprint('Flattened List:', flattened)", "label": "correct"}
{"code": "def faulty_flatten_nested_list(nested_list):\n    flat_list = [item for sublist in nested_list for item in sublist]  # 无错误\n    return flat_list\n\nnested = [[1, 2], [3, 4], [5]]\nflattened = faulty_flatten_nested_list(nested)\nprint('Flattened List:', flattened)", "label": "correct"}
{"code": "def get_max_min(lst):\n    maximum = max(lst)\n    minimum = min(lst)\n    return maximum, minimum\n\nnumbers = [3, 1, 4, 1, 5, 9]\nmax_val, min_val = get_max_min(numbers)\nprint('Maximum:', max_val)\nprint('Minimum:', min_val)", "label": "correct"}
{"code": "def faulty_get_max_min(lst):\n    maximum = max(lst)\n    minimum = min(lst)\n    return maximum, minimum\n\nnumbers = []\nmax_val, min_val = faulty_get_max_min(numbers)\nprint('Maximum:', max_val)\nprint('Minimum:', min_val)  # 空列表导致错误", "label": "incorrect"}
{"code": "def calculate_sum(*args):\n    return sum(args)\n\nprint('Sum of numbers:', calculate_sum(1, 2, 3, 4))", "label": "correct"}
{"code": "def faulty_calculate_sum(*args):\n    return sum(args  # 缺少右括号\n\nprint('Sum of numbers:', faulty_calculate_sum(1, 2, 3, 4))", "label": "incorrect"}
{"code": "def read_file_contents(file_path):\n    with open(file_path, 'r') as file:\n        contents = file.read()\n    return contents\n\ndef write_file_contents(file_path, contents):\n    with open(file_path, 'w') as file:\n        file.write(contents)\n\ninput_file = 'input.txt'\noutput_file = 'output.txt'\ndata = read_file_contents(input_file)\nprocessed_data = data.upper()\nwrite_file_contents(output_file, processed_data)\nprint('File processing completed.')", "label": "correct"}
{"code": "def read_file_contents(file_path):\n    with open(file_path, 'r') as file:\n        contents = file.read()\n    return contents\n\ndef write_file_contents(file_path, contents):\n    with open(file_path, 'w') as file:\n        file.write(contents)\n\ninput_file = 'input.txt'\noutput_file = 'output.txt'\ndata = read_file_contents(input_file)\nprocessed_data = data.upper()\nwrite_file_contents(output_file, processed_data)\nprint('File processing completed.')\nwrite_file_contents = 'output.txt'  # 错误：覆盖了函数", "label": "incorrect"}
{"code": "def calculate_statistics(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count if count != 0 else 0\n    return {'total': total, 'count': count, 'average': average}\n\nnums = [10, 20, 30, 40, 50]\nstats = calculate_statistics(nums)\nprint('Statistics:', stats)", "label": "correct"}
{"code": "def faulty_calculate_statistics(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count if count != 0 else None\n    return {'total': total, 'count': count, 'average': average}\n\nnums = [10, 20, 30, 40, 50]\nstats = faulty_calculate_statistics(nums)\nprint('Statistics:', stats)", "label": "incorrect"}
{"code": "import math\n\nclass Geometry:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * (self.radius ** 2)\n    \n    def circumference(self):\n        return 2 * math.pi * self.radius\n\ngeo = Geometry(5)\nprint('Area:', geo.area())\nprint('Circumference:', geo.circumference())", "label": "correct"}
{"code": "import math\n\nclass FaultyGeometry:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * self.radius ** 2  # 缺少括号\n    \n    def circumference(self):\n        return 2 * math.pi * self.radius\n\ngeo = FaultyGeometry(5)\nprint('Area:', geo.area())\nprint('Circumference:', geo.circumference())", "label": "incorrect"}
{"code": "def reverse_string(s):\n    return s[::-1]\n\noriginal = 'hello'\nreversed_s = reverse_string(original)\nprint('Reversed string:', reversed_s)", "label": "correct"}
{"code": "def faulty_reverse_string(s):\n    return s[::1]  # 应该是 s[::-1]\n\noriginal = 'hello'\nreversed_s = faulty_reverse_string(original)\nprint('Reversed string:', reversed_s)", "label": "incorrect"}
{"code": "def capitalize_words(sentence):\n    return ' '.join(word.capitalize() for word in sentence.split())\n\ntext = 'this is a test'\nprint('Capitalized:', capitalize_words(text))", "label": "correct"}
{"code": "def faulty_capitalize_words(sentence):\n    return ' '.join(word.capitalize for word in sentence.split())  # 缺少()调用\n\ntext = 'this is a test'\nprint('Capitalized:', faulty_capitalize_words(text))", "label": "incorrect"}
{"code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nword = 'Hello World'\nprint('Number of vowels:', count_vowels(word))", "label": "correct"}
{"code": "def faulty_count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char not in vowels:  # 错误的条件\n            count += 1\n    return count\n\nword = 'Hello World'\nprint('Number of vowels:', faulty_count_vowels(word))", "label": "incorrect"}
{"code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint('Is 17 prime?', is_prime(17))\nprint('Is 18 prime?', is_prime(18))", "label": "correct"}
{"code": "def faulty_is_prime(n):\n    if n < 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint('Is 17 prime?', faulty_is_prime(17))\nprint('Is 18 prime?', faulty_is_prime(18))", "label": "incorrect"}
{"code": "def convert_list_to_set(lst):\n    return set(lst)\n\nmy_list = [1, 2, 3, 2, 4]\nprint('Set:', convert_list_to_set(my_list))", "label": "correct"}
{"code": "def faulty_convert_list_to_set(lst):\n    return list(set(lst))\n\nmy_list = [1, 2, 3, 2, 4]\nprint('Set:', faulty_convert_list_to_set(my_list))  # 多此一举但不错误", "label": "correct"}
{"code": "def get_average_length(strings):\n    total_length = sum(len(s) for s in strings)\n    return total_length / len(strings)\n\nwords = ['hello', 'world', 'python']\nprint('Average Length:', get_average_length(words))", "label": "correct"}
{"code": "def faulty_get_average_length(strings):\n    total_length = sum(len(s) for s in strings)\n    return total_length / len(strings) - 1  # 错误的计算\n\nwords = ['hello', 'world', 'python']\nprint('Average Length:', faulty_get_average_length(words))", "label": "incorrect"}
{"code": "def create_dictionary(keys, values):\n    return dict(zip(keys, values))\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nprint('Dictionary:', create_dictionary(keys, values))", "label": "correct"}
{"code": "def faulty_create_dictionary(keys, values):\n    return dict(keys, values)  # 错误的使用\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nprint('Dictionary:', faulty_create_dictionary(keys, values))", "label": "incorrect"}
{"code": "def remove_duplicates(lst):\n    return list(set(lst))\n\ndata = [1, 2, 2, 3, 4, 4, 5]\nprint('Unique Elements:', remove_duplicates(data))", "label": "correct"}
{"code": "def faulty_remove_duplicates(lst):\n    return list(lst)  # 没有去重\n\ndata = [1, 2, 2, 3, 4, 4, 5]\nprint('Unique Elements:', faulty_remove_duplicates(data))", "label": "incorrect"}
{"code": "def get_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint('Even Numbers:', get_even_numbers(numbers))", "label": "correct"}
{"code": "def faulty_get_even_numbers(lst):\n    return [num for num in lst if num % 2 = 0]  # 赋值错误\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint('Even Numbers:', faulty_get_even_numbers(numbers))", "label": "incorrect"}
{"code": "def find_index(lst, target):\n    for index, value in enumerate(lst):\n        if value == target:\n            return index\n    return -1\n\nprint('Index of 30:', find_index([10, 20, 30, 40], 30))\nprint('Index of 50:', find_index([10, 20, 30, 40], 50))", "label": "correct"}
{"code": "def faulty_find_index(lst, target):\n    for index, value in enumerate(lst):\n        if value == target:\n            return idx  # 变量名错误\n    return -1\n\nprint('Index of 30:', faulty_find_index([10, 20, 30, 40], 30))\nprint('Index of 50:', faulty_find_index([10, 20, 30, 40], 50))", "label": "incorrect"}
{"code": "def square_numbers(lst):\n    return [x ** 2 for x in lst]\n\nnums = [1, 2, 3, 4]\nprint('Squared Numbers:', square_numbers(nums))", "label": "correct"}
{"code": "def faulty_square_numbers(lst):\n    return [x ^ 2 for x in lst]  # 使用^而不是**\n\nnums = [1, 2, 3, 4]\nprint('Squared Numbers:', faulty_square_numbers(nums))", "label": "incorrect"}
{"code": "def reverse_list(lst):\n    lst.reverse()\n    return lst\n\nmy_list = [1, 2, 3, 4]\nprint('Reversed List:', reverse_list(my_list))", "label": "correct"}
{"code": "def faulty_reverse_list(lst):\n    return lst.reverse  # 缺少()调用\n\nmy_list = [1, 2, 3, 4]\nprint('Reversed List:', faulty_reverse_list(my_list))", "label": "incorrect"}
{"code": "def count_words(s):\n    words = s.split()\n    return len(words)\n\nsentence = 'This is a test sentence.'\nprint('Word Count:', count_words(sentence))", "label": "correct"}
{"code": "def faulty_count_words(s):\n    words = s.split()\n    return word_count  # 未定义变量\n\nsentence = 'This is a test sentence.'\nprint('Word Count:', faulty_count_words(sentence))", "label": "incorrect"}
{"code": "def filter_positive_numbers(lst):\n    return [num for num in lst if num > 0]\n\nnumbers = [-1, 2, -3, 4, 0]\nprint('Positive Numbers:', filter_positive_numbers(numbers))", "label": "correct"}
{"code": "def faulty_filter_positive_numbers(lst):\n    return [num for num in lst if num >= 0]  # 包含0可能不符合需求\n\nnumbers = [-1, 2, -3, 4, 0]\nprint('Positive Numbers:', faulty_filter_positive_numbers(numbers))", "label": "incorrect"}
{"code": "def calculate_power(base, exponent):\n    return base ** exponent\n\nprint('2^3:', calculate_power(2, 3))", "label": "correct"}
{"code": "def faulty_calculate_power(base, exponent):\n    return base * exponent  # 错误的运算符\n\nprint('2^3:', faulty_calculate_power(2, 3))", "label": "incorrect"}
{"code": "def greet_user(username):\n    print(f'Hello, {username}!')\n\ngreet_user('Bob')", "label": "correct"}
{"code": "def faulty_greet_user(username):\n    print(f'Hello, {username}!')\n    return  # 缺少必要的返回值\n\ngreet_user('Bob')", "label": "incorrect"}
{"code": "def calculate_discount(price, discount):\n    return price - (price * discount)\n\nprint('Discounted Price:', calculate_discount(100, 0.2))", "label": "correct"}
{"code": "def faulty_calculate_discount(price, discount):\n    return price - price * discount  # 缺少括号可能导致优先级问题\n\nprint('Discounted Price:', faulty_calculate_discount(100, 0.2))", "label": "incorrect"}
{"code": "def get_first_element(lst):\n    if lst:\n        return lst[0]\n    else:\n        return None\n\nprint('First Element:', get_first_element([10, 20, 30]))\nprint('First Element:', get_first_element([]))", "label": "correct"}
{"code": "def faulty_get_first_element(lst):\n    if lst:\n        return lst[1]  # 应该是 lst[0]\n    else:\n        return None\n\nprint('First Element:', faulty_get_first_element([10, 20, 30]))\nprint('First Element:', faulty_get_first_element([]))", "label": "incorrect"}
{"code": "def to_lowercase(s):\n    return s.lower()\n\ntext = 'HELLO WORLD'\nlowercase_text = to_lowercase(text)\nprint('Lowercase:', lowercase_text)", "label": "correct"}
{"code": "def faulty_to_lowercase(s):\n    return s.lower  # 缺少()调用\n\ntext = 'HELLO WORLD'\nlowercase_text = faulty_to_lowercase(text)\nprint('Lowercase:', lowercase_text)", "label": "incorrect"}
