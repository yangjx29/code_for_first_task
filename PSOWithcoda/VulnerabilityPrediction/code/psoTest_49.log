Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at microsoft/codebert-base-mlm and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/run.py:112: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.examples = torch.load(cache_file_path)
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(output_dir))
Some weights of the model checkpoint at microsoft/codebert-base-mlm were not used when initializing RobertaForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing RobertaForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).

 cached_features_file:  ../dataset/codebert_cached_test_subs_0_400
400 400
Processing examples:   0%|          | 0/400 [00:00<?, ?it/s]12/24/2024 12:57:29 - INFO - __main__ -   测试:49

12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子0,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子1,位置[1]...
1111code_tokens:['int', 'cpu_exec', '(', 'CPUState', '*', 'cpu', ')', '{', 'CPUClass', '*', 'cc', '=', 'CPU_GET_CLASS', '(', 'cpu', ')', ';', 'int', 'ret', ';', 'SyncClocks', 'sc', ';', 'current_cpu', '=', 'cpu', ';', 'if', '(', 'cpu_handle_halt', '(', 'cpu', ')', ')', '{', 'return', 'EXCP_HALTED', ';', '}', 'rcu_read_lock', '(', ')', ';', 'cc', '->', 'cpu_exec_enter', '(', 'cpu', ')', ';', 'init_delay_params', '(', '&', 'sc', ',', 'cpu', ')', ';', 'if', '(', 'sigsetjmp', '(', 'cpu', '->', 'jmp_env', ',', '0', ')', '!=', '0', ')', '{', '#if', 'defined', '(', '__clang__', ')', '||', '!', 'QEMU_GNUC_PREREQ', '(', '4', ',', '6', ')', '', 'cpu', '=', 'current_cpu', ';', 'cc', '=', 'CPU_GET_CLASS', '(', 'cpu', ')', ';', '#else', 'g_assert', '(', 'cpu', '==', 'current_cpu', ')', ';', 'g_assert', '(', 'cc', '==', 'CPU_GET_CLASS', '(', 'cpu', ')', ')', ';', '#endif', 'cpu', '->', 'can_do_io', '=', '1', ';', 'tb_lock_reset', '(', ')', ';', 'if', '(', 'qemu_mutex_iothread_locked', '(', ')', ')', '{', 'qemu_mutex_unlock_iothread', '(', ')', ';', '}', '}', 'while', '(', '!', 'cpu_handle_exception', '(', 'cpu', ',', '&', 'ret', ')', ')', '{', 'TranslationBlock', '*', 'last_tb', '=', 'NULL', ';', 'int', 'tb_exit', '=', '0', ';', 'while', '(', '!', 'cpu_handle_interrupt', '(', 'cpu', ',', '&', 'last_tb', ')', ')', '{', 'TranslationBlock', '*', 'tb', '=', 'tb_find', '(', 'cpu', ',', 'last_tb', ',', 'tb_exit', ')', ';', 'cpu_loop_exec_tb', '(', 'cpu', ',', 'tb', ',', '&', 'last_tb', ',', '&', 'tb_exit', ',', '&', 'sc', ')', ';', 'align_clocks', '(', '&', 'sc', ',', 'cpu', ')', ';', '}', '}', 'cc', '->', 'cpu_exec_exit', '(', 'cpu', ')', ';', 'rcu_read_unlock', '(', ')', ';', 'current_cpu', '=', 'NULL', ';', 'return', 'ret', ';', '}'],len:232, len(variable_names):36
2222code_tokens:['int', 'cpu_exec', '(', 'CPUState', '*', 'cpu', ')', '{', 'CPUClass', '*', 'cc', '=', 'CPU_GET_CLASS', '(', 'cpu', ')', ';', 'int', 'ret', ';', 'SyncClocks', 'sc', ';', 'current_cpu', '=', 'cpu', ';', 'if', '(', 'cpu_handle_halt', '(', 'cpu', ')', ')', '{', 'return', 'EXCP_HALTED', ';', '}', 'rcu_read_lock', '(', ')', ';', 'cc', '->', 'cpu_exec_enter', '(', 'cpu', ')', ';', 'init_delay_params', '(', '&', 'sc', ',', 'cpu', ')', ';', 'if', '(', 'sigsetjmp', '(', 'cpu', '->', 'jmp_env', ',', '0', ')', '!=', '0', ')', '{', '#if', 'defined', '(', '__clang__', ')', '||', '!', 'QEMU_GNUC_PREREQ', '(', '4', ',', '6', ')', 'cpu', '=', 'current_cpu', ';', 'cc', '=', 'CPU_GET_CLASS', '(', 'cpu', ')', ';', '#else', ' g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }'],len:98, len(variable_names):20
Number of variable_names extracted:  20
Generating population49...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else  g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
PSO迭代第0轮,粒子0,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
PSO迭代第0轮,粒子1,tmp_code_tokenslen98...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子2,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子3,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子4,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[12, 91]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
PSO迭代第0轮,粒子2,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
PSO迭代第0轮,粒子3,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
PSO迭代第0轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子5,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子6,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子7,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子8,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[45]...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
PSO迭代第0轮,粒子5,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
PSO迭代第0轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
PSO迭代第0轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
PSO迭代第0轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子9,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子10,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子11,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子12,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[79]...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
PSO迭代第0轮,粒子9,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
PSO迭代第0轮,粒子10,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
PSO迭代第0轮,粒子11,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
PSO迭代第0轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子13,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子14,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子15,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子16,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[8]...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
PSO迭代第0轮,粒子13,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
PSO迭代第0轮,粒子14,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
PSO迭代第0轮,粒子15,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
PSO迭代第0轮,粒子16,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子17,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子18,位置[1]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[36]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[20]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[18]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[64]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[23, 87]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[3]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[8]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[75]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[21, 53]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[79]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[39]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[29]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[50]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[45]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[60]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[73]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[12, 91]...
12/24/2024 12:57:30 - INFO - pso -   PSO迭代第0轮,粒子19,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[64]...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
PSO迭代第0轮,粒子17,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
PSO迭代第0轮,粒子18,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
PSO迭代第0轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
	 0  --gap prob  0.048298895
先在这里测试:98
code:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks sc ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & sc , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
第0轮 第0各粒子优化前 adv_code_tokens:98
第0轮 第1各粒子优化前 adv_code_tokens:98
第0轮 第2各粒子优化前 adv_code_tokens:98
第0轮 第3各粒子优化前 adv_code_tokens:98
第0轮 第4各粒子优化前 adv_code_tokens:98
第0轮 第5各粒子优化前 adv_code_tokens:98
第0轮 第6各粒子优化前 adv_code_tokens:98
第0轮 第7各粒子优化前 adv_code_tokens:98
第0轮 第8各粒子优化前 adv_code_tokens:98
第0轮 第9各粒子优化前 adv_code_tokens:98
第0轮 第10各粒子优化前 adv_code_tokens:98
第0轮 第11各粒子优化前 adv_code_tokens:98
第0轮 第12各粒子优化前 adv_code_tokens:98
第0轮 第13各粒子优化前 adv_code_tokens:98
第0轮 第14各粒子优化前 adv_code_tokens:98
第0轮 第15各粒子优化前 adv_code_tokens:98
第0轮 第16各粒子优化前 adv_code_tokens:98
第0轮 第17各粒子优化前 adv_code_tokens:98
第0轮 第18各粒子优化前 adv_code_tokens:98
第0轮 第19各粒子优化前 adv_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else   g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子0,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子1,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子2,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子3,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[20]...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
PSO迭代第1轮,粒子0,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
PSO迭代第1轮,粒子1,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
PSO迭代第1轮,粒子2,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
PSO迭代第1轮,粒子3,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子4,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子5,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子6,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子7,位置[1]...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
PSO迭代第1轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
PSO迭代第1轮,粒子5,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
PSO迭代第1轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
PSO迭代第1轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子8,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子9,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子10,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[60]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
PSO迭代第1轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
PSO迭代第1轮,粒子9,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
PSO迭代第1轮,粒子10,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子11,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子12,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子13,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子14,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[39]...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
PSO迭代第1轮,粒子11,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
PSO迭代第1轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
PSO迭代第1轮,粒子13,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
PSO迭代第1轮,粒子14,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子15,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子16,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子17,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子18,位置[1]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[36]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[20]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[18]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[64]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[23, 87]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[3]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[8]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
PSO迭代第1轮,粒子15,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
PSO迭代第1轮,粒子16,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
PSO迭代第1轮,粒子17,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
PSO迭代第1轮,粒子18,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[75]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[21, 53]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[79]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[39]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[29]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[50]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[45]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[60]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[73]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[12, 91]...
12/24/2024 12:57:41 - INFO - pso -   PSO迭代第1轮,粒子19,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子0,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子1,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[3]...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
PSO迭代第1轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
	 1  --gap prob  0.12706017
先在这里测试:98
code:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
第1轮 第0各粒子优化前 adv_code_tokens:98
第1轮 第1各粒子优化前 adv_code_tokens:98
第1轮 第2各粒子优化前 adv_code_tokens:98
第1轮 第3各粒子优化前 adv_code_tokens:98
第1轮 第4各粒子优化前 adv_code_tokens:98
第1轮 第5各粒子优化前 adv_code_tokens:98
第1轮 第6各粒子优化前 adv_code_tokens:98
第1轮 第7各粒子优化前 adv_code_tokens:98
第1轮 第8各粒子优化前 adv_code_tokens:98
第1轮 第9各粒子优化前 adv_code_tokens:98
第1轮 第10各粒子优化前 adv_code_tokens:98
第1轮 第11各粒子优化前 adv_code_tokens:98
第1轮 第12各粒子优化前 adv_code_tokens:98
第1轮 第13各粒子优化前 adv_code_tokens:98
第1轮 第14各粒子优化前 adv_code_tokens:98
第1轮 第15各粒子优化前 adv_code_tokens:98
第1轮 第16各粒子优化前 adv_code_tokens:98
第1轮 第17各粒子优化前 adv_code_tokens:98
第1轮 第18各粒子优化前 adv_code_tokens:98
第1轮 第19各粒子优化前 adv_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else    g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
PSO迭代第2轮,粒子0,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
PSO迭代第2轮,粒子1,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子2,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子3,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子4,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子5,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[23, 87]...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
PSO迭代第2轮,粒子2,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
PSO迭代第2轮,粒子3,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
PSO迭代第2轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
PSO迭代第2轮,粒子5,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子6,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子7,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子8,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子9,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[20]...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
PSO迭代第2轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
PSO迭代第2轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
PSO迭代第2轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
PSO迭代第2轮,粒子9,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子10,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子11,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子12,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子13,位置[1]...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
PSO迭代第2轮,粒子10,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
PSO迭代第2轮,粒子11,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
PSO迭代第2轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
PSO迭代第2轮,粒子13,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子14,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子15,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[60]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子16,位置[1]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[36]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[20]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[18]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[64]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[23, 87]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[3]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[8]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[75]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[21, 53]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[79]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[39]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[29]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[50]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[45]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[60]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
PSO迭代第2轮,粒子14,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
PSO迭代第2轮,粒子15,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
PSO迭代第2轮,粒子16,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[73]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[12, 91]...
12/24/2024 12:57:51 - INFO - pso -   PSO迭代第2轮,粒子17,位置[1]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[36]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[20]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[18]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[64]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[23, 87]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[3]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[8]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[75]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[21, 53]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[79]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[39]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[29]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[50]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[45]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[60]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[73]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[12, 91]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子18,位置[1]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[36]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[20]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[18]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[64]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[23, 87]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[3]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[8]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[75]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[21, 53]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[79]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[39]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[29]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[50]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[45]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[60]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[73]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[12, 91]...
12/24/2024 12:57:52 - INFO - pso -   PSO迭代第2轮,粒子19,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[29]...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
PSO迭代第2轮,粒子17,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
PSO迭代第2轮,粒子18,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
PSO迭代第2轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
	 2  --gap prob  0.12706017
先在这里测试:98
code:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
第2轮 第0各粒子优化前 adv_code_tokens:98
第2轮 第1各粒子优化前 adv_code_tokens:98
第2轮 第2各粒子优化前 adv_code_tokens:98
第2轮 第3各粒子优化前 adv_code_tokens:98
第2轮 第4各粒子优化前 adv_code_tokens:98
第2轮 第5各粒子优化前 adv_code_tokens:98
第2轮 第6各粒子优化前 adv_code_tokens:98
第2轮 第7各粒子优化前 adv_code_tokens:98
第2轮 第8各粒子优化前 adv_code_tokens:98
第2轮 第9各粒子优化前 adv_code_tokens:98
第2轮 第10各粒子优化前 adv_code_tokens:98
第2轮 第11各粒子优化前 adv_code_tokens:98
第2轮 第12各粒子优化前 adv_code_tokens:98
第2轮 第13各粒子优化前 adv_code_tokens:98
第2轮 第14各粒子优化前 adv_code_tokens:98
第2轮 第15各粒子优化前 adv_code_tokens:98
第2轮 第16各粒子优化前 adv_code_tokens:98
第2轮 第17各粒子优化前 adv_code_tokens:98
第2轮 第18各粒子优化前 adv_code_tokens:98
第2轮 第19各粒子优化前 adv_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else     g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子0,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子1,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子2,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子3,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[79]...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
PSO迭代第3轮,粒子0,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
PSO迭代第3轮,粒子1,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
PSO迭代第3轮,粒子2,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
PSO迭代第3轮,粒子3,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子4,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子5,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子6,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子7,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
PSO迭代第3轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
PSO迭代第3轮,粒子5,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
PSO迭代第3轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
PSO迭代第3轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子8,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子9,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子10,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子11,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[20]...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
PSO迭代第3轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
PSO迭代第3轮,粒子9,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
PSO迭代第3轮,粒子10,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
PSO迭代第3轮,粒子11,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子12,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子13,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子14,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子15,位置[1]...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
PSO迭代第3轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
PSO迭代第3轮,粒子13,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
PSO迭代第3轮,粒子14,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
PSO迭代第3轮,粒子15,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子16,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子17,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[45]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子18,位置[1]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[36]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[20]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[18]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[64]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[23, 87]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[3]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[8]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[75]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[21, 53]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[79]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[39]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[29]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[50]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[45]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
PSO迭代第3轮,粒子16,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
PSO迭代第3轮,粒子17,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
PSO迭代第3轮,粒子18,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[60]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[73]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[12, 91]...
12/24/2024 12:58:01 - INFO - pso -   PSO迭代第3轮,粒子19,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子0,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子1,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[75]...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
PSO迭代第3轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
	 3  --gap prob  0.12706017
先在这里测试:98
code:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
第3轮 第0各粒子优化前 adv_code_tokens:98
第3轮 第1各粒子优化前 adv_code_tokens:98
第3轮 第2各粒子优化前 adv_code_tokens:98
第3轮 第3各粒子优化前 adv_code_tokens:98
第3轮 第4各粒子优化前 adv_code_tokens:98
第3轮 第5各粒子优化前 adv_code_tokens:98
第3轮 第6各粒子优化前 adv_code_tokens:98
第3轮 第7各粒子优化前 adv_code_tokens:98
第3轮 第8各粒子优化前 adv_code_tokens:98
第3轮 第9各粒子优化前 adv_code_tokens:98
第3轮 第10各粒子优化前 adv_code_tokens:98
第3轮 第11各粒子优化前 adv_code_tokens:98
第3轮 第12各粒子优化前 adv_code_tokens:98
第3轮 第13各粒子优化前 adv_code_tokens:98
第3轮 第14各粒子优化前 adv_code_tokens:98
第3轮 第15各粒子优化前 adv_code_tokens:98
第3轮 第16各粒子优化前 adv_code_tokens:98
第3轮 第17各粒子优化前 adv_code_tokens:98
第3轮 第18各粒子优化前 adv_code_tokens:98
第3轮 第19各粒子优化前 adv_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else      g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
PSO迭代第4轮,粒子0,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
PSO迭代第4轮,粒子1,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子2,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子3,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子4,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子5,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[10, 43, 89]...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
PSO迭代第4轮,粒子2,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
PSO迭代第4轮,粒子3,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
PSO迭代第4轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
PSO迭代第4轮,粒子5,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子6,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子7,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子8,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子9,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[64]...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
PSO迭代第4轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
PSO迭代第4轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
PSO迭代第4轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
PSO迭代第4轮,粒子9,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子10,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子11,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子12,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子13,位置[1]...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
PSO迭代第4轮,粒子10,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
PSO迭代第4轮,粒子11,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
PSO迭代第4轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
PSO迭代第4轮,粒子13,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子14,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子15,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子16,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[60]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
PSO迭代第4轮,粒子14,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
PSO迭代第4轮,粒子15,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
PSO迭代第4轮,粒子16,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子17,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子18,位置[1]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[36]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[20]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[18]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[64]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[23, 87]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[3]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[8]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[75]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[21, 53]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[79]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[39]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[29]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[50]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[45]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[60]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[73]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[12, 91]...
12/24/2024 12:58:12 - INFO - pso -   PSO迭代第4轮,粒子19,位置[1]...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
PSO迭代第4轮,粒子17,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
PSO迭代第4轮,粒子18,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks cs ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & cs , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else       g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
PSO迭代第4轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
	 4  --gap prob  0.12706017
PSO迭代第4轮进行muteted...
mutate中选择的 name:sc, 位置positions:[21, 53]
pred_nls:['sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu -> cpu_exec_exit', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exit ( cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock; return EXCP_HALTED', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exit ( cpu )', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (; return EXCP_HAL', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exit (', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ) ; return EXCP_', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exit ( CPU', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock) ; return EXCP_HAL', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exit ( cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ->cpu_exec_', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlockcpu ->cpu_exec_exit', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu ->cpu_exec_exit', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exitcpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock () ; return EXCP_H', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ->cpu -> cpu_', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exit ( CPU )', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlockcurrent_cpu = NULL ;cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exit (cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ->cpu ->cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu_', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exitcpu )', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ->cpu ) ;', 'sc = CPU -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu_', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ) ;cpu ->', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu_exec_exit ( cpu ) ;cpu_exec_exit ( CPU', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock () ;cpu ->cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu ->', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (;cpu ->cpu_', 'sc = CPU -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu ->', 'sc = CPU -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ->cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exit;', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ) ;cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu ) ;cpu ) ;', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (; cpu ->cpu ->', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (cpu_exec_exit)', 'sc = CPU -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ->cpu_exec_exit ( cpu ) ;cpu ) ;cpu', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (;cpu ->cpu ->', 'sc = cpu -> sync_clockscpu -> cpu_exec_enter ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu -> cpu_exec_exit ( cpucpu ) ; rcu_read_unlock (; cpu ->cpu_exec']12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子0,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子1,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[45]...

先在这里测试:102
code:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks <extra_id_0> ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & <extra_id_0> , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else        g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
第4轮 第0各粒子优化前 adv_code_tokens:102
第4轮 第1各粒子优化前 adv_code_tokens:98
第4轮 第2各粒子优化前 adv_code_tokens:98
第4轮 第3各粒子优化前 adv_code_tokens:98
第4轮 第4各粒子优化前 adv_code_tokens:98
第4轮 第5各粒子优化前 adv_code_tokens:98
第4轮 第6各粒子优化前 adv_code_tokens:98
第4轮 第7各粒子优化前 adv_code_tokens:98
第4轮 第8各粒子优化前 adv_code_tokens:98
第4轮 第9各粒子优化前 adv_code_tokens:98
第4轮 第10各粒子优化前 adv_code_tokens:98
第4轮 第11各粒子优化前 adv_code_tokens:98
第4轮 第12各粒子优化前 adv_code_tokens:98
第4轮 第13各粒子优化前 adv_code_tokens:98
第4轮 第14各粒子优化前 adv_code_tokens:98
第4轮 第15各粒子优化前 adv_code_tokens:98
第4轮 第16各粒子优化前 adv_code_tokens:98
第4轮 第17各粒子优化前 adv_code_tokens:98
第4轮 第18各粒子优化前 adv_code_tokens:98
第4轮 第19各粒子优化前 adv_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks <extra_id_0> ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & <extra_id_0> , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else        g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
PSO迭代第5轮,粒子0,tmp_code_tokenslen102...
code_tokens1:98 ,code_token2:102, new_code_tokens:102
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
PSO迭代第5轮,粒子1,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子2,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子3,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子4,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子5,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[10, 43, 89]...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
PSO迭代第5轮,粒子2,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
PSO迭代第5轮,粒子3,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
PSO迭代第5轮,粒子4,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
PSO迭代第5轮,粒子5,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子6,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子7,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子8,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子9,位置[1]...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
PSO迭代第5轮,粒子6,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
PSO迭代第5轮,粒子7,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
PSO迭代第5轮,粒子8,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
PSO迭代第5轮,粒子9,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子10,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子11,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子12,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[45]...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
PSO迭代第5轮,粒子10,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
PSO迭代第5轮,粒子11,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
PSO迭代第5轮,粒子12,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子13,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子14,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子15,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子16,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[8]...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
PSO迭代第5轮,粒子13,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
PSO迭代第5轮,粒子14,tmp_code_tokenslen98...
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
PSO迭代第5轮,粒子15,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
PSO迭代第5轮,粒子16,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子17,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子18,位置[1]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[36]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[20]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[18]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[64]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[23, 87]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[3]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[10, 43, 89]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[8]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[5, 14, 25, 31, 47, 55, 62, 85, 93]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[75]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[21, 53]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[79]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[39]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[29]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[50]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[45]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[60]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[73]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[12, 91]...
12/24/2024 12:58:28 - INFO - pso -   PSO迭代第5轮,粒子19,位置[1]...
12/24/2024 12:58:28 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 12:58:28 - INFO - __main__ -   Successful items count: 1

12/24/2024 12:58:28 - INFO - __main__ -   Total count: 1

12/24/2024 12:58:28 - INFO - __main__ -   Index: 49

PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
PSO迭代第5轮,粒子17,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
PSO迭代第5轮,粒子18,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
pop[0]*****:int cpu_exec ( CPUState * CPU ) { CPUClass * cc = CPU_GET_CLASS ( CPU ) ; int ret ; SyncClocks < extra_id_0 > ; current_cpu = CPU ; if ( cpu_handle_halt ( CPU ) ) { return EXCP_HALTED ; } rcu_read_lock ( ) ; cc -> cpu_exec_enter ( CPU ) ; init_delay_params ( & < extra_id_0 > , CPU ) ; if ( sigsetjmp ( CPU -> jmp_env , 0 ) != 0 ) { #if defined ( __clang__ ) || ! QEMU_GNUC_PREREQ ( 4 , 6 ) CPU = current_cpu ; cc = CPU_GET_CLASS ( CPU ) ; #else         g_assert ( cpu == current_cpu ) ; g_assert ( cc == CPU_GET_CLASS ( cpu ) ) ; #endif cpu -> can_do_io = 1 ; tb_lock_reset ( ) ; if ( qemu_mutex_iothread_locked ( ) ) { qemu_mutex_unlock_iothread ( ) ; } } while ( ! cpu_handle_exception ( cpu , & ret ) ) { TranslationBlock * last_tb = NULL ; int tb_exit = 0 ; while ( ! cpu_handle_interrupt ( cpu , & last_tb ) ) { TranslationBlock * tb = tb_find ( cpu , last_tb , tb_exit ) ; cpu_loop_exec_tb ( cpu , tb , & last_tb , & tb_exit , & sc ) ; align_clocks ( & sc , cpu ) ; } } cc -> cpu_exec_exit ( cpu ) ; rcu_read_unlock ( ) ; current_cpu = NULL ; return ret ; }
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
PSO迭代第5轮,粒子19,tmp_code_tokenslen98...
code_tokens1:98 ,code_token2:98, new_code_tokens:98
evaluate SUCCESS!
Processing examples:  12%|█▎        | 50/400 [00:58<06:52,  1.18s/it]Processing examples: 100%|██████████| 400/400 [00:59<00:00,  6.77it/s]
