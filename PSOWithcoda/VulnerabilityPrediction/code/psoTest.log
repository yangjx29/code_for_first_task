Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at microsoft/codebert-base-mlm and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/run.py:112: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.examples = torch.load(cache_file_path)
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(output_dir))
Some weights of the model checkpoint at microsoft/codebert-base-mlm were not used when initializing RobertaForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing RobertaForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).

 cached_features_file:  ../dataset/codebert_cached_test_subs_0_400
400 400
Processing examples:   0%|          | 0/400 [00:00<?, ?it/s]12/24/2024 13:57:09 - INFO - __main__ -   测试:0

12/24/2024 13:57:09 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Processing examples:   0%|          | 1/400 [00:00<01:48,  3.67it/s]12/24/2024 13:57:09 - INFO - __main__ -   测试:1

12/24/2024 13:57:09 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 13:57:09 - INFO - __main__ -   Successful items count: 1

12/24/2024 13:57:09 - INFO - __main__ -   Total count: 1

12/24/2024 13:57:09 - INFO - __main__ -   Index: 1

Number of variable_names extracted:  73
Generating population1...
init SUCCESS!
Processing examples:   0%|          | 2/400 [00:00<01:22,  4.81it/s]12/24/2024 13:57:09 - INFO - __main__ -   测试:2

12/24/2024 13:57:10 - INFO - __main__ -   Attack failed!

12/24/2024 13:57:10 - INFO - __main__ -   测试:3

12/24/2024 13:57:10 - INFO - __main__ -   Attack failed!

The original code is misclassified.
The original code is misclassified.
Processing examples:   1%|          | 4/400 [00:00<00:43,  9.05it/s]12/24/2024 13:57:10 - INFO - __main__ -   测试:4

12/24/2024 13:57:10 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 13:57:10 - INFO - __main__ -   Successful items count: 2

12/24/2024 13:57:10 - INFO - __main__ -   Total count: 2

12/24/2024 13:57:10 - INFO - __main__ -   Index: 4

12/24/2024 13:57:10 - INFO - __main__ -   测试:5

Number of variable_names extracted:  54
Generating population4...
init SUCCESS!
Number of variable_names extracted:  11
Generating population5...
	 0  --gap prob  -0.00024726521223783493
	 1  --gap prob  -0.00024726521223783493
	 2  --gap prob  -0.00024726521223783493
Processing examples:   1%|          | 4/400 [00:19<00:43,  9.05it/s]12/24/2024 14:00:18 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:00:18 - INFO - __main__ -   Successful items count: 3

12/24/2024 14:00:18 - INFO - __main__ -   Total count: 3

12/24/2024 14:00:18 - INFO - __main__ -   Index: 5

	 3  --gap prob  -0.00024726521223783493
	 4  --gap prob  0.0012594927102327347
	 5  --gap prob  0.0012594927102327347
	 6  --gap prob  0.0012594927102327347
	 7  --gap prob  0.0012594927102327347
	 8  --gap prob  0.0057802749797701836
	 9  --gap prob  0.0057802749797701836
	 10  --gap prob  0.0057802749797701836
	 11  --gap prob  0.0057802749797701836
	 12  --gap prob  0.00860877800732851
	 13  --gap prob  0.00860877800732851
	 14  --gap prob  0.00860877800732851
	 15  --gap prob  0.00860877800732851
	 16  --gap prob  0.0011914949864149094
	 17  --gap prob  0.0011914949864149094
	 18  --gap prob  0.0011914949864149094
	 19  --gap prob  0.0011914949864149094
Changing code structure...
Processing examples:   2%|▏         | 6/400 [03:09<4:53:12, 44.65s/it]12/24/2024 14:00:18 - INFO - __main__ -   测试:6

12/24/2024 14:00:18 - INFO - __main__ -   Attack failed!

12/24/2024 14:00:18 - INFO - __main__ -   测试:7

12/24/2024 14:00:18 - INFO - __main__ -   Attack failed!

12/24/2024 14:00:18 - INFO - __main__ -   测试:8

12/24/2024 14:00:18 - INFO - __main__ -   Attack failed!

12/24/2024 14:00:18 - INFO - __main__ -   测试:9

12/24/2024 14:00:19 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:00:19 - INFO - __main__ -   Successful items count: 4

12/24/2024 14:00:19 - INFO - __main__ -   Total count: 4

12/24/2024 14:00:19 - INFO - __main__ -   Index: 9

The original code is misclassified.
The original code is misclassified.
The original code is misclassified.
Number of variable_names extracted:  10
Generating population9...
	 0  --gap prob  0.16952378
select_best_replacement SUCCESS!
update SUCCESS!
Processing examples:   2%|▎         | 10/400 [03:10<2:04:30, 19.16s/it]12/24/2024 14:00:19 - INFO - __main__ -   测试:10

12/24/2024 14:00:19 - INFO - __main__ -   Attack failed!

12/24/2024 14:00:19 - INFO - __main__ -   测试:11

12/24/2024 14:00:20 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:00:20 - INFO - __main__ -   Successful items count: 5

12/24/2024 14:00:20 - INFO - __main__ -   Total count: 5

12/24/2024 14:00:20 - INFO - __main__ -   Index: 11

The original code is misclassified.
Number of variable_names extracted:  29
Generating population11...
init SUCCESS!
Processing examples:   3%|▎         | 12/400 [03:10<1:27:57, 13.60s/it]12/24/2024 14:00:20 - INFO - __main__ -   测试:12

Number of variable_names extracted:  9
Generating population12...
	 0  --gap prob  0.00086694956
	 1  --gap prob  0.00086694956
	 2  --gap prob  0.00086694956
	 3  --gap prob  0.0012875199
Processing examples:   3%|▎         | 12/400 [03:30<1:27:57, 13.60s/it]12/24/2024 14:02:37 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:02:37 - INFO - __main__ -   Successful items count: 6

12/24/2024 14:02:37 - INFO - __main__ -   Total count: 6

12/24/2024 14:02:37 - INFO - __main__ -   Index: 12

	 4  --gap prob  0.0012875199
	 5  --gap prob  0.0012875199
	 6  --gap prob  0.0012875199
	 7  --gap prob  0.0012199283
	 8  --gap prob  0.0012199283
	 9  --gap prob  0.0012199283
	 10  --gap prob  0.0012199283
	 11  --gap prob  0.0014894009
	 12  --gap prob  0.0014894009
	 13  --gap prob  0.0014894009
	 14  --gap prob  0.0014894009
	 15  --gap prob  0.0012199283
	 16  --gap prob  0.0012199283
	 17  --gap prob  0.0012199283
	 18  --gap prob  0.0012199283
	 19  --gap prob  0.00086694956
Changing code structure...
Processing examples:   3%|▎         | 13/400 [05:28<3:45:16, 34.93s/it]12/24/2024 14:02:37 - INFO - __main__ -   测试:13

12/24/2024 14:05:11 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:05:11 - INFO - __main__ -   Successful items count: 7

12/24/2024 14:05:11 - INFO - __main__ -   Total count: 7

12/24/2024 14:05:11 - INFO - __main__ -   Index: 13

Number of variable_names extracted:  7
Generating population13...
	 0  --gap prob  0.0046348366886377335
	 1  --gap prob  0.0046348366886377335
	 2  --gap prob  0.0046348366886377335
	 3  --gap prob  0.0046348366886377335
	 4  --gap prob  0.0046348366886377335
	 5  --gap prob  0.0046348366886377335
	 6  --gap prob  0.0046348366886377335
	 7  --gap prob  0.0046348366886377335
	 8  --gap prob  0.0046348366886377335
	 9  --gap prob  0.0046348366886377335
	 10  --gap prob  0.0046348366886377335
	 11  --gap prob  0.0046348366886377335
	 12  --gap prob  0.0046348366886377335
	 13  --gap prob  0.0046348366886377335
	 14  --gap prob  0.0046348366886377335
	 15  --gap prob  0.0046348366886377335
	 16  --gap prob  0.0046348366886377335
	 17  --gap prob  0.0046348366886377335
	 18  --gap prob  0.0046348366886377335
	 19  --gap prob  0.0069028958678245544
Changing code structure...
Processing examples:   4%|▎         | 14/400 [08:02<6:15:47, 58.41s/it]12/24/2024 14:05:11 - INFO - __main__ -   测试:14

12/24/2024 14:06:18 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:06:18 - INFO - __main__ -   Successful items count: 8

12/24/2024 14:06:18 - INFO - __main__ -   Total count: 8

12/24/2024 14:06:18 - INFO - __main__ -   Index: 14

Number of variable_names extracted:  2
Generating population14...
	 0  --gap prob  -0.0036414675414562225
	 1  --gap prob  -0.0036414675414562225
	 2  --gap prob  -0.0036414675414562225
	 3  --gap prob  -0.0036414675414562225
	 4  --gap prob  0.004500174894928932
	 5  --gap prob  0.004500174894928932
	 6  --gap prob  0.004500174894928932
	 7  --gap prob  0.004500174894928932
	 8  --gap prob  0.03310509957373142
	 9  --gap prob  0.03310509957373142
	 10  --gap prob  0.03310509957373142
	 11  --gap prob  0.03310509957373142
	 12  --gap prob  0.21028906665742397
	 13  --gap prob  0.21028906665742397
	 14  --gap prob  0.21028906665742397
	 15  --gap prob  0.21028906665742397
	 16  --gap prob  0.4457475747913122
	 17  --gap prob  0.4457475747913122
	 18  --gap prob  0.4457475747913122
	 19  --gap prob  0.4457475747913122
select_best_replacement SUCCESS!
update SUCCESS!
Processing examples:   4%|▍         | 15/400 [09:08<6:26:16, 60.20s/it]12/24/2024 14:06:18 - INFO - __main__ -   测试:15

12/24/2024 14:06:18 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:06:18 - INFO - __main__ -   Successful items count: 9

12/24/2024 14:06:18 - INFO - __main__ -   Total count: 9

12/24/2024 14:06:18 - INFO - __main__ -   Index: 15

12/24/2024 14:06:18 - INFO - __main__ -   测试:16

12/24/2024 14:06:40 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:06:40 - INFO - __main__ -   Successful items count: 10

12/24/2024 14:06:40 - INFO - __main__ -   Total count: 10

12/24/2024 14:06:40 - INFO - __main__ -   Index: 16

Number of variable_names extracted:  8
Generating population15...
init SUCCESS!
Number of variable_names extracted:  59
Generating population16...
	 0  --gap prob  0.017682582139968872
	 1  --gap prob  0.051235198974609375
select_best_replacement SUCCESS!
update SUCCESS!
Processing examples:   4%|▍         | 17/400 [09:31<4:23:46, 41.32s/it]12/24/2024 14:06:40 - INFO - __main__ -   测试:17

12/24/2024 14:06:40 - INFO - __main__ -   Attack failed!

12/24/2024 14:06:40 - INFO - __main__ -   测试:18

12/24/2024 14:08:56 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:08:56 - INFO - __main__ -   Successful items count: 11

12/24/2024 14:08:56 - INFO - __main__ -   Total count: 11

12/24/2024 14:08:56 - INFO - __main__ -   Index: 18

The original code is misclassified.
Number of variable_names extracted:  9
Generating population18...
	 0  --gap prob  0.00027038436383008957
	 1  --gap prob  0.00027038436383008957
	 2  --gap prob  0.00027038436383008957
	 3  --gap prob  0.001246737316250801
	 4  --gap prob  0.001246737316250801
	 5  --gap prob  0.001246737316250801
	 6  --gap prob  0.001246737316250801
	 7  --gap prob  0.001067398115992546
	 8  --gap prob  0.001067398115992546
	 9  --gap prob  0.001067398115992546
	 10  --gap prob  0.001067398115992546
	 11  --gap prob  0.001530962996184826
	 12  --gap prob  0.001530962996184826
	 13  --gap prob  0.001530962996184826
	 14  --gap prob  0.001530962996184826
	 15  --gap prob  0.0027001919224858284
	 16  --gap prob  0.0027001919224858284
	 17  --gap prob  0.0027001919224858284
	 18  --gap prob  0.0027001919224858284
	 19  --gap prob  0.0033801244571805
Changing code structure...
Processing examples:   5%|▍         | 19/400 [11:46<5:22:13, 50.75s/it]12/24/2024 14:08:56 - INFO - __main__ -   测试:19

12/24/2024 14:12:28 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:12:28 - INFO - __main__ -   Successful items count: 12

12/24/2024 14:12:28 - INFO - __main__ -   Total count: 12

12/24/2024 14:12:28 - INFO - __main__ -   Index: 19

Number of variable_names extracted:  23
Generating population19...
	 0  --gap prob  0.00014036894
	 1  --gap prob  0.00032937527
	 2  --gap prob  0.00044327974
	 3  --gap prob  0.0005039573
	 4  --gap prob  0.00082838535
	 5  --gap prob  0.00082838535
	 6  --gap prob  0.0008932352
	 7  --gap prob  0.001015842
	 8  --gap prob  0.0011687875
	 9  --gap prob  0.0011687875
	 10  --gap prob  0.001198411
	 11  --gap prob  0.0015082359
	 12  --gap prob  0.0015082359
	 13  --gap prob  0.0015082359
	 14  --gap prob  0.0015082359
	 15  --gap prob  0.001337707
	 16  --gap prob  0.001337707
	 17  --gap prob  0.001337707
	 18  --gap prob  0.001337707
	 19  --gap prob  0.0011509657
Changing code structure...
Processing examples:   5%|▌         | 20/400 [15:19<8:48:56, 83.52s/it]12/24/2024 14:12:28 - INFO - __main__ -   测试:20

12/24/2024 14:12:29 - INFO - __main__ -   Attack failed!

12/24/2024 14:12:29 - INFO - __main__ -   测试:21

12/24/2024 14:12:29 - INFO - __main__ -   Attack failed!

12/24/2024 14:12:29 - INFO - __main__ -   测试:22

12/24/2024 14:12:30 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:12:30 - INFO - __main__ -   Successful items count: 13

12/24/2024 14:12:30 - INFO - __main__ -   Total count: 13

12/24/2024 14:12:30 - INFO - __main__ -   Index: 22

The original code is misclassified.
The original code is misclassified.
Number of variable_names extracted:  27
Generating population22...
	 0  --gap prob  0.0346632
select_best_replacement SUCCESS!
update SUCCESS!
Processing examples:   6%|▌         | 23/400 [15:21<4:42:49, 45.01s/it]12/24/2024 14:12:30 - INFO - __main__ -   测试:23

12/24/2024 14:12:30 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:12:30 - INFO - __main__ -   Successful items count: 14

12/24/2024 14:12:30 - INFO - __main__ -   Total count: 14

12/24/2024 14:12:30 - INFO - __main__ -   Index: 23

12/24/2024 14:12:30 - INFO - __main__ -   测试:24

/data/yjx/cache/conda/envs/week1/lib/python3.9/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in divide
  dist = 1.0 - uv / math.sqrt(uu * vv)
12/24/2024 14:15:25 - INFO - __main__ -   Success rate: 100.00%

12/24/2024 14:15:25 - INFO - __main__ -   Successful items count: 15

12/24/2024 14:15:25 - INFO - __main__ -   Total count: 15

12/24/2024 14:15:25 - INFO - __main__ -   Index: 24

Number of variable_names extracted:  35
Generating population23...
init SUCCESS!
Number of variable_names extracted:  18
Generating population24...
	 0  --gap prob  0.084205925
	 1  --gap prob  0.12907422
	 2  --gap prob  0.13730425
	 3  --gap prob  0.16931623
	 4  --gap prob  0.17305428
	 5  --gap prob  0.2021665
	 6  --gap prob  0.21819901
	 7  --gap prob  0.28969622
	 8  --gap prob  0.28969622
	 9  --gap prob  0.38200516
	 10  --gap prob  0.38200516
	 11  --gap prob  0.30380458
	 12  --gap prob  0.30380458
	 13  --gap prob  0.30380458
	 14  --gap prob  0.30380458
	 15  --gap prob  0.2021665
	 16  --gap prob  0.2021665
	 17  --gap prob  0.2021665
	 18  --gap prob  0.2021665
	 19  --gap prob  0.21785092
Changing code structure...
Processing examples:   6%|▋         | 25/400 [18:16<6:02:53, 58.06s/it]12/24/2024 14:15:25 - INFO - __main__ -   测试:25

12/24/2024 14:15:26 - INFO - __main__ -   Attack failed!

12/24/2024 14:15:26 - INFO - __main__ -   测试:26

12/24/2024 14:15:26 - INFO - __main__ -   Attack failed!

12/24/2024 14:15:26 - INFO - __main__ -   测试:27

12/24/2024 14:21:07 - INFO - __main__ -   Success rate: 93.75%

12/24/2024 14:21:07 - INFO - __main__ -   Successful items count: 15

12/24/2024 14:21:07 - INFO - __main__ -   Total count: 16

12/24/2024 14:21:07 - INFO - __main__ -   Index: 27

The original code is misclassified.
Number of variable_names extracted:  4
substituions_len == 0
Number of variable_names extracted:  49
Generating population27...
	 0  --gap prob  -0.12647439539432526
	 1  --gap prob  -0.12647439539432526
	 2  --gap prob  -0.12647439539432526
	 3  --gap prob  -0.12647439539432526
	 4  --gap prob  -0.1287582814693451
	 5  --gap prob  -0.1287582814693451
	 6  --gap prob  -0.1287582814693451
	 7  --gap prob  -0.1287582814693451
	 8  --gap prob  -0.1326211392879486
	 9  --gap prob  -0.1326211392879486
	 10  --gap prob  -0.1326211392879486
	 11  --gap prob  -0.1326211392879486
	 12  --gap prob  -0.1355382204055786
	 13  --gap prob  -0.1355382204055786
	 14  --gap prob  -0.1355382204055786
	 15  --gap prob  -0.1355382204055786
	 16  --gap prob  -0.13619019091129303
	 17  --gap prob  -0.13619019091129303
	 18  --gap prob  -0.13619019091129303
	 19  --gap prob  -0.13619019091129303
Changing code structure...
Processing examples:   7%|▋         | 28/400 [23:58<8:17:25, 80.23s/it]12/24/2024 14:21:07 - INFO - __main__ -   测试:28

12/24/2024 14:21:07 - INFO - __main__ -   Success rate: 94.12%

12/24/2024 14:21:07 - INFO - __main__ -   Successful items count: 16

12/24/2024 14:21:07 - INFO - __main__ -   Total count: 17

12/24/2024 14:21:07 - INFO - __main__ -   Index: 28

Number of variable_names extracted:  11
Generating population28...
init SUCCESS!
Processing examples:   7%|▋         | 29/400 [23:58<6:57:24, 67.51s/it]12/24/2024 14:21:07 - INFO - __main__ -   测试:29

12/24/2024 14:21:08 - INFO - __main__ -   Attack failed!

12/24/2024 14:21:08 - INFO - __main__ -   测试:30

/data/yjx/cache/conda/envs/week1/lib/python3.9/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in divide
  dist = 1.0 - uv / math.sqrt(uu * vv)
12/24/2024 14:24:06 - INFO - __main__ -   Success rate: 88.89%

12/24/2024 14:24:06 - INFO - __main__ -   Successful items count: 16

12/24/2024 14:24:06 - INFO - __main__ -   Total count: 18

12/24/2024 14:24:06 - INFO - __main__ -   Index: 30

The original code is misclassified.
Number of variable_names extracted:  9
Generating population30...
	 0  --gap prob  -0.011922730132937431
	 1  --gap prob  -0.011922730132937431
	 2  --gap prob  -0.011922730132937431
	 3  --gap prob  -0.011922730132937431
	 4  --gap prob  -0.0118867764249444
	 5  --gap prob  -0.0118867764249444
	 6  --gap prob  -0.0118867764249444
	 7  --gap prob  -0.0118867764249444
	 8  --gap prob  -0.011528675444424152
	 9  --gap prob  -0.011528675444424152
	 10  --gap prob  -0.011528675444424152
	 11  --gap prob  -0.011528675444424152
	 12  --gap prob  -0.011922730132937431
	 13  --gap prob  -0.011922730132937431
	 14  --gap prob  -0.011922730132937431
	 15  --gap prob  -0.011922730132937431
	 16  --gap prob  -0.011922730132937431
	 17  --gap prob  -0.011922730132937431
	 18  --gap prob  -0.011922730132937431
	 19  --gap prob  -0.011922730132937431
Changing code structure...
Processing examples:   8%|▊         | 31/400 [26:57<7:37:22, 74.37s/it]12/24/2024 14:24:06 - INFO - __main__ -   测试:31

12/24/2024 14:29:21 - INFO - __main__ -   Success rate: 84.21%

12/24/2024 14:29:21 - INFO - __main__ -   Successful items count: 16

12/24/2024 14:29:21 - INFO - __main__ -   Total count: 19

12/24/2024 14:29:21 - INFO - __main__ -   Index: 31

Number of variable_names extracted:  4
Generating population31...
	 0  --gap prob  -0.058933792635798454
	 1  --gap prob  -0.058933792635798454
	 2  --gap prob  -0.058933792635798454
	 3  --gap prob  -0.058933792635798454
	 4  --gap prob  -0.027314480394124985
	 5  --gap prob  -0.027314480394124985
	 6  --gap prob  -0.027314480394124985
	 7  --gap prob  -0.027314480394124985
	 8  --gap prob  0.07728542387485504
	 9  --gap prob  0.07728542387485504
	 10  --gap prob  0.07728542387485504
	 11  --gap prob  0.07728542387485504
	 12  --gap prob  0.05980613827705383
	 13  --gap prob  0.05980613827705383
	 14  --gap prob  0.05980613827705383
	 15  --gap prob  0.05980613827705383
	 16  --gap prob  -0.023444771766662598
	 17  --gap prob  -0.023444771766662598
	 18  --gap prob  -0.023444771766662598
	 19  --gap prob  -0.023444771766662598
Changing code structure...
Processing examples:   8%|▊         | 32/400 [32:12<12:04:50, 118.18s/it]12/24/2024 14:29:21 - INFO - __main__ -   测试:32

12/24/2024 14:29:21 - INFO - __main__ -   Attack failed!

12/24/2024 14:29:21 - INFO - __main__ -   测试:33

/data/yjx/cache/conda/envs/week1/lib/python3.9/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in divide
  dist = 1.0 - uv / math.sqrt(uu * vv)
12/24/2024 14:29:21 - INFO - __main__ -   Success rate: 85.00%

12/24/2024 14:29:21 - INFO - __main__ -   Successful items count: 17

12/24/2024 14:29:21 - INFO - __main__ -   Total count: 20

12/24/2024 14:29:21 - INFO - __main__ -   Index: 33

The original code is misclassified.
Number of variable_names extracted:  25
Generating population33...
init SUCCESS!
Processing examples:   8%|▊         | 34/400 [32:12<7:54:07, 77.72s/it]  12/24/2024 14:29:21 - INFO - __main__ -   测试:34

12/24/2024 14:29:21 - INFO - __main__ -   Success rate: 85.71%

12/24/2024 14:29:21 - INFO - __main__ -   Successful items count: 18

12/24/2024 14:29:21 - INFO - __main__ -   Total count: 21

12/24/2024 14:29:21 - INFO - __main__ -   Index: 34

12/24/2024 14:29:21 - INFO - __main__ -   测试:35

12/24/2024 14:29:21 - INFO - __main__ -   Success rate: 86.36%

12/24/2024 14:29:21 - INFO - __main__ -   Successful items count: 19

12/24/2024 14:29:21 - INFO - __main__ -   Total count: 22

12/24/2024 14:29:21 - INFO - __main__ -   Index: 35

Number of variable_names extracted:  34
Generating population34...
init SUCCESS!
Number of variable_names extracted:  23
Generating population35...
init SUCCESS!
Processing examples:   9%|▉         | 36/400 [32:12<5:16:44, 52.21s/it]12/24/2024 14:29:21 - INFO - __main__ -   测试:36

12/24/2024 14:29:21 - INFO - __main__ -   Attack failed!

12/24/2024 14:29:21 - INFO - __main__ -   测试:37

The original code is misclassified.
Number of variable_names extracted:  12
Generating population37...
	 0  --gap prob  0.002321203239262104
	 1  --gap prob  0.002321203239262104
Processing examples:   9%|▉         | 36/400 [32:22<5:16:44, 52.21s/it]12/24/2024 14:31:31 - INFO - __main__ -   Success rate: 86.96%

12/24/2024 14:31:31 - INFO - __main__ -   Successful items count: 20

12/24/2024 14:31:31 - INFO - __main__ -   Total count: 23

12/24/2024 14:31:31 - INFO - __main__ -   Index: 37

	 2  --gap prob  0.002321203239262104
	 3  --gap prob  0.010022538714110851
	 4  --gap prob  0.010022538714110851
	 5  --gap prob  0.060654676519334316
	 6  --gap prob  0.060654676519334316
	 7  --gap prob  0.060654676519334316
	 8  --gap prob  0.060654676519334316
	 9  --gap prob  0.11536028888076544
	 10  --gap prob  0.11536028888076544
	 11  --gap prob  0.11536028888076544
	 12  --gap prob  0.11536028888076544
	 13  --gap prob  0.3334213783964515
	 14  --gap prob  0.3334213783964515
	 15  --gap prob  0.3334213783964515
	 16  --gap prob  0.3334213783964515
select_best_replacement SUCCESS!
update SUCCESS!
Processing examples:  10%|▉         | 38/400 [34:21<5:38:56, 56.18s/it]12/24/2024 14:31:31 - INFO - __main__ -   测试:38

12/24/2024 14:34:18 - INFO - __main__ -   Success rate: 83.33%

12/24/2024 14:34:18 - INFO - __main__ -   Successful items count: 20

12/24/2024 14:34:18 - INFO - __main__ -   Total count: 24

12/24/2024 14:34:18 - INFO - __main__ -   Index: 38

Number of variable_names extracted:  12
Generating population38...
	 0  --gap prob  -0.0034104585647583008
	 1  --gap prob  0.00203004851937294
	 2  --gap prob  0.00203004851937294
	 3  --gap prob  0.00203004851937294
	 4  --gap prob  0.00203004851937294
	 5  --gap prob  -0.0034104585647583008
	 6  --gap prob  -0.0034104585647583008
	 7  --gap prob  -0.0034104585647583008
	 8  --gap prob  -0.0034104585647583008
	 9  --gap prob  -0.00115242600440979
	 10  --gap prob  -0.00115242600440979
	 11  --gap prob  -0.00115242600440979
	 12  --gap prob  -0.00115242600440979
	 13  --gap prob  0.027271386235952377
	 14  --gap prob  0.027271386235952377
	 15  --gap prob  0.027271386235952377
	 16  --gap prob  0.027271386235952377
	 17  --gap prob  0.04309770092368126
	 18  --gap prob  0.04309770092368126
	 19  --gap prob  0.04309770092368126
Changing code structure...
Processing examples:  10%|▉         | 39/400 [37:08<7:41:48, 76.76s/it]12/24/2024 14:34:18 - INFO - __main__ -   测试:39

12/24/2024 14:38:50 - INFO - __main__ -   Success rate: 80.00%

12/24/2024 14:38:50 - INFO - __main__ -   Successful items count: 20

12/24/2024 14:38:50 - INFO - __main__ -   Total count: 25

12/24/2024 14:38:50 - INFO - __main__ -   Index: 39

Number of variable_names extracted:  35
Generating population39...
	 0  --gap prob  0.007105773314833641
	 1  --gap prob  0.015358766540884972
	 2  --gap prob  0.01890278048813343
	 3  --gap prob  0.01890278048813343
	 4  --gap prob  0.024271594360470772
	 5  --gap prob  0.05934627912938595
	 6  --gap prob  0.05934627912938595
	 7  --gap prob  0.05934627912938595
	 8  --gap prob  0.03368857689201832
	 9  --gap prob  0.0475620161741972
	 10  --gap prob  0.0475620161741972
	 11  --gap prob  0.0475620161741972
	 12  --gap prob  0.0475620161741972
	 13  --gap prob  0.07771552167832851
	 14  --gap prob  0.07771552167832851
	 15  --gap prob  0.07771552167832851
	 16  --gap prob  0.07771552167832851
	 17  --gap prob  0.0694198589771986
	 18  --gap prob  0.0694198589771986
	 19  --gap prob  0.0694198589771986
Changing code structure...
Processing examples:  10%|█         | 40/400 [41:41<11:46:55, 117.82s/it]12/24/2024 14:38:50 - INFO - __main__ -   测试:40

12/24/2024 14:38:50 - INFO - __main__ -   Success rate: 80.77%

12/24/2024 14:38:50 - INFO - __main__ -   Successful items count: 21

12/24/2024 14:38:50 - INFO - __main__ -   Total count: 26

12/24/2024 14:38:50 - INFO - __main__ -   Index: 40

Number of variable_names extracted:  33
Generating population40...
init SUCCESS!
Processing examples:  10%|█         | 41/400 [41:41<9:02:41, 90.70s/it]  12/24/2024 14:38:50 - INFO - __main__ -   测试:41

12/24/2024 14:38:50 - INFO - __main__ -   Success rate: 81.48%

12/24/2024 14:38:50 - INFO - __main__ -   Successful items count: 22

12/24/2024 14:38:50 - INFO - __main__ -   Total count: 27

12/24/2024 14:38:50 - INFO - __main__ -   Index: 41

12/24/2024 14:38:50 - INFO - __main__ -   测试:42

12/24/2024 14:38:50 - INFO - __main__ -   Attack failed!

12/24/2024 14:38:50 - INFO - __main__ -   测试:43

/data/yjx/cache/conda/envs/week1/lib/python3.9/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in divide
  dist = 1.0 - uv / math.sqrt(uu * vv)
12/24/2024 14:48:24 - INFO - __main__ -   Success rate: 78.57%

12/24/2024 14:48:24 - INFO - __main__ -   Successful items count: 22

12/24/2024 14:48:24 - INFO - __main__ -   Total count: 28

12/24/2024 14:48:24 - INFO - __main__ -   Index: 43

Number of variable_names extracted:  23
Generating population41...
init SUCCESS!
The original code is misclassified.
Number of variable_names extracted:  136
Generating population43...
	 0  --gap prob  0.0060172900557518005
	 1  --gap prob  0.05741935968399048
	 2  --gap prob  0.06946994364261627
	 3  --gap prob  0.06946994364261627
	 4  --gap prob  0.09612628817558289
	 5  --gap prob  0.09612628817558289
	 6  --gap prob  0.11819128692150116
	 7  --gap prob  0.14556272327899933
	 8  --gap prob  0.13875199854373932
	 9  --gap prob  0.13875199854373932
	 10  --gap prob  0.20184536278247833
	 11  --gap prob  0.21143101155757904
	 12  --gap prob  0.21143101155757904
	 13  --gap prob  0.21997664868831635
	 14  --gap prob  0.21997664868831635
	 15  --gap prob  0.2522241324186325
	 16  --gap prob  0.25806619226932526
	 17  --gap prob  0.2720954865217209
	 18  --gap prob  0.2720954865217209
	 19  --gap prob  0.26074422895908356
Changing code structure...
Processing examples:  11%|█         | 44/400 [51:15<13:54:57, 140.72s/it]12/24/2024 14:48:24 - INFO - __main__ -   测试:44

12/24/2024 14:54:26 - INFO - __main__ -   Success rate: 75.86%

12/24/2024 14:54:26 - INFO - __main__ -   Successful items count: 22

12/24/2024 14:54:26 - INFO - __main__ -   Total count: 29

12/24/2024 14:54:26 - INFO - __main__ -   Index: 44

Number of variable_names extracted:  19
Generating population44...
	 0  --gap prob  -0.0051850369200110435
	 1  --gap prob  -0.0051850369200110435
	 2  --gap prob  -0.0051850369200110435
	 3  --gap prob  -0.0051850369200110435
	 4  --gap prob  -0.0051850369200110435
	 5  --gap prob  -0.0051850369200110435
	 6  --gap prob  -0.0051850369200110435
	 7  --gap prob  -0.005159622058272362
	 8  --gap prob  -0.005159622058272362
	 9  --gap prob  -0.005159622058272362
	 10  --gap prob  -0.005159622058272362
	 11  --gap prob  -0.004864417016506195
	 12  --gap prob  -0.004864417016506195
	 13  --gap prob  -0.004864417016506195
	 14  --gap prob  -0.004864417016506195
	 15  --gap prob  0.012450369074940681
	 16  --gap prob  0.012450369074940681
	 17  --gap prob  0.012450369074940681
	 18  --gap prob  0.012450369074940681
	 19  --gap prob  0.0028667468577623367
Changing code structure...
Processing examples:  11%|█▏        | 45/400 [57:16<18:02:10, 182.90s/it]12/24/2024 14:54:26 - INFO - __main__ -   测试:45

Number of variable_names extracted:  50
Generating population45...
	 0  --gap prob  0.15008956
	 1  --gap prob  0.17352813
	 2  --gap prob  0.18482548
	 3  --gap prob  0.24785095
	 4  --gap prob  0.30741405
	 5  --gap prob  0.30741405
Processing examples:  11%|█▏        | 45/400 [59:17<7:47:47, 79.06s/it]  
Traceback (most recent call last):
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/test.py", line 177, in <module>
    main()
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/test.py", line 151, in main
    is_success, final_code, min_gap_prob = attacker.attack(
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/pso.py", line 671, in attack
    current_var_name = tmp_code_tokens[dim]
IndexError: list index out of range
