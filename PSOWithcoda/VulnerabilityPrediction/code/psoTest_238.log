Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at microsoft/codebert-base-mlm and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/run.py:112: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.examples = torch.load(cache_file_path)
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/test.py:105: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(output_dir))
Some weights of the model checkpoint at microsoft/codebert-base-mlm were not used when initializing RobertaForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing RobertaForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).

 cached_features_file:  ../dataset/codebert_cached_test_subs_0_400
400 400
Processing examples:   0%|          | 0/400 [00:00<?, ?it/s]12/25/2024 12:34:55 - INFO - __main__ -   测试:238

words:['USBDevice', '*', 'usb_host_device_open', '(', 'const', 'char', '*', 'devname', ')', '{', 'int', 'fd', '=', '-1', ',', 'ret', ';', 'USBHostDevice', '*', 'dev', '=', 'NULL', ';', 'struct', 'usbdevfs_connectinfo', 'ci', ';', 'char', 'buf', '[', '1024', ']', ';', 'int', 'bus_num', ',', 'addr', ';', 'char', 'product_name', '[', 'PRODUCT_NAME_SZ', ']', ';', 'dev', '=', 'qemu_mallocz', '(', 'sizeof', '(', 'USBHostDevice', ')', ')', ';', 'if', '(', '!', 'dev', ')', 'goto', 'fail', ';', '#ifdef', 'DEBUG_ISOCH', 'printf', '(', '"', '"', ',', 'devname', ')', ';', '#endif', 'if', '(', 'usb_host_find_device', '(', '&', 'bus_num', ',', '&', 'addr', ',', 'product_name', ',', 'sizeof', '(', 'product_name', ')', ',', 'devname', ')', '<', '0', ')', 'return', 'NULL', ';', 'snprintf', '(', 'buf', ',', 'sizeof', '(', 'buf', ')', ',', 'USBDEVFS_PATH', '"', '"', ',', 'bus_num', ',', 'addr', ')', ';', 'fd', '=', 'open', '(', 'buf', ',', 'O_RDWR', '|', 'O_NONBLOCK', ')', ';', 'if', '(', 'fd', '<', '0', ')', '{', 'perror', '(', 'buf', ')', ';', 'return', 'NULL', ';', '}', 'dev', '->', 'descr_len', '=', 'read', '(', 'fd', ',', 'dev', '->', 'descr', ',', 'sizeof', '(', 'dev', '->', 'descr', ')', ')', ';', 'if', '(', 'dev', '->', 'descr_len', '<=', '0', ')', '{', 'perror', '(', '"', '"', ')', ';', 'goto', 'fail', ';', '}', '#ifdef', 'DEBUG', '{', 'int', 'x', ';', 'printf', '(', '"', '"', ')', ';', 'for', '(', 'x', '=', '0', ';', 'x', '<', 'dev', '->', 'descr_len', ';', 'x', '++', ')', 'printf', '(', '"', '"', ',', 'dev', '->', 'descr', '[', 'x', ']', ')', ';', 'printf', '(', '"', '"', ')', ';', '}', '#endif', 'dev', '->', 'fd', '=', 'fd', ';', 'dev', '->', 'configuration', '=', '1', ';', 'if', '(', '!', 'usb_host_update_interfaces', '(', 'dev', ',', '1', ')', ')', 'goto', 'fail', ';', 'ret', '=', 'ioctl', '(', 'fd', ',', 'USBDEVFS_CONNECTINFO', ',', '&', 'ci', ')', ';', 'if', '(', 'ret', '<', '0', ')', '{', 'perror', '(', '"', '"', ')', ';', 'goto', 'fail', ';', '}', '#ifdef', 'DEBUG', 'printf', '(', '"', '"', ',', 'bus_num', ',', 'addr', ')', ';', '#endif', 'ret', '=', 'usb_linux_update_endp_table', '(', 'dev', ')', ';', 'if', '(', 'ret', ')', 'goto', 'fail', ';', 'if', '(', 'ci', '.', 'slow', ')', 'dev', '->', 'dev', '.', 'speed', '=', 'USB_SPEED_LOW', ';', 'else', 'dev', '->', 'dev', '.', 'speed', '=', 'USB_SPEED_HIGH', ';', 'dev', '->', 'dev', '.', 'handle_packet', '=', 'usb_generic_handle_packet', ';', 'dev', '->', 'dev', '.', 'handle_reset', '=', 'usb_host_handle_reset', ';', 'dev', '->', 'dev', '.', 'handle_control', '=', 'usb_host_handle_control', ';', 'dev', '->', 'dev', '.', 'handle_data', '=', 'usb_host_handle_data', ';', 'dev', '->', 'dev', '.', 'handle_destroy', '=', 'usb_host_handle_destroy', ';', 'if', '(', 'product_name', '[', '0', ']', '==', "'", "'", ')', 'snprintf', '(', 'dev', '->', 'dev', '.', 'devname', ',', 'sizeof', '(', 'dev', '->', 'dev', '.', 'devname', ')', ',', '"', '"', ',', 'devname', ')', ';', 'else', 'pstrcpy', '(', 'dev', '->', 'dev', '.', 'devname', ',', 'sizeof', '(', 'dev', '->', 'dev', '.', 'devname', ')', ',', 'product_name', ')', ';', '#ifdef', 'USE_ASYNCIO', 'sigemptyset', '(', '&', 'sigact', '.', 'sa_mask', ')', ';', 'sigact', '.', 'sa_sigaction', '=', 'isoch_done', ';', 'sigact', '.', 'sa_flags', '=', 'SA_SIGINFO', ';', 'sigact', '.', 'sa_restorer', '=', '0', ';', 'ret', '=', 'sigaction', '(', 'SIG_ISOCOMPLETE', ',', '&', 'sigact', ',', 'NULL', ')', ';', 'if', '(', 'ret', '<', '0', ')', '{', 'perror', '(', '"', '"', ')', ';', 'goto', 'fail', ';', '}', 'if', '(', 'pipe', '(', 'dev', '->', 'pipe_fds', ')', '<', '0', ')', '{', 'perror', '(', '"', '"', ')', ';', 'goto', 'fail', ';', '}', 'fcntl', '(', 'dev', '->', 'pipe_fds', '[', '0', ']', ',', 'F_SETFL', ',', 'O_NONBLOCK', '|', 'O_ASYNC', ')', ';', 'fcntl', '(', 'dev', '->', 'pipe_fds', '[', '1', ']', ',', 'F_SETFL', ',', 'O_NONBLOCK', ')', ';', 'qemu_set_fd_handler', '(', 'dev', '->', 'pipe_fds', '[', '0', ']', ',', 'urb_completion_pipe_read', ',', 'NULL', ',', 'dev', ')', ';', '#endif', 'dev', '->', 'urbs_ready', '=', '0', ';', 'return', '(', 'USBDevice', '*', ')', 'dev', ';', 'fail', ':', 'if', '(', 'dev', ')', 'qemu_free', '(', 'dev', ')', ';', 'close', '(', 'fd', ')', ';', 'return', 'NULL', ';', '}']
sub_words:['USB', 'Device', '*', 'usb', '_', 'host', '_', 'device', '_', 'open', '(', 'const', 'char', '*', 'dev', 'name', ')', '{', 'int', 'fd', '=', '-', '1', ',', 'ret', ';', 'USB', 'Host', 'Device', '*', 'dev', '=', 'NULL', ';', 'struct', 'usb', 'dev', 'fs', '_', 'connect', 'info', 'ci', ';', 'char', 'buf', '[', '1024', ']', ';', 'int', 'bus', '_', 'num', ',', 'addr', ';', 'char', 'product', '_', 'name', '[', 'PR', 'ODUCT', '_', 'NAME', '_', 'S', 'Z', ']', ';', 'dev', '=', 'q', 'em', 'u', '_', 'm', 'alloc', 'z', '(', 'size', 'of', '(', 'USB', 'Host', 'Device', ')', ')', ';', 'if', '(', '!', 'dev', ')', 'g', 'oto', 'fail', ';', '#', 'if', 'def', 'DEBUG', '_', 'ISO', 'CH', 'printf', '(', '"', '"', ',', 'dev', 'name', ')', ';', '#', 'endif', 'if', '(', 'usb', '_', 'host', '_', 'find', '_', 'device', '(', '&', 'bus', '_', 'num', ',', '&', 'addr', ',', 'product', '_', 'name', ',', 'size', 'of', '(', 'product', '_', 'name', ')', ',', 'dev', 'name', ')', '<', '0', ')', 'return', 'NULL', ';', 'sn', 'printf', '(', 'buf', ',', 'size', 'of', '(', 'buf', ')', ',', 'USB', 'DEV', 'FS', '_', 'PATH', '"', '"', ',', 'bus', '_', 'num', ',', 'addr', ')', ';', 'fd', '=', 'open', '(', 'buf', ',', 'O', '_', 'RD', 'WR', '|', 'O', '_', 'N', 'ON', 'BL', 'OCK', ')', ';', 'if', '(', 'fd', '<', '0', ')', '{', 'per', 'ror', '(', 'buf', ')', ';', 'return', 'NULL', ';', '}', 'dev', '->', 'desc', 'r', '_', 'len', '=', 'read', '(', 'fd', ',', 'dev', '->', 'desc', 'r', ',', 'size', 'of', '(', 'dev', '->', 'desc', 'r', ')', ')', ';', 'if', '(', 'dev', '->', 'desc', 'r', '_', 'len', '<', '=', '0', ')', '{', 'per', 'ror', '(', '"', '"', ')', ';', 'g', 'oto', 'fail', ';', '}', '#', 'if', 'def', 'DEBUG', '{', 'int', 'x', ';', 'printf', '(', '"', '"', ')', ';', 'for', '(', 'x', '=', '0', ';', 'x', '<', 'dev', '->', 'desc', 'r', '_', 'len', ';', 'x', '++', ')', 'printf', '(', '"', '"', ',', 'dev', '->', 'desc', 'r', '[', 'x', ']', ')', ';', 'printf', '(', '"', '"', ')', ';', '}', '#', 'endif', 'dev', '->', 'fd', '=', 'fd', ';', 'dev', '->', 'config', 'uration', '=', '1', ';', 'if', '(', '!', 'usb', '_', 'host', '_', 'update', '_', 'inter', 'faces', '(', 'dev', ',', '1', ')', ')', 'g', 'oto', 'fail', ';', 'ret', '=', 'io', 'ctl', '(', 'fd', ',', 'USB', 'DEV', 'FS', '_', 'CON', 'NECT', 'INFO', ',', '&', 'ci', ')', ';', 'if', '(', 'ret', '<', '0', ')', '{', 'per', 'ror', '(', '"', '"', ')', ';', 'g', 'oto', 'fail', ';', '}', '#', 'if', 'def', 'DEBUG', 'printf', '(', '"', '"', ',', 'bus', '_', 'num', ',', 'addr', ')', ';', '#', 'endif', 'ret', '=', 'usb', '_', 'linux', '_', 'update', '_', 'end', 'p', '_', 'table', '(', 'dev', ')', ';', 'if', '(', 'ret', ')', 'g', 'oto', 'fail', ';', 'if', '(', 'ci', '.', 'slow', ')', 'dev', '->', 'dev', '.', 'speed', '=', 'USB', '_', 'SP', 'EED', '_', 'L', 'OW', ';', 'else', 'dev', '->', 'dev', '.', 'speed', '=', 'USB', '_', 'SP', 'EED', '_', 'H', 'IGH', ';', 'dev', '->', 'dev', '.', 'handle', '_', 'pack', 'et', '=', 'usb', '_', 'generic', '_', 'handle', '_', 'pack', 'et', ';', 'dev', '->', 'dev', '.', 'handle', '_', 'reset', '=', 'usb', '_', 'host', '_', 'handle', '_', 'reset', ';', 'dev', '->', 'dev', '.', 'handle', '_', 'control', '=', 'usb', '_', 'host', '_', 'handle', '_', 'control', ';', 'dev', '->', 'dev', '.', 'handle', '_', 'data', '=', 'usb', '_', 'host', '_', 'handle', '_', 'data', ';', 'dev', '->', 'dev', '.', 'handle', '_', 'destroy', '=', 'usb', '_', 'host', '_', 'handle', '_', 'destroy', ';', 'if', '(', 'product', '_', 'name', '[', '0', ']', '==', "'", "'", ')', 'sn', 'printf', '(', 'dev', '->', 'dev', '.', 'dev', 'name', ',', 'size', 'of', '(', 'dev', '->', 'dev', '.', 'dev', 'name', ')', ',', '"', '"', ',', 'dev', 'name', ')', ';', 'else', 'p', 'str', 'c', 'py', '(', 'dev', '->', 'dev', '.', 'dev', 'name', ',', 'size', 'of', '(', 'dev', '->', 'dev', '.', 'dev', 'name', ')', ',', 'product', '_', 'name', ')', ';', '#', 'if', 'def', 'USE', '_', 'ASY', 'NC', 'IO', 's', 'ig', 'empt', 'ys', 'et', '(', '&', 's', 'ig', 'act', '.', 'sa', '_', 'mask', ')', ';', 's', 'ig', 'act', '.', 'sa', '_', 's', 'ig', 'action', '=', 'is', 'och', '_', 'done', ';', 's', 'ig', 'act', '.', 'sa', '_', 'flags', '=', 'SA', '_', 'S', 'IG', 'INFO', ';', 's', 'ig', 'act', '.', 'sa', '_', 'rest', 'orer', '=', '0', ';', 'ret', '=', 's', 'ig', 'action', '(', 'S', 'IG', '_', 'IS', 'OC', 'OM', 'PLE', 'TE', ',', '&', 's', 'ig', 'act', ',', 'NULL', ')', ';', 'if', '(', 'ret', '<', '0', ')', '{', 'per', 'ror', '(', '"', '"', ')', ';', 'g', 'oto', 'fail', ';', '}', 'if', '(', 'pipe', '(', 'dev', '->', 'pipe', '_', 'f', 'ds', ')', '<', '0', ')', '{', 'per', 'ror', '(', '"', '"', ')', ';', 'g', 'oto', 'fail', ';', '}', 'fc', 'nt', 'l', '(', 'dev', '->', 'pipe', '_', 'f', 'ds', '[', '0', ']', ',', 'F', '_', 'SET', 'FL', ',', 'O', '_', 'N', 'ON', 'BL', 'OCK', '|', 'O', '_', 'ASY', 'NC', ')', ';', 'fc', 'nt', 'l', '(', 'dev', '->', 'pipe', '_', 'f', 'ds', '[', '1', ']', ',', 'F', '_', 'SET', 'FL', ',', 'O', '_', 'N', 'ON', 'BL', 'OCK', ')', ';', 'q', 'em', 'u', '_', 'set', '_', 'fd', '_', 'handler', '(', 'dev', '->', 'pipe', '_', 'f', 'ds', '[', '0', ']', ',', 'urb', '_', 'com', 'pletion', '_', 'pipe', '_', 'read', ',', 'NULL', ',', 'dev', ')', ';', '#', 'endif', 'dev', '->', 'ur', 'bs', '_', 'ready', '=', '0', ';', 'return', '(', 'USB', 'Device', '*', ')', 'dev', ';', 'fail', ':', 'if', '(', 'dev', ')', 'q', 'em', 'u', '_', 'free', '(', 'dev', ')', ';', 'close', '(', 'fd', ')', ';', 'return', 'NULL', ';', '}']
keys:[[0, 2], [2, 3], [3, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 23], [23, 24], [24, 25], [25, 26], [26, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 60], [60, 61], [61, 68], [68, 69], [69, 70], [70, 71], [71, 72], [72, 79], [79, 80], [80, 82], [82, 83], [83, 86], [86, 87], [87, 88], [88, 89], [89, 90], [90, 91], [91, 92], [92, 93], [93, 94], [94, 96], [96, 97], [97, 98], [98, 101], [101, 105], [105, 106], [106, 107], [107, 108], [108, 109], [109, 110], [110, 112], [112, 113], [113, 114], [114, 116], [116, 117], [117, 118], [118, 125], [125, 126], [126, 127], [127, 130], [130, 131], [131, 132], [132, 133], [133, 134], [134, 137], [137, 138], [138, 140], [140, 141], [141, 144], [144, 145], [145, 146], [146, 148], [148, 149], [149, 150], [150, 151], [151, 152], [152, 153], [153, 154], [154, 155], [155, 157], [157, 158], [158, 159], [159, 160], [160, 162], [162, 163], [163, 164], [164, 165], [165, 166], [166, 171], [171, 172], [172, 173], [173, 174], [174, 177], [177, 178], [178, 179], [179, 180], [180, 181], [181, 182], [182, 183], [183, 184], [184, 185], [185, 186], [186, 187], [187, 191], [191, 192], [192, 198], [198, 199], [199, 200], [200, 201], [201, 202], [202, 203], [203, 204], [204, 205], [205, 206], [206, 207], [207, 209], [209, 210], [210, 211], [211, 212], [212, 213], [213, 214], [214, 215], [215, 216], [216, 217], [217, 218], [218, 219], [219, 223], [223, 224], [224, 225], [225, 226], [226, 227], [227, 228], [228, 229], [229, 230], [230, 232], [232, 233], [233, 235], [235, 236], [236, 237], [237, 238], [238, 240], [240, 241], [241, 242], [242, 243], [243, 244], [244, 245], [245, 246], [246, 247], [247, 251], [251, 253], [253, 254], [254, 255], [255, 256], [256, 258], [258, 259], [259, 260], [260, 261], [261, 262], [262, 263], [263, 265], [265, 266], [266, 267], [267, 268], [268, 271], [271, 272], [272, 273], [273, 274], [274, 275], [275, 276], [276, 277], [277, 278], [278, 279], [279, 280], [280, 281], [281, 282], [282, 283], [283, 284], [284, 285], [285, 286], [286, 287], [287, 288], [288, 289], [289, 290], [290, 291], [291, 292], [292, 296], [296, 297], [297, 298], [298, 299], [299, 300], [300, 301], [301, 302], [302, 303], [303, 304], [304, 305], [305, 306], [306, 307], [307, 309], [309, 310], [310, 311], [311, 312], [312, 313], [313, 314], [314, 315], [315, 316], [316, 317], [317, 318], [318, 319], [319, 320], [320, 321], [321, 323], [323, 324], [324, 325], [325, 326], [326, 327], [327, 328], [328, 329], [329, 330], [330, 331], [331, 333], [333, 334], [334, 335], [335, 336], [336, 337], [337, 338], [338, 339], [339, 347], [347, 348], [348, 349], [349, 350], [350, 351], [351, 352], [352, 353], [353, 355], [355, 356], [356, 357], [357, 358], [358, 359], [359, 361], [361, 362], [362, 363], [363, 364], [364, 371], [371, 372], [372, 373], [373, 374], [374, 375], [375, 376], [376, 377], [377, 378], [378, 379], [379, 380], [380, 381], [381, 382], [382, 383], [383, 385], [385, 386], [386, 387], [387, 388], [388, 389], [389, 390], [390, 392], [392, 393], [393, 394], [394, 395], [395, 398], [398, 399], [399, 400], [400, 401], [401, 402], [402, 403], [403, 404], [404, 407], [407, 408], [408, 409], [409, 410], [410, 411], [411, 413], [413, 414], [414, 415], [415, 425], [425, 426], [426, 427], [427, 428], [428, 429], [429, 430], [430, 431], [431, 432], [432, 433], [433, 435], [435, 436], [436, 437], [437, 438], [438, 439], [439, 440], [440, 441], [441, 442], [442, 443], [443, 444], [444, 445], [445, 446], [446, 447], [447, 448], [448, 449], [449, 456], [456, 457], [457, 458], [458, 459], [459, 460], [460, 461], [461, 462], [462, 463], [463, 464], [464, 471], [471, 472], [472, 473], [473, 474], [474, 475], [475, 476], [476, 480], [480, 481], [481, 489], [489, 490], [490, 491], [491, 492], [492, 493], [493, 494], [494, 497], [497, 498], [498, 505], [505, 506], [506, 507], [507, 508], [508, 509], [509, 510], [510, 513], [513, 514], [514, 521], [521, 522], [522, 523], [523, 524], [524, 525], [525, 526], [526, 529], [529, 530], [530, 537], [537, 538], [538, 539], [539, 540], [540, 541], [541, 542], [542, 545], [545, 546], [546, 553], [553, 554], [554, 555], [555, 556], [556, 559], [559, 560], [560, 561], [561, 562], [562, 563], [563, 564], [564, 565], [565, 566], [566, 568], [568, 569], [569, 570], [570, 571], [571, 572], [572, 573], [573, 575], [575, 576], [576, 578], [578, 579], [579, 580], [580, 581], [581, 582], [582, 583], [583, 585], [585, 586], [586, 587], [587, 588], [588, 589], [589, 590], [590, 592], [592, 593], [593, 594], [594, 595], [595, 599], [599, 600], [600, 601], [601, 602], [602, 603], [603, 604], [604, 606], [606, 607], [607, 609], [609, 610], [610, 611], [611, 612], [612, 613], [613, 614], [614, 616], [616, 617], [617, 618], [618, 621], [621, 622], [622, 623], [623, 626], [626, 631], [631, 636], [636, 637], [637, 638], [638, 641], [641, 642], [642, 645], [645, 646], [646, 647], [647, 650], [650, 651], [651, 656], [656, 657], [657, 661], [661, 662], [662, 665], [665, 666], [666, 669], [669, 670], [670, 675], [675, 676], [676, 679], [679, 680], [680, 684], [684, 685], [685, 686], [686, 687], [687, 688], [688, 689], [689, 692], [692, 693], [693, 701], [701, 702], [702, 703], [703, 706], [706, 707], [707, 708], [708, 709], [709, 710], [710, 711], [711, 712], [712, 713], [713, 714], [714, 715], [715, 716], [716, 717], [717, 719], [719, 720], [720, 721], [721, 722], [722, 723], [723, 724], [724, 726], [726, 727], [727, 728], [728, 729], [729, 730], [730, 731], [731, 732], [732, 733], [733, 734], [734, 735], [735, 739], [739, 740], [740, 741], [741, 742], [742, 743], [743, 744], [744, 746], [746, 747], [747, 748], [748, 749], [749, 750], [750, 751], [751, 753], [753, 754], [754, 755], [755, 756], [756, 759], [759, 760], [760, 761], [761, 762], [762, 766], [766, 767], [767, 768], [768, 769], [769, 770], [770, 774], [774, 775], [775, 781], [781, 782], [782, 786], [786, 787], [787, 788], [788, 791], [791, 792], [792, 793], [793, 794], [794, 798], [798, 799], [799, 800], [800, 801], [801, 802], [802, 806], [806, 807], [807, 813], [813, 814], [814, 815], [815, 824], [824, 825], [825, 826], [826, 827], [827, 831], [831, 832], [832, 833], [833, 834], [834, 835], [835, 843], [843, 844], [844, 845], [845, 846], [846, 847], [847, 848], [848, 849], [849, 851], [851, 852], [852, 853], [853, 857], [857, 858], [858, 859], [859, 860], [860, 861], [861, 862], [862, 864], [864, 865], [865, 866], [866, 867], [867, 868], [868, 869], [869, 870], [870, 871], [871, 872], [872, 873], [873, 874], [874, 879], [879, 880], [880, 881], [881, 882], [882, 883], [883, 884], [884, 885], [885, 886], [886, 887], [887, 888], [888, 889], [889, 890], [890, 891], [891, 892]]/data/yjx/cache/conda/envs/week1/lib/python3.9/site-packages/scipy/spatial/distance.py:647: RuntimeWarning: invalid value encountered in divide
  dist = 1.0 - uv / math.sqrt(uu * vv)
12/25/2024 12:34:55 - INFO - __main__ -   Success rate: 100.00%

12/25/2024 12:34:55 - INFO - __main__ -   Successful items count: 1

12/25/2024 12:34:55 - INFO - __main__ -   Total count: 1

12/25/2024 12:34:55 - INFO - __main__ -   Index: 238


names_positions_dict:{'usb_host_device_open': [2], 'devname': [7, 69, 90, 390, 398, 404, 414, 422], 'ret': [15, 255, 269, 297, 306, 456, 470], 'dev': [19, 44, 57, 143, 151, 157, 165, 202, 214, 230, 236, 247, 301, 317, 319, 326, 328, 334, 336, 342, 344, 350, 352, 358, 360, 366, 368, 386, 388, 394, 396, 410, 412, 418, 420, 489, 509, 525, 539, 550, 554, 565, 571, 575], 'ci': [25, 264, 313], 'buf': [28, 100, 104, 120, 136], 'bus_num': [34, 78, 111, 291], 'addr': [36, 81, 113, 293], 'product_name': [39, 83, 87, 376, 425], 'x': [186, 196, 200, 206, 218]}
pos_dict:[[2], [7, 69, 90, 390, 398, 404, 414, 422], [15, 255, 269, 297, 306, 456, 470], [19, 44, 57, 143, 151, 157, 165, 202, 214, 230, 236, 247, 301, 317, 319, 326, 328, 334, 336, 342, 344, 350, 352, 358, 360, 366, 368, 386, 388, 394, 396, 410, 412, 418, 420, 489, 509, 525, 539, 550, 554, 565, 571, 575], [25, 264, 313], [28, 100, 104, 120, 136], [34, 78, 111, 291], [36, 81, 113, 293], [39, 83, 87, 376, 425], [186, 196, 200, 206, 218]]
Number of variable_names extracted:  10
生成前的particles: [['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x']]
Generating population238...
init SUCCESS!
生成之后particles: [['usb_host_device__open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devnames', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'Ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'Dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'li', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'alloc', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_nu', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'address', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_names', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'yx'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x'], ['usb_host_device_open', 'devname', 'ret', 'dev', 'ci', 'buf', 'bus_num', 'addr', 'product_name', 'x']]
Processing examples:  60%|█████▉    | 239/400 [00:00<00:00, 682.28it/s]Processing examples: 100%|██████████| 400/400 [00:00<00:00, 1111.65it/s]
