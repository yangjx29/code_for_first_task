
test
test
test
test
test
test
test
test
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
x = 0;
before:
num:1
middle:
after:x = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;

num:3
middle:
after:
test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;

num:3
middle:
after:j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;

num:3
middle:
after:if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
flag_is_true = false;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
flag_is_true = false;

num:4
middle:
after:if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
flag_is_true = false;
j01MfVBcN = 0;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;

num:3
middle:
after:flag_is_true = false;
j01MfVBcN = 0;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;

num:6
middle:
after:if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;
if (!((718 - 718) != alpha) || !((963 - 963) != bdtzRl))
    return;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;

num:3
middle:
after:if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;
if (!((718 - 718) != alpha) || !((963 - 963) != bdtzRl))
    return;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (0) {
    char *buffer = (char *) malloc (64 * sizeof (char));
    char *input;
    strcpy (buffer, input);
}
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;
if (!((718 - 718) != alpha) || !((963 - 963) != bdtzRl))
    return;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
before:if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (0) {
    char *buffer = (char *) malloc (64 * sizeof (char));
    char *input;
    strcpy (buffer, input);
}
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;

num:7
middle:
after:if (!((718 - 718) != alpha) || !((963 - 963) != bdtzRl))
    return;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;

test
----------
test
THE STATEMENT IS:
if (!(x * (x - 1) % 2 == 0)) {
}
x = 0;
if (0) {
    char *buffer = (char *) malloc (64 * sizeof (char));
    char *input;
    strcpy (buffer, input);
}
if (flag_is_true) {
    char *clivMpKPq = (char *) malloc (64 * sizeof (char));
    char *wlVEZdqvAW = strcat (clivMpKPq, wlVEZdqvAW);
}
flag_is_true = false;
j01MfVBcN = 0;
if ((608 - 604) > LqyaFcp[(585 - 585)]) {
    lmuHvQyqdL bHv3hz6P0 [(231 - 227)];
    bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
    bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
    bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
    bHv3hz6P0[(276 - 273)] = tc0_table[FMfFoQt6p][LqyaFcp[(675 - 672)]] + 1;
    zGncfZ0v8Eg->h264dsp.h264_h_loop_filter_chroma (meheader_leHtec_nbldec_nam, Ge6ASDHbs7vm, alpha, bdtzRl, bHv3hz6P0);
}
else {
    zGncfZ0v8Eg->h264dsp.h264_h_loop_filter_chroma_intra (meheader_leHtec_nbldec_nam, Ge6ASDHbs7vm, alpha, bdtzRl);
}
if (!((718 - 718) != alpha) || !((963 - 963) != bdtzRl))
    return;
if (!(!(0 != j01MfVBcN * (j01MfVBcN - 1) % 2))) {
    int cIQk9eVhPFs;
    int *VqR2cJw8;
    cIQk9eVhPFs = 0;
    while (cIQk9eVhPFs < 10) {
        cIQk9eVhPFs = cIQk9eVhPFs + 1;
        if (!(9 != cIQk9eVhPFs))
            VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
        break;
    }
}
j01MfVBcN = 0;
final
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test
----------
test
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
cIQk9eVhPFs = 0;
before:
num:1
middle:
after:cIQk9eVhPFs = 0;

test
----------
test
THE STATEMENT IS:
while (cIQk9eVhPFs < 10) {
    cIQk9eVhPFs = cIQk9eVhPFs + 1;
    if (!(9 != cIQk9eVhPFs))
        VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
    break;
}
cIQk9eVhPFs = 0;
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
cIQk9eVhPFs = cIQk9eVhPFs + 1;
before:
num:1
middle:
after:cIQk9eVhPFs = cIQk9eVhPFs + 1;

test
----------
test
THE STATEMENT IS:
if (!(9 != cIQk9eVhPFs))
    VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
cIQk9eVhPFs = cIQk9eVhPFs + 1;
----------
test
THE STATEMENT IS:
break;
if (!(9 != cIQk9eVhPFs))
    VqR2cJw8[cIQk9eVhPFs] = cIQk9eVhPFs;
cIQk9eVhPFs = cIQk9eVhPFs + 1;
final
test1
test1
test1
test
----------
test
test
final
test
----------
test
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
strcpy (buffer, input);
final
test1
test
----------
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
before:
num:1
middle:
after:bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);

test
----------
test
THE STATEMENT IS:
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
before:
num:1
middle:
after:bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);

test
----------
test
THE STATEMENT IS:
bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
before:
num:1
middle:
after:bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);

test
----------
test
THE STATEMENT IS:
bHv3hz6P0[(276 - 273)] = tc0_table[FMfFoQt6p][LqyaFcp[(675 - 672)]] + 1;
bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
before:
num:1
middle:
after:bHv3hz6P0[(276 - 273)] = tc0_table[FMfFoQt6p][LqyaFcp[(675 - 672)]] + 1;
bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);

test
----------
test
THE STATEMENT IS:
zGncfZ0v8Eg->h264dsp.h264_h_loop_filter_chroma (meheader_leHtec_nbldec_nam, Ge6ASDHbs7vm, alpha, bdtzRl, bHv3hz6P0);
bHv3hz6P0[(276 - 273)] = tc0_table[FMfFoQt6p][LqyaFcp[(675 - 672)]] + 1;
bHv3hz6P0[(169 - 167)] = tc0_table[FMfFoQt6p][LqyaFcp[(533 - 531)]] + 1;
bHv3hz6P0[(934 - 933)] = tc0_table[FMfFoQt6p][LqyaFcp[(401 - 400)]] + (654 - 653);
bHv3hz6P0[(246 - 246)] = tc0_table[FMfFoQt6p][LqyaFcp[(69 - 69)]] + (982 - 981);
final
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
zGncfZ0v8Eg->h264dsp.h264_h_loop_filter_chroma_intra (meheader_leHtec_nbldec_nam, Ge6ASDHbs7vm, alpha, bdtzRl);
final
test1
test
----------
THE FUNCNAME IS:gbvR3n meheader_leHtec_nbldec_nam zGncfZ0v8Eg
THE CODE OF LINE IS:42

THE OPERATOR IS:1
THE RENAME COUNT IS:25
THE CHANGE STATEMENT COUNT IS:-1
THE NEWERS STATEMENT COUNT IS:-1

THE OPERATOR IS:2
THE FOR COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:3
THE WHILE COUNT IS:1
THE CHANGE STATEMENT COUNT IS:1
THE NEWERS STATEMENT COUNT IS:1

THE OPERATOR IS:4
THE DO WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:5
THE IFELSEIF COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:6
THE IFELSE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:7
THE SWITCH COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:8
THE LOGICAL OPERATOR IS:7
THE CHANGE STATEMENT COUNT IS:7
THE NEWERS STATEMENT COUNT IS:7

THE OPERATOR IS:9
THE SELFINCREMENT COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:10
THE INCREMENTASSIGN COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:11
THE CONSTANT IS:50
THE CHANGE STATEMENT COUNT IS:50
THE NEWERS STATEMENT COUNT IS:50

THE OPERATOR IS:12
THE DECL COUNT IS:13
THE CHANGE STATEMENT COUNT IS:6
THE NEWERS STATEMENT COUNT IS:6

THE OPERATOR IS:13
THE JUNKCODE COUNT IS:7
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:14
THE EXCHANGE CODE COUNT IS:42
THE CHANGE STATEMENT COUNT IS:18
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:15
THE DELETE CODE COUNT IS:42
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

