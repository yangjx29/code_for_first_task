
test
test
test
test
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:s->state = 1;

num:2
middle:
after:if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:s->state = 1;

num:2
middle:
after:bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:s->state = 1;

num:2
middle:
after:if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:s->state = 1;

num:2
middle:
after:bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;

num:4
middle:
after:if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
s->align = qemu_opt_get_size (opts, "align", 0);
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:s->align = qemu_opt_get_size (opts, "align", 0);
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
if (s->align && (s->align >= INT_MAX || !is_power_of_2 (s->align))) {
    error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
    goto out;
}
s->align = qemu_opt_get_size (opts, "align", 0);
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
before:
num:1
middle:
after:if (s->align && (s->align >= INT_MAX || !is_power_of_2 (s->align))) {
    error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
    goto out;
}
s->align = qemu_opt_get_size (opts, "align", 0);
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);

test
----------
test
THE STATEMENT IS:
ret = 0;
if (s->align && (s->align >= INT_MAX || !is_power_of_2 (s->align))) {
    error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
    goto out;
}
s->align = qemu_opt_get_size (opts, "align", 0);
s->state = 1;
bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
ret = -EINVAL;
if (local_err) {
    ret = -EINVAL;
    error_propagate (errp, local_err);
    goto out;
}
bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
if (ret) {
    goto out;
}
ret = read_config (s, s->config_file, options, errp);
s->config_file = g_strdup (qemu_opt_get (opts, "config"));
if (local_err) {
    error_propagate (errp, local_err);
    ret = -EINVAL;
    goto out;
}
qemu_opts_absorb_qdict (opts, options, &local_err);
opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
----------
test
THE STATEMENT IS:
out :
    if (ret < 0) {
        g_free (s->config_file);
    }
    ret = 0;
    if (s->align && (s->align >= INT_MAX || !is_power_of_2 (s->align))) {
        error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
        goto out;
    }
    s->align = qemu_opt_get_size (opts, "align", 0);
    s->state = 1;
    bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
    bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
    ret = -EINVAL;
    if (local_err) {
        ret = -EINVAL;
        error_propagate (errp, local_err);
        goto out;
    }
    bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
    if (ret) {
        goto out;
    }
    ret = read_config (s, s->config_file, options, errp);
    s->config_file = g_strdup (qemu_opt_get (opts, "config"));
    if (local_err) {
        error_propagate (errp, local_err);
        ret = -EINVAL;
        goto out;
    }
    qemu_opts_absorb_qdict (opts, options, &local_err);
    opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
----------
test
THE STATEMENT IS:
return ret;
out :
    if (ret < 0) {
        g_free (s->config_file);
    }
    ret = 0;
    if (s->align && (s->align >= INT_MAX || !is_power_of_2 (s->align))) {
        error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
        goto out;
    }
    s->align = qemu_opt_get_size (opts, "align", 0);
    s->state = 1;
    bs->supported_zero_flags = (BDRV_REQ_FUA | BDRV_REQ_MAY_UNMAP) & bs->file->bs->supported_zero_flags;
    bs->supported_write_flags = BDRV_REQ_FUA &bs->file->bs->supported_write_flags;
    ret = -EINVAL;
    if (local_err) {
        ret = -EINVAL;
        error_propagate (errp, local_err);
        goto out;
    }
    bs->file = bdrv_open_child (qemu_opt_get (opts, "x-image"), options, "image", bs, &child_file, false, &local_err);
    if (ret) {
        goto out;
    }
    ret = read_config (s, s->config_file, options, errp);
    s->config_file = g_strdup (qemu_opt_get (opts, "config"));
    if (local_err) {
        error_propagate (errp, local_err);
        ret = -EINVAL;
        goto out;
    }
    qemu_opts_absorb_qdict (opts, options, &local_err);
    opts = qemu_opts_create (&runtime_opts, NULL, 0, &error_abort);
final
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
error_propagate (errp, local_err);
before:error_propagate (errp, local_err);

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
error_propagate (errp, local_err);
ret = -EINVAL;
before:error_propagate (errp, local_err);
ret = -EINVAL;

num:3
middle:
after:
test
----------
test
THE STATEMENT IS:
error_propagate (errp, local_err);
ret = -EINVAL;
goto out;
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
goto out;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = -EINVAL;
before:ret = -EINVAL;

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = -EINVAL;
error_propagate (errp, local_err);
before:ret = -EINVAL;
error_propagate (errp, local_err);

num:3
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = -EINVAL;
error_propagate (errp, local_err);
goto out;
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
before:error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
error_setg (errp, "Cannot meet constraints with align %" PRIu64, s->align);
goto out;
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
g_free (s->config_file);
final
test1
test
----------
THE FUNCNAME IS:blkdebug_open bs options errp
THE CODE OF LINE IS:33

THE OPERATOR IS:1
THE RENAME COUNT IS:13
THE CHANGE STATEMENT COUNT IS:-1
THE NEWERS STATEMENT COUNT IS:-1

THE OPERATOR IS:2
THE FOR COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:3
THE WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:4
THE DO WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:5
THE IFELSEIF COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:6
THE IFELSE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:7
THE SWITCH COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:8
THE LOGICAL OPERATOR IS:2
THE CHANGE STATEMENT COUNT IS:2
THE NEWERS STATEMENT COUNT IS:2

THE OPERATOR IS:9
THE SELFINCREMENT COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:10
THE INCREMENTASSIGN COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:11
THE CONSTANT IS:5
THE CHANGE STATEMENT COUNT IS:5
THE NEWERS STATEMENT COUNT IS:5

THE OPERATOR IS:12
THE DECL COUNT IS:4
THE CHANGE STATEMENT COUNT IS:3
THE NEWERS STATEMENT COUNT IS:3

THE OPERATOR IS:13
THE JUNKCODE COUNT IS:6
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:14
THE EXCHANGE CODE COUNT IS:33
THE CHANGE STATEMENT COUNT IS:14
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:15
THE DELETE CODE COUNT IS:33
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

