
test
test
test
test
test
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    if (0) {
        return 0;
    }
}
before:
num:1
middle:
after:{
    if (0) {
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
before:
num:1
middle:
after:{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
if (avpkt->size) {
    if (avpkt->buf) {
        buf = av_buffer_ref (avpkt->buf);
        size = avpkt->size;
        data = avpkt->data;
    }
    else {
        buf = av_buffer_alloc (avpkt->size);
        if (buf) {
            memcpy (buf->data, avpkt->data, avpkt->size);
            size = buf->size;
            data = buf->data;
        }
    }
    if (!buf) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    if (!is_extradata)
        ctx->packets_sent++;
}
else if (!ctx->packets_sent) {
    ctx->eos_sent = 1;
    ctx->eos_received = 1;
    goto done;
}
else
    ;
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
before:
num:1
middle:
after:if (avpkt->size) {
    if (avpkt->buf) {
        buf = av_buffer_ref (avpkt->buf);
        size = avpkt->size;
        data = avpkt->data;
    }
    else {
        buf = av_buffer_alloc (avpkt->size);
        if (buf) {
            memcpy (buf->data, avpkt->data, avpkt->size);
            size = buf->size;
            data = buf->data;
        }
    }
    if (!buf) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    if (!is_extradata)
        ctx->packets_sent++;
}
else if (!ctx->packets_sent) {
    ctx->eos_sent = 1;
    ctx->eos_received = 1;
    goto done;
}
else
    ;
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
start = data;
if (avpkt->size) {
    if (avpkt->buf) {
        buf = av_buffer_ref (avpkt->buf);
        size = avpkt->size;
        data = avpkt->data;
    }
    else {
        buf = av_buffer_alloc (avpkt->size);
        if (buf) {
            memcpy (buf->data, avpkt->data, avpkt->size);
            size = buf->size;
            data = buf->data;
        }
    }
    if (!buf) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    if (!is_extradata)
        ctx->packets_sent++;
}
else if (!ctx->packets_sent) {
    ctx->eos_sent = 1;
    ctx->eos_received = 1;
    goto done;
}
else
    ;
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
before:
num:1
middle:
after:start = data;
if (avpkt->size) {
    if (avpkt->buf) {
        buf = av_buffer_ref (avpkt->buf);
        size = avpkt->size;
        data = avpkt->data;
    }
    else {
        buf = av_buffer_alloc (avpkt->size);
        if (buf) {
            memcpy (buf->data, avpkt->data, avpkt->size);
            size = buf->size;
            data = buf->data;
        }
    }
    if (!buf) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    if (!is_extradata)
        ctx->packets_sent++;
}
else if (!ctx->packets_sent) {
    ctx->eos_sent = 1;
    ctx->eos_received = 1;
    goto done;
}
else
    ;
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
do {
    FFBufferEntry *buffer = av_mallocz (sizeof (*buffer));
    if (!buffer) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    buffer->data = data;
    buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
    if (is_extradata)
        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
    if (data == start)
        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
    data += buffer->length;
    size -= buffer->length;
    buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
    buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
    if (!size)
        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
    if (!buffer->length) {
        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
        ctx->eos_sent = 1;
    }
    if (buf) {
        buffer->ref = av_buffer_ref (buf);
        if (!buffer->ref) {
            av_free (buffer);
            ret = AVERROR (ENOMEM);
            goto done;
        }
    }
    if (!ctx->waiting_buffers)
        ctx->waiting_buffers = buffer;
    if (ctx->waiting_buffers_tail)
        ctx->waiting_buffers_tail->next = buffer;
    ctx->waiting_buffers_tail = buffer;
}
while (size);
start = data;
if (avpkt->size) {
    if (avpkt->buf) {
        buf = av_buffer_ref (avpkt->buf);
        size = avpkt->size;
        data = avpkt->data;
    }
    else {
        buf = av_buffer_alloc (avpkt->size);
        if (buf) {
            memcpy (buf->data, avpkt->data, avpkt->size);
            size = buf->size;
            data = buf->data;
        }
    }
    if (!buf) {
        ret = AVERROR (ENOMEM);
        goto done;
    }
    if (!is_extradata)
        ctx->packets_sent++;
}
else if (!ctx->packets_sent) {
    ctx->eos_sent = 1;
    ctx->eos_received = 1;
    goto done;
}
else
    ;
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
----------
test
THE STATEMENT IS:
done :
    av_buffer_unref (&buf);
    do {
        FFBufferEntry *buffer = av_mallocz (sizeof (*buffer));
        if (!buffer) {
            ret = AVERROR (ENOMEM);
            goto done;
        }
        buffer->data = data;
        buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
        if (is_extradata)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
        if (data == start)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
        data += buffer->length;
        size -= buffer->length;
        buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
        buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
        if (!size)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
        if (!buffer->length) {
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
            ctx->eos_sent = 1;
        }
        if (buf) {
            buffer->ref = av_buffer_ref (buf);
            if (!buffer->ref) {
                av_free (buffer);
                ret = AVERROR (ENOMEM);
                goto done;
            }
        }
        if (!ctx->waiting_buffers)
            ctx->waiting_buffers = buffer;
        if (ctx->waiting_buffers_tail)
            ctx->waiting_buffers_tail->next = buffer;
        ctx->waiting_buffers_tail = buffer;
    }
    while (size);
    start = data;
    if (avpkt->size) {
        if (avpkt->buf) {
            buf = av_buffer_ref (avpkt->buf);
            size = avpkt->size;
            data = avpkt->data;
        }
        else {
            buf = av_buffer_alloc (avpkt->size);
            if (buf) {
                memcpy (buf->data, avpkt->data, avpkt->size);
                size = buf->size;
                data = buf->data;
            }
        }
        if (!buf) {
            ret = AVERROR (ENOMEM);
            goto done;
        }
        if (!is_extradata)
            ctx->packets_sent++;
    }
    else if (!ctx->packets_sent) {
        ctx->eos_sent = 1;
        ctx->eos_received = 1;
        goto done;
    }
    else
        ;
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
----------
test
THE STATEMENT IS:
return ret;
done :
    av_buffer_unref (&buf);
    do {
        FFBufferEntry *buffer = av_mallocz (sizeof (*buffer));
        if (!buffer) {
            ret = AVERROR (ENOMEM);
            goto done;
        }
        buffer->data = data;
        buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
        if (is_extradata)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
        if (data == start)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
        data += buffer->length;
        size -= buffer->length;
        buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
        buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
        if (!size)
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
        if (!buffer->length) {
            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
            ctx->eos_sent = 1;
        }
        if (buf) {
            buffer->ref = av_buffer_ref (buf);
            if (!buffer->ref) {
                av_free (buffer);
                ret = AVERROR (ENOMEM);
                goto done;
            }
        }
        if (!ctx->waiting_buffers)
            ctx->waiting_buffers = buffer;
        if (ctx->waiting_buffers_tail)
            ctx->waiting_buffers_tail->next = buffer;
        ctx->waiting_buffers_tail = buffer;
    }
    while (size);
    start = data;
    if (avpkt->size) {
        if (avpkt->buf) {
            buf = av_buffer_ref (avpkt->buf);
            size = avpkt->size;
            data = avpkt->data;
        }
        else {
            buf = av_buffer_alloc (avpkt->size);
            if (buf) {
                memcpy (buf->data, avpkt->data, avpkt->size);
                size = buf->size;
                data = buf->data;
            }
        }
        if (!buf) {
            ret = AVERROR (ENOMEM);
            goto done;
        }
        if (!is_extradata)
            ctx->packets_sent++;
    }
    else if (!ctx->packets_sent) {
        ctx->eos_sent = 1;
        ctx->eos_received = 1;
        goto done;
    }
    else
        ;
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
final
test1
test1
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (avpkt->buf) {
    buf = av_buffer_ref (avpkt->buf);
    size = avpkt->size;
    data = avpkt->data;
}
else {
    buf = av_buffer_alloc (avpkt->size);
    if (buf) {
        memcpy (buf->data, avpkt->data, avpkt->size);
        size = buf->size;
        data = buf->data;
    }
}
before:
num:1
middle:
after:if (avpkt->buf) {
    buf = av_buffer_ref (avpkt->buf);
    size = avpkt->size;
    data = avpkt->data;
}
else {
    buf = av_buffer_alloc (avpkt->size);
    if (buf) {
        memcpy (buf->data, avpkt->data, avpkt->size);
        size = buf->size;
        data = buf->data;
    }
}

test
----------
test
THE STATEMENT IS:
if (!buf) {
    ret = AVERROR (ENOMEM);
    goto done;
}
if (avpkt->buf) {
    buf = av_buffer_ref (avpkt->buf);
    size = avpkt->size;
    data = avpkt->data;
}
else {
    buf = av_buffer_alloc (avpkt->size);
    if (buf) {
        memcpy (buf->data, avpkt->data, avpkt->size);
        size = buf->size;
        data = buf->data;
    }
}
before:
num:1
middle:
after:if (!buf) {
    ret = AVERROR (ENOMEM);
    goto done;
}
if (avpkt->buf) {
    buf = av_buffer_ref (avpkt->buf);
    size = avpkt->size;
    data = avpkt->data;
}
else {
    buf = av_buffer_alloc (avpkt->size);
    if (buf) {
        memcpy (buf->data, avpkt->data, avpkt->size);
        size = buf->size;
        data = buf->data;
    }
}

test
----------
test
THE STATEMENT IS:
if (!is_extradata)
    ctx->packets_sent++;
if (!buf) {
    ret = AVERROR (ENOMEM);
    goto done;
}
if (avpkt->buf) {
    buf = av_buffer_ref (avpkt->buf);
    size = avpkt->size;
    data = avpkt->data;
}
else {
    buf = av_buffer_alloc (avpkt->size);
    if (buf) {
        memcpy (buf->data, avpkt->data, avpkt->size);
        size = buf->size;
        data = buf->data;
    }
}
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
buf = av_buffer_ref (avpkt->buf);
before:
num:1
middle:
after:buf = av_buffer_ref (avpkt->buf);

test
----------
test
THE STATEMENT IS:
size = avpkt->size;
buf = av_buffer_ref (avpkt->buf);
before:
num:1
middle:
after:size = avpkt->size;
buf = av_buffer_ref (avpkt->buf);

test
----------
test
THE STATEMENT IS:
data = avpkt->data;
size = avpkt->size;
buf = av_buffer_ref (avpkt->buf);
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
buf = av_buffer_alloc (avpkt->size);
before:
num:1
middle:
after:buf = av_buffer_alloc (avpkt->size);

test
----------
test
THE STATEMENT IS:
if (buf) {
    memcpy (buf->data, avpkt->data, avpkt->size);
    size = buf->size;
    data = buf->data;
}
buf = av_buffer_alloc (avpkt->size);
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
memcpy (buf->data, avpkt->data, avpkt->size);
before:
num:1
middle:
after:memcpy (buf->data, avpkt->data, avpkt->size);

test
----------
test
THE STATEMENT IS:
size = buf->size;
memcpy (buf->data, avpkt->data, avpkt->size);
before:
num:1
middle:
after:size = buf->size;
memcpy (buf->data, avpkt->data, avpkt->size);

test
----------
test
THE STATEMENT IS:
data = buf->data;
size = buf->size;
memcpy (buf->data, avpkt->data, avpkt->size);
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
before:ret = AVERROR (ENOMEM);

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
goto done;
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
ctx->eos_sent = 1;
before:
num:1
middle:
after:ctx->eos_sent = 1;

test
----------
test
THE STATEMENT IS:
ctx->eos_received = 1;
ctx->eos_sent = 1;
before:ctx->eos_received = 1;
ctx->eos_sent = 1;

num:3
middle:
after:
test
----------
test
THE STATEMENT IS:
ctx->eos_received = 1;
ctx->eos_sent = 1;
goto done;
final
test1
test1
test1
test
----------
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (!ctx->waiting_buffers)
    ctx->waiting_buffers = buffer;
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (!ctx->waiting_buffers)
    ctx->waiting_buffers = buffer;
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
if (ctx->waiting_buffers_tail)
    ctx->waiting_buffers_tail->next = buffer;
if (!ctx->waiting_buffers)
    ctx->waiting_buffers = buffer;
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
before:
num:1
middle:
after:if (ctx->waiting_buffers_tail)
    ctx->waiting_buffers_tail->next = buffer;
if (!ctx->waiting_buffers)
    ctx->waiting_buffers = buffer;
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}

test
----------
test
THE STATEMENT IS:
ctx->waiting_buffers_tail = buffer;
if (ctx->waiting_buffers_tail)
    ctx->waiting_buffers_tail->next = buffer;
if (!ctx->waiting_buffers)
    ctx->waiting_buffers = buffer;
if (buf) {
    buffer->ref = av_buffer_ref (buf);
    if (!buffer->ref) {
        av_free (buffer);
        ret = AVERROR (ENOMEM);
        goto done;
    }
}
if (!buffer->length) {
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
    ctx->eos_sent = 1;
}
if (!size)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
buffer->pts = avpkt->pts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->pts;
size -= buffer->length;
data += buffer->length;
if (data == start)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START;
if (is_extradata)
    buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
buffer->length = FFMIN (size, ctx->decoder->input[0]->buffer_size);
buffer->data = data;
if (!buffer) {
    ret = AVERROR (ENOMEM);
    goto done;
}
final
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
before:ret = AVERROR (ENOMEM);

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
goto done;
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
before:buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
ctx->eos_sent = 1;
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
buffer->ref = av_buffer_ref (buf);
before:
num:1
middle:
after:buffer->ref = av_buffer_ref (buf);

test
----------
test
THE STATEMENT IS:
if (!buffer->ref) {
    av_free (buffer);
    ret = AVERROR (ENOMEM);
    goto done;
}
buffer->ref = av_buffer_ref (buf);
final
test1
test1
test
----------
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
before:ret = AVERROR (ENOMEM);

num:2
middle:
after:
test
----------
test
THE STATEMENT IS:
ret = AVERROR (ENOMEM);
goto done;
final
test1
test1
test
----------
THE FUNCNAME IS:ffmmal_add_packet avctx avpkt
THE CODE OF LINE IS:69

THE OPERATOR IS:1
THE RENAME COUNT IS:16
THE CHANGE STATEMENT COUNT IS:-1
THE NEWERS STATEMENT COUNT IS:-1

THE OPERATOR IS:2
THE FOR COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:3
THE WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:4
THE DO WHILE COUNT IS:1
THE CHANGE STATEMENT COUNT IS:1
THE NEWERS STATEMENT COUNT IS:17

THE OPERATOR IS:5
THE IFELSEIF COUNT IS:1
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:1

THE OPERATOR IS:6
THE IFELSE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:7
THE SWITCH COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:8
THE LOGICAL OPERATOR IS:3
THE CHANGE STATEMENT COUNT IS:3
THE NEWERS STATEMENT COUNT IS:3

THE OPERATOR IS:9
THE SELFINCREMENT COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:10
THE INCREMENTASSIGN COUNT IS:6
THE CHANGE STATEMENT COUNT IS:6
THE NEWERS STATEMENT COUNT IS:6

THE OPERATOR IS:11
THE CONSTANT IS:10
THE CHANGE STATEMENT COUNT IS:10
THE NEWERS STATEMENT COUNT IS:10

THE OPERATOR IS:12
THE DECL COUNT IS:7
THE CHANGE STATEMENT COUNT IS:7
THE NEWERS STATEMENT COUNT IS:9

THE OPERATOR IS:13
THE JUNKCODE COUNT IS:16
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:14
THE EXCHANGE CODE COUNT IS:69
THE CHANGE STATEMENT COUNT IS:10
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:15
THE DELETE CODE COUNT IS:69
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

