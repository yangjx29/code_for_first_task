
test
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
before:
num:1
middle:
after:bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);

test
----------
test
THE STATEMENT IS:
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
----------
test
THE STATEMENT IS:
return (405 - 405);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be32u (&EgrfaUM);
bytestream2_get_be16u (&EgrfaUM);
ALAC->channels = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_limit = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_initial_history = bytestream2_get_byteu (&EgrfaUM);
ALAC->rice_history_mult = bytestream2_get_byteu (&EgrfaUM);
ALAC->sample_size = bytestream2_get_byteu (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (381 - 380));
if (ALAC->max_samples_per_frame >= UINT_MAX / 4) {
    {
        {
            {
                {
                    if ((504 - 504)) {
                        return (993 - 993);
                    }
                }
                if ((11 - 11)) {
                    return (234 - 234);
                }
            }
            {
                {
                    if (0) {
                        return 0;
                    }
                }
                if (0) {
                    return 0;
                }
            }
            if ((983 - 983)) {
                {
                    if ((804 - 804)) {
                        return (651 - 651);
                    }
                }
                {
                    if ((52 - 52)) {
                        return (291 - 291);
                    }
                }
                return 0;
            }
        }
        if ((350 - 350)) {
            return (880 - 880);
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
    {
        if (0) {
            return 0;
        }
    }
    {
        if (0) {
            return 0;
        }
    }
    return AVERROR_INVALIDDATA;
}
ALAC->max_samples_per_frame = bytestream2_get_be32u (&EgrfaUM);
bytestream2_skipu (&EgrfaUM, (378 - 366));
bytestream2_init (&EgrfaUM, ALAC->avctx->extradata, ALAC->avctx->extradata_size);
final
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
before:
num:1
middle:
after:{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}

test
----------
test
THE STATEMENT IS:
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
before:
num:1
middle:
after:{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}

test
----------
test
THE STATEMENT IS:
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
before:
num:1
middle:
after:{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}

test
----------
test
THE STATEMENT IS:
av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
before:av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");

num:2
middle:
after:{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}

test
----------
test
THE STATEMENT IS:
av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
before:av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");

num:2
middle:
after:{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}

test
----------
test
THE STATEMENT IS:
av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
----------
test
THE STATEMENT IS:
return AVERROR_INVALIDDATA;
av_log (ALAC->avctx, AV_LOG_ERROR, "max_samples_per_frame too large
");
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    if (0) {
        return 0;
    }
}
{
    {
        {
            {
                if ((504 - 504)) {
                    return (993 - 993);
                }
            }
            if ((11 - 11)) {
                return (234 - 234);
            }
        }
        {
            {
                if (0) {
                    return 0;
                }
            }
            if (0) {
                return 0;
            }
        }
        if ((983 - 983)) {
            {
                if ((804 - 804)) {
                    return (651 - 651);
                }
            }
            {
                if ((52 - 52)) {
                    return (291 - 291);
                }
            }
            return 0;
        }
    }
    if ((350 - 350)) {
        return (880 - 880);
    }
}
final
test1
test1
test1
test1
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    {
        {
            if ((504 - 504)) {
                return (993 - 993);
            }
        }
        if ((11 - 11)) {
            return (234 - 234);
        }
    }
    {
        {
            if (0) {
                return 0;
            }
        }
        if (0) {
            return 0;
        }
    }
    if ((983 - 983)) {
        {
            if ((804 - 804)) {
                return (651 - 651);
            }
        }
        {
            if ((52 - 52)) {
                return (291 - 291);
            }
        }
        return 0;
    }
}
before:
num:1
middle:
after:{
    {
        {
            if ((504 - 504)) {
                return (993 - 993);
            }
        }
        if ((11 - 11)) {
            return (234 - 234);
        }
    }
    {
        {
            if (0) {
                return 0;
            }
        }
        if (0) {
            return 0;
        }
    }
    if ((983 - 983)) {
        {
            if ((804 - 804)) {
                return (651 - 651);
            }
        }
        {
            if ((52 - 52)) {
                return (291 - 291);
            }
        }
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
if ((350 - 350)) {
    return (880 - 880);
}
{
    {
        {
            if ((504 - 504)) {
                return (993 - 993);
            }
        }
        if ((11 - 11)) {
            return (234 - 234);
        }
    }
    {
        {
            if (0) {
                return 0;
            }
        }
        if (0) {
            return 0;
        }
    }
    if ((983 - 983)) {
        {
            if ((804 - 804)) {
                return (651 - 651);
            }
        }
        {
            if ((52 - 52)) {
                return (291 - 291);
            }
        }
        return 0;
    }
}
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    {
        if ((504 - 504)) {
            return (993 - 993);
        }
    }
    if ((11 - 11)) {
        return (234 - 234);
    }
}
before:
num:1
middle:
after:{
    {
        if ((504 - 504)) {
            return (993 - 993);
        }
    }
    if ((11 - 11)) {
        return (234 - 234);
    }
}

test
----------
test
THE STATEMENT IS:
{
    {
        if (0) {
            return 0;
        }
    }
    if (0) {
        return 0;
    }
}
{
    {
        if ((504 - 504)) {
            return (993 - 993);
        }
    }
    if ((11 - 11)) {
        return (234 - 234);
    }
}
before:
num:1
middle:
after:{
    {
        if (0) {
            return 0;
        }
    }
    if (0) {
        return 0;
    }
}
{
    {
        if ((504 - 504)) {
            return (993 - 993);
        }
    }
    if ((11 - 11)) {
        return (234 - 234);
    }
}

test
----------
test
THE STATEMENT IS:
if ((983 - 983)) {
    {
        if ((804 - 804)) {
            return (651 - 651);
        }
    }
    {
        if ((52 - 52)) {
            return (291 - 291);
        }
    }
    return 0;
}
{
    {
        if (0) {
            return 0;
        }
    }
    if (0) {
        return 0;
    }
}
{
    {
        if ((504 - 504)) {
            return (993 - 993);
        }
    }
    if ((11 - 11)) {
        return (234 - 234);
    }
}
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    if ((504 - 504)) {
        return (993 - 993);
    }
}
before:
num:1
middle:
after:{
    if ((504 - 504)) {
        return (993 - 993);
    }
}

test
----------
test
THE STATEMENT IS:
if ((11 - 11)) {
    return (234 - 234);
}
{
    if ((504 - 504)) {
        return (993 - 993);
    }
}
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if ((504 - 504)) {
    return (993 - 993);
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return (993 - 993);
final
test1
test
----------
----------
test
THE STATEMENT IS:
return (234 - 234);
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    if (0) {
        return 0;
    }
}
before:
num:1
middle:
after:{
    if (0) {
        return 0;
    }
}

test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
{
    if (0) {
        return 0;
    }
}
final
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
{
    if ((804 - 804)) {
        return (651 - 651);
    }
}
before:
num:1
middle:
after:{
    if ((804 - 804)) {
        return (651 - 651);
    }
}

test
----------
test
THE STATEMENT IS:
{
    if ((52 - 52)) {
        return (291 - 291);
    }
}
{
    if ((804 - 804)) {
        return (651 - 651);
    }
}
----------
test
THE STATEMENT IS:
return 0;
{
    if ((52 - 52)) {
        return (291 - 291);
    }
}
{
    if ((804 - 804)) {
        return (651 - 651);
    }
}
final
test1
test1
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if ((804 - 804)) {
    return (651 - 651);
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return (651 - 651);
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if ((52 - 52)) {
    return (291 - 291);
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return (291 - 291);
final
test1
test
----------
----------
test
THE STATEMENT IS:
return (880 - 880);
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
before:
num:1
middle:
after:
test
----------
test
THE STATEMENT IS:
if (0) {
    return 0;
}
final
test1
test
----------
----------
test
THE STATEMENT IS:
return 0;
final
test1
test
----------
THE FUNCNAME IS:kpHJuGroVa ALAC
THE CODE OF LINE IS:55

THE OPERATOR IS:1
THE RENAME COUNT IS:4
THE CHANGE STATEMENT COUNT IS:-1
THE NEWERS STATEMENT COUNT IS:-1

THE OPERATOR IS:2
THE FOR COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:3
THE WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:4
THE DO WHILE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:5
THE IFELSEIF COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:6
THE IFELSE COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:7
THE SWITCH COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:8
THE LOGICAL OPERATOR IS:1
THE CHANGE STATEMENT COUNT IS:1
THE NEWERS STATEMENT COUNT IS:1

THE OPERATOR IS:9
THE SELFINCREMENT COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:10
THE INCREMENTASSIGN COUNT IS:0
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:11
THE CONSTANT IS:42
THE CHANGE STATEMENT COUNT IS:42
THE NEWERS STATEMENT COUNT IS:42

THE OPERATOR IS:12
THE DECL COUNT IS:1
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:13
THE JUNKCODE COUNT IS:26
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:14
THE EXCHANGE CODE COUNT IS:55
THE CHANGE STATEMENT COUNT IS:2
THE NEWERS STATEMENT COUNT IS:0

THE OPERATOR IS:15
THE DELETE CODE COUNT IS:55
THE CHANGE STATEMENT COUNT IS:0
THE NEWERS STATEMENT COUNT IS:0

