Some weights of RobertaForSequenceClassification were not initialized from the model checkpoint at microsoft/graphcodebert-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/../code/run.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.examples = torch.load(cache_file_path)
/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/test.py:110: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(output_dir))

 cached_features_file:  ../dataset/graphcodebert_cached_test_subs_gan_0_400
400 400
Processing examples:   0%|          | 0/400 [00:00<?, ?it/s]03/21/2025 23:24:44 - INFO - __main__ -   测试:0

03/21/2025 23:24:44 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  1
Processing examples:   0%|          | 1/400 [00:00<02:35,  2.56it/s]03/21/2025 23:24:44 - INFO - __main__ -   测试:1

03/21/2025 23:24:44 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  2
Processing examples:   0%|          | 2/400 [00:00<01:30,  4.38it/s]03/21/2025 23:24:44 - INFO - __main__ -   测试:2

03/21/2025 23:24:44 - INFO - __main__ -   Attack failed!

03/21/2025 23:24:44 - INFO - __main__ -   测试:3

03/21/2025 23:24:44 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  3
The original code is misclassified.
Query times in this attack:  1
All Query times:  4
Processing examples:   1%|          | 4/400 [00:00<00:58,  6.74it/s]03/21/2025 23:24:44 - INFO - __main__ -   测试:4

03/21/2025 23:24:44 - INFO - __main__ -   Attack failed!

03/21/2025 23:24:44 - INFO - __main__ -   测试:5

We strongly recommend passing in an `attention_mask` since your input_ids may be padded. See https://huggingface.co/docs/transformers/troubleshooting#incorrect-output-when-padding-tokens-arent-masked.
03/21/2025 23:25:28 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:25:28 - INFO - __main__ -   Successful items count: 1

03/21/2025 23:25:28 - INFO - __main__ -   Total count: 1

03/21/2025 23:25:28 - INFO - __main__ -   Index: 5

The original code is misclassified.
Query times in this attack:  1
All Query times:  5
Number of variable_names extracted:  1
Generating population5...
	 0  --most gap 1.4901161193847656e-07
	 1  --most gap 0.17526471614837646
	 2  --most gap 0.17526471614837646
	 3  --most gap 0.17526471614837646
	 4  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
	 5  --most gap 0.17526471614837646
	 6  --most gap 0.17526471614837646
	 7  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
	 8  --most gap 0.17526471614837646
	 9  --most gap 0.17526471614837646
	 10  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
	 11  --most gap 0.17526471614837646
	 12  --most gap 0.17526471614837646
	 13  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
	 14  --most gap 0.17526471614837646
	 15  --most gap 0.17526471614837646
	 16  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
	 17  --most gap 0.17526471614837646
	 18  --most gap 0.17526471614837646
	 19  --most gap 0.17526471614837646
两轮结果未更新,Changing code structure...
Changing code structure...
changeCodeStructure SUCCESS!
Query times in this attack:  1622
All Query times:  1627
Processing examples:   2%|▏         | 6/400 [00:44<1:08:57, 10.50s/it]03/21/2025 23:25:28 - INFO - __main__ -   测试:6

03/21/2025 23:25:29 - INFO - __main__ -   Attack failed!

03/21/2025 23:25:29 - INFO - __main__ -   测试:7

03/21/2025 23:25:29 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  1628
The original code is misclassified.
Query times in this attack:  1
All Query times:  1629
Processing examples:   2%|▏         | 8/400 [00:44<41:06,  6.29s/it]  03/21/2025 23:25:29 - INFO - __main__ -   测试:8

03/21/2025 23:25:41 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:25:41 - INFO - __main__ -   Successful items count: 2

03/21/2025 23:25:41 - INFO - __main__ -   Total count: 2

03/21/2025 23:25:41 - INFO - __main__ -   Index: 8

03/21/2025 23:25:41 - INFO - __main__ -   测试:9

03/21/2025 23:25:42 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:25:42 - INFO - __main__ -   Successful items count: 3

03/21/2025 23:25:42 - INFO - __main__ -   Total count: 3

03/21/2025 23:25:42 - INFO - __main__ -   Index: 9

Number of variable_names extracted:  9
Generating population8...
	 0  --most gap 0.029008299112319946
select_best_replacement SUCCESS!
update SUCCESS!
Query times in this attack:  341
All Query times:  1970
Number of variable_names extracted:  5
Generating population9...
init SUCCESS!
Query times in this attack:  2
All Query times:  1972
Processing examples:   2%|▎         | 10/400 [00:58<41:38,  6.41s/it]03/21/2025 23:25:42 - INFO - __main__ -   测试:10

03/21/2025 23:25:42 - INFO - __main__ -   Attack failed!

03/21/2025 23:25:42 - INFO - __main__ -   测试:11

03/21/2025 23:25:42 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  1973
The original code is misclassified.
Query times in this attack:  1
All Query times:  1974
Processing examples:   3%|▎         | 12/400 [00:58<27:24,  4.24s/it]03/21/2025 23:25:42 - INFO - __main__ -   测试:12

Number of variable_names extracted:  2
Generating population12...
	 0  --most gap 0.007594466
	 1  --most gap 0.007594466
	 2  --most gap 0.007594466
	 3  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 4  --most gap 0.007594466
	 5  --most gap 0.007594466
	 6  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 7  --most gap 0.007594466
	 8  --most gap 0.007594466
	 9  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 10  --most gap 0.007594466
	 11  --most gap 0.007594466
Processing examples:   3%|▎         | 12/400 [01:10<27:24,  4.24s/it]03/21/2025 23:26:02 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:26:02 - INFO - __main__ -   Successful items count: 4

03/21/2025 23:26:02 - INFO - __main__ -   Total count: 4

03/21/2025 23:26:02 - INFO - __main__ -   Index: 12

	 12  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 13  --most gap 0.007594466
	 14  --most gap 0.007594466
	 15  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 16  --most gap 0.007594466
	 17  --most gap 0.007594466
	 18  --most gap 0.007594466
两轮结果未更新,Changing code structure...
	 19  --most gap 0.007594466
Changing code structure...
changeCodeStructure SUCCESS!
Query times in this attack:  422
All Query times:  2396
Processing examples:   3%|▎         | 13/400 [01:18<47:07,  7.31s/it]03/21/2025 23:26:02 - INFO - __main__ -   测试:13

03/21/2025 23:27:05 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:27:05 - INFO - __main__ -   Successful items count: 5

03/21/2025 23:27:05 - INFO - __main__ -   Total count: 5

03/21/2025 23:27:05 - INFO - __main__ -   Index: 13

Number of variable_names extracted:  1
Generating population13...
	 0  --most gap 0
	 1  --most gap 0.10551808215677738
	 2  --most gap 0.10551808215677738
	 3  --most gap 0.10551808215677738
	 4  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
	 5  --most gap 0.10551808215677738
	 6  --most gap 0.10551808215677738
	 7  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
	 8  --most gap 0.10551808215677738
	 9  --most gap 0.10551808215677738
	 10  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
	 11  --most gap 0.10551808215677738
	 12  --most gap 0.10551808215677738
	 13  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
	 14  --most gap 0.10551808215677738
	 15  --most gap 0.10551808215677738
	 16  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
	 17  --most gap 0.10551808215677738
	 18  --most gap 0.10551808215677738
	 19  --most gap 0.10551808215677738
两轮结果未更新,Changing code structure...
Changing code structure...
changeCodeStructure SUCCESS!
Query times in this attack:  1633
All Query times:  4029
Processing examples:   4%|▎         | 14/400 [02:21<2:06:38, 19.68s/it]03/21/2025 23:27:05 - INFO - __main__ -   测试:14

03/21/2025 23:27:30 - WARNING - root -   WARNING: There is no reference data-flows extracted from the whole corpus, and the data-flow match score degenerates to 0. Please consider ignoring this score.
03/21/2025 23:27:30 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:27:30 - INFO - __main__ -   Successful items count: 6

03/21/2025 23:27:30 - INFO - __main__ -   Total count: 6

03/21/2025 23:27:30 - INFO - __main__ -   Index: 14

Number of variable_names extracted:  1
Generating population14...
	 0  --most gap 0.09452798962593079
	 1  --most gap 0.09452798962593079
	 2  --most gap 0.09452798962593079
	 3  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 4  --most gap 0.09452798962593079
	 5  --most gap 0.09452798962593079
	 6  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 7  --most gap 0.09452798962593079
	 8  --most gap 0.09452798962593079
	 9  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 10  --most gap 0.09452798962593079
	 11  --most gap 0.09452798962593079
	 12  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 13  --most gap 0.09452798962593079
	 14  --most gap 0.09452798962593079
	 15  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 16  --most gap 0.09452798962593079
	 17  --most gap 0.09452798962593079
	 18  --most gap 0.09452798962593079
两轮结果未更新,Changing code structure...
	 19  --most gap 0.09452798962593079
Changing code structure...
changeCodeStructure SUCCESS!
Query times in this attack:  428
All Query times:  4457
Processing examples:   4%|▍         | 15/400 [02:46<2:13:08, 20.75s/it]03/21/2025 23:27:30 - INFO - __main__ -   测试:15

03/21/2025 23:27:57 - INFO - __main__ -   Success rate: 100.00%

03/21/2025 23:27:57 - INFO - __main__ -   Successful items count: 7

03/21/2025 23:27:57 - INFO - __main__ -   Total count: 7

03/21/2025 23:27:57 - INFO - __main__ -   Index: 15

Number of variable_names extracted:  2
Generating population15...
	 0  --most gap 0.08221860229969025
	 1  --most gap 0.1347396820783615
	 2  --most gap 0.1347396820783615
	 3  --most gap 0.1347396820783615
	 4  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
	 5  --most gap 0.1347396820783615
	 6  --most gap 0.1347396820783615
	 7  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
	 8  --most gap 0.1347396820783615
	 9  --most gap 0.1347396820783615
	 10  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
	 11  --most gap 0.1347396820783615
	 12  --most gap 0.1347396820783615
	 13  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
	 14  --most gap 0.1347396820783615
	 15  --most gap 0.1347396820783615
	 16  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
	 17  --most gap 0.1347396820783615
	 18  --most gap 0.1347396820783615
	 19  --most gap 0.1347396820783615
两轮结果未更新,Changing code structure...
Changing code structure...
changeCodeStructure SUCCESS!
Query times in this attack:  486
All Query times:  4943
Processing examples:   4%|▍         | 16/400 [03:13<2:23:10, 22.37s/it]03/21/2025 23:27:57 - INFO - __main__ -   测试:16

03/21/2025 23:27:57 - INFO - __main__ -   Attack failed!

03/21/2025 23:27:57 - INFO - __main__ -   测试:17

03/21/2025 23:27:57 - INFO - __main__ -   Attack failed!

The original code is misclassified.
Query times in this attack:  1
All Query times:  4944
The original code is misclassified.
Query times in this attack:  1
All Query times:  4945
Processing examples:   4%|▍         | 18/400 [03:13<1:22:43, 12.99s/it]03/21/2025 23:27:57 - INFO - __main__ -   测试:18

Number of variable_names extracted:  1
Generating population18...
	 0  --most gap 0.005979703739285469
	 1  --most gap 0.005979703739285469
	 2  --most gap 0.005979703739285469
	 3  --most gap 0.005979703739285469
两轮结果未更新,Changing code structure...
	 4  --most gap 0.005979703739285469
	 5  --most gap 0.005979703739285469
	 6  --most gap 0.005979703739285469
两轮结果未更新,Changing code structure...
Processing examples:   4%|▍         | 18/400 [03:18<1:10:14, 11.03s/it]
Traceback (most recent call last):
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/test.py", line 219, in <module>
    main()
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/test.py", line 165, in main
    is_success, final_code, min_gap_prob, query, diver= attacker.attack(
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/pso.py", line 753, in attack
    adv_code,now_iter = changeCodeStructure(part_elites[top_attack], self.tokenizer_mlm, self.codebert_mlm,self.args,i)
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/pso.py", line 168, in changeCodeStructure
    action = GenRandomChange.getAction()
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/../code/Transform/GenRandomChange.py", line 111, in getAction
    return gen_random_data(filepath,files,)
  File "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/Comparative_Experiment/../code/Transform/GenRandomChange.py", line 85, in gen_random_data
    count=int(fileHandle.readline().strip())
ValueError: invalid literal for int() with base 10: ''
