from grammatical_correctness import analyze_syntax
from static_code_analysis import analyze_static
def generate_report():
    syntax_results = analyze_syntax()
    static_results = analyze_static()
    
    print("语法正确性分析报告:")
    print("-" * 50)
    print(f"原始代码:")
    print(f"总数: {syntax_results['original']['total']}")
    print(f"语法正确: {syntax_results['original']['correct']}")
    print(f"正确率: {syntax_results['original']['rate']*100:.2f}%")
    print("\n对抗代码:")
    print(f"总数: {syntax_results['adversarial']['total']}")
    print(f"语法正确: {syntax_results['adversarial']['correct']}")
    print(f"正确率: {syntax_results['adversarial']['rate']*100:.2f}%")
    
    print("\n静态代码分析报告:")
    print("-" * 50)
    print(f"原始代码:")
    print(f"平均错误数: {static_results['original']['avg_errors']:.2f}")
    print(f"平均警告数: {static_results['original']['avg_warnings']:.2f}")
    print("\n对抗代码:")
    print(f"平均错误数: {static_results['adversarial']['avg_errors']:.2f}")
    print(f"平均警告数: {static_results['adversarial']['avg_warnings']:.2f}")

if __name__ == '__main__':
    generate_report()