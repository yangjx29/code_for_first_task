% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% 这个文件的主要功能是实现交换代码顺序
% 这里分为两步来实现
% 1. 交换声明语句
% 2. 交换statement 分开来考虑

include "java.grm"

% ----------------------------------------------------------------
% 主函数开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/14Exchange.random"
    by 
        P [changeFunction] 
end function

% 修改文件中的每个方法
function changeFunction
    replace [package_declaration]
        P [package_declaration]
    construct Methods [repeat method_declaration]
        _ [^ P]
    construct GlobalFields [repeat field_declaration]
        _ [^ P]
    construct GlobalID [repeat id]  
        _ [extractGlobalID each GlobalFields]
    export GlobalID 
    construct GlobalFuncName [repeat id]
        _ [extractMethodName each Methods]
    export GlobalFuncName
    construct NewMethods [repeat method_declaration]
        _ [changeMethodDefinition each Methods]
    by 
        P [changeProgram]
end function

% 主函数结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 提取方法名
function extractMethodName MD [method_declaration]
    replace [repeat id]
        RI [repeat id]
    deconstruct MD
        Modifiers [repeat modifier] Gen [opt generic_parameter] 
        Type [type_specifier] Declarator [method_declarator] 
        Throws [opt throws] Body [method_body]
    deconstruct Declarator
        ID [id] '(' Params [opt parameters] ') Dims [repeat dimension]
    by 
        RI [. ID]
end function

% 提取全局变量（字段）
function extractGlobalID FD [field_declaration]
    replace [repeat id]
        RI [repeat id]
    construct FieldVars [repeat variable_declarator]
        _ [^ FD]
    construct Ids [repeat id]
        _ [^ FieldVars]
    by
        RI [. Ids]
end function
% 提取全局变量结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 方法处理
function changeMethodDefinition MD [method_declaration]
    replace [repeat method_declaration]
        RMethodDefine [repeat method_declaration]
    construct NewMD [method_declaration]
        MD 
    by 
        RMethodDefine [. NewMD]
end function

function changeProgram
    replace [package_declaration]
        P [package_declaration]
    construct NBody [repeat block]
        _ [^ P]
    construct NewBody [repeat block]
        _ [filterBody each NBody]
    import RandomPath [stringlit]
    export RandomChange [repeat number]
        _ [readRandomFile RandomPath]
    export CountExchangedCodeChanged [number]
        0
    construct NNBody [repeat block]
        _ [changeCompound each NBody]
    import CountExchangedCodeChanged
    by
        P [replaceBlock each NewBody NNBody]
end function

function filterBody B [block]
    replace [repeat block]
        RB [repeat block]
    deconstruct B
        '{ RS [repeat declaration_or_statement] '} OS [opt ';]
    by 
        RB [. B]
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

function replaceBlock OldB [block] NewB [block]
    replace *[block]
        OldB
    by 
        NewB
end function

function changeCompound CS [block]
    replace [repeat block]
        RCS [repeat block]
    deconstruct CS
        '{ RS [repeat declaration_or_statement] '} OS [opt ';]
    construct NRS [repeat declaration_or_statement]
        RS [changeCompoundStatementBody]
    construct NCS [block]
        '{ NRS '} OS
    by 
        RCS [. NCS]   
end function
% 方法处理结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 实现代码交换
function changeCompoundStatementBody
    replace [repeat declaration_or_statement]
        Dos [repeat declaration_or_statement]
    export Dos
    construct RDecl [repeat declaration]
        _ [extractItemDecl each Dos]
    construct NRDecl [repeat declaration]
        _ [changeDeclarationOrder2 RDecl]
    construct DeclItems [repeat declaration_or_statement]
        _ [fromDeclCreateItem each NRDecl]
    construct RStatement [repeat statement]
        _ [extractStatement each Dos]
    construct NRStatement [repeat statement]
        _ [createNewOrderStatement RStatement]
    construct StateItems [repeat declaration_or_statement]
        _ [fromStateCreateItem each NRStatement]
    construct NDos [repeat declaration_or_statement]
        _ [. DeclItems] [. StateItems]
    by 
        NDos 
end function
% 代码交换函数结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 交换声明语句
function changeDeclarationOrder2 RDecls [repeat declaration]
    replace [repeat declaration]
        RDecl [repeat declaration]
    construct NRdecl [repeat declaration]
        _ [selectDeclaration1 each RDecls]
    construct NNRdecl [repeat declaration]
        _ [reverseOrderDecl each NRdecl]
    by 
        NNRdecl
end function

function reverseOrderDecl Decl [declaration]
    replace [repeat declaration]
        RDecl [repeat declaration]
    by 
        _ [. Decl] [. RDecl]
end function

function selectDeclaration1 Decl [declaration]
    replace [repeat declaration]
        RDecl [repeat declaration]
    construct DeclIndex [number]
        0
    export DeclGlobalAffected [number]
        0
    export GlobalDecl [declaration]
        Decl
    construct NewIndex [number]
        DeclIndex [locateAffectedDeclaration each RDecl]
    construct ChangedIndex [number]
        NewIndex [setCountExchangedCodeChanged]
    construct RDeclBefore [repeat declaration]
        RDecl [select 1 ChangedIndex]
    construct NIndexAfter [number]
        ChangedIndex [+ 1]
    construct RDeclAfter [repeat declaration]
        RDecl [select NIndexAfter 9999]
    construct NewRDecl [repeat declaration]
        _ [. RDeclBefore] [. Decl] [. RDeclAfter]
    by
        NewRDecl 
end function

function locateAffectedDeclaration Decl [declaration]
    replace [number]
        Index [number]
    import DeclGlobalAffected [number]
    where
        DeclGlobalAffected [= 0] 
    import GlobalDecl [declaration]
    construct GlobalDeclId [repeat id]
        _ [^ GlobalDecl]
    construct DeclId [repeat id]
        _ [^ Decl]
    export GlobalDeclId
    construct IntersectionId [repeat id]
        _ [intersectionDeclId each DeclId]
    construct LenIntersectionId [number]
        _ [length IntersectionId] [setDeclGlobalAffected]
    import DeclGlobalAffected 
    where
        DeclGlobalAffected [= 0] 
    by 
        Index [+ 1]
end function

function setDeclGlobalAffected
    replace [number]
        N [number]
    where 
        N [> 0]
    export DeclGlobalAffected [number]
        1
    by 
        N
end function

function intersectionDeclId ID [id]
    replace [repeat id]
        RID [repeat id]
    import GlobalDeclId [repeat id]
    where 
        GlobalDeclId [? judgeIdisDeal ID]
    by
        RID [. ID]
end function
% 声明语句交换结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 处理System.out.println (Java equivalent of printf)
function extractItemPrintDecl BI [declaration_or_statement]
    replace [repeat declaration]
        RDecl [repeat declaration]
    deconstruct BI
        Decl [declaration]
    by 
        RDecl [. Decl]
end function

function mergeStatementAndPrintStatement PrintfStatement [repeat declaration_or_statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    construct LenRBI [number]
        _ [length RBI]
    construct Index [number]
        LenRBI [setLastIndex RBI]
    construct BeforeBI [repeat declaration_or_statement]
        RBI [select 1 Index]
    construct LastIndex [number]
        Index [+ 1]
    construct LastItem [repeat declaration_or_statement]
        RBI [select LastIndex 9999]
    construct NRBI [repeat declaration_or_statement]
        _ [. BeforeBI] [. PrintfStatement] [. LastItem]
    by 
        NRBI
end function

function setLastIndex RBI [repeat declaration_or_statement]
    replace [number]    
        Index [number]
    construct LastIndex [number]
        Index [- 1]
    construct LastBI [repeat declaration_or_statement]
        RBI [select Index 9999]
    deconstruct LastBI
        LastItem [declaration_or_statement]
    construct ReturnSt [repeat return_statement]
        _ [^ LastItem]
    construct LenReturnSt [number]
        _ [length ReturnSt]
    where 
        LenReturnSt [> 0]
    by 
        LastIndex 
end function    

function dealPrintfDeclaration RDecl [repeat declaration]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    construct Printf [repeat declaration]
        _ [extractPrintDecl each RDecl]
    construct NBI [repeat declaration_or_statement]
        _ [fromDeclCreateItem each Printf]
    import Dos [repeat declaration_or_statement]
    construct _ [any]
        _ [isPrintfChanged Dos Printf]
    by
        RBI [. NBI]
end function 

function isPrintfChanged RBI [repeat declaration_or_statement] RPrintf [repeat declaration]
    replace [any]
        A [any]
    construct LenPrintf [number]
        _ [length RPrintf]
    where 
        LenPrintf [= 1]
    deconstruct RPrintf
        Print [declaration]
    construct PBI [declaration_or_statement]
        Print
    construct PrintExchangeOrNot [number]
        0
    construct LenRBI [number]
        _ [length RBI]
    construct LBI [repeat declaration_or_statement]
        RBI [select LenRBI 9999]
    deconstruct LBI
        BI [declaration_or_statement]
    construct IsLastCode [number]
        PrintExchangeOrNot [isPrintfLastCode BI PBI]
    construct IsReorderSecond [number]
        IsLastCode [isReorderSecondIsPrint RBI PBI]
    import CountExchangedCodeChanged [number]
    export CountExchangedCodeChanged
        CountExchangedCodeChanged [- IsReorderSecond]
    by 
        A
end function

function isReorderSecondIsPrint RBI [repeat declaration_or_statement] PBI [declaration_or_statement]
    replace [number]
        N [number]
    construct LenRBI [number]
        _ [length RBI]
    construct LBI [repeat declaration_or_statement]
        RBI [select LenRBI 9999]
    deconstruct LBI
        BI [declaration_or_statement]
    deconstruct BI 
        St [statement]
    deconstruct St
        'return Expr [opt expression] ';
    construct LenSub1 [number]
        LenRBI [- 1]
    construct LSBI [repeat declaration_or_statement]
        RBI [select LenSub1 LenSub1]
    deconstruct LSBI
        SBI [declaration_or_statement]
    by 
        N [isPrintfLastCode SBI PBI]
end function

function isPrintfLastCode BI [declaration_or_statement] PBI [declaration_or_statement]
    replace [number]
        N [number]
    where 
        BI [= PBI]
    by 
        N [+ 1]
end function

function extractPrintDecl Decl [declaration]
    replace [repeat declaration]
        RDecl [repeat declaration]
    construct AllDeclID [repeat id]
        _ [^ Decl]
    export Printf [id]
        'System
    construct NPrint [repeat id]
        _ [IsContainPrint each AllDeclID]
    construct LenNPrint [number]
        _ [length NPrint]
    where
        LenNPrint [> 0]
    import CountExchangedCodeChanged [number]
    export CountExchangedCodeChanged
        CountExchangedCodeChanged [+ 1]
    by
        _ [. Decl] [. RDecl]
end function

function IsContainPrint ID [id]
    replace [repeat id]
        RID [repeat id]
    import Printf [id]
    where 
        Printf [= ID]
    by 
        RID [. ID]
end function
% System.out.println 处理结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 交换statement
function createNewOrderStatement RStatement [repeat statement]
    replace [repeat statement]
        RS [repeat statement]
    construct NRS [repeat statement]
        _ [selectStatement each RStatement]
    construct RNRS [repeat statement]
        _ [reverseOrderStatement each NRS]
    by
        RNRS
end function  

function selectStatement St [statement]
    replace [repeat statement]
        RSt [repeat statement]
    export ReturnSt [number]
        0
    construct RSt2 [repeat statement]
        _ [createReturnStatement RSt St]  
    export BreakSt [number]
        0
    construct RSt3 [repeat statement]
        _ [createBreakStatement RSt St]
    export ContinueSt [number]
        0
    construct RSt4 [repeat statement]
        _ [createContinueStatement RSt St]
    export LabelSt [number]
        0
    construct Rst5 [repeat statement]
        _ [createSwitchLabelStatement RSt St]
    construct RSt1 [repeat statement]
        _ [createOrdinalStatement RSt St]
    construct NewRSt [repeat statement]
        _ [. RSt1] [. RSt4] [. RSt3] [. RSt2] [. Rst5]
    by
        NewRSt 
end function 

function createSwitchLabelStatement RSt [repeat statement] St [statement]
    replace [repeat statement]
        RSt1 [repeat statement]
    deconstruct St 
        'case CE [list constant_expression+] ': S [statement]
    export LabelSt [number]
        1
    construct NewRSt [repeat statement]
        _ [. St] [. RSt]
    by 
        NewRSt
end function

function createContinueStatement RSt [repeat statement] St [statement]
    replace [repeat statement]
        RSt1 [repeat statement]
    deconstruct St 
        'continue ';
    export ContinueSt [number]
        1
    construct NewRSt [repeat statement]
        _ [. St] [. RSt]
    by 
        NewRSt
end function

function createBreakStatement RSt [repeat statement] St [statement]
    replace [repeat statement]
        RSt1 [repeat statement]
    deconstruct St 
        'break ';
    export BreakSt [number]
        1
    construct NewRSt [repeat statement]
        _ [. St] [. RSt]
    by 
        NewRSt
end function

function createReturnStatement RSt [repeat statement] St [statement]
    replace [repeat statement]
        RSt2 [repeat statement]
    deconstruct St
        'return Expr [opt expression] ';
    export ReturnSt [number]
        1
    construct NewRSt [repeat statement]
        _ [. St] [. RSt]
    by 
        NewRSt
end function

function createOrdinalStatement RSt [repeat statement] St [statement]
    import ReturnSt [number]
    where
        ReturnSt [= 0]  
    import BreakSt [number]
    where
        BreakSt [= 0] 
    import ContinueSt [number]
    where
        ContinueSt [= 0]
    import LabelSt [number]
    where
        LabelSt [= 0]
    replace [repeat statement]
        RSt1 [repeat statement]
    construct Index [number]
        0
    export GlobalAffected [number]
        0
    export St
    construct NewIndex [number]
        Index [locateTheAffectedStatement each RSt]
    construct ChangedIndex [number]
        NewIndex [setCountExchangedCodeChanged]
    construct RStBefore [repeat statement]
        RSt [select 1 ChangedIndex]
    construct NewIndexPlusOne [number]
        ChangedIndex [+ 1]
    construct RStAfter [repeat statement]
        RSt [select NewIndexPlusOne 99999]
    construct NewRSt [repeat statement]
        _ [. RStBefore] [. St] [. RStAfter]
    by
        NewRSt
end function

function setCountExchangedCodeChanged 
    replace [number]
        Index [number]
    where 
        Index [> 0]
    import CountExchangedCodeChanged [number]
    export CountExchangedCodeChanged
        CountExchangedCodeChanged [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountExchangedCodeChanged CountExchangedCodeChanged]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIndex [number]
        Index [isNddeChanged Changed]
    by 
        ChangedIndex
end function

function isNddeChanged Changed [number]
    replace [number]
        Index [number]
    where 
        Changed [= 0]
    by 
        0
end function 

function locateTheAffectedStatement RSt [statement]
    replace [number]
        Index [number]
    construct JumpSt [statement]
        RSt [judgeIsJump]
    import GlobalAffected [number]
    where 
        GlobalAffected [= 0]
    import St [statement]
    construct StId [repeat id]
        _ [^ St]
    construct StFuncName [repeat id]
        _ [intersectionId2 each StId]
    construct NNStId [repeat id]
        StId [setGlobalIDInStatement StFuncName]
    construct RStId [repeat id]
        _ [^ RSt]
    construct RStFuncName [repeat id]
        _ [intersectionId2 each RStId]
    construct NNRStId [repeat id]
        RStId [setGlobalIDInStatement RStFuncName]
    export NNRStId
    construct IntersectionIds [repeat id]
        _ [intersectionId1 each NNStId]
    construct LenIntersectionIds [number]
        _ [length IntersectionIds] [setGlobalAffected]
    import GlobalAffected
    where 
        GlobalAffected [= 0]
    by
        Index [+ 1]
end function

function judgeIsJump
    replace [statement]
        St [statement]
    construct RJudeSt [repeat jump_statement]
        _ [^ St]
    construct LenRjudgeSt [number]
        _ [length RJudeSt]
    where 
        LenRjudgeSt [> 0]
    import GlobalAffected [number]
    export GlobalAffected
        GlobalAffected [+ 1]
    by  
        St
end function

function setGlobalAffected
    replace [number]
        N [number]
    where
        N [> 0]
    export GlobalAffected [number]
        1
    by
        N 
end function  

function setGlobalIDInStatement RID [repeat id]
    replace [repeat id]
        RIDs [repeat id]
    construct LenRID [number]
        _ [length RID]
    where 
        LenRID [> 0]
    import GlobalID [repeat id]
    by
        RIDs [. GlobalID]
end function

function intersectionId2 ID [id]
    replace [repeat id]
        RID [repeat id]
    import GlobalFuncName [repeat id]
    where
        GlobalFuncName [? judgeIdisDeal ID]
    by 
        RID [. ID]
end function 

function intersectionId1 ID [id]
    replace [repeat id]
        RID [repeat id]
    import NNRStId [repeat id]
    where
        NNRStId [? judgeIdisDeal ID]
    by
        RID [. ID]
end function 

function extractStatement BI [declaration_or_statement]
    replace [repeat statement]
        RS [repeat statement]
    deconstruct BI
        ST [statement]
    by 
        RS [. ST]
end function

function reverseOrderStatement ST [statement]
    replace [repeat statement]
        RS [repeat statement]
    by
        _ [. ST] [. RS]
end function 

function fromStateCreateItem Stat [statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    construct BI [declaration_or_statement]
        Stat
    by
        RBI [. BI]
end function    
% statement交换结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 工具函数
function judgeIdisDeal Id [id]
    match *[repeat id]
        Id Other [repeat id]
    export containId [number]
        1
end function

function fromDeclCreateItem Decl [declaration]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    construct BI [declaration_or_statement]
        Decl
    by
        RBI [. BI]
end function 

function extractItemDecl BI [declaration_or_statement]
    replace [repeat declaration]
        RDecl [repeat declaration]
    deconstruct BI
        Decl [declaration]
    export PrintfDecl [id]
        'System
    construct NPrint [repeat id]
        _ [IsContainPrintDecl each Decl]
    construct LenNPrint [number]
        _ [length NPrint]
    where
        LenNPrint [= 0]
    by  
        RDecl [. Decl]
end function

function IsContainPrintDecl Decl [declaration]
    replace [repeat id]
        RID [repeat id]
    construct Ids [repeat id]
        _ [^ Decl]
    import PrintfDecl [id]
    construct NPrint [repeat id]
        _ [matchPrint each Ids]
    construct LenNPrint [number]
        _ [length NPrint]
    where
        LenNPrint [> 0]
    by 
        RID [. Ids]
end function

function matchPrint ID [id]
    replace [repeat id]
        RID [repeat id]
    import PrintfDecl [id]
    where 
        PrintfDecl [= ID]
    by 
        RID [. ID]
end function
% 工具函数结束
% ----------------------------------------------------------------