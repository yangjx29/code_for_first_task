% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% statements 
% 
% version 20200924
% 这个文件的主要功能是实现代码statement, expression等自身发生的变化

include "java.grm"
% include "extract_id.Txl" % Commented out as it’s not provided; assume it’s not needed

% ----------------------------------------------------------------
% 这里为了转换的需要重新定义了部分结构
redefine declaration
    ... 
    | [repeat declaration] '; [NL] [variable_declarators] % Adjusted for Java
end redefine

redefine variable_declarator
    ... 
    | [variable_declarator] '; [NL] % Adjusted for Java, replaces init_declarator
end redefine

% ----------------------------------------------------------------

%----------------------------------------------------------------
% 主函数的开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/12Define.random"
    import RandomPath 
    export RandomChange [repeat number]
        _ [readRandomFile RandomPath] 
    export CountChangedDecl [number]
        0
    by 
        P [changeCompoundStatementBody] 
end function

% 修改文件里面的每个方法
function changeFunction
    replace [package_declaration]
        P [package_declaration]
    construct Methods [repeat method_declaration]
        _ [^ P]
    construct NewMethods [repeat method_declaration]
        _ [changeMethodDefinition each Methods] 
    by 
        P [replaceMethod each Methods NewMethods]
end function

function replaceMethod MD [method_declaration] NewMD [method_declaration]
    replace *[method_declaration]
        MD
    by  
        NewMD
end function

function changeMethodDefinition MD [method_declaration]
    replace [repeat method_declaration]
        RMethodDefine [repeat method_declaration]   
    construct NewMD [method_declaration]
        MD [translateJavaMethod]
    by 
        RMethodDefine [. NewMD]
end function

function translateJavaMethod
    replace [method_declaration]
        Modifiers [repeat modifier] Gen [opt generic_parameter] 
        Type [type_specifier] Declarator [method_declarator] 
        Throws [opt throws] Body [method_body]
    by
        Modifiers Gen Type Declarator Throws 
        Body [changeCompound]
end function

function changeCompound
    replace [method_body]
        '{ RS [repeat declaration_or_statement] '} % Java block
    import RandomPath [stringlit]
    export RandomChange [repeat number]
        _ [readRandomFile RandomPath] 
    export CountChangedDecl [number]
        0
    by 
        '{ RS [changeCompoundStatementBody] '}
    |
    replace [method_body] % Handle abstract or default methods
        '; % Abstract method
    by 
        ';
    |
    replace [method_body]
        'default Value [annotation_value] ';
    by 
        'default Value ';
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule
% main 函数结束
% ----------------------------------------------------------------

% ----------------------------------------------------------------
% 处理块内声明
rule changeCompoundStatementBody
    replace $[repeat declaration_or_statement]
        Dos [repeat declaration_or_statement]
    construct NewDos [repeat declaration_or_statement]
        Dos [changeDeclarations]
    construct NDos [repeat declaration_or_statement]
        _ [removeNullDeclaration each NewDos]
    by 
        NDos 
end rule

rule changeDeclarations 
    replace $[declaration_or_statement]
        De [declaration]
    construct NewDe [declaration]
        De [changeDeclaration]
    by 
        NewDe 
end rule

% ----------------------------------------------------------------
% 删除空白声明
function removeNullDeclaration BI [declaration_or_statement]
    replace [repeat declaration_or_statement]
        DE [repeat declaration_or_statement]
    construct NDE [repeat declaration_or_statement]
        _ [testIsStatement BI]
    construct NNDE [repeat declaration_or_statement]
        NDE [testIsDeclaration BI] 
    by
        DE [. NNDE]
end function 

function testIsDeclaration BI [declaration_or_statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    deconstruct BI
        DE [declaration]
    deconstruct not DE
        ';
    by
        RBI [. BI]        
end function

function testIsStatement BI [declaration_or_statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    deconstruct BI
        St [statement]
    by 
        RBI [. BI]
end function

% ----------------------------------------------------------------
% 变量声明格式化操作 
function changeDeclaration
    replace [declaration]
        De [declaration]
    construct OutDe [repeat id]
        _ [^ De]
    construct Gets [id]
        'get % Java doesn’t have gets, but keeping for compatibility check
    export containId [number]
        0
    construct _ [repeat id]
        OutDe [judgeIdisDeal Gets] 
    import containId 
    where 
        containId [= 0] 
    deconstruct De
        Modifiers [repeat modifier] TS [type_specifier] VDs [variable_declarators] '; % Java declaration structure
    deconstruct VDs
        LID [list variable_declarator]
    construct RDS [repeat type_specifier]
        _ [createTypeSpec each LID]
    construct NRDS [repeat type_specifier]
        _ [createTypeSpecWithInit each LID]
    construct RID [repeat variable_declarator]
        _ [createRIDVariableDeclarator each LID]
    export ModTS [repeat modifier]
        Modifiers
    export TSS [type_specifier]
        TS
    construct RDe [repeat declaration]
        _ [createRepeatDeclaration each NRDS]
    construct NRDe [repeat declaration]
        _ [createRepeatDeclaration1 each RID]
    construct NewRDe [repeat declaration]
        RDe [createRepeatDeclaration1 each RID]
    construct Init [repeat variable_declarator]
        _ [createInitDeclarator each LID]
    construct LenNewRDe [number]
        _ [length NewRDe]
    where
        LenNewRDe [> 0]
    construct NewDe [declaration]
        NewRDe '; Init
    import CountChangedDecl [number]
    export CountChangedDecl
        CountChangedDecl [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountChangedDecl CountChangedDecl]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedDe [declaration]
        De [isNeedChanged NewDe Changed] 
    by 
        ChangedDe
end function

function judgeIdisDeal Id [id]
    replace *[id]
        Id
    export containId [number]
        1
    by
        Id 
end function

function isNeedChanged NewDe [declaration] Changed [number]
    replace [declaration]
        De [declaration]
    where
        Changed [= 1] 
    by
        NewDe
end function 

function createRIDVariableDeclarator VD [variable_declarator]
    replace [repeat variable_declarator]
        RVD [repeat variable_declarator]
    construct NRVD [repeat variable_declarator]
        _ [testVariableDeclarator1 VD]
    construct NewNRVD [repeat variable_declarator]
        NRVD [testVariableDeclarator2 VD]
    by 
        RVD [. NewNRVD]
end function 

function testVariableDeclarator1 VD [variable_declarator]
    replace [repeat variable_declarator]
        RVD [repeat variable_declarator]
    deconstruct VD
        VN [variable_name] RD [repeat dimension] % Array declaration
    by
        RVD [. VD]
end function 

function testVariableDeclarator2 VD [variable_declarator]
    replace [repeat variable_declarator]
        RVD [repeat variable_declarator]
    deconstruct VD
        VN [variable_name] OI [opt equals_variable_initializer]
    deconstruct not OI
    by
        RVD [. VD]
end function

function createInitDeclarator VD [variable_declarator]
    replace [repeat variable_declarator]
        RVD [repeat variable_declarator]
    deconstruct VD
        VN [variable_name] OI [opt equals_variable_initializer]
    deconstruct OI 
        Init [equals_variable_initializer]
    construct NewVD [variable_declarator]
        VN Init ';
    by 
        RVD [. NewVD]
end function 

function createRepeatDeclaration TS [type_specifier]
    replace [repeat declaration]
        RD [repeat declaration]
    import ModTS [repeat modifier]
    import TSS [type_specifier]
    construct Mods [repeat modifier]
        ModTS
    construct NewD [declaration]
        Mods TSS TS ';
    by 
        RD [. NewD]
end function 

function createRepeatDeclaration1 VD [variable_declarator]
    replace [repeat declaration]
        RD [repeat declaration]
    import ModTS [repeat modifier]
    import TSS [type_specifier]
    construct Mods [repeat modifier]
        ModTS
    construct LID [list variable_declarator]
        VD
    construct VDs [variable_declarators]
        LID
    construct NewD [declaration]
        Mods TSS VDs ';
    by 
        RD [. NewD]
end function 

function createTypeSpec VD [variable_declarator]
    replace [repeat type_specifier]
        RTS [repeat type_specifier]
    deconstruct VD
        VN [variable_name]
    construct NewTS [type_specifier]
        VN 
    by 
        RTS [. NewTS]
end function

function createTypeSpecWithInit VD [variable_declarator]
    replace [repeat type_specifier]
        RTS [repeat type_specifier]
    deconstruct VD
        VN [variable_name] OI [opt equals_variable_initializer]
    deconstruct OI
        Init [equals_variable_initializer]
    construct NewTS [type_specifier]
        VN 
    by 
        RTS [. NewTS]
end function
% 变量声明格式化输出操作完成
% ----------------------------------------------------------------