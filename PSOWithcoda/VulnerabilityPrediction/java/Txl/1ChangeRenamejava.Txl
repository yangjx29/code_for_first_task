% version 20200924 这个文件的作用是给所有的变量和方法重命名
% 提取出所有的变量名和方法名并实现重命名操作

% 这里定义id之间的映射关系
define id_map 
    [id] '- [id]
end define

include "java.grm"

redefine upper_macro_name
    ... | [id]  % In Java, adapt to method or field names
end redefine 

function main
    replace [package_declaration] 
        P [package_declaration]
    % 这里设置全局路径，使用的时候需要修改这个路径，这里表示随机变换的文件名
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/1Rename.random"
    by
        P [extractVarandMethodNameAndRename]  
end function 

function extractVarandMethodNameAndRename
    replace [package_declaration]
        P [package_declaration]
    % 提取类的字段变量 (相当于C中的全局变量)
    construct AllFieldVars [repeat variable_declarator]
        _ [^ P]  % Extract all field variable declarators from the program
    construct PureAllFieldVars [repeat id]
        _ [^ AllFieldVars] % Extract pure identifiers from field declarators
    
    % 提取方法中的局部变量
    construct AllLocalVars [repeat variable_declarator]
        _ [^ P]  % Extract local variable declarators from method bodies
    construct PureAllLocalVars [repeat id]
        _ [^ AllLocalVars]

    % 合并所有变量
    construct AllVar [repeat id]
        _ [. PureAllFieldVars] [. PureAllLocalVars] [sortId]  

    % 变量去重操作，获取独一无二的变量
    construct UniqueAllVar [repeat id]
        AllVar [select 1 1] [deduplication AllVar] % [message "ALL UNIQUE ID IS:"][print]
    import RandomPath [stringlit]
    construct RandomChange [repeat number]
        _ [readRandomFile RandomPath] 
    construct RandomName [repeat id]
        UniqueAllVar [write "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/Txl/id.txt"]
                     [system "python /data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/Txl/RandomName.py"]
                     [read "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/Txl/id.txt"]
                     [system "rm -rf /data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/Txl/id.txt"]
    construct IdMapChangedId [repeat id_map]
        _ [createMapId each UniqueAllVar RandomName] % [message "THE ID_MAP IS:"][print]
    construct ChangedUniqueAllVar [repeat id]
        _ [changedIdByMap each IdMapChangedId RandomChange] % [message "ALL NEW ID IS:"][print]
    export IdMapChangedId
    
    % 提取方法名 (相当于C中的upper_macro_name)
    construct UMethod [repeat method_declarator]
        _ [^ P] % Extract all method declarators
    construct UniqueUMethod [repeat id]
        _ [^ UMethod] [select 1 1] [deduplication UMethod] % [print]
    export UniqueUMethod [repeat id]
        UniqueUMethod

    % 替换变量名和方法名
    by 
        P [replaceRename each UniqueAllVar ChangedUniqueAllVar]
         [replaceMethodName each UniqueUMethod]
end function

% 这里进行id的变换
function changedId Id [id] Changed [number]
    replace [repeat id]
        RID [repeat id]
    construct NId [id]
        Id[!]
    construct ChangedId [id]
        Id [isIdNeedChanged NId Changed]
    by
        RID [. ChangedId]
end function 

% 这里使用id_map进行替换
function changedIdByMap IdMap [id_map] Changed [number]
    replace [repeat id]
        RID [repeat id]
    deconstruct IdMap
        Id [id] '- NId [id]
    construct ChangedId [id]
        Id [isIdNeedChanged NId Changed]
    by 
        RID [. ChangedId]
end function

% 这里进行变换后的变量名替换操作
function replaceRename Old [id] New [id]
    replace [package_declaration]
        P [package_declaration]
    construct Main [id]
        'main  % Java has a special case for "main" method
    where not
        Old [= Main]
    export OldID [id]
        Old
    export NewID [id]
        New
    import UniqueUMethod [repeat id]
    construct NewP [package_declaration]
        P [replaceUpperID each UniqueUMethod]
    by 
        NewP [$ Old New]
end function 

% 这里替换方法名
function replaceMethodName UMethod [id]
    replace [package_declaration]
        P [package_declaration]
    import OldID [id]
    import NewID [id]
    construct NewUMethod [id]
        UMethod
    where not
        UMethod [= OldID]
    by 
        P [$ UMethod NewID] 
end function

% 这里读取文件内容
rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

% 这里从id_map里面找到原来的id和修改之后的id之间的映射关系
function fromIdMapFindIdChanged Id [id] Changed [number]
    replace [repeat id]
        RID [repeat id]
    import IdMapChangedId [repeat id_map]
    deconstruct *[id_map] IdMapChangedId
        Id '- NId [id]
    construct ChangedId [id]
        Id [isIdNeedChanged NId Changed]
    by 
        RID [. ChangedId]
end function

% 这里来判断当前id是否需要变换，根据生成的随机数进行随机变换
function isIdNeedChanged NId [id] Changed [number]
    replace [id]
        Id [id]
    where 
        Changed [= 1]
    by 
        NId
end function

% 这里创建id_map，创建原始的独一无二的id和修改之后的id之间的映射关系
function createMapId Id [id] NId [id]
    replace [repeat id_map]
        RIdMap [repeat id_map]
    construct IdMap [id_map]
        Id '- NId
    by 
        RIdMap [. IdMap]
end function

% 将所有变量进行排序
rule sortId
    replace [repeat id]
        N1 [id] N2 [id] Rest [repeat id]
    where
        N1 [> N2]
    by
        N2 N1 Rest
end rule

% 变量去重操作
function deduplication AVar2 [repeat id]
    replace [repeat id]
        AVar1 [repeat id] 
    deconstruct AVar1
        V1 [id] Rest1 [repeat id]
    deconstruct AVar2
        V2 [id] Rest2 [repeat id] 
    construct V [repeat id]
        _ [. V1] 
    construct VV [repeat id]  
        V [isIdEqual V2] [isEqualSuccss V]
    by
        VV [. AVar1] [deduplication Rest2] 
end function  

% 这里判断替换是否成功，如果没有替换成功，则不进行操作
function isEqualSuccss AVar2 [repeat id]
    replace [repeat id]
        AVar1 [repeat id]
    deconstruct AVar1
        V1 [id] Rest1 [repeat id]
    deconstruct AVar2
        V2 [id] Rest2 [repeat id] 
    where
        V1 [= V2]
    by 
        %none
end function

function isIdEqual V2 [id] 
    replace [repeat id]
        V [repeat id]
    deconstruct V 
        V1 [id] Rest1 [repeat id]
    where 
        V1 [~= V2]
    construct V12 [repeat id]
        _ [. V2]
    by 
        V12
end function