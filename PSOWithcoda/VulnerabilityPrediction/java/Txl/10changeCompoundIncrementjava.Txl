% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% statements 
% 
% version 20200924
% 这个文件的主要功能是实现代码statement, expression等自身发生的变化

include "java.grm"

% ----------------------------------------------------------------
% 这里为了转换的需要重新定义了部分结构
% Java中调整expression_statement以支持增量操作转换

redefine expression_statement
    ... 
    | [assignment_expression] '= [assignment_expression] [add_op] [assignment_expression]
    | [assignment_expression] '= [assignment_expression] [mult_op] [assignment_expression]
    | [assignment_expression] '= [assignment_expression] [shift_op] [assignment_expression]
    | [assignment_expression] '= [assignment_expression] [bit_AND_operator] [assignment_expression]
    | [assignment_expression] '= [assignment_expression] [bit_XOR_operator] [assignment_expression]
    | [assignment_expression] '= [assignment_expression] [bit_OR_operator] [assignment_expression]
end redefine

% ----------------------------------------------------------------

%----------------------------------------------------------------
% 主函数的开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/10IncrementAssign.random"
    by 
        P [changeProgram] 
end function

% 主函数结束
% ---------------------------------------------------------------

% --------------------------------------------------------------
% 修改增量操作
function changeProgram
    replace [package_declaration]
        St [package_declaration]
    construct RES [repeat expression_statement]
        _ [^ St]
    import RandomPath [stringlit]
    export RandomChange [repeat number]
        _ [readRandomFile RandomPath] 
    export CountIncrementAssign [number]
        0
    construct NewRES [repeat expression_statement]
        _ [createNewIncrementAssignment each RES]
    by 
        St [replaceExpressionStatement each RES NewRES]
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

% ----------------------------------------------------------------
% 修改 +=, -=, *=, /=, %=, <<=, >>=, &=, ^=, |= 增量操作
function createNewIncrementAssignment ES [expression_statement]
    replace [repeat expression_statement]
        RES [repeat expression_statement]
    construct NewES [expression_statement]
        ES [incrementAssignmentAdd] 
           [incrementAssignmentSub] 
           [incrementAssignmentMul] 
           [incrementAssignmentDiv] 
           [incrementAssignmentMod] 
           [incrementAssignmentLeftShift] 
           [incrementAssignmentRightShift] 
           [incrementAssignmentAnd] 
           [incrementAssignmentXor] 
           [incrementAssignmentOr]
    by 
        RES [. NewES]
end function

function replaceExpressionStatement E [expression_statement] NE [expression_statement]
    replace *[expression_statement]
        E
    by 
        NE
end function

function incrementAssignmentAdd
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '+=
    construct NewES [expression_statement]
        AEL '= AEL '+ AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function isNeedChanged NewES [expression_statement] Changed [number]
    replace [expression_statement]
        ES [expression_statement]
    where
        Changed [= 1]
    by
        NewES
end function

function incrementAssignmentSub
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '-=
    construct NewES [expression_statement]
        AEL '= AEL '- AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentMul
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '*=
    construct NewES [expression_statement]
        AEL '= AEL '* AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentDiv
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '/=
    construct NewES [expression_statement]
        AEL '= AEL '/ AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentMod
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '%=
    construct NewES [expression_statement]
        AEL '= AEL '% AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentLeftShift
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '<<=
    construct NewES [expression_statement]
        AEL '= AEL '<< AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentRightShift
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '>>=
    construct NewES [expression_statement]
        AEL '= AEL '>> AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentAnd
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '&=
    construct NewES [expression_statement]
        AEL '= AEL '& AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentXor
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '^=
    construct NewES [expression_statement]
        AEL '= AEL '^ AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function

function incrementAssignmentOr
    replace [expression_statement]
        E [expression_statement]
    deconstruct E
        AEL [assignment_expression] AO [assignment_operator] AER [assignment_expression]
    deconstruct AO
        '|=
    construct NewES [expression_statement]
        AEL '= AEL '| AER ';
    import CountIncrementAssign [number]
    export CountIncrementAssign
        CountIncrementAssign [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountIncrementAssign CountIncrementAssign]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedIncreOp [expression_statement]
        E [isNeedChanged NewES Changed]
    by 
        ChangedIncreOp
end function
% 增量操作的转换完成
% ----------------------------------------------------------------