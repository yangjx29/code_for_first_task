% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% statements 
% 
% version 20200924
% 这里完成对逻辑表达式的修改

include "java.grm"
% include "extract_id.Txl" % Commented out as it’s not provided; assume it’s not needed

%----------------------------------------------------------------
% 主函数的开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/8Logic.random"
    by 
        P [changeProgram] 
end function

% 主函数结束
% ---------------------------------------------------------------

% ---------------------------------------------------------------
% 处理逻辑表达式的变换
function changeProgram
    replace [package_declaration]
        CSB [package_declaration]
    export CountLogicalOperator [number]
        0
    import RandomPath [stringlit]
    export RandomChange [repeat number]
        _ [readRandomFile RandomPath]
    construct RIOE [repeat inclusive_or_expression]
        _ [^ CSB]
    construct NewRIOE [repeat inclusive_or_expression]
        _ [changeInclusiveORExpression1 each RIOE]
    by 
        CSB [replaceProgram each RIOE NewRIOE]  
end function 

function replaceProgram O [inclusive_or_expression] N [inclusive_or_expression]
    replace *[inclusive_or_expression]
        O
    by 
        N
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

% ----------------------------------------------------------------
% 修改逻辑表达式: a < b --> b > a, a > b --> b < a, 
%                 a <= b --> b >= a, a >= b --> b <= a,
%                 a == b --> !(b != a), a != b --> !(b == a)
function changeLogicalOperator1
    replace [statement]
        St [statement]
    construct RIOE [repeat inclusive_or_expression]
        _ [^ St]
    construct NewRIOE [repeat inclusive_or_expression]
        _ [changeInclusiveORExpression1 each RIOE]
    by 
        St [replaceInclusiveORExpression each RIOE NewRIOE]
end function

function changeInclusiveORExpression1 IOE [inclusive_or_expression]
    replace [repeat inclusive_or_expression]
        RIOE [repeat inclusive_or_expression]
    export IsBlow [number]
        0
    export IsBlowEqual [number]
        0
    export IsEqual [number]
        0
    construct NewIOE [inclusive_or_expression]
        IOE [createNewIOEBlow1] [createNewIOEGreat1] 
            [createNewIOEBlowEqual1] [createNewIOEGreatEqual1] 
            [createNewIoNotEqual] [createNewIoEqual]
    by 
        RIOE [. NewIOE]
end function

function createNewIOEBlow1
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '< SE2 [shift_expression]
    construct NewIOE [inclusive_or_expression]
        SE2 '> SE1
    export IsBlow [number]
        1
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP 
end function

function isNddeChanged NewIOE [inclusive_or_expression] Changed [number]
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    where 
        Changed [= 1]
    by
        NewIOE
end function

function createNewIOEGreat1
    import IsBlow [number]
    where
        IsBlow [= 0]
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '> SE2 [shift_expression]
    construct NewIOE [inclusive_or_expression]
        SE2 '< SE1
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP 
end function

function createNewIOEBlowEqual1
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '<= SE2 [shift_expression]
    construct NewIOE [inclusive_or_expression]
        SE2 '>= SE1
    export IsBlowEqual [number]
        1
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP 
end function

function createNewIOEGreatEqual1
    import IsBlowEqual [number]
    where
        IsBlowEqual [= 0]
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '>= SE2 [shift_expression]
    construct NewIOE [inclusive_or_expression]
        SE2 '<= SE1
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP
end function

function createNewIoNotEqual
    import IsEqual [number]
    where 
        IsEqual [= 0]
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '!= SE2 [shift_expression]
    construct Expression [inclusive_or_expression]
        SE2 '== SE1
    construct ListExpression [list expression]
        Expression
    construct PE [parenthesized_expression]
        '( ListExpression ')
    construct NewIOE [inclusive_or_expression]
        '! PE
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP 
end function

function createNewIoEqual
    replace [inclusive_or_expression]
        IOE [inclusive_or_expression]
    deconstruct IOE
        SE1 [shift_expression] '== SE2 [shift_expression]
    construct Expression [inclusive_or_expression]
        SE2 '!= SE1
    construct ListExpression [list expression]
        Expression
    construct PE [parenthesized_expression]
        '( ListExpression ')
    construct NewIOE [inclusive_or_expression]
        '! PE
    export IsEqual [number]
        1
    import CountLogicalOperator [number]
    export CountLogicalOperator
        CountLogicalOperator [+ 1]
    import RandomChange [repeat number]
    construct ChangeNum [repeat number]
        RandomChange [select CountLogicalOperator CountLogicalOperator]
    deconstruct ChangeNum 
        Changed [number]
    construct ChangedLogicOP [inclusive_or_expression]
        IOE [isNddeChanged NewIOE Changed]   
    by 
        ChangedLogicOP 
end function

function replaceInclusiveORExpression OldIOE [inclusive_or_expression] NewIOE [inclusive_or_expression]
    replace *[inclusive_or_expression]
        OldIOE
    by 
        NewIOE
end function
% 逻辑表达式的修改完成
% ----------------------------------------------------------------