% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% statements 
% 这个文件主要实现修改for循环

include "java.grm"
% include "extract_id.Txl" % Commented out as it’s not provided; assume it’s not needed for this task

% ----------------------------------------------------------------
% 这里为了转换的需要重新定义了部分结构
% 在Java中，添加';'以消除潜在的语法冲突

% 重新定义while结构
redefine while_statement
    ... 
    | [expression] ';[NL] 'while '( [condition] ') [statement] 
    | '{ '; [NL] [IN] [opt local_variable_declaration] 'while '( [opt expression] ') [statement] [NL] [EX] '} [NL]
    | '; [NL] [repeat declaration_or_statement] 'while '( [opt expression] ') [statement] % For transforming other loops to while
end redefine

% 重新定义statement结构，用于for到while的转换
redefine statement 
    ... 
    | '{ [repeat statement] '}
end redefine

% ----------------------------------------------------------------

% 主函数的开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/2For.random"
    export RandomPathWhile [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/3While.random"
    by 
        P [changeProgram] 
end function

function changeProgram
    replace [package_declaration]
        CSB [package_declaration]
    by
        CSB [changeCompoundFor]
            [changeCompoundWhile]
end function

% 主函数结束
% ---------------------------------------------------------------

% ---------------------------------------------------------------
% 修改while循环
function changeCompoundWhile
    replace [package_declaration]
        CSB [package_declaration]
    construct S [repeat while_statement]
        _ [^ CSB]
    import RandomPathWhile [stringlit]
    construct RandomChangeWhile [repeat number]
        _ [readRandomFile RandomPathWhile]
    construct NewS [repeat statement]
        _ [changeWhileStatement each S RandomChangeWhile]
    construct NS [repeat statement]
        _ [fromWhileToStatement each S]
    by 
        CSB [replaceStatement each NS NewS]
end function

function changeWhileStatement While [while_statement] Change [number]
    replace [repeat statement]
        RS [repeat statement]
    construct S [statement]
        While
    construct NS [statement]
        S [newWhileStatement]
    construct Changed [statement]
        S [isNeedChanged NS Change]
    by 
        RS [. Changed]
end function

function isNeedChanged NS [statement] Change [number]
    replace [statement]
        St [statement]
    where
        Change [= 1]
    by
        NS
end function  

function newWhileStatement
    replace [statement]
        While [while_statement]
    deconstruct While
        'while '( E [condition] ') S [statement]
    construct SEmbed [statement]
        S % No need for embed handling in Java as blocks are explicit
    construct ForStatement [for_statement]
        'for '( '; E '; ') SEmbed
    by 
        ForStatement
end function

function fromWhileToStatement S [while_statement]
    replace [repeat statement]
        RS [repeat statement]
    construct NS [statement]
        S
    by 
        RS [. NS]
end function
% while循环转换结束
% ----------------------------------------------------------------

% ---------------------------------------------------------------
% 修改for语句
function changeCompoundFor
    replace [package_declaration]
        CSB [package_declaration]
    construct S [repeat for_statement]
        _ [^ CSB]
    construct LenFor [number]
        _ [length S]
    import RandomPath [stringlit]
    construct RandomChange [repeat number]
        _ [readRandomFile RandomPath]
    construct NewS [repeat statement]
        _ [changeForStatementCase0 each S RandomChange]
    construct NNewS [repeat statement]
        _ [changeForStatementCase1 each S RandomChange]
    construct NNNewS [repeat statement]
        _ [changeForStatementCase2 each S RandomChange]
    construct NS [repeat statement]
        _ [fromForToStatement each S]
    construct NCSB [package_declaration]
        CSB [replaceStatement each NS NNewS]
    construct NEwCSB [package_declaration]
        NCSB [replaceStatement each NS NewS]
    by
        NEwCSB [replaceStatement each NS NNNewS]
end function

function replaceStatement S [statement] NS [statement]
    replace *[statement]
        S  
    by
        NS
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

% -----------------------for-----------------------------------------
function changeForStatementCase2 For [for_statement] changed [number]
    replace [repeat statement]
        RS [repeat statement]
    construct S [statement]
        For
    construct NS [statement]
        S [newForStatement2]
    construct Changed [statement]
        S [isForNeedChanged NS changed]
    by 
        RS [. Changed]
end function

function newForStatement2
    replace [statement]
        For [for_statement]
    deconstruct For
        'for '( '; '; ') S2 [statement]
    construct WhileStatement [while_statement]
        '{ '; 'while '( 'true ') S2 '}
    by 
        WhileStatement
end function

function changeForStatementCase1 For [for_statement] changed [number]
    replace [repeat statement]
        RS [repeat statement]
    construct S [statement]
        For
    construct NS [statement]
        S [newForStatement1]
    construct Changed [statement]
        S [isForNeedChanged NS changed]
    by 
        RS [. Changed]
end function

function newForStatement1
    replace [statement]
        For [for_statement]
    deconstruct For
        'for '( FI [for_init] FE [for_expression] FU [for_update] ') S2 [statement]
    construct S2Embed [statement]
        S2
    construct RBI [repeat declaration_or_statement]
        _ [forSubCreateBlockItem1 S2Embed]
    construct NewRBI [repeat declaration_or_statement]
        RBI [forSubCreateBlockItem2 S2Embed]
    deconstruct FE
        OptE [opt expression] ';
    construct NewFU [repeat declaration_or_statement]
        _ [changeExpression each FU]
    construct NewFI [repeat declaration_or_statement]
        _ [changeForInit FI]
    construct NewS2 [repeat declaration_or_statement]
        _ [. NewRBI] [. NewFU]
    construct NewS2S [statement]
        '{ NewS2 '}
    construct NewC [opt expression]
        OptE [isNullI]
    construct WhileStatement [while_statement]
        '{ '; NewFI 'while '( NewC ') NewS2S '}
    by 
        WhileStatement
end function

function isNullI 
    replace [opt expression]
        OEL [opt expression]
    construct Null [opt expression]
    where 
        OEL [= Null]
    construct TE [expression]
        'true
    by 
        TE
end function

function fromForToStatement S [for_statement]
    replace [repeat statement]
        RS [repeat statement]
    construct NS [statement]
        S
    by 
        RS [. NS]
end function  

function changeForStatementCase0 For [for_statement] changed [number]
    replace [repeat statement]
        RS [repeat statement]
    construct S [statement]
        For
    construct NS [statement]
        S [newForStatement0]
    construct Changed [statement]
        S [isForNeedChanged NS changed]
    by  
        RS [. Changed]
end function

function isForNeedChanged NS [statement] Changed [number]
    replace [statement]
        St [statement]
    where
        Changed [= 1]
    by
        NS 
end function

function newForStatement0 
    replace [statement]
        For [for_statement]
    deconstruct For
        'for '( FI [for_init] FE [opt expression] '; ') S2 [statement]
    construct S2Embed [statement]
        S2
    construct RBI [repeat declaration_or_statement]
        _ [forSubCreateBlockItem1 S2Embed]
    construct NewRBI [repeat declaration_or_statement]
        RBI [forSubCreateBlockItem2 S2Embed]
    construct NewFI [repeat declaration_or_statement]
        _ [changeForInit FI]
    construct NewS2 [repeat declaration_or_statement]
        _ [. NewRBI]
    construct NewS2S [statement]
        '{ NewS2 '}
    construct NewFE [opt expression]
        FE [isNullI]
    construct WhileStatement [while_statement]
        '{ '; NewFI 'while '( NewFE ') NewS2S '}
    by 
        WhileStatement
end function

function forSubCreateBlockItem2 SS [statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    deconstruct SS
        '{ RS [repeat declaration_or_statement] '}
    by 
        RBI [. RS]
end function 

function forSubCreateBlockItem1 SS [statement]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    construct BI [declaration_or_statement]
        SS
    by 
        RBI [. BI]
end function 

function changeForInit FI [for_init]
    replace [repeat declaration_or_statement]
        RBI [repeat declaration_or_statement]
    deconstruct FI
        LVD [local_variable_declaration]
    by
        RBI [. LVD]
    |
    deconstruct FI
        LE [list expression] ';
    construct NewRBI [repeat declaration_or_statement]
        _ [changeExpression each LE]
    by
        RBI [. NewRBI]
end function

function changeExpression S [expression]
    replace [repeat declaration_or_statement]
        St [repeat declaration_or_statement]
    export isContinueExpress [number]
       