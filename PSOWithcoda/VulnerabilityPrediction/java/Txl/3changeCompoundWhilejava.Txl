% Txl v10.8 (7.5.20) (c) 1988-2020 Queen's University at Kingston
% statements 
% 
% version 20200924
% 这个文件主要是为了实现修改while循环

include "java.grm"

%----------------------------------------------------------------
% 主函数的开始
function main
    replace [package_declaration]
        P [package_declaration]
    export RandomPath [stringlit]
        "/data/yjx/code_for_first_task/PSOWithcoda/VulnerabilityPrediction/code/CountResult/3While.random"
    by 
        P [changeCompoundWhile] 
end function

% 这里修改文件里面的每个方法
function changeFunction
    replace [package_declaration]
        P [package_declaration]
    construct Methods [repeat method_declaration]
        _ [^ P] % Extract all method declarations from the package
    construct NewMethods [repeat method_declaration]
        _ [changeMethodDefinition each Methods] 
    by 
        P [replaceMethod each Methods NewMethods]
end function

function replaceMethod MD [method_declaration] NewMD [method_declaration]
    replace [method_declaration]
        MD
    by  
        NewMD
end function

% 这里对方法进行修改操作
function changeMethodDefinition MD [method_declaration]
    replace [repeat method_declaration]
        RMethodDefine [repeat method_declaration]   
    construct NewMD [method_declaration]
        MD [translateJavaMethod]
    by 
        RMethodDefine [. NewMD]
end function

% 这里对Java方法进行转换操作
function translateJavaMethod
    replace [method_declaration]
        Modifiers [repeat modifier] Gen [opt generic_parameter] 
        Type [type_specifier] Declarator [method_declarator] 
        Throws [opt throws] Body [method_body]
    by
        Modifiers Gen Type Declarator Throws 
        Body [changeCompound]
end function

% 这里处理方法体中的循环
function changeCompound
    replace [method_body]
        Block [block]
    by 
        Block [changeCompoundStatementBody]
    |
    replace [method_body]
        '; % Abstract or interface method
    by 
        ';
    |
    replace [method_body]
        'default Value [annotation_value] ';
    by 
        'default Value ';
end function

% 这里处理block内的语句
function changeCompoundStatementBody
    replace [block]
        '{ RS [repeat declaration_or_statement] '}
    by
        '{ RS [changeCompoundWhile] '}
end function 

% 主函数结束
% ---------------------------------------------------------------

% ---------------------------------------------------------------
% 修改while循环
function changeCompoundWhile
    replace [repeat declaration_or_statement]
        RS [repeat declaration_or_statement]
    construct S [repeat while_statement]
        _ [^ RS]
    import RandomPath [stringlit]
    construct RandomChangeWhile [repeat number]
        _ [readRandomFile RandomPath] 
    construct NewS [repeat statement]
        _ [changeWhileStatement each S RandomChangeWhile]
    construct NS [repeat statement]
        _ [fromWhileToStatement each S]
    by 
        RS [replaceStatement each NS NewS]
end function

rule readRandomFile FileName [stringlit]
    replace [repeat number]
        RN [repeat number]
    construct OptNextNumber [opt number]
        _ [fget FileName]
    deconstruct OptNextNumber
        NextNumber [number]
    by 
        RN [. NextNumber]
end rule

function replaceStatement S [statement] NS [statement]
    replace *[statement]
        S
    by
        NS
end function

function changeWhileStatement While [while_statement] Change [number]
    replace [repeat statement]
        RS [repeat statement]
    construct S [statement]
        While
    construct NS [statement]
        S [newWhileStatement]
    construct Changed [statement]
        S [isNeedChanged NS Change]
    by 
        RS [. Changed]
end function

function isNeedChanged NS [statement] Change [number]
    replace [statement]
        St [statement]
    where
        Change [= 1]
    by
        NS
end function  

function newWhileStatement
    replace [statement]
        While [while_statement]
    deconstruct While
        'while '( E [condition] ') S [statement]
    construct ForStatement [for_statement]
        'for '( '; E '; ') S
    by 
        ForStatement
end function

function fromWhileToStatement S [while_statement]
    replace [repeat statement]
        RS [repeat statement]
    construct NS [statement]
        S
    by 
        RS [. NS]
end function
% while循环转换结束
% ----------------------------------------------------------------