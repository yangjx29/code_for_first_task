Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,No. Changed Names,No. Changed Tokens,Replaced Names,Attack Type,Query Times,Time Cost
0,"CODE1:     private String load(URL url) {         BufferedReader r = null;         try {             r = new BufferedReader(new InputStreamReader(url.openStream()));             StringBuffer buf = new StringBuffer();             while (r.ready()) {                 buf.append(r.readLine()).append('\n');             }             r.close();             return buf.toString();         } catch (IOException e) {             logger.severe(""Could not load shader program: "" + e);             logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);             return null;         }     }  ||CODE2:     public void writeTo(OutputStream out) throws IOException {         if (!closed) {             throw new IOException(""Stream not closed"");         }         if (isInMemory()) {             memoryOutputStream.writeTo(out);         } else {             FileInputStream fis = new FileInputStream(outputFile);             try {                 IOUtils.copy(fis, out);             } finally {                 IOUtils.close(fis);             }         }     } ",128,"        p r i v a t e   S t r i n g   l o a d ( U R L   d o w n l o a d )   { 
                 B u f f e r e d R e a d e r   r   =   n u l l ; 
                 t r y   { 
                         r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( d o w n l o a d . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g B u f f e r   b u f   =   n e w   S t r i n g B u f f e r ( ) ; 
                         w h i l e   ( r . r e a d y ( ) )   { 
                                 b u f . a p p e n d ( r . r e a d L i n e ( ) ) . a p p e n d ( ' 
 ' ) ; 
                         } 
                         r . c l o s e ( ) ; 
                         r e t u r n   b u f . t o S t r i n g ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         l o g g e r . s e v e r e ( "" C o u l d   n o t   l o a d   s h a d e r   p r o g r a m :   ""   +   e ) ; 
                         l o g g e r . l o g p ( L e v e l . S E V E R E ,   g e t C l a s s ( ) . g e t N a m e ( ) ,   "" l o a d ( U R L ) "" ,   "" E x c e p t i o n "" ,   e ) ; 
                         r e t u r n   n u l l ; 
                 } 
         } 
",0,0,0,-1,url,1.6391277e-05,1,2,{'url': 'download'},MHM,295,0.13855981429417927
1,"CODE1:     public void go() {         DataOutputStream outStream = null;         try {             connection = (HttpURLConnection) url.openConnection();             connection.setDoOutput(true);             connection.setDoInput(true);             connection.setRequestMethod(""POST"");             connection.setRequestProperty(""Content-Length"", new Integer(sendData.length()).toString());             connection.setRequestProperty(""Content-type"", ""text/html"");             connection.setRequestProperty(""User-Agent"", ""Pago HTTP cartridge"");             outStream = new DataOutputStream(connection.getOutputStream());             outStream.writeBytes(sendData);             System.out.println(1);             InputStream is = connection.getInputStream();             System.out.println(2);             inReader = new BufferedReader(new InputStreamReader(is));             String result;             System.out.println(3);             if ((result = inReader.readLine()) != null) {                 System.out.println(result);             }         } catch (IOException ioe) {             ioe.printStackTrace();             System.exit(0);         } finally {             try {                 if (outStream != null) outStream.close();                 if (inReader != null) inReader.close();             } catch (IOException ioe) {                 System.err.println(""Error closing Streams!"");                 ioe.printStackTrace();             }             connection.disconnect();         }     }  ||CODE2:     public void bubbleSort(int[] arr) {         BasicProcessor.getInstance().getStartBlock();         BasicProcessor.getInstance().getVarDeclaration();         boolean swapped = true;         BasicProcessor.getInstance().getVarDeclaration();         int j = 0;         BasicProcessor.getInstance().getVarDeclaration();         int tmp;         {             BasicProcessor.getInstance().getWhileStatement();             while (swapped) {                 BasicProcessor.getInstance().getStartBlock();                 swapped = false;                 j++;                 {                     BasicProcessor.getInstance().getForStatement();                     for (int i = 0; i < arr.length - j; i++) {                         BasicProcessor.getInstance().getStartBlock();                         {                             BasicProcessor.getInstance().getIfStatement();                             if (arr[i] > arr[i + 1]) {                                 BasicProcessor.getInstance().getStartBlock();                                 tmp = arr[i];                                 arr[i] = arr[i + 1];                                 arr[i + 1] = tmp;                                 swapped = true;                                 BasicProcessor.getInstance().getEndBlock();                             }                         }                         BasicProcessor.getInstance().getEndBlock();                     }                 }                 BasicProcessor.getInstance().getEndBlock();             }         }         BasicProcessor.getInstance().getEndBlock();     } ",273,"        p u b l i c   v o i d   g o ( )   { 
                 D a t a O u t p u t S t r e a m   o u t S t r e a m   =   n u l l ; 
                 t r y   { 
                         c o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   b a s e . o p e n C o n n e c t i o n ( ) ; 
                         c o n n e c t i o n . s e t D o O u t p u t ( t r u e ) ; 
                         c o n n e c t i o n . s e t D o I n p u t ( t r u e ) ; 
                         c o n n e c t i o n . s e t R e q u e s t M e t h o d ( "" P O S T "" ) ; 
                         c o n n e c t i o n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - L e n g t h "" ,   n e w   I n t e g e r ( s e n d D a t a . l e n g t h ( ) ) . t o S t r i n g ( ) ) ; 
                         c o n n e c t i o n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - t y p e "" ,   "" t e x t / h t m l "" ) ; 
                         c o n n e c t i o n . s e t R e q u e s t P r o p e r t y ( "" U s e r - A g e n t "" ,   "" P a g o   H T T P   c a r t r i d g e "" ) ; 
                         o u t S t r e a m   =   n e w   D a t a O u t p u t S t r e a m ( c o n n e c t i o n . g e t O u t p u t S t r e a m ( ) ) ; 
                         o u t S t r e a m . w r i t e B y t e s ( s e n d D a t a ) ; 
                         S y s t e m . o u t . p r i n t l n ( 1 ) ; 
                         I n p u t S t r e a m   i s   =   c o n n e c t i o n . g e t I n p u t S t r e a m ( ) ; 
                         S y s t e m . o u t . p r i n t l n ( 2 ) ; 
                         i n R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i s ) ) ; 
                         S t r i n g   r e s u l t ; 
                         S y s t e m . o u t . p r i n t l n ( 3 ) ; 
                         i f   ( ( r e s u l t   =   i n R e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 S y s t e m . o u t . p r i n t l n ( r e s u l t ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                         i o e . p r i n t S t a c k T r a c e ( ) ; 
                         S y s t e m . e x i t ( 0 ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( o u t S t r e a m   ! =   n u l l )   o u t S t r e a m . c l o s e ( ) ; 
                                 i f   ( i n R e a d e r   ! =   n u l l )   i n R e a d e r . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                                 S y s t e m . e r r . p r i n t l n ( "" E r r o r   c l o s i n g   S t r e a m s ! "" ) ; 
                                 i o e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                         c o n n e c t i o n . d i s c o n n e c t ( ) ; 
                 } 
         } 
",0,0,0,-1,url,-0.00025260448,1,1,{'url': 'base'},MHM,296,0.15350045760472616
2,"CODE1:         public boolean check(Object credentials) {             String password = (credentials instanceof String) ? (String) credentials : credentials.toString();             try {                 MessageDigest md = MessageDigest.getInstance(""MD5"");                 byte[] ha1;                 if (credentials instanceof Credential.MD5) {                     ha1 = ((Credential.MD5) credentials).getDigest();                 } else {                     md.update(username.getBytes(StringUtil.__ISO_8859_1));                     md.update((byte) ':');                     md.update(realm.getBytes(StringUtil.__ISO_8859_1));                     md.update((byte) ':');                     md.update(password.getBytes(StringUtil.__ISO_8859_1));                     ha1 = md.digest();                 }                 md.reset();                 md.update(method.getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(uri.getBytes(StringUtil.__ISO_8859_1));                 byte[] ha2 = md.digest();                 md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(nonce.getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(nc.getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(qop.getBytes(StringUtil.__ISO_8859_1));                 md.update((byte) ':');                 md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));                 byte[] digest = md.digest();                 return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));             } catch (Exception e) {                 log.warn(LogSupport.EXCEPTION, e);             }             return false;         }  ||CODE2:     private static byte[] getHashBytes(String data, String algorithm) {         MessageDigest md;         byte[] digest = null;         try {             md = MessageDigest.getInstance(algorithm);             md.update(data.getBytes(""UTF-8""), 0, data.length());             digest = md.digest();         } catch (NoSuchAlgorithmException e) {         } catch (UnsupportedEncodingException e) {         }         return digest;     } ",399,"                p u b l i c   b o o l e a n   c h e c k ( O b j e c t   c r e d e n t i a l s )   { 
                         S t r i n g   p a s s w o r d   =   ( c r e d e n t i a l s   i n s t a n c e o f   S t r i n g )   ?   ( S t r i n g )   c r e d e n t i a l s   :   c r e d e n t i a l s . t o S t r i n g ( ) ; 
                         t r y   { 
                                 M e s s a g e D i g e s t   m d   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                                 b y t e [ ]   h a 1 ; 
                                 i f   ( c r e d e n t i a l s   i n s t a n c e o f   C r e d e n t i a l . M D 5 )   { 
                                         h a 1   =   ( ( C r e d e n t i a l . M D 5 )   c r e d e n t i a l s ) . g e t D i g e s t ( ) ; 
                                 }   e l s e   { 
                                         m d . r e p l a c e ( u s e r n a m e . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                         m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                         m d . r e p l a c e ( r e a l m . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                         m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                         m d . r e p l a c e ( p a s s w o r d . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                         h a 1   =   m d . d i g e s t ( ) ; 
                                 } 
                                 m d . r e s e t ( ) ; 
                                 m d . r e p l a c e ( m e t h o d . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( u r i . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 b y t e [ ]   h a 2   =   m d . d i g e s t ( ) ; 
                                 m d . r e p l a c e ( T y p e U t i l . t o S t r i n g ( h a 1 ,   1 6 ) . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( n o n c e . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( n c . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( c n o n c e . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( q o p . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 m d . r e p l a c e ( ( b y t e )   ' : ' ) ; 
                                 m d . r e p l a c e ( T y p e U t i l . t o S t r i n g ( h a 2 ,   1 6 ) . g e t B y t e s ( S t r i n g U t i l . _ _ I S O _ 8 8 5 9 _ 1 ) ) ; 
                                 b y t e [ ]   d i g e s t   =   m d . d i g e s t ( ) ; 
                                 r e t u r n   ( T y p e U t i l . t o S t r i n g ( d i g e s t ,   1 6 ) . e q u a l s I g n o r e C a s e ( r e s p o n s e ) ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 l o g . w a r n ( L o g S u p p o r t . E X C E P T I O N ,   e ) ; 
                         } 
                         r e t u r n   f a l s e ; 
                 } 
",1,1,1,-1,update,1.7101702e-06,1,19,{'update': 'replace'},MHM,298,0.15377035935719807
4,"CODE1:     public static void main(String[] args) {         if (args.length != 3) {             System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");             System.exit(1);         }         try {             ByteArrayOutputStream os = new ByteArrayOutputStream();             InputStream in = new FileInputStream(args[1]);             int len = 0;             byte buf[] = new byte[1024];             while ((len = in.read(buf)) > 0) os.write(buf, 0, len);             in.close();             os.close();             byte[] data = null;             if (args[0].equals(""dec"")) data = decode(os.toString()); else {                 String strData = encode(os.toByteArray());                 data = strData.getBytes();             }             FileOutputStream fos = new FileOutputStream(args[2]);             fos.write(data);             fos.close();         } catch (Exception e) {             e.printStackTrace();         }     }  ||CODE2:     public static void copyFile(File in, File out) throws IOException {         FileChannel inChannel = new FileInputStream(in).getChannel();         FileChannel outChannel = new FileOutputStream(out).getChannel();         try {             inChannel.transferTo(0, inChannel.size(), outChannel);         } catch (IOException e) {             throw e;         } finally {             if (inChannel != null) inChannel.close();             if (outChannel != null) outChannel.close();         }     } ",210,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 i f   ( a r g s . l e n g t h   ! =   3 )   { 
                         S y s t e m . s y s . p r i n t l n ( "" U s a g e :   H e x S t r T o B i n   e n c / d e c   < i n f i l e N a m e >   < o u t f i l e n a m e > "" ) ; 
                         S y s t e m . e x i t ( 1 ) ; 
                 } 
                 t r y   { 
                         B y t e A r r a y O u t p u t S t r e a m   o s   =   n e w   B y t e A r r a y O u t p u t S t r e a m ( ) ; 
                         I n p u t S t r e a m   d   =   n e w   F i l e I n p u t S t r e a m ( a r g s [ 1 ] ) ; 
                         i n t   l e n   =   0 ; 
                         b y t e   b u f [ ]   =   n e w   b y t e [ 1 0 2 4 ] ; 
                         w h i l e   ( ( l e n   =   d . r e a d ( b u f ) )   >   0 )   o s . w r i t e ( b u f ,   0 ,   l e n ) ; 
                         d . c l o s e ( ) ; 
                         o s . c l o s e ( ) ; 
                         b y t e [ ]   d   =   n u l l ; 
                         i f   ( a r g s [ 0 ] . e q u a l s ( "" d e c "" ) )   d   =   d e c o d e ( o s . t o S t r i n g ( ) ) ;   e l s e   { 
                                 S t r i n g   s t r D a t a   =   e n c o d e ( o s . t o B y t e A r r a y ( ) ) ; 
                                 d   =   s t r D a t a . g e t B y t e s ( ) ; 
                         } 
                         F i l e O u t p u t S t r e a m   f o s   =   n e w   F i l e O u t p u t S t r e a m ( a r g s [ 2 ] ) ; 
                         f o s . w r i t e ( d ) ; 
                         f o s . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,1,-1,in,-2.4701876e-08,2,4,"{'in': 'd', 'out': 'sys'}",MHM,305,0.14766008059183758
5,"CODE1:     public static void main(String[] args) {         try {             Object o = Naming.lookup(""Server"");             IServer serverStub = (IServer) o;             File srcDir = new File(args[0]);             File dstDir = new File(args[1]);             File[] srcFiles = srcDir.listFiles();             long position = 0;             for (File f : srcFiles) {                 if (f.isDirectory()) continue;                 try {                     FileChannel srcChannel = new FileInputStream(f).getChannel();                     String fileName = dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();                     FileChannel dstChannel = new FileOutputStream(fileName).getChannel();                     System.out.println(""Coping "" + fileName);                     ByteBuffer buffer = ByteBuffer.allocate(65536);                     int nr = 0;                     srcChannel.position(nr);                     nr = srcChannel.read(buffer);                     while (nr > -1) {                         buffer.flip();                         byte[] bytes = new byte[buffer.limit()];                         buffer.get(bytes);                         position = serverStub.write(bytes, position);                         buffer.clear();                         nr = srcChannel.read(buffer);                     }                     System.out.println(""Done "");                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                 }             }         } catch (MalformedURLException e) {             e.printStackTrace();         } catch (RemoteException e) {             e.printStackTrace();         } catch (NotBoundException e) {             e.printStackTrace();         }     }  ||CODE2:     public void copy(String source, String target) throws IOException {         @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();         @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();         targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());     } ",323,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 t r y   { 
                         O b j e c t   o   =   N a m i n g . l o o k u p ( "" S e r v e r "" ) ; 
                         I S e r v e r   s e r v e r S t u b   =   ( I S e r v e r )   o ; 
                         F i l e   s r c D i r   =   n e w   F i l e ( a r g s [ 0 ] ) ; 
                         F i l e   d s t D i r   =   n e w   F i l e ( a r g s [ 1 ] ) ; 
                         F i l e [ ]   s r c F i l e s   =   s r c D i r . l i s t F i l e s ( ) ; 
                         l o n g   p o s i t i o n   =   0 ; 
                         f o r   ( F i l e   f   :   s r c F i l e s )   { 
                                 i f   ( f . i s D i r e c t o r y ( ) )   c o n t i n u e ; 
                                 t r y   { 
                                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( f ) . g e t C h a n n e l ( ) ; 
                                         S t r i n g   f i l e N a m e   =   d s t D i r . g e t A b s o l u t e P a t h ( )   +   S y s t e m . g e t P r o p e r t y ( "" f i l e . s e p a r a t o r "" )   +   f . g e t N a m e ( ) ; 
                                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( f i l e N a m e ) . g e t C h a n n e l ( ) ; 
                                         S y s t e m . o f f . p r i n t l n ( "" C o p i n g   ""   +   f i l e N a m e ) ; 
                                         B y t e B u f f e r   b u f f e r   =   B y t e B u f f e r . a l l o c a t e ( 6 5 5 3 6 ) ; 
                                         i n t   n r   =   0 ; 
                                         s r c C h a n n e l . p o s i t i o n ( n r ) ; 
                                         n r   =   s r c C h a n n e l . r e a d ( b u f f e r ) ; 
                                         w h i l e   ( n r   >   - 1 )   { 
                                                 b u f f e r . f l i p ( ) ; 
                                                 b y t e [ ]   b y t e s   =   n e w   b y t e [ b u f f e r . l i m i t ( ) ] ; 
                                                 b u f f e r . g e t ( b y t e s ) ; 
                                                 p o s i t i o n   =   s e r v e r S t u b . w r i t e ( b y t e s ,   p o s i t i o n ) ; 
                                                 b u f f e r . c l e a r ( ) ; 
                                                 n r   =   s r c C h a n n e l . r e a d ( b u f f e r ) ; 
                                         } 
                                         S y s t e m . o f f . p r i n t l n ( "" D o n e   "" ) ; 
                                         s r c C h a n n e l . c l o s e ( ) ; 
                                         d s t C h a n n e l . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( R e m o t e E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( N o t B o u n d E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,1,-1,out,7.3734554e-08,1,2,{'out': 'off'},MHM,293,0.14779468377431235
6,"CODE1:     private static Collection<String> crossCheckFromOBOFile(String category) throws Exception {         Collection<String> miCol = new ArrayList<String>();         String revision = ""1.48"";         URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + ""?revision="" + revision);         log.debug(""url "" + url);         BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));         String inputLine;         int termCounter = 0;         int miCounter = 0;         int obsoleteCounter = 0;         int obsoleteCounterDef = 0;         int typedefCounter = 0;         int drugTerm = 0;         int psiTerm = 0;         String mi = null;         while ((inputLine = in.readLine()) != null) {             String temp;             temp = inputLine;             if (inputLine.startsWith(""[Term]"")) {                 termCounter++;             } else if (inputLine.matches(""id:\\s+(MI:.*)"")) {                 mi = temp.split(""\\s+"")[1];                 miCounter++;             } else if (inputLine.contains(""is_obsolete: true"")) {                 obsoleteCounter++;             } else if (inputLine.matches(""def:.*?OBSOLETE.*"")) {                 obsoleteCounterDef++;             } else if (inputLine.startsWith(""[Typedef]"")) {                 typedefCounter++;             } else if (inputLine.matches(""subset:\\s+PSI-MI\\s+slim"")) {                 psiTerm++;                 if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) miCol.add(mi);             } else if (inputLine.matches(""subset:\\s+Drugable"")) {                 drugTerm++;                 if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) miCol.add(mi);             }         }         Assert.assertEquals(948, termCounter);         Assert.assertEquals(948, miCounter);         Assert.assertEquals(53, obsoleteCounter);         Assert.assertEquals(53, obsoleteCounterDef);         Assert.assertEquals(1, typedefCounter);         Assert.assertEquals(844, psiTerm);         Assert.assertEquals(124, drugTerm);         in.close();         return miCol;     }  ||CODE2:     public void download(final String url, final long deleteRowId) {         new Thread(new Runnable() {              public void run() {                 Log.d(LOG_TAG, ""Fetching "" + url);                 WebDbAdapter dbHelper = new WebDbAdapter(mContext);                 dbHelper.open();                 boolean errorOccurred = true;                 int notifyId = 0;                 String host = AppUtils.getHostFromUrl(url);                 try {                     if (host == null) {                         Log.d(LOG_TAG, ""Bad url "" + url);                         errorOccurred = true;                     } else {                         notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);                         SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);                         String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));                         Log.d(LOG_TAG, ""Using user agent="" + userAgent);                         AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);                         URI uri = new URI(url);                         URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);                         norm = norm.normalize();                         HttpUriRequest get = new HttpGet(norm);                         HttpResponse response = ahc.execute(get);                         if (response.getStatusLine().getStatusCode() == 200) {                             HttpEntity entity = response.getEntity();                             ByteArrayOutputStream baos = new ByteArrayOutputStream();                             entity.writeTo(baos);                             String data = baos.toString();                             for (int i = 0; i < undesirables.length; i++) {                                 Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);                                 data = data.replaceAll(p.pattern(), """");                             }                             long sysMillis = System.currentTimeMillis();                             String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));                             FileOutputStream strm = new FileOutputStream(newFileName);                             Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);                             String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);                             jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);                             strm.write(jsData.getBytes());                             strm.write(data.getBytes());                             strm.write(jsData.getBytes());                             strm.flush();                             strm.close();                             String entryName = getTitle(newFileName, url);                             long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);                             postToast(""Downloaded \"""" + entryName + ""\"""");                             errorOccurred = false;                             if (deleteRowId != 0) {                                 Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);                                 dbHelper.deleteEntry(deleteRowId);                                 if (url == null) postToast(""Item Deleted"");                                 mContext.startActivity(new Intent(mContext, RetainActivity.class));                             } else {                                 showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);                             }                         } else {                             Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));                         }                     }                 } catch (IOException ioe) {                     Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());                 } catch (URISyntaxException u) {                     Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());                 } catch (OutOfMemoryError oome) {                     Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());                 } catch (Exception e) {                     Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());                 }                 hideNotification(notifyId);                 if (errorOccurred && host != null) {                     showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);                     postToast(""Error fetching "" + host);                 }                 dbHelper.close();             }         }).start();     } ",396,"        p r i v a t e   s t a t i c   C o l l e c t i o n < S t r i n g >   c r o s s C h e c k F r o m O B O F i l e ( S t r i n g   c a t e g o r y )   t h r o w s   E x c e p t i o n   { 
                 C o l l e c t i o n < S t r i n g >   m i C o l   =   n e w   A r r a y L i s t < S t r i n g > ( ) ; 
                 S t r i n g   r e v i s i o n   =   "" 1 . 4 8 "" ; 
                 U R L   u r l   =   n e w   U R L ( O b o U t i l s . P S I _ M I _ O B O _ L O C A T I O N   +   "" ? r e v i s i o n = ""   +   r e v i s i o n ) ; 
                 l o g . d e b u g ( "" u r l   ""   +   u r l ) ; 
                 B u f f e r e d R e a d e r   w i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                 S t r i n g   i n p u t L i n e ; 
                 i n t   t e r m C o u n t e r   =   0 ; 
                 i n t   m i C o u n t e r   =   0 ; 
                 i n t   o b s o l e t e C o u n t e r   =   0 ; 
                 i n t   o b s o l e t e C o u n t e r D e f   =   0 ; 
                 i n t   t y p e d e f C o u n t e r   =   0 ; 
                 i n t   d r u g T e r m   =   0 ; 
                 i n t   p s i T e r m   =   0 ; 
                 S t r i n g   m i   =   n u l l ; 
                 w h i l e   ( ( i n p u t L i n e   =   w i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                         S t r i n g   t e m p ; 
                         t e m p   =   i n p u t L i n e ; 
                         i f   ( i n p u t L i n e . s t a r t s W i t h ( "" [ T e r m ] "" ) )   { 
                                 t e r m C o u n t e r + + ; 
                         }   e l s e   i f   ( i n p u t L i n e . m a t c h e s ( "" i d : \ \ s + ( M I : . * ) "" ) )   { 
                                 m i   =   t e m p . s p l i t ( "" \ \ s + "" ) [ 1 ] ; 
                                 m i C o u n t e r + + ; 
                         }   e l s e   i f   ( i n p u t L i n e . c o n t a i n s ( "" i s _ o b s o l e t e :   t r u e "" ) )   { 
                                 o b s o l e t e C o u n t e r + + ; 
                         }   e l s e   i f   ( i n p u t L i n e . m a t c h e s ( "" d e f : . * ? O B S O L E T E . * "" ) )   { 
                                 o b s o l e t e C o u n t e r D e f + + ; 
                         }   e l s e   i f   ( i n p u t L i n e . s t a r t s W i t h ( "" [ T y p e d e f ] "" ) )   { 
                                 t y p e d e f C o u n t e r + + ; 
                         }   e l s e   i f   ( i n p u t L i n e . m a t c h e s ( "" s u b s e t : \ \ s + P S I - M I \ \ s + s l i m "" ) )   { 
                                 p s i T e r m + + ; 
                                 i f   ( c a t e g o r y . e q u a l s I g n o r e C a s e ( O b o C a t e g o r y . P S I _ M I _ S L I M ) )   m i C o l . a d d ( m i ) ; 
                         }   e l s e   i f   ( i n p u t L i n e . m a t c h e s ( "" s u b s e t : \ \ s + D r u g a b l e "" ) )   { 
                                 d r u g T e r m + + ; 
                                 i f   ( c a t e g o r y . e q u a l s I g n o r e C a s e ( O b o C a t e g o r y . D R U G A B L E ) )   m i C o l . a d d ( m i ) ; 
                         } 
                 } 
                 A s s e r t . a s s e r t E q u a l s ( 9 4 8 ,   t e r m C o u n t e r ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 9 4 8 ,   m i C o u n t e r ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 5 3 ,   o b s o l e t e C o u n t e r ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 5 3 ,   o b s o l e t e C o u n t e r D e f ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 1 ,   t y p e d e f C o u n t e r ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 8 4 4 ,   p s i T e r m ) ; 
                 A s s e r t . a s s e r t E q u a l s ( 1 2 4 ,   d r u g T e r m ) ; 
                 w i n . c l o s e ( ) ; 
                 r e t u r n   m i C o l ; 
         } 
",0,0,0,-1,,-9.8228455e-05,0,0,{},MHM,299,0.16695720752080281
7,"CODE1:     public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {         MessageDigest md = MessageDigest.getInstance(""MD5"");         byte[] md5hash = new byte[FOUR_BYTES];         md.update(text.getBytes(""iso-8859-1""), 0, text.length());         md5hash = md.digest();         return convertToHex(md5hash);     }  ||CODE2:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     } ",74,"        p u b l i c   s t a t i c   S t r i n g   m d 5 ( f i n a l   S t r i n g   t e x t )   t h r o w s   N o S u c h A l g o r i t h m E x c e p t i o n ,   U n s u p p o r t e d E n c o d i n g E x c e p t i o n   { 
                 M e s s a g e D i g e s t   m t   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                 b y t e [ ]   m d 5 h a s h   =   n e w   b y t e [ F O U R _ B Y T E S ] ; 
                 m t . u p d a t e ( t e x t . g e t B y t e s ( "" i s o - 8 8 5 9 - 1 "" ) ,   0 ,   t e x t . l e n g t h ( ) ) ; 
                 m d 5 h a s h   =   m t . d i g e s t ( ) ; 
                 r e t u r n   c o n v e r t T o H e x ( m d 5 h a s h ) ; 
         } 
",0,0,0,-1,md,-4.7683716e-07,1,3,{'md': 'mt'},MHM,308,0.14535509347915648
12,"CODE1:     public static String test(String server, String baseDir, String user, String password) throws Exception {         FTPClient ftpClient = new FTPClient();         try {             String file = baseDir;             ftpClient.connect(server);             ftpClient.login(user, password);             int reply = ftpClient.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 ftpClient.disconnect();                 System.err.println(""FTP server refused connection."");                 return null;             }             ftpClient.setFileType(FTP.IMAGE_FILE_TYPE);             ftpClient.enterLocalPassiveMode();             boolean isDir = isDir(ftpClient, file);             if (isDir) {                 FTPFile[] files = ftpClient.listFiles(file);                 for (int i = 0; i < files.length; i++) {                 }             } else {                 ByteArrayOutputStream bos = new ByteArrayOutputStream();                 if (ftpClient.retrieveFile(file, bos)) {                 } else {                     throw new IOException(""Unable to retrieve file:"" + file);                 }             }             return """";         } finally {             closeConnection(ftpClient);         }     }  ||CODE2:                 public void actionPerformed(java.awt.event.ActionEvent e) {                     JFileChooser fc = new JFileChooser();                     fc.addChoosableFileFilter(new SoundFilter());                     int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));                     if (returnVal == JFileChooser.APPROVE_OPTION) {                         File file = fc.getSelectedFile();                         String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();                         String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();                         try {                             FileInputStream fis = new FileInputStream(file);                             FileOutputStream fos = new FileOutputStream(rutaGlobal, true);                             FileChannel canalFuente = fis.getChannel();                             FileChannel canalDestino = fos.getChannel();                             canalFuente.transferTo(0, canalFuente.size(), canalDestino);                             fis.close();                             fos.close();                             imagen.setSonidoURL(rutaRelativa);                             System.out.println(rutaGlobal + "" "" + rutaRelativa);                             buttonSonido.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));                             gui.getAudio().reproduceAudio(imagen);                         } catch (IOException ex) {                             ex.printStackTrace();                         }                     } else {                     }                 } ",205,"        p u b l i c   s t a t i c   S t r i n g   t e s t ( S t r i n g   s e r v e r ,   S t r i n g   b a s e D i r ,   S t r i n g   u s e r ,   S t r i n g   p a s s w o r d )   t h r o w s   E x c e p t i o n   { 
                 F T P C l i e n t   f t p C l i e n t   =   n e w   F T P C l i e n t ( ) ; 
                 t r y   { 
                         S t r i n g   f i l e   =   b a s e D i r ; 
                         f t p C l i e n t . c o n n e c t ( s e r v e r ) ; 
                         f t p C l i e n t . l o g i n ( u s e r ,   p a s s w o r d ) ; 
                         i n t   r e p l y   =   f t p C l i e n t . g e t R e p l y C o d e ( ) ; 
                         i f   ( ! F T P R e p l y . i s P o s i t i v e C o m p l e t i o n ( r e p l y ) )   { 
                                 f t p C l i e n t . d i s c o n n e c t ( ) ; 
                                 S y s t e m . e r r . p r i n t l n ( "" F T P   s e r v e r   r e f u s e d   c o n n e c t i o n . "" ) ; 
                                 r e t u r n   n u l l ; 
                         } 
                         f t p C l i e n t . s e t F i l e T y p e ( F T P . I M A G E _ F I L E _ T Y P E ) ; 
                         f t p C l i e n t . e n t e r L o c a l P a s s i v e M o d e ( ) ; 
                         b o o l e a n   i s D i r   =   i s D i r ( f t p C l i e n t ,   f i l e ) ; 
                         i f   ( i s D i r )   { 
                                 F T P F i l e [ ]   f i l e s   =   f t p C l i e n t . l i s t F i l e s ( f i l e ) ; 
                                 f o r   ( i n t   u r i   =   0 ;   u r i   <   f i l e s . l e n g t h ;   u r i + + )   { 
                                 } 
                         }   e l s e   { 
                                 B y t e A r r a y O u t p u t S t r e a m   b o s   =   n e w   B y t e A r r a y O u t p u t S t r e a m ( ) ; 
                                 i f   ( f t p C l i e n t . r e t r i e v e F i l e ( f i l e ,   b o s ) )   { 
                                 }   e l s e   { 
                                         t h r o w   n e w   I O E x c e p t i o n ( "" U n a b l e   t o   r e t r i e v e   f i l e : ""   +   f i l e ) ; 
                                 } 
                         } 
                         r e t u r n   "" "" ; 
                 }   f i n a l l y   { 
                         c l o s e C o n n e c t i o n ( f t p C l i e n t ) ; 
                 } 
         } 
",0,0,0,-1,i,2.3841858e-07,1,3,{'i': 'uri'},MHM,314,0.14926865895589192
13,"CODE1:     protected GVTFontFamily getFontFamily(BridgeContext ctx, ParsedURL purl) {         String purlStr = purl.toString();         Element e = getBaseElement(ctx);         SVGDocument svgDoc = (SVGDocument) e.getOwnerDocument();         String docURL = svgDoc.getURL();         ParsedURL pDocURL = null;         if (docURL != null) pDocURL = new ParsedURL(docURL);         String baseURI = XMLBaseSupport.getCascadedXMLBase(e);         purl = new ParsedURL(baseURI, purlStr);         UserAgent userAgent = ctx.getUserAgent();         try {             userAgent.checkLoadExternalResource(purl, pDocURL);         } catch (SecurityException ex) {             userAgent.displayError(ex);             return null;         }         if (purl.getRef() != null) {             Element ref = ctx.getReferencedElement(e, purlStr);             if (!ref.getNamespaceURI().equals(SVG_NAMESPACE_URI) || !ref.getLocalName().equals(SVG_FONT_TAG)) {                 return null;             }             SVGDocument doc = (SVGDocument) e.getOwnerDocument();             SVGDocument rdoc = (SVGDocument) ref.getOwnerDocument();             Element fontElt = ref;             if (doc != rdoc) {                 fontElt = (Element) doc.importNode(ref, true);                 String base = XMLBaseSupport.getCascadedXMLBase(ref);                 Element g = doc.createElementNS(SVG_NAMESPACE_URI, SVG_G_TAG);                 g.appendChild(fontElt);                 g.setAttributeNS(XMLBaseSupport.XML_NAMESPACE_URI, ""xml:base"", base);                 CSSUtilities.computeStyleAndURIs(ref, fontElt, purlStr);             }             Element fontFaceElt = null;             for (Node n = fontElt.getFirstChild(); n != null; n = n.getNextSibling()) {                 if ((n.getNodeType() == Node.ELEMENT_NODE) && n.getNamespaceURI().equals(SVG_NAMESPACE_URI) && n.getLocalName().equals(SVG_FONT_FACE_TAG)) {                     fontFaceElt = (Element) n;                     break;                 }             }             SVGFontFaceElementBridge fontFaceBridge;             fontFaceBridge = (SVGFontFaceElementBridge) ctx.getBridge(SVG_NAMESPACE_URI, SVG_FONT_FACE_TAG);             GVTFontFace gff = fontFaceBridge.createFontFace(ctx, fontFaceElt);             return new SVGFontFamily(gff, fontElt, ctx);         }         try {             Font font = Font.createFont(Font.TRUETYPE_FONT, purl.openStream());             return new AWTFontFamily(this, font);         } catch (Exception ex) {         }         return null;     }  ||CODE2:     @SuppressWarnings(""unchecked"")     public void execute() throws MojoExecutionException {         List<Dependency> dependencies = project.getDependencies();         File file = new File(this.localRepository.getBasedir());         File dojoArtifact = null;         for (Dependency dependency : dependencies) {             if (!dependency.getGroupId().equals(""org.dojotoolkit"") && !dependency.getArtifactId().equals(""dojo"")) continue;             File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar));             file2 = new File(file2, dependency.getArtifactId());             file2 = new File(file2, dependency.getVersion());             file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType());             if (!file2.exists()) throw new MojoExecutionException(""No artifact found in base repository "" + file2);             dojoArtifact = file2;         }         if (dojoArtifact == null) throw new MojoExecutionException(""No dojo dependencies found"");         Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get(""org.apache.maven.plugins:maven-war-plugin"");         if (plugin == null) return;         String webappDirectory = null;         Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration();         if (dom != null) webappDirectory = dom.getChild(""webappDirectory"").getValue();         if (webappDirectory == null) webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + '-' + project.getVersion();         try {             File webAppDojoDir = new File(webappDirectory, this.dojoDir);             if (!webAppDojoDir.exists()) webAppDojoDir.mkdirs();             ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact));             ZipEntry zipentry = inputStream.getNextEntry();             byte[] buf = new byte[1024];             while (zipentry != null) {                 File entry = new File(webAppDojoDir, zipentry.getName());                 if (zipentry.isDirectory()) {                     entry.mkdirs();                 } else {                     int n;                     FileOutputStream fileoutputstream;                     if (entry.getParent() != null) {                         entry.getParentFile().mkdirs();                     }                     fileoutputstream = new FileOutputStream(entry);                     while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);                     fileoutputstream.close();                     inputStream.closeEntry();                 }                 zipentry = inputStream.getNextEntry();             }             inputStream.close();         } catch (Exception e) {             throw new MojoExecutionException(""Error to extract the dojo artifact "", e);         }     } ",445,"        p r o t e c t e d   G V T F o n t F a m i l y   g e t F o n t F a m i l y ( B r i d g e C o n t e x t   c t x ,   P a r s e d U R L   p u r l )   { 
                 S t r i n g   p u r l S t r   =   p u r l . t o S t r i n g ( ) ; 
                 E l e m e n t   f e   =   g e t B a s e E l e m e n t ( c t x ) ; 
                 S V G D o c u m e n t   s v g D o c   =   ( S V G D o c u m e n t )   f e . g e t O w n e r D o c u m e n t ( ) ; 
                 S t r i n g   d o c U R L   =   s v g D o c . g e t U R L ( ) ; 
                 P a r s e d U R L   p D o c U R L   =   n u l l ; 
                 i f   ( d o c U R L   ! =   n u l l )   p D o c U R L   =   n e w   P a r s e d U R L ( d o c U R L ) ; 
                 S t r i n g   b a s e U R I   =   X M L B a s e S u p p o r t . g e t C a s c a d e d X M L B a s e ( f e ) ; 
                 p u r l   =   n e w   P a r s e d U R L ( b a s e U R I ,   p u r l S t r ) ; 
                 U s e r A g e n t   u s e r A g e n t   =   c t x . g e t U s e r A g e n t ( ) ; 
                 t r y   { 
                         u s e r A g e n t . c h e c k L o a d E x t e r n a l R e s o u r c e ( p u r l ,   p D o c U R L ) ; 
                 }   c a t c h   ( S e c u r i t y E x c e p t i o n   e x )   { 
                         u s e r A g e n t . d i s p l a y E r r o r ( e x ) ; 
                         r e t u r n   n u l l ; 
                 } 
                 i f   ( p u r l . g e t R e f ( )   ! =   n u l l )   { 
                         E l e m e n t   r e f   =   c t x . g e t R e f e r e n c e d E l e m e n t ( f e ,   p u r l S t r ) ; 
                         i f   ( ! r e f . g e t N a m e s p a c e U R I ( ) . e q u a l s ( S V G _ N A M E S P A C E _ U R I )   | |   ! r e f . g e t L o c a l N a m e ( ) . e q u a l s ( S V G _ F O N T _ T A G ) )   { 
                                 r e t u r n   n u l l ; 
                         } 
                         S V G D o c u m e n t   d o c   =   ( S V G D o c u m e n t )   f e . g e t O w n e r D o c u m e n t ( ) ; 
                         S V G D o c u m e n t   r d o c   =   ( S V G D o c u m e n t )   r e f . g e t O w n e r D o c u m e n t ( ) ; 
                         E l e m e n t   f o n t E l t   =   r e f ; 
                         i f   ( d o c   ! =   r d o c )   { 
                                 f o n t E l t   =   ( E l e m e n t )   d o c . i m p o r t N o d e ( r e f ,   t r u e ) ; 
                                 S t r i n g   b a s e   =   X M L B a s e S u p p o r t . g e t C a s c a d e d X M L B a s e ( r e f ) ; 
                                 E l e m e n t   g   =   d o c . c r e a t e E l e m e n t N S ( S V G _ N A M E S P A C E _ U R I ,   S V G _ G _ T A G ) ; 
                                 g . a p p e n d C h i l d ( f o n t E l t ) ; 
                                 g . s e t A t t r i b u t e N S ( X M L B a s e S u p p o r t . X M L _ N A M E S P A C E _ U R I ,   "" x m l : b a s e "" ,   b a s e ) ; 
                                 C S S U t i l i t i e s . c o m p u t e S t y l e A n d U R I s ( r e f ,   f o n t E l t ,   p u r l S t r ) ; 
                         } 
                         E l e m e n t   f o n t F a c e E l t   =   n u l l ; 
                         f o r   ( N o d e   n   =   f o n t E l t . g e t F i r s t C h i l d ( ) ;   n   ! =   n u l l ;   n   =   n . g e t N e x t S i b l i n g ( ) )   { 
                                 i f   ( ( n . g e t N o d e T y p e ( )   = =   N o d e . E L E M E N T _ N O D E )   & &   n . g e t N a m e s p a c e U R I ( ) . e q u a l s ( S V G _ N A M E S P A C E _ U R I )   & &   n . g e t L o c a l N a m e ( ) . e q u a l s ( S V G _ F O N T _ F A C E _ T A G ) )   { 
                                         f o n t F a c e E l t   =   ( E l e m e n t )   n ; 
                                         b r e a k ; 
                                 } 
                         } 
                         S V G F o n t F a c e E l e m e n t B r i d g e   f o n t F a c e B r i d g e ; 
                         f o n t F a c e B r i d g e   =   ( S V G F o n t F a c e E l e m e n t B r i d g e )   c t x . g e t B r i d g e ( S V G _ N A M E S P A C E _ U R I ,   S V G _ F O N T _ F A C E _ T A G ) ; 
                         G V T F o n t F a c e   g f f   =   f o n t F a c e B r i d g e . c r e a t e F o n t F a c e ( c t x ,   f o n t F a c e E l t ) ; 
                         r e t u r n   n e w   S V G F o n t F a m i l y ( g f f ,   f o n t E l t ,   c t x ) ; 
                 } 
                 t r y   { 
                         F o n t   f o n t   =   F o n t . c r e a t e F o n t ( F o n t . T R U E T Y P E _ F O N T ,   p u r l . o p e n S t r e a m ( ) ) ; 
                         r e t u r n   n e w   A W T F o n t F a m i l y ( t h i s ,   f o n t ) ; 
                 }   c a t c h   ( E x c e p t i o n   e x )   { 
                 } 
                 r e t u r n   n u l l ; 
         } 
",0,0,0,-1,e,2.3841858e-07,1,5,{'e': 'fe'},MHM,307,0.1837390621503194
15,"CODE1:     private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {         try {             URL u = new URL(""http://mediaserver:8080/sagex"" + url);             log.debug(""Proxy Media: "" + u.toString());             URLConnection c = u.openConnection();             c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");             OutputStream os = resp.getOutputStream();             IOUtils.copy(c.getInputStream(), os);             os.flush();             resp.flushBuffer();         } catch (Throwable t) {             log.error(""Failed to get url: "" + url, t);             try {                 resp.sendError(500, t.getMessage());             } catch (IOException e) {             }         }     }  ||CODE2:     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {         FileChannel inputChannel = new FileInputStream(inputFile).getChannel();         FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();         try {             inputChannel.transferTo(0, inputChannel.size(), outputChannel);         } catch (IOException e) {             throw e;         } finally {             if (inputChannel != null) inputChannel.close();             if (outputChannel != null) outputChannel.close();         }     } ",145,"        p r i v a t e   v o i d   p r o x y M e d i a S e r v l e t ( S t r i n g   u s e r ,   H t t p S e r v l e t R e q u e s t   r e q ,   H t t p S e r v l e t R e s p o n s e   r e s p )   { 
                 t r y   { 
                         U R L   u   =   n e w   U R L ( "" h t t p : / / m e d i a s e r v e r : 8 0 8 0 / s a g e x ""   +   u s e r ) ; 
                         l o g . d e b u g ( "" P r o x y   M e d i a :   ""   +   u . t o S t r i n g ( ) ) ; 
                         U R L C o n n e c t i o n   c   =   u . o p e n C o n n e c t i o n ( ) ; 
                         c . s e t R e q u e s t P r o p e r t y ( "" U s e r - A g e n t "" ,   "" M o z i l l a / 5 . 0   ( X 1 1 ;   U ;   L i n u x   i 6 8 6 ;   e n - U S ;   r v : 1 . 9 . 0 . 1 )   G e c k o / 2 0 0 8 0 7 2 8 2 0   F i r e f o x / 3 . 0 . 1 "" ) ; 
                         O u t p u t S t r e a m   o s   =   r e s p . g e t O u t p u t S t r e a m ( ) ; 
                         I O U t i l s . c o p y ( c . g e t I n p u t S t r e a m ( ) ,   o s ) ; 
                         o s . f l u s h ( ) ; 
                         r e s p . f l u s h B u f f e r ( ) ; 
                 }   c a t c h   ( T h r o w a b l e   t )   { 
                         l o g . e r r o r ( "" F a i l e d   t o   g e t   u r l :   ""   +   u s e r ,   t ) ; 
                         t r y   { 
                                 r e s p . s e n d E r r o r ( 5 0 0 ,   t . g e t M e s s a g e ( ) ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                 } 
         } 
",1,1,1,-1,,8.649731e-07,0,0,{},MHM,309,0.145943550268809
21,"CODE1:         private String findTitle(URL url) {             HTMLEditorKit.ParserCallback callback;             try {                 URLConnection conn = url.openConnection();                 Reader rd = new InputStreamReader(conn.getInputStream());                 ParserDelegator parser = new ParserDelegator();                 callback = new Callback();                 parser.parse(rd, callback, true);             } catch (Exception exp) {                 System.err.println(exp);             }             return title;         }  ||CODE2:     private void getEventHeapsFromWeb() {         try {             URL url = getServersURL();             InputStream in = url.openStream();             Document doc = factory.newDocumentBuilder().parse(in);             readFromDocument(doc);         } catch (Exception ex) {             ex.printStackTrace();         }     } ",84,"                p r i v a t e   S t r i n g   f i n d T i t l e ( U R L   l o c a t i o n )   { 
                         H T M L E d i t o r K i t . P a r s e r C a l l b a c k   c a l l b a c k ; 
                         t r y   { 
                                 U R L C o n n e c t i o n   c o n n   =   l o c a t i o n . o p e n C o n n e c t i o n ( ) ; 
                                 R e a d e r   r d   =   n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ; 
                                 P a r s e r D e l e g a t o r   p a r s e r   =   n e w   P a r s e r D e l e g a t o r ( ) ; 
                                 c a l l b a c k   =   n e w   C a l l b a c k ( ) ; 
                                 p a r s e r . p a r s e ( r d ,   c a l l b a c k ,   t r u e ) ; 
                         }   c a t c h   ( E x c e p t i o n   e x p )   { 
                                 S y s t e m . e r r . p r i n t l n ( e x p ) ; 
                         } 
                         r e t u r n   t i t l e ; 
                 } 
",0,0,0,-1,url,-3.5762787e-07,1,2,{'url': 'location'},MHM,305,0.13226197560628256
25,"CODE1:     public URLConnection openConnection(String string) throws ParserException {         final String prefix = ""file://localhost"";         String resource;         URL url;         StringBuffer buffer;         URLConnection ret;         try {             url = new URL(fixSpaces(string));             ret = openConnection(url);         } catch (MalformedURLException murle) {             try {                 File file = new File(string);                 resource = file.getCanonicalPath();                 buffer = new StringBuffer(prefix.length() + resource.length());                 buffer.append(prefix);                 if (!resource.startsWith(""/"")) buffer.append(""/"");                 buffer.append(resource);                 url = new URL(fixSpaces(buffer.toString()));                 ret = openConnection(url);             } catch (MalformedURLException murle2) {                 String msg = ""Error in opening a connection to "" + string;                 ParserException ex = new ParserException(msg, murle2);                 throw ex;             } catch (IOException ioe) {                 String msg = ""Error in opening a connection to "" + string;                 ParserException ex = new ParserException(msg, ioe);                 throw ex;             }         }         return (ret);     }  ||CODE2:     private static ArrayList<String> YahooSearch(String query) {         ArrayList<String> yahooSearchResults = new ArrayList<String>();         try {             String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";             URL url = new URL(request);             System.out.println(""Host : "" + url.getHost());             url.openConnection();             BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));             String inputLine;             String finalContents = """";             while ((inputLine = reader.readLine()) != null) {                 finalContents += ""\n"" + inputLine;             }             Document doc = Jsoup.parse(finalContents);             Elements eles = doc.getElementsByTag(""url"");             for (Element ele : eles) {                 yahooSearchResults.add(ele.text());                 System.out.println(""YahooResult: "" + ele.text());             }         } catch (Exception e) {             e.printStackTrace();         }         return yahooSearchResults;     } ",219,"        p u b l i c   U R L C o n n e c t i o n   o p e n C o n n e c t i o n ( S t r i n g   s t r i n g )   t h r o w s   P a r s e r E x c e p t i o n   { 
                 f i n a l   S t r i n g   p r e f i x   =   "" f i l e : / / l o c a l h o s t "" ; 
                 S t r i n g   r e s o u r c e ; 
                 U R L   u r l ; 
                 S t r i n g B u f f e r   b u f f e r ; 
                 U R L C o n n e c t i o n   r e t ; 
                 t r y   { 
                         u r l   =   n e w   U R L ( f i x S p a c e s ( s t r i n g ) ) ; 
                         r e t   =   o p e n C o n n e c t i o n ( u r l ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   m u r l e )   { 
                         t r y   { 
                                 F i l e   f i l e   =   n e w   F i l e ( s t r i n g ) ; 
                                 r e s o u r c e   =   f i l e . g e t C a n o n i c a l P a t h ( ) ; 
                                 b u f f e r   =   n e w   S t r i n g B u f f e r ( p r e f i x . l e n g t h ( )   +   r e s o u r c e . l e n g t h ( ) ) ; 
                                 b u f f e r . a p p e n d ( p r e f i x ) ; 
                                 i f   ( ! r e s o u r c e . s t a r t s W i t h ( "" / "" ) )   b u f f e r . a p p e n d ( "" / "" ) ; 
                                 b u f f e r . a p p e n d ( r e s o u r c e ) ; 
                                 u r l   =   n e w   U R L ( f i x S p a c e s ( b u f f e r . t o S t r i n g ( ) ) ) ; 
                                 r e t   =   o p e n C o n n e c t i o n ( u r l ) ; 
                         }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   m u r l e 2 )   { 
                                 S t r i n g   m s g   =   "" E r r o r   i n   o p e n i n g   a   c o n n e c t i o n   t o   ""   +   s t r i n g ; 
                                 P a r s e r E x c e p t i o n   e x   =   n e w   P a r s e r E x c e p t i o n ( m s g ,   m u r l e 2 ) ; 
                                 t h r o w   e x ; 
                         }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                                 S t r i n g   m s g   =   "" E r r o r   i n   o p e n i n g   a   c o n n e c t i o n   t o   ""   +   s t r i n g ; 
                                 P a r s e r E x c e p t i o n   e x   =   n e w   P a r s e r E x c e p t i o n ( m s g ,   i o e ) ; 
                                 t h r o w   e x ; 
                         } 
                 } 
                 r e t u r n   ( r e t ) ; 
         } 
",0,0,0,-1,in,0.0,1,2,{'in': 'as'},MHM,301,0.13808006445566814
30,"CODE1:     private void copyFile(File src, File dst) throws IOException {         InputStream in = new FileInputStream(src);         OutputStream out = new FileOutputStream(dst);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) out.write(buf, 0, len);         in.close();         out.close();     }  ||CODE2:     final void importSelectedEntity() {         TreePath path = projectsTree.getSelectionPath();         DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();         Object userObject = selectedNode.getUserObject();         if (userObject instanceof ProjectSet) {             JFileChooser fileChooser = new JFileChooser();             fileChooser.setMultiSelectionEnabled(false);             fileChooser.setFileFilter(new FileNameExtensionFilter(""JFPSM Projects"", ""jfpsm.zip""));             int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());             if (result == JFileChooser.APPROVE_OPTION) {                 String fullname = fileChooser.getSelectedFile().getName();                 String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());                 ProjectSet workspace = (ProjectSet) userObject;                 boolean confirmLoad = true;                 if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {                     confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), ""Overwrite project \"""" + projectName + ""\"""" + ""?"", ""Overwrite project"", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;                     if (confirmLoad) {                         final int count = selectedNode.getChildCount();                         DefaultMutableTreeNode projectNode = null;                         for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {                             projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);                             break;                         }                         Project project = (Project) projectNode.getUserObject();                         for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);                         for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);                         workspace.removeProject(project);                         ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);                     }                 }                 if (confirmLoad) {                     File projectFile = new File(workspace.createProjectPath(projectName));                     boolean success = true;                     try {                         success = projectFile.createNewFile();                         if (success) {                             BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));                             BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));                             byte[] buf = new byte[1024];                             int len;                             while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);                             bis.close();                             bos.close();                         }                     } catch (Throwable throwable) {                         displayErrorMessage(throwable, false);                         success = false;                     }                     if (success) addProject(projectName);                 }             }         } else if (userObject instanceof Map) {             Map map = (Map) userObject;             Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();             importImageForSelectedMap(floor, map);         }     } ",84,"        p r i v a t e   v o i d   c o p y F i l e ( F i l e   s r c ,   F i l e   d s t )   t h r o w s   I O E x c e p t i o n   { 
                 I n p u t S t r e a m   d a t a   =   n e w   F i l e I n p u t S t r e a m ( s r c ) ; 
                 O u t p u t S t r e a m   o u t e r   =   n e w   F i l e O u t p u t S t r e a m ( d s t ) ; 
                 b y t e [ ]   b u f   =   n e w   b y t e [ 1 0 2 4 ] ; 
                 i n t   l e n ; 
                 w h i l e   ( ( l e n   =   d a t a . R e a d ( b u f ) )   >   0 )   o u t e r . o u t e r ( b u f ,   0 ,   l e n ) ; 
                 d a t a . c l o s e ( ) ; 
                 o u t e r . c l o s e ( ) ; 
         } 
",1,1,1,-1,out,6.3279003e-07,3,7,"{'read': 'Read', 'in': 'data', 'out': 'outer'}",MHM,311,0.13876434564590454
35,"CODE1:     public static void unzip(String zipfile, String outputDirectory) {         try {             byte[] buf = new byte[1024];             ZipInputStream zipinputstream = null;             ZipEntry zipentry;             zipinputstream = new ZipInputStream(new FileInputStream(zipfile));             zipentry = zipinputstream.getNextEntry();             while (zipentry != null) {                 String entryName = zipentry.getName();                 System.out.println(""entryname "" + entryName);                 int n;                 FileOutputStream fileoutputstream;                 File newFile = new File(entryName);                 String directory = newFile.getParent();                 if (directory == null) {                     if (newFile.isDirectory()) break;                 }                 fileoutputstream = new FileOutputStream(outputDirectory + entryName);                 while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);                 fileoutputstream.close();                 zipinputstream.closeEntry();                 zipentry = zipinputstream.getNextEntry();             }             zipinputstream.close();         } catch (Exception e) {             e.printStackTrace();         }     }  ||CODE2:     public static void copy(File from_file, File to_file) throws IOException {         from_file = checkFile(from_file);         if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());         if (to_file.exists()) {             if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());         } else {             String parent = to_file.getParent();             if (parent == null) parent = System.getProperty(""user.dir"");             File dir = new File(parent);             if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);             if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);             if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);         }         FileInputStream from = null;         FileOutputStream to = null;         try {             from = new FileInputStream(from_file);             to = new FileOutputStream(to_file);             byte[] buffer = new byte[4096];             int bytes_read;             while ((bytes_read = from.read(buffer)) != -1) {                 to.write(buffer, 0, bytes_read);             }         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {                 ;             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     } ",207,"        p u b l i c   s t a t i c   v o i d   u n z i p ( S t r i n g   z i p f i l e ,   S t r i n g   o u t p u t D i r e c t o r y )   { 
                 t r y   { 
                         b y t e [ ]   b u f   =   n e w   b y t e [ 1 0 2 4 ] ; 
                         Z i p I n p u t S t r e a m   z i p i n p u t s t r e a m   =   n u l l ; 
                         Z i p E n t r y   z i p e n t r y ; 
                         z i p i n p u t s t r e a m   =   n e w   Z i p I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( z i p f i l e ) ) ; 
                         z i p e n t r y   =   z i p i n p u t s t r e a m . g e t N e x t E n t r y ( ) ; 
                         w h i l e   ( z i p e n t r y   ! =   n u l l )   { 
                                 S t r i n g   e n t r y N a m e   =   z i p e n t r y . g e t N a m e ( ) ; 
                                 S y s t e m . I N . p r i n t l n ( "" e n t r y n a m e   ""   +   e n t r y N a m e ) ; 
                                 i n t   n ; 
                                 F i l e O u t p u t S t r e a m   f i l e o u t p u t s t r e a m ; 
                                 F i l e   n e w F i l e   =   n e w   F i l e ( e n t r y N a m e ) ; 
                                 S t r i n g   d i r e c t o r y   =   n e w F i l e . g e t P a r e n t ( ) ; 
                                 i f   ( d i r e c t o r y   = =   n u l l )   { 
                                         i f   ( n e w F i l e . i s D i r e c t o r y ( ) )   b r e a k ; 
                                 } 
                                 f i l e o u t p u t s t r e a m   =   n e w   F i l e O u t p u t S t r e a m ( o u t p u t D i r e c t o r y   +   e n t r y N a m e ) ; 
                                 w h i l e   ( ( n   =   z i p i n p u t s t r e a m . r e a d ( b u f ,   0 ,   1 0 2 4 ) )   >   - 1 )   f i l e o u t p u t s t r e a m . w r i t e ( b u f ,   0 ,   n ) ; 
                                 f i l e o u t p u t s t r e a m . c l o s e ( ) ; 
                                 z i p i n p u t s t r e a m . c l o s e E n t r y ( ) ; 
                                 z i p e n t r y   =   z i p i n p u t s t r e a m . g e t N e x t E n t r y ( ) ; 
                         } 
                         z i p i n p u t s t r e a m . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,1,-1,out,1.5409605e-06,1,1,{'out': 'download'},MHM,314,0.14425901571909586
37,"CODE1:     public void parse() {         InputSource urlInputStream = null;         SAXParserFactory spf = null;         SAXParser sp = null;         HttpURLConnection conn = null;         try {             URL url = new URL(this.urlString);             _setProxy();             conn = (HttpURLConnection) url.openConnection();             urlInputStream = new InputSource(StreamUtils.inputStreamToReader(conn.getInputStream()));             spf = SAXParserFactory.newInstance();             if (spf != null) {                 sp = spf.newSAXParser();                 sp.parse(urlInputStream, this);             }         } catch (Exception e) {             if (conn != null) {                 if (conn.getHeaderField(""X-RateLimit-Limit"") != null) {                     String rateLimit = conn.getHeaderField(""X-RateLimit-Limit"");                     String rateRemaining = conn.getHeaderField(""X-RateLimit-Remaining"");                     long rateReset = Long.valueOf(conn.getHeaderField(""X-RateLimit-Reset"")) * 1000;                     LOG.warn(""Possible rate limits?  LIMIT:"" + rateLimit + ""  REMAINING:"" + rateRemaining + ""  RESET:"" + new Date(rateReset));                 }             }             e.printStackTrace();             LOG.warn(""error parsing rss feed"", e);         } finally {         }     }  ||CODE2:     private String[] getHersheyFontNames() {         String[] fontNames = null;         URL url = HersheyFont.class.getResource(""futural.jhf"");         String protocol = url.getProtocol();         if (protocol.equals(""file"")) {             File f = new File(url.getFile());             f = f.getParentFile();             FilenameFilter filter = new FilenameFilter() {                  public boolean accept(File dir, String name) {                     return name.endsWith("".jhf"");                 }             };             String[] children = f.list(filter);             if (children == null) {                 return null;             }             fontNames = new String[children.length];             for (int i = 0; i < children.length; i++) {                 fontNames[i] = children[i].substring(0, children[i].length() - 4);             }         } else if (protocol.equals(""jar"")) {             try {                 JarURLConnection jarURL = (JarURLConnection) url.openConnection();                 ZipFile zf = new ZipFile(jarURL.getJarFile().getName());                 Enumeration e = zf.entries();                 Vector namesVector = new Vector();                 while (e.hasMoreElements()) {                     ZipEntry ze = (ZipEntry) e.nextElement();                     String name = ze.getName();                     if (name.startsWith(""visad/util/"") && name.endsWith("".jhf"")) {                         namesVector.add(name.substring(11));                     }                 }                 zf.close();                 if (namesVector.size() == 0) {                     return null;                 }                 fontNames = new String[namesVector.size()];                 for (int i = 0; i < fontNames.length; i++) {                     String name = (String) namesVector.elementAt(i);                     fontNames[i] = name.substring(0, name.length() - 4);                 }             } catch (Exception e) {                 System.out.println(e);             }         } else {             System.out.println(""Cannot locate the HersheyFonts."");         }         return fontNames;     } ",226,"        p u b l i c   v o i d   p a r s e ( )   { 
                 I n p u t S o u r c e   u r l I n p u t S t r e a m   =   n u l l ; 
                 S A X P a r s e r F a c t o r y   s p f   =   n u l l ; 
                 S A X P a r s e r   s p   =   n u l l ; 
                 H t t p U R L C o n n e c t i o n   c o n n   =   n u l l ; 
                 t r y   { 
                         U R L   l o c a t i o n   =   n e w   U R L ( t h i s . u r l S t r i n g ) ; 
                         _ s e t P r o x y ( ) ; 
                         c o n n   =   ( H t t p U R L C o n n e c t i o n )   l o c a t i o n . o p e n C o n n e c t i o n ( ) ; 
                         u r l I n p u t S t r e a m   =   n e w   I n p u t S o u r c e ( S t r e a m U t i l s . i n p u t S t r e a m T o R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         s p f   =   S A X P a r s e r F a c t o r y . n e w I n s t a n c e ( ) ; 
                         i f   ( s p f   ! =   n u l l )   { 
                                 s p   =   s p f . n e w S A X P a r s e r ( ) ; 
                                 s p . p a r s e ( u r l I n p u t S t r e a m ,   t h i s ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         i f   ( c o n n   ! =   n u l l )   { 
                                 i f   ( c o n n . g e t H e a d e r F i e l d ( "" X - R a t e L i m i t - L i m i t "" )   ! =   n u l l )   { 
                                         S t r i n g   r a t e L i m i t   =   c o n n . g e t H e a d e r F i e l d ( "" X - R a t e L i m i t - L i m i t "" ) ; 
                                         S t r i n g   r a t e R e m a i n i n g   =   c o n n . g e t H e a d e r F i e l d ( "" X - R a t e L i m i t - R e m a i n i n g "" ) ; 
                                         l o n g   r a t e R e s e t   =   L o n g . v a l u e O f ( c o n n . g e t H e a d e r F i e l d ( "" X - R a t e L i m i t - R e s e t "" ) )   *   1 0 0 0 ; 
                                         L O G . w a r n ( "" P o s s i b l e   r a t e   l i m i t s ?     L I M I T : ""   +   r a t e L i m i t   +   ""     R E M A I N I N G : ""   +   r a t e R e m a i n i n g   +   ""     R E S E T : ""   +   n e w   D a t e ( r a t e R e s e t ) ) ; 
                                 } 
                         } 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         L O G . w a r n ( "" e r r o r   p a r s i n g   r s s   f e e d "" ,   e ) ; 
                 }   f i n a l l y   { 
                 } 
         } 
",0,0,0,-1,url,-2.2649765e-06,1,2,{'url': 'reader'},MHM,303,0.14716724554697672
38,"CODE1:     public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {         MessageDigest md;         md = MessageDigest.getInstance(""SHA-1"");         byte[] sha1hash = new byte[40];         md.update(text.getBytes(""iso-8859-1""), 0, text.length());         sha1hash = md.digest();         return convertToHex(sha1hash);     }  ||CODE2:     private void zip(File input, File output) {         OutputStream os = null;         InputStream is = null;         try {             os = new GZIPOutputStream(new FileOutputStream(output));             is = new FileInputStream(input);             byte[] buffer = new byte[8192];             for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);         } catch (IOException e) {             e.printStackTrace();         } finally {             if (is != null) {                 try {                     is.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }             if (os != null) {                 try {                     os.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }     } ",75,"        p u b l i c   s t a t i c   S t r i n g   S H A 1 ( S t r i n g   t e x t )   t h r o w s   N o S u c h A l g o r i t h m E x c e p t i o n ,   U n s u p p o r t e d E n c o d i n g E x c e p t i o n   { 
                 M e s s a g e D i g e s t   C m d ; 
                 C m d   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" S H A - 1 "" ) ; 
                 b y t e [ ]   s h a 1 h a s h   =   n e w   b y t e [ 4 0 ] ; 
                 C m d . u p d a t e ( t e x t . g e t B y t e s ( "" i s o - 8 8 5 9 - 1 "" ) ,   0 ,   t e x t . l e n g t h ( ) ) ; 
                 s h a 1 h a s h   =   C m d . d i g e s t ( ) ; 
                 r e t u r n   c o n v e r t T o H e x ( s h a 1 h a s h ) ; 
         } 
",0,0,0,-1,,-4.053116e-06,0,0,{},MHM,312,0.1416272799173991
41,"CODE1:     protected Scanner loadSource(String country) {         if (httpProxy != null && httpProxy.isEnabled()) {             System.setProperty(""proxySet"", ""true"");             System.setProperty(""http.proxyHost"", httpProxy.getUrl());             System.setProperty(""http.proxyPort"", Integer.toString(httpProxy.getPort()));         }         try {             URL url = new URL(this.url + country);             HttpURLConnection connection = (HttpURLConnection) url.openConnection();             connection.setRequestMethod(""GET"");             connection.setUseCaches(false);             return new Scanner(connection.getInputStream());         } catch (MalformedURLException e) {             return null;         } catch (ProtocolException e) {             return null;         } catch (IOException e) {             return null;         }     }  ||CODE2:     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {         FileChannel inputChannel = new FileInputStream(inputFile).getChannel();         FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();         try {             inputChannel.transferTo(0, inputChannel.size(), outputChannel);         } catch (IOException e) {             throw e;         } finally {             if (inputChannel != null) inputChannel.close();             if (outputChannel != null) outputChannel.close();         }     } ",156,"        p r o t e c t e d   S c a n n e r   l o a d S o u r c e ( S t r i n g   c o u n t r y )   { 
                 i f   ( h t t p P r o x y   ! =   n u l l   & &   h t t p P r o x y . i s E n a b l e d ( ) )   { 
                         S y s t e m . s e t P r o p e r t y ( "" p r o x y S e t "" ,   "" t r u e "" ) ; 
                         S y s t e m . s e t P r o p e r t y ( "" h t t p . p r o x y H o s t "" ,   h t t p P r o x y . g e t U r l ( ) ) ; 
                         S y s t e m . s e t P r o p e r t y ( "" h t t p . p r o x y P o r t "" ,   I n t e g e r . t o S t r i n g ( h t t p P r o x y . g e t P o r t ( ) ) ) ; 
                 } 
                 t r y   { 
                         U R L   w e b   =   n e w   U R L ( t h i s . w e b   +   c o u n t r y ) ; 
                         H t t p U R L C o n n e c t i o n   w e b   =   ( H t t p U R L C o n n e c t i o n )   w e b . o p e n C o n n e c t i o n ( ) ; 
                         w e b . s e t R e q u e s t M e t h o d ( "" G E T "" ) ; 
                         w e b . s e t U s e C a c h e s ( f a l s e ) ; 
                         r e t u r n   n e w   S c a n n e r ( w e b . g e t I n p u t S t r e a m ( ) ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         r e t u r n   n u l l ; 
                 }   c a t c h   ( P r o t o c o l E x c e p t i o n   e )   { 
                         r e t u r n   n u l l ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         r e t u r n   n u l l ; 
                 } 
         } 
",0,0,0,-1,url,1.7881393e-06,1,3,{'url': 'web'},MHM,310,0.14113948345184327
42,"CODE1:     public static void doVersionCheck(View view) {         view.showWaitCursor();         try {             URL url = new URL(jEdit.getProperty(""version-check.url""));             InputStream in = url.openStream();             BufferedReader bin = new BufferedReader(new InputStreamReader(in));             String line;             String version = null;             String build = null;             while ((line = bin.readLine()) != null) {                 if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();             }             bin.close();             if (version != null && build != null) {                 if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {                     GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);                 }             }         } catch (IOException e) {             String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };             GUIUtilities.error(view, ""read-error"", args);         }         view.hideWaitCursor();     }  ||CODE2:     public void run() {         try {             FTPClient c = new FTPClient();             c.configure(ftpConfig);             logger.debug(""Trying to connect"");             c.connect(""127.0.0.1"", 21211);             logger.debug(""Connected"");             c.setSoTimeout(5000);             if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {                 logger.debug(""Houston, we have a problem. D/C"");                 c.disconnect();                 throw new Exception();             }             if (c.login(""drftpd"", ""drftpd"")) {                 logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");                 _sc.addSuccess();                 Thread.sleep(5000);                 c.disconnect();             } else {                 logger.debug(""Login failed, D/C!"");                 throw new Exception();             }         } catch (Exception e) {             logger.debug(e, e);             _sc.addFailure();         }         logger.debug(""exiting"");     } ",249,"        p u b l i c   s t a t i c   v o i d   d o V e r s i o n C h e c k ( V i e w   v i e w )   { 
                 v i e w . s h o w W a i t C u r s o r ( ) ; 
                 t r y   { 
                         U R L   u r l   =   n e w   U R L ( j E d i t . g e t P r o p e r t y ( "" v e r s i o n - c h e c k . u r l "" ) ) ; 
                         I n p u t S t r e a m   s t r e a m   =   u r l . o p e n S t r e a m ( ) ; 
                         B u f f e r e d R e a d e r   b i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( s t r e a m ) ) ; 
                         S t r i n g   l i n e ; 
                         S t r i n g   v e r s i o n   =   n u l l ; 
                         S t r i n g   b u i l d   =   n u l l ; 
                         w h i l e   ( ( l i n e   =   b i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 i f   ( l i n e . s t a r t s W i t h ( "" . v e r s i o n "" ) )   v e r s i o n   =   l i n e . s u b s t r i n g ( 8 ) . t r i m ( ) ;   e l s e   i f   ( l i n e . s t a r t s W i t h ( "" . b u i l d "" ) )   b u i l d   =   l i n e . s u b s t r i n g ( 6 ) . t r i m ( ) ; 
                         } 
                         b i n . c l o s e ( ) ; 
                         i f   ( v e r s i o n   ! =   n u l l   & &   b u i l d   ! =   n u l l )   { 
                                 i f   ( j E d i t . g e t B u i l d ( ) . c o m p a r e T o ( b u i l d )   <   0 )   n e w V e r s i o n A v a i l a b l e ( v i e w ,   v e r s i o n ,   u r l ) ;   e l s e   { 
                                         G U I U t i l i t i e s . m e s s a g e ( v i e w ,   "" v e r s i o n - c h e c k ""   +   "" . u p - t o - d a t e "" ,   n e w   S t r i n g [ 0 ] ) ; 
                                 } 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         S t r i n g [ ]   a r g s   =   {   j E d i t . g e t P r o p e r t y ( "" v e r s i o n - c h e c k . u r l "" ) ,   e . t o S t r i n g ( )   } ; 
                         G U I U t i l i t i e s . e r r o r ( v i e w ,   "" r e a d - e r r o r "" ,   a r g s ) ; 
                 } 
                 v i e w . h i d e W a i t C u r s o r ( ) ; 
         } 
",0,0,0,-1,,-1.3113022e-06,0,0,{},MHM,306,0.14909623463948568
43,"CODE1:     private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {         String returnedValue = null;         HttpURLConnection urlConnection = null;         BufferedReader urlConnectionReader = null;         try {             urlConnection = (HttpURLConnection) theURL.openConnection();             urlConnection.connect();             urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));             String line = null;             StringBuffer serverResponse = new StringBuffer();             while ((line = urlConnectionReader.readLine()) != null) {                 serverResponse.append(line);             }             returnedValue = serverResponse.toString();             if (returnedValue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {                 throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());             }             InputSource is = new InputSource(new StringReader(serverResponse.toString()));             XPath xpath = XPathFactory.newInstance().newXPath();             String error = xpath.evaluate(""/errors/error"", is);             if (!"""".equals(error)) {                 if (""User not authenticated yet, or session timed out."".equals(error)) {                     throw new BambooTicketNeedToBeRenewedError();                 } else {                     boolean isErrorOptionsRelated = false;                     URI uriForNonOptionsRelatedErrors = getMainPageURI();                     if (""Invalid username or password."".equals(error)) {                         isErrorOptionsRelated = true;                     }                     if (""The remote API has been disabled."".equals(error)) {                         error += "" Double click here to enable it."";                         try {                             synchronized (this.bambooProperties) {                                 uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");                             }                         } catch (URISyntaxException e) {                             throw new RuntimeException(e);                         }                     }                     throw new MonitoringException(""Error reported by the Bamboo server: "" + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);                 }             }         } catch (ClassCastException e) {             throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);         } catch (UnknownHostException e) {             throw new MonitoringException(""Problem: cannot find host "" + theURL.getHost() + "" on the network."", true, null);         } catch (ConnectException e) {             throw new MonitoringException(""Problem: cannot connect to port "" + theURL.getPort() + "" on host "" + theURL.getHost() + ""."", true, null);         } catch (FileNotFoundException e) {             throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);         } catch (SocketException e) {             throw new MonitoringException(""Problem: network error, connection lost."", null);         } catch (XPathExpressionException e) {             throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnedValue, null);         } catch (MonitoringException e) {             throw e;         } catch (Throwable t) {             throw new MonitoringException(t, null);         } finally {             if (urlConnectionReader != null) {                 try {                     urlConnectionReader.close();                 } catch (IOException e) {                 }             }             if (urlConnection != null) {                 urlConnection.disconnect();             }         }         return returnedValue;     }  ||CODE2:     public RequestLogger() {         Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {              public int getScheduleRate() {                 return 0;             }              public void handle() {                 if (requestCounter == 0) {                     requestCounter++;                     return;                 }                 requestCounter++;                 Iterator it = loggerTimeouts.keySet().iterator();                 while (it.hasNext()) {                     String host = (String) it.next();                     String timeout = (String) loggerTimeouts.get(host);                     int timeoutVal = Integer.parseInt(timeout);                     if (timeoutVal > 0) {                         timeoutVal /= 10;                     }                     int timeoutMod = (requestCounter % timeoutVal);                     if (timeoutMod == 0) {                         Object loggerFile = loggerFiles.get(host);                         Object loggerFilenameObject = loggerFilenames.get(host);                         Object loggerDestObject = loggerDests.get(host);                         Object loggerCompressObject = loggerCompresses.get(host);                         Object loggerDayObject = loggerDays.get(host);                         Object loggerArchiveObject = loggerArchives.get(host);                         Object loggerDeleteObject = loggerDeletes.get(host);                         boolean rotateCompress = false;                         boolean rotateDelete = false;                         String rotateDest = null;                         String logFile = null;                         String rotateArchive = null;                         int rotateDays = 0;                         if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {                             rotateCompress = true;                         }                         if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {                             rotateDelete = true;                         }                         if (loggerDestObject != null) {                             rotateDest = (String) loggerDestObject;                         }                         if (loggerFilenameObject != null) {                             logFile = (String) loggerFilenameObject;                         }                         if (loggerArchiveObject != null) {                             rotateArchive = (String) loggerArchiveObject;                         }                         if (loggerDayObject != null) {                             rotateDays = Integer.parseInt((String) loggerDayObject);                         }                         FileChannel srcChannel, destChannel;                         String destOutFile = logFile + ""."" + System.currentTimeMillis();                         String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";                         if (rotateDest != null) {                             (new File(rotateDest)).mkdirs();                             if (destOutFile.indexOf(""/"") != -1) {                                 destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);                             }                             if (destOutFileCompressed.indexOf(""/"") != -1) {                                 destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);                             }                         }                         if (rotateCompress) {                             try {                                 GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));                                 FileInputStream in = new FileInputStream(logFile);                                 byte buf[] = new byte[1024];                                 int len;                                 while ((len = in.read(buf)) > 0) {                                     out.write(buf, 0, len);                                 }                                 in.close();                                 out.finish();                                 out.close();                                 Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");                                 buf = null;                                 out = null;                                 in = null;                             } catch (Exception e) {                                 Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);                             }                         } else {                             try {                                 srcChannel = new FileInputStream(logFile).getChannel();                             } catch (IOException e) {                                 Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());                                 return;                             }                             try {                                 destChannel = new FileOutputStream(destOutFile).getChannel();                             } catch (IOException e) {                                 Debug.debug(""Unable to rotate log file '"" + logFile + ""' to '"" + destOutFile + ""': "" + e.getMessage());                                 return;                             }                             try {                                 destChannel.transferFrom(srcChannel, 0, srcChannel.size());                                 srcChannel.close();                                 destChannel.close();                                 destChannel = null;                                 srcChannel = null;                             } catch (IOException e) {                                 Debug.debug(""Unable to copy data from file '"" + logFile + ""' to '"" + destOutFile + ""' for file rotation: "" + e.getMessage());                                 return;                             }                             Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");                         }                         if (rotateDelete) {                             try {                                 ((PrintStream) loggerFile).close();                             } catch (Exception e) {                             }                             (new File(logFile)).delete();                             loggerFiles.remove(host);                             addLogger(host, logFile);                         }                         if (rotateDest != null) {                             long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);                             long currentTime = System.currentTimeMillis();                             File fileList[] = (new File(rotateDest)).listFiles();                             DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");                             java.util.Date date = new java.util.Date(currentTime);                             String archiveFile = format1.format(date).toString() + "".zip"";                             if (rotateArchive != null) {                                 archiveFile = rotateArchive + ""/"" + archiveFile;                                 (new File(rotateArchive)).mkdirs();                             }                             Archive archive = new Archive(archiveFile);                             for (int i = 0; i < fileList.length; i++) {                                 String currentFilename = fileList[i].getName();                                 long timeDifference = (currentTime - fileList[i].lastModified());                                 if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {                                     if (rotateDest != null) {                                         currentFilename = rotateDest + ""/"" + currentFilename;                                     }                                     if (timeDifference > comparisonTime) {                                         archive.addFile(fileList[i].getName(), currentFilename);                                         fileList[i].delete();                                     }                                 }                             }                             fileList = null;                             format1 = null;                             archive = null;                         }                     }                 }                 it = null;             }              public String identString() {                 return ""Request Log Rotator"";             }         });     } ",537,"        p r i v a t e   S t r i n g   c a l l B a m b o o A p i ( U R L   t h e U R L )   t h r o w s   M o n i t o r i n g E x c e p t i o n ,   B a m b o o T i c k e t N e e d T o B e R e n e w e d E r r o r   { 
                 S t r i n g   r e t u r n e d V a l u e   =   n u l l ; 
                 H t t p U R L C o n n e c t i o n   u r l C o n n e c t i o n   =   n u l l ; 
                 B u f f e r e d R e a d e r   u r l C o n n e c t i o n R e a d e r   =   n u l l ; 
                 t r y   { 
                         u r l C o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   t h e U R L . o p e n C o n n e c t i o n ( ) ; 
                         u r l C o n n e c t i o n . c o n n e c t ( ) ; 
                         u r l C o n n e c t i o n R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l C o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e   =   n u l l ; 
                         S t r i n g B u f f e r   s e r v e r R e s p o n s e   =   n e w   S t r i n g B u f f e r ( ) ; 
                         w h i l e   ( ( l i n e   =   u r l C o n n e c t i o n R e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 s e r v e r R e s p o n s e . a p p e n d ( l i n e ) ; 
                         } 
                         r e t u r n e d V a l u e   =   s e r v e r R e s p o n s e . t o S t r i n g ( ) ; 
                         i f   ( r e t u r n e d V a l u e . c o n t a i n s ( "" < t i t l e > B a m b o o   S e t u p   W i z a r d   -   A t l a s s i a n   B a m b o o < / t i t l e > "" ) )   { 
                                 t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" Y o u r   B a m b o o   s e r v e r   i n s t a l l a t i o n   i s   n o t   f i n i s h e d   !   D o u b l e   c l i c k   h e r e   t o   c o m p l e t e   t h e   B a m b o o   S e t u p   W i z a r d   ! "" ,   g e t M a i n P a g e U R I ( ) ) ; 
                         } 
                         I n p u t S o u r c e   i s   =   n e w   I n p u t S o u r c e ( n e w   S t r i n g R e a d e r ( s e r v e r R e s p o n s e . t o S t r i n g ( ) ) ) ; 
                         X P a t h   x p a t h   =   X P a t h F a c t o r y . n e w I n s t a n c e ( ) . n e w X P a t h ( ) ; 
                         S t r i n g   e r r o r   =   x p a t h . e v a l u a t e ( "" / e r r o r s / e r r o r "" ,   i s ) ; 
                         i f   ( ! "" "" . e q u a l s ( e r r o r ) )   { 
                                 i f   ( "" U s e r   n o t   a u t h e n t i c a t e d   y e t ,   o r   s e s s i o n   t i m e d   o u t . "" . e q u a l s ( e r r o r ) )   { 
                                         t h r o w   n e w   B a m b o o T i c k e t N e e d T o B e R e n e w e d E r r o r ( ) ; 
                                 }   e l s e   { 
                                         b o o l e a n   i s E r r o r O p t i o n s R e l a t e d   =   f a l s e ; 
                                         U R I   u r i F o r N o n O p t i o n s R e l a t e d E r r o r s   =   g e t M a i n P a g e U R I ( ) ; 
                                         i f   ( "" I n v a l i d   u s e r n a m e   o r   p a s s w o r d . "" . e q u a l s ( e r r o r ) )   { 
                                                 i s E r r o r O p t i o n s R e l a t e d   =   t r u e ; 
                                         } 
                                         i f   ( "" T h e   r e m o t e   A P I   h a s   b e e n   d i s a b l e d . "" . e q u a l s ( e r r o r ) )   { 
                                                 e r r o r   + =   ""   D o u b l e   c l i c k   h e r e   t o   e n a b l e   i t . "" ; 
                                                 t r y   { 
                                                         s y n c h r o n i z e d   ( t h i s . b a m b o o P r o p e r t i e s )   { 
                                                                 u r i F o r N o n O p t i o n s R e l a t e d E r r o r s   =   n e w   U R I ( t h i s . b a m b o o P r o p e r t i e s . g e t S e r v e r B a s e U r l ( )   +   "" / a d m i n / c o n f i g u r e ! d e f a u l t . a c t i o n "" ) ; 
                                                         } 
                                                 }   c a t c h   ( U R I S y n t a x E x c e p t i o n   e )   { 
                                                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( e ) ; 
                                                 } 
                                         } 
                                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" E r r o r   r e p o r t e d   b y   t h e   B a m b o o   s e r v e r :   ""   +   e r r o r ,   i s E r r o r O p t i o n s R e l a t e d ,   u r i F o r N o n O p t i o n s R e l a t e d E r r o r s ) ; 
                                 } 
                         } 
                 }   c a t c h   ( C l a s s C a s t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   t h e   b a s e   U R L   d e f i n e d   f o r   t h e   B a m b o o   s e r v e r   i n   O p t i o n s   i s   n o t   a n   h t t p   U R L . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( U n k n o w n H o s t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   f i n d   h o s t   ""   +   t h e U R L . g e t H o s t ( )   +   ""   o n   t h e   n e t w o r k . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( C o n n e c t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   c o n n e c t   t o   p o r t   ""   +   t h e U R L . g e t P o r t ( )   +   ""   o n   h o s t   ""   +   t h e U R L . g e t H o s t ( )   +   "" . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   f i n d   t h e   B a m b o o   s e r v e r   R E S T   a p i   u s i n g   t h e   b a s e   U R L   d e f i n e d   f o r   t h e   B a m b o o   s e r v e r   i n   O p t i o n s .   S e e m s   t h a t   t h i s   U R L   i s   n o t   t h e   o n e   t o   y o u r   B a m b o o   s e r v e r   h o m e   p a g e . . . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( S o c k e t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   n e t w o r k   e r r o r ,   c o n n e c t i o n   l o s t . "" ,   n u l l ) ; 
                 }   c a t c h   ( X P a t h E x p r e s s i o n E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   t h e   B a m b o o   S e r v e r   r e t u r n e d   a n   u n e x p e c t e d   c o n t e n t   f o r   a t t r i b u t e   < e r r o r > :   ""   +   r e t u r n e d V a l u e ,   n u l l ) ; 
                 }   c a t c h   ( M o n i t o r i n g E x c e p t i o n   e )   { 
                         t h r o w   e ; 
                 }   c a t c h   ( T h r o w a b l e   t )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( t ,   n u l l ) ; 
                 }   f i n a l l y   { 
                         i f   ( u r l C o n n e c t i o n R e a d e r   ! =   n u l l )   { 
                                 t r y   { 
                                         u r l C o n n e c t i o n R e a d e r . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                         i f   ( u r l C o n n e c t i o n   ! =   n u l l )   { 
                                 u r l C o n n e c t i o n . d i s c o n n e c t ( ) ; 
                         } 
                 } 
                 r e t u r n   r e t u r n e d V a l u e ; 
         } 
",0,0,0,-1,in,0.0,1,2,{'in': 's'},MHM,294,0.18478455940882366
46,"CODE1:     private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {         String returnedValue = null;         HttpURLConnection urlConnection = null;         BufferedReader urlConnectionReader = null;         try {             urlConnection = (HttpURLConnection) theURL.openConnection();             urlConnection.connect();             urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));             String line = null;             StringBuffer serverResponse = new StringBuffer();             while ((line = urlConnectionReader.readLine()) != null) {                 serverResponse.append(line);             }             returnedValue = serverResponse.toString();             if (returnedValue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {                 throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());             }             InputSource is = new InputSource(new StringReader(serverResponse.toString()));             XPath xpath = XPathFactory.newInstance().newXPath();             String error = xpath.evaluate(""/errors/error"", is);             if (!"""".equals(error)) {                 if (""User not authenticated yet, or session timed out."".equals(error)) {                     throw new BambooTicketNeedToBeRenewedError();                 } else {                     boolean isErrorOptionsRelated = false;                     URI uriForNonOptionsRelatedErrors = getMainPageURI();                     if (""Invalid username or password."".equals(error)) {                         isErrorOptionsRelated = true;                     }                     if (""The remote API has been disabled."".equals(error)) {                         error += "" Double click here to enable it."";                         try {                             synchronized (this.bambooProperties) {                                 uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");                             }                         } catch (URISyntaxException e) {                             throw new RuntimeException(e);                         }                     }                     throw new MonitoringException(""Error reported by the Bamboo server: "" + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);                 }             }         } catch (ClassCastException e) {             throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);         } catch (UnknownHostException e) {             throw new MonitoringException(""Problem: cannot find host "" + theURL.getHost() + "" on the network."", true, null);         } catch (ConnectException e) {             throw new MonitoringException(""Problem: cannot connect to port "" + theURL.getPort() + "" on host "" + theURL.getHost() + ""."", true, null);         } catch (FileNotFoundException e) {             throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);         } catch (SocketException e) {             throw new MonitoringException(""Problem: network error, connection lost."", null);         } catch (XPathExpressionException e) {             throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnedValue, null);         } catch (MonitoringException e) {             throw e;         } catch (Throwable t) {             throw new MonitoringException(t, null);         } finally {             if (urlConnectionReader != null) {                 try {                     urlConnectionReader.close();                 } catch (IOException e) {                 }             }             if (urlConnection != null) {                 urlConnection.disconnect();             }         }         return returnedValue;     }  ||CODE2:     private static String scramble(String text) {         try {             MessageDigest md = MessageDigest.getInstance(""SHA-1"");             md.update(text.getBytes(""UTF-8""));             StringBuffer sb = new StringBuffer();             for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));             return sb.toString();         } catch (UnsupportedEncodingException e) {             return null;         } catch (NoSuchAlgorithmException e) {             return null;         }     } ",537,"        p r i v a t e   S t r i n g   c a l l B a m b o o A p i ( U R L   t h e U R L )   t h r o w s   M o n i t o r i n g E x c e p t i o n ,   B a m b o o T i c k e t N e e d T o B e R e n e w e d E r r o r   { 
                 S t r i n g   r e t u r n e d V a l u e   =   n u l l ; 
                 H t t p U R L C o n n e c t i o n   u r l C o n n e c t i o n   =   n u l l ; 
                 B u f f e r e d R e a d e r   u r l C o n n e c t i o n R e a d e r   =   n u l l ; 
                 t r y   { 
                         u r l C o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   t h e U R L . o p e n C o n n e c t i o n ( ) ; 
                         u r l C o n n e c t i o n . c o n n e c t ( ) ; 
                         u r l C o n n e c t i o n R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l C o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e   =   n u l l ; 
                         S t r i n g B u f f e r   s e r v e r R e s p o n s e   =   n e w   S t r i n g B u f f e r ( ) ; 
                         w h i l e   ( ( l i n e   =   u r l C o n n e c t i o n R e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 s e r v e r R e s p o n s e . a p p e n d ( l i n e ) ; 
                         } 
                         r e t u r n e d V a l u e   =   s e r v e r R e s p o n s e . t o S t r i n g ( ) ; 
                         i f   ( r e t u r n e d V a l u e . c o n t a i n s ( "" < t i t l e > B a m b o o   S e t u p   W i z a r d   -   A t l a s s i a n   B a m b o o < / t i t l e > "" ) )   { 
                                 t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" Y o u r   B a m b o o   s e r v e r   i n s t a l l a t i o n   i s   n o t   f i n i s h e d   !   D o u b l e   c l i c k   h e r e   t o   c o m p l e t e   t h e   B a m b o o   S e t u p   W i z a r d   ! "" ,   g e t M a i n P a g e U R I ( ) ) ; 
                         } 
                         I n p u t S o u r c e   i s   =   n e w   I n p u t S o u r c e ( n e w   S t r i n g R e a d e r ( s e r v e r R e s p o n s e . t o S t r i n g ( ) ) ) ; 
                         X P a t h   x p a t h   =   X P a t h F a c t o r y . n e w I n s t a n c e ( ) . n e w X P a t h ( ) ; 
                         S t r i n g   e r r o r   =   x p a t h . e v a l u a t e ( "" / e r r o r s / e r r o r "" ,   i s ) ; 
                         i f   ( ! "" "" . e q u a l s ( e r r o r ) )   { 
                                 i f   ( "" U s e r   n o t   a u t h e n t i c a t e d   y e t ,   o r   s e s s i o n   t i m e d   o u t . "" . e q u a l s ( e r r o r ) )   { 
                                         t h r o w   n e w   B a m b o o T i c k e t N e e d T o B e R e n e w e d E r r o r ( ) ; 
                                 }   e l s e   { 
                                         b o o l e a n   i s E r r o r O p t i o n s R e l a t e d   =   f a l s e ; 
                                         U R I   u r i F o r N o n O p t i o n s R e l a t e d E r r o r s   =   g e t M a i n P a g e U R I ( ) ; 
                                         i f   ( "" I n v a l i d   u s e r n a m e   o r   p a s s w o r d . "" . e q u a l s ( e r r o r ) )   { 
                                                 i s E r r o r O p t i o n s R e l a t e d   =   t r u e ; 
                                         } 
                                         i f   ( "" T h e   r e m o t e   A P I   h a s   b e e n   d i s a b l e d . "" . e q u a l s ( e r r o r ) )   { 
                                                 e r r o r   + =   ""   D o u b l e   c l i c k   h e r e   t o   e n a b l e   i t . "" ; 
                                                 t r y   { 
                                                         s y n c h r o n i z e d   ( t h i s . b a m b o o P r o p e r t i e s )   { 
                                                                 u r i F o r N o n O p t i o n s R e l a t e d E r r o r s   =   n e w   U R I ( t h i s . b a m b o o P r o p e r t i e s . g e t S e r v e r B a s e U r l ( )   +   "" / a d m i n / c o n f i g u r e ! d e f a u l t . a c t i o n "" ) ; 
                                                         } 
                                                 }   c a t c h   ( U R I S y n t a x E x c e p t i o n   e )   { 
                                                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( e ) ; 
                                                 } 
                                         } 
                                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" E r r o r   r e p o r t e d   b y   t h e   B a m b o o   s e r v e r :   ""   +   e r r o r ,   i s E r r o r O p t i o n s R e l a t e d ,   u r i F o r N o n O p t i o n s R e l a t e d E r r o r s ) ; 
                                 } 
                         } 
                 }   c a t c h   ( C l a s s C a s t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   t h e   b a s e   U R L   d e f i n e d   f o r   t h e   B a m b o o   s e r v e r   i n   O p t i o n s   i s   n o t   a n   h t t p   U R L . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( U n k n o w n H o s t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   f i n d   h o s t   ""   +   t h e U R L . g e t H o s t ( )   +   ""   o n   t h e   n e t w o r k . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( C o n n e c t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   c o n n e c t   t o   p o r t   ""   +   t h e U R L . g e t P o r t ( )   +   ""   o n   h o s t   ""   +   t h e U R L . g e t H o s t ( )   +   "" . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   c a n n o t   f i n d   t h e   B a m b o o   s e r v e r   R E S T   a p i   u s i n g   t h e   b a s e   U R L   d e f i n e d   f o r   t h e   B a m b o o   s e r v e r   i n   O p t i o n s .   S e e m s   t h a t   t h i s   U R L   i s   n o t   t h e   o n e   t o   y o u r   B a m b o o   s e r v e r   h o m e   p a g e . . . "" ,   t r u e ,   n u l l ) ; 
                 }   c a t c h   ( S o c k e t E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   n e t w o r k   e r r o r ,   c o n n e c t i o n   l o s t . "" ,   n u l l ) ; 
                 }   c a t c h   ( X P a t h E x p r e s s i o n E x c e p t i o n   e )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( "" P r o b l e m :   t h e   B a m b o o   S e r v e r   r e t u r n e d   a n   u n e x p e c t e d   c o n t e n t   f o r   a t t r i b u t e   < e r r o r > :   ""   +   r e t u r n e d V a l u e ,   n u l l ) ; 
                 }   c a t c h   ( M o n i t o r i n g E x c e p t i o n   e )   { 
                         t h r o w   e ; 
                 }   c a t c h   ( T h r o w a b l e   t )   { 
                         t h r o w   n e w   M o n i t o r i n g E x c e p t i o n ( t ,   n u l l ) ; 
                 }   f i n a l l y   { 
                         i f   ( u r l C o n n e c t i o n R e a d e r   ! =   n u l l )   { 
                                 t r y   { 
                                         u r l C o n n e c t i o n R e a d e r . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                         i f   ( u r l C o n n e c t i o n   ! =   n u l l )   { 
                                 u r l C o n n e c t i o n . d i s c o n n e c t ( ) ; 
                         } 
                 } 
                 r e t u r n   r e t u r n e d V a l u e ; 
         } 
",0,0,0,-1,in,0.0,1,2,{'in': 'at'},MHM,310,0.1835168401400248
49,"CODE1:     public void load() throws ResourceInstantiationException, InvalidFormatException {         if (null == url) {             throw new ResourceInstantiationException(""URL not set (null)."");         }         try {             BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);             String line;             MappingNode node;             while (null != (line = mapReader.readLine())) {                 if (0 != line.trim().length()) {                     node = new MappingNode(line);                     this.add(node);                 }             }             mapReader.close();         } catch (InvalidFormatException ife) {             throw new InvalidFormatException(url, ""on load"");         } catch (IOException ioe) {             throw new ResourceInstantiationException(ioe);         }     }  ||CODE2:     private InputStream createInputStream(String url) throws MalformedURLException, IOException {         if (url.startsWith(""classpath://"")) {             InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));             if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");             return is;         } else {             return new URL(url).openStream();         }     } ",139,"        p u b l i c   v o i d   l o a d ( )   t h r o w s   R e s o u r c e I n s t a n t i a t i o n E x c e p t i o n ,   I n v a l i d F o r m a t E x c e p t i o n   { 
                 i f   ( n u l l   = =   u r i )   { 
                         t h r o w   n e w   R e s o u r c e I n s t a n t i a t i o n E x c e p t i o n ( "" U R L   n o t   s e t   ( n u l l ) . "" ) ; 
                 } 
                 t r y   { 
                         B u f f e r e d R e a d e r   m a p R e a d e r   =   n e w   B o m S t r i p p i n g I n p u t S t r e a m R e a d e r ( ( u r i ) . o p e n S t r e a m ( ) ,   E N C O D I N G ) ; 
                         S t r i n g   l i n e ; 
                         M a p p i n g N o d e   n o d e ; 
                         w h i l e   ( n u l l   ! =   ( l i n e   =   m a p R e a d e r . r e a d L i n e ( ) ) )   { 
                                 i f   ( 0   ! =   l i n e . t r i m ( ) . l e n g t h ( ) )   { 
                                         n o d e   =   n e w   M a p p i n g N o d e ( l i n e ) ; 
                                         t h i s . a d d ( n o d e ) ; 
                                 } 
                         } 
                         m a p R e a d e r . c l o s e ( ) ; 
                 }   c a t c h   ( I n v a l i d F o r m a t E x c e p t i o n   i f e )   { 
                         t h r o w   n e w   I n v a l i d F o r m a t E x c e p t i o n ( u r i ,   "" o n   l o a d "" ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                         t h r o w   n e w   R e s o u r c e I n s t a n t i a t i o n E x c e p t i o n ( i o e ) ; 
                 } 
         } 
",0,0,0,-1,url,-2.1994114e-05,1,3,{'url': 'page'},MHM,299,0.14055829445521037
50,"CODE1:     public boolean deleteByQuery(String query, int coreId) {         try {             URL url = new URL(solrUrl + ""/core"" + coreId + ""/update"");             URLConnection conn = url.openConnection();             conn.setDoOutput(true);             conn.setRequestProperty(""Content-type"", ""text/xml"");             conn.setRequestProperty(""charset"", ""utf-8"");             OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());             System.out.println(""******************"" + query);             wr.write(""<delete><query>"" + query + ""</query></delete>"");             wr.flush();             BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             String line;             while ((line = rd.readLine()) != null) {                 System.out.println(line);             }             wr.close();             rd.close();             conn = url.openConnection();             conn.setDoOutput(true);             conn.setRequestProperty(""Content-type"", ""text/xml"");             conn.setRequestProperty(""charset"", ""utf-8"");             wr = new OutputStreamWriter(conn.getOutputStream());             wr.write(""<commit/>"");             wr.flush();             rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             while ((line = rd.readLine()) != null) {                 System.out.println(line);             }             wr.close();             rd.close();         } catch (Exception e) {             e.printStackTrace();             return false;         }         return true;     }  ||CODE2:     public DProblem loadProblem(String urlString) throws DataStoreException {         try {             URL url = new URL(urlString);             IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));             StringBuffer data = new StringBuffer();             String line;             int i = 0;             while ((line = in.readLine()) != null) {                 data.append(line + ""\n"");                 i++;             }             DProblem prob = DProblemXMLParser.load(data.toString());             if (prob != null) {                 prob.setUsername(""Local"");                 prob.setFilename(urlString);                 prob.setAccessMode(DProblemManager.HTTP);             }             return prob;         } catch (MalformedURLException e) {             throw new DataStoreException(e);         } catch (IOException e) {             IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());             e.printStackTrace();             throw new DataStoreException(e);         } catch (XMLParserException e) {             throw new DataStoreException(e);         }     } ",320,"        p u b l i c   b o o l e a n   d e l e t e B y Q u e r y ( S t r i n g   q u e r y ,   i n t   c o r e I d )   { 
                 t r y   { 
                         U R L   u s e r   =   n e w   U R L ( s o l r U r l   +   "" / c o r e ""   +   c o r e I d   +   "" / u p d a t e "" ) ; 
                         U R L C o n n e c t i o n   c o n n   =   u s e r . o p e n C o n n e c t i o n ( ) ; 
                         c o n n . s e t D o O u t p u t ( t r u e ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - t y p e "" ,   "" t e x t / x m l "" ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" c h a r s e t "" ,   "" u t f - 8 "" ) ; 
                         O u t p u t S t r e a m W r i t e r   w r   =   n e w   O u t p u t S t r e a m W r i t e r ( c o n n . g e t O u t p u t S t r e a m ( ) ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" * * * * * * * * * * * * * * * * * * ""   +   q u e r y ) ; 
                         w r . w r i t e ( "" < d e l e t e > < q u e r y > ""   +   q u e r y   +   "" < / q u e r y > < / d e l e t e > "" ) ; 
                         w r . f l u s h ( ) ; 
                         B u f f e r e d R e a d e r   r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 S y s t e m . o u t . p r i n t l n ( l i n e ) ; 
                         } 
                         w r . c l o s e ( ) ; 
                         r d . c l o s e ( ) ; 
                         c o n n   =   u s e r . o p e n C o n n e c t i o n ( ) ; 
                         c o n n . s e t D o O u t p u t ( t r u e ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - t y p e "" ,   "" t e x t / x m l "" ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" c h a r s e t "" ,   "" u t f - 8 "" ) ; 
                         w r   =   n e w   O u t p u t S t r e a m W r i t e r ( c o n n . g e t O u t p u t S t r e a m ( ) ) ; 
                         w r . w r i t e ( "" < c o m m i t / > "" ) ; 
                         w r . f l u s h ( ) ; 
                         r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 S y s t e m . o u t . p r i n t l n ( l i n e ) ; 
                         } 
                         w r . c l o s e ( ) ; 
                         r d . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t u r n   f a l s e ; 
                 } 
                 r e t u r n   t r u e ; 
         } 
",1,1,1,-1,url,0.0032805167,1,3,{'url': 'user'},MHM,293,0.1542634646097819
53,"CODE1:     public void run() {         StringBuffer xml;         String tabName;         Element guiElement;         setBold(monitor.getReading());         setBold(monitor.getReadingStatus());         monitor.getReadingStatus().setText(""      Working"");         HttpMethod method = null;         xml = new StringBuffer();         File tempfile = new File(url);         if (tempfile.exists()) {             try {                 InputStream in = new FileInputStream(tempfile);                 int temp;                 while ((temp = in.read()) != -1) {                     xml.append((char) temp);                 }                 in.close();             } catch (IOException e) {                 System.out.println(""Loading Monitor Failed, error while reading XML file from local file"");                 e.printStackTrace(System.err);                 return;             }         } else {             try {                 HttpClient client = new HttpClient();                 method = new GetMethod(url);                 int response = client.executeMethod(method);                 if (response == 200) {                     InputStream in = method.getResponseBodyAsStream();                     int temp;                     while ((temp = in.read()) != -1) {                         xml.append((char) temp);                     }                     in.close();                 } else {                     if (method != null) {                         method.releaseConnection();                     }                     System.out.println(""Loading Monitor Failed. Incorrect response from HTTP Server "" + response);                     return;                 }             } catch (IOException e) {                 if (method != null) {                     method.releaseConnection();                 }                 System.out.println(""Loading Monitor Failed, error while reading XML file from HTTP Server"");                 e.printStackTrace(System.err);                 return;             }         }         setPlain(monitor.getReading());         setPlain(monitor.getReadingStatus());         monitor.getReadingStatus().setText(""      Done"");         setBold(monitor.getValidating());         setBold(monitor.getValidatingStatus());         monitor.getValidatingStatus().setText(""      Working"");         DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();         try {             DocumentBuilder parser = factory.newDocumentBuilder();             Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));             if (method != null) {                 method.releaseConnection();             }             Element root = document.getDocumentElement();             NodeList temp = root.getElementsByTagName(""resource"");             for (int j = 0; j < temp.getLength(); j++) {                 Element resource = (Element) temp.item(j);                 resources.add(new URL(resource.getAttribute(""url"")));             }             NodeList connections = root.getElementsByTagName(""jmxserver"");             for (int j = 0; j < connections.getLength(); j++) {                 Element connection = (Element) connections.item(j);                 String name = connection.getAttribute(""name"");                 String tempUrl = connection.getAttribute(""url"");                 if (tempUrl.indexOf(""${host}"") != -1) {                     HostDialog dialog = new HostDialog(Config.getHosts());                     String host = dialog.showDialog();                     if (host == null) {                         System.out.println(""Host can not be null, unable to create panel."");                         return;                     }                     tempUrl = tempUrl.replaceAll(""\\$\\{host\\}"", host);                     Config.addHost(host);                 }                 JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);                 JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));                 servers.put(name, server);                 NodeList listeners = connection.getElementsByTagName(""listener"");                 for (int i = 0; i < listeners.getLength(); i++) {                     Element attribute = (Element) listeners.item(i);                     String taskname = attribute.getAttribute(""taskname"");                     MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);                     String filtertype = attribute.getAttribute(""filterType"");                     TaskNotificationListener listener = new TaskNotificationListener();                     NotificationFilterSupport filter = new NotificationFilterSupport();                     if (filtertype == null || """".equals(filtertype)) {                         filter = null;                     } else {                         filter.enableType(filtertype);                     }                     Task task = new Task(-1, Task.LISTEN, server);                     task.setMbean(mbean);                     task.setListener(listener);                     task.setFilter(filter);                     server.getWorker().addTask(task);                     if (tasks.get(taskname) != null) {                         System.out.println(""Task "" + taskname + "" already exists."");                         return;                     }                     List<Task> hashTempList = new ArrayList<Task>();                     hashTempList.add(task);                     tasks.put(taskname, hashTempList);                 }                 NodeList attributes = connection.getElementsByTagName(""attribute"");                 for (int i = 0; i < attributes.getLength(); i++) {                     Element attribute = (Element) attributes.item(i);                     String taskname = attribute.getAttribute(""taskname"");                     MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);                     String attributename = attribute.getAttribute(""attributename"");                     String frequency = attribute.getAttribute(""frequency"");                     String onEvent = attribute.getAttribute(""onEvent"");                     if (frequency.equalsIgnoreCase(""onchange"")) {                         TaskNotificationListener listener = new TaskNotificationListener();                         AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();                         filter.enableAttribute(attributename);                         Task task = new Task(-1, Task.LISTEN, server);                         MBeanAttribute att = new MBeanAttribute(mbean, attributename);                         task.setAttribute(att);                         task.setMbean(mbean);                         task.setListener(listener);                         task.setFilter(filter);                         server.getWorker().addTask(task);                         if (tasks.get(taskname) != null) {                             System.out.println(""Task "" + taskname + "" already exists."");                             return;                         }                         Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);                         task2.setAttribute(att);                         task2.setMbean(mbean);                         server.getWorker().addTask(task2);                         List<Task> hashTempList = new ArrayList<Task>();                         hashTempList.add(task);                         hashTempList.add(task2);                         tasks.put(taskname, hashTempList);                     } else {                         int frequency2 = Integer.parseInt(frequency);                         Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);                         MBeanAttribute att = new MBeanAttribute(mbean, attributename);                         task.setAttribute(att);                         task.setMbean(mbean);                         if (tasks.get(taskname) != null) {                             System.out.println(""Task "" + taskname + "" already exists."");                             return;                         }                         List<Task> hashTempList = new ArrayList<Task>();                         hashTempList.add(task);                         tasks.put(taskname, hashTempList);                         TaskNotificationListener listener = null;                         if (onEvent != null && !"""".equals(onEvent)) {                             Task tempTask = tasks.get(onEvent).get(0);                             if (tempTask == null) {                                 System.out.println(onEvent + "" was not found."");                                 return;                             } else {                                 listener = (TaskNotificationListener) tempTask.getListener();                             }                         }                         if (listener == null) {                             server.getWorker().addTask(task);                         } else {                             listener.addTask(task);                         }                     }                 }             }             NodeList guiTemp = root.getElementsByTagName(""gui"");             guiElement = (Element) guiTemp.item(0);             tabName = guiElement.getAttribute(""name"");             if (MonitorServer.contains(tabName)) {                 JOptionPane.showMessageDialog(null, ""This panel is already open, stoping creating of panel."", ""Panel already exists"", JOptionPane.ERROR_MESSAGE);                 return;             }             for (int i = 0; i < monitor.getTab().getTabCount(); i++) {                 if (monitor.getTab().getComponent(i).equals(monitor)) {                     monitor.getTab().setTitleAt(i, tabName);                     break;                 }             }             NodeList tempBindings = root.getElementsByTagName(""binding"");             for (int i = 0; i < tempBindings.getLength(); i++) {                 Element binding = (Element) tempBindings.item(i);                 String guiname = binding.getAttribute(""guiname"");                 String tmethod = binding.getAttribute(""method"");                 String taskname = binding.getAttribute(""taskname"");                 String formater = binding.getAttribute(""formater"");                 BindingContainer tempBinding;                 if (formater == null || (formater != null && formater.equals(""""))) {                     tempBinding = new BindingContainer(guiname, tmethod, taskname);                 } else {                     tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);                 }                 bindings.add(tempBinding);             }         } catch (Exception e) {             System.err.println(""Exception message: "" + e.getMessage());             System.out.println(""Loading Monitor Failed, couldnt parse XML file."");             e.printStackTrace(System.err);             return;         }         setPlain(monitor.getValidating());         setPlain(monitor.getValidatingStatus());         monitor.getValidatingStatus().setText(""      Done"");         setBold(monitor.getDownload());         setBold(monitor.getDownloadStatus());         monitor.getDownloadStatus().setText(""      Working"");         List<File> jarFiles = new ArrayList<File>();         File cacheDir = new File(Config.getCacheDir());         if (!cacheDir.exists()) {             cacheDir.mkdir();         }         for (URL resUrl : resources) {             try {                 HttpClient client = new HttpClient();                 HttpMethod methodRes = new GetMethod(resUrl.toString());                 int response = client.executeMethod(methodRes);                 if (response == 200) {                     int index = resUrl.toString().lastIndexOf(""/"") + 1;                     File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));                     FileOutputStream out = new FileOutputStream(file);                     InputStream in = methodRes.getResponseBodyAsStream();                     int readTemp = 0;                     while ((readTemp = in.read()) != -1) {                         out.write(readTemp);                     }                     System.out.println(file.getName() + "" downloaded."");                     methodRes.releaseConnection();                     if (file.getName().endsWith("".jar"")) {                         jarFiles.add(file);                     }                 } else {                     methodRes.releaseConnection();                     System.out.println(""Loading Monitor Failed. Unable to get resource "" + url);                     return;                 }             } catch (IOException e) {                 System.out.println(""Loading Monitor Failed, error while reading resource file from HTTP Server"");                 e.printStackTrace(System.err);                 return;             }         }         URL[] urls = new URL[jarFiles.size()];         try {             for (int i = 0; i < jarFiles.size(); i++) {                 File file = jarFiles.get(i);                 File newFile = new File(Config.getCacheDir() + ""/"" + System.currentTimeMillis() + file.getName());                 FileInputStream in = new FileInputStream(file);                 FileOutputStream out = new FileOutputStream(newFile);                 int n = 0;                 byte[] buf = new byte[1024];                 while ((n = in.read(buf, 0, 1024)) > -1) {                     out.write(buf, 0, n);                 }                 out.close();                 out.close();                 in.close();                 urls[i] = new URL(""file:"" + newFile.getAbsolutePath());             }         } catch (Exception e1) {             System.out.println(""Unable to load jar files."");             e1.printStackTrace();         }         URLClassLoader loader = new URLClassLoader(urls);         engine.setClassLoader(loader);         setPlain(monitor.getDownload());         setPlain(monitor.getDownloadStatus());         monitor.getDownloadStatus().setText(""      Done"");         setBold(monitor.getGui());         setBold(monitor.getGuiStatus());         monitor.getGuiStatus().setText(""      Working"");         Container container;         try {             String tempXml = xml.toString();             int start = tempXml.indexOf(""<gui"");             start = tempXml.indexOf('>', start) + 1;             int end = tempXml.indexOf(""</gui>"");             container = engine.render(new StringReader(tempXml.substring(start, end)));         } catch (Exception e) {             e.printStackTrace(System.err);             System.err.println(""Exception msg: "" + e.getMessage());             System.out.println(""Loading Monitor Failed, error creating gui."");             return;         }         for (BindingContainer bcon : bindings) {             for (Task task : tasks.get(bcon.getTask())) {                 if (task != null) {                     Object comp = engine.find(bcon.getComponent());                     if (comp != null) {                         if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {                             TaskNotificationListener listener = (TaskNotificationListener) task.getListener();                             if (bcon.getFormater() == null) {                                 listener.addResultListener(new Binding(comp, bcon.getMethod()));                             } else {                                 listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));                             }                         } else {                             if (bcon.getFormater() == null) {                                 task.addResultListener(new Binding(comp, bcon.getMethod()));                             } else {                                 task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));                             }                         }                     } else {                         System.out.println(""Refering to gui name, "" + bcon.getComponent() + "", that doesnt exist. Unable to create monitor."");                         return;                     }                 } else {                     System.out.println(""Refering to task name, "" + bcon.getTask() + "", that doesnt exist. Unable to create monitor."");                     return;                 }             }         }         for (int i = 0; i < monitor.getTab().getTabCount(); i++) {             if (monitor.getTab().getComponent(i).equals(monitor)) {                 monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));                 break;             }         }         System.out.println(""Connecting to server(s)."");         Enumeration<JmxServerGraph> e = servers.elements();         List<JmxWorker> list = new ArrayList<JmxWorker>();         while (e.hasMoreElements()) {             JmxWorker worker = e.nextElement().getWorker();             worker.setRunning(true);             worker.start();             list.add(worker);         }         MonitorServer.add(tabName, list);         Config.addUrl(url);     }  ||CODE2:     @SuppressWarnings(""deprecation"")     public void testMemberIterator() throws IOException {         GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));         Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember0 = iter.next();         int count0 = IOUtils.copy(gzMember0, new NullOutputStream());         assertEquals(""wrong 1k member count"", 1024, count0);         assertEquals(""wrong member number"", 0, gzin.getMemberNumber());         assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());         assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember1 = iter.next();         int count1 = IOUtils.copy(gzMember1, new NullOutputStream());         assertEquals(""wrong 32k member count"", (32 * 1024), count1);         assertEquals(""wrong member number"", 1, gzin.getMemberNumber());         assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember2 = iter.next();         int count2 = IOUtils.copy(gzMember2, new NullOutputStream());         assertEquals(""wrong 1-byte member count"", 1, count2);         assertEquals(""wrong member number"", 2, gzin.getMemberNumber());         assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember3 = iter.next();         int count3 = IOUtils.copy(gzMember3, new NullOutputStream());         assertEquals(""wrong 5-byte member count"", 5, count3);         assertEquals(""wrong member number"", 3, gzin.getMemberNumber());         assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());         assertFalse(iter.hasNext());     } ",2971,"        p u b l i c   v o i d   r u n ( )   { 
                 S t r i n g B u f f e r   x m l ; 
                 S t r i n g   t a b N a m e ; 
                 E l e m e n t   g u i E l e m e n t ; 
                 s e t B o l d ( m o n i t o r . g e t R e a d i n g ( ) ) ; 
                 s e t B o l d ( m o n i t o r . g e t R e a d i n g S t a t u s ( ) ) ; 
                 m o n i t o r . g e t R e a d i n g S t a t u s ( ) . s e t T e x t ( ""             W o r k i n g "" ) ; 
                 H t t p M e t h o d   m e t h o d   =   n u l l ; 
                 x m l   =   n e w   S t r i n g B u f f e r ( ) ; 
                 F i l e   t e m p f i l e   =   n e w   F i l e ( u r l ) ; 
                 i f   ( t e m p f i l e . e x i s t s ( ) )   { 
                         t r y   { 
                                 I n p u t S t r e a m   i n   =   n e w   F i l e I n p u t S t r e a m ( t e m p f i l e ) ; 
                                 i n t   t e m p ; 
                                 w h i l e   ( ( t e m p   =   i n . r e a d ( ) )   ! =   - 1 )   { 
                                         x m l . a p p e n d ( ( c h a r )   t e m p ) ; 
                                 } 
                                 i n . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d ,   e r r o r   w h i l e   r e a d i n g   X M L   f i l e   f r o m   l o c a l   f i l e "" ) ; 
                                 e . p r i n t S t a c k T r a c e ( S y s t e m . e r r ) ; 
                                 r e t u r n ; 
                         } 
                 }   e l s e   { 
                         t r y   { 
                                 H t t p C l i e n t   c l i e n t   =   n e w   H t t p C l i e n t ( ) ; 
                                 m e t h o d   =   n e w   G e t M e t h o d ( u r l ) ; 
                                 i n t   r e s p o n s e   =   c l i e n t . e x e c u t e M e t h o d ( m e t h o d ) ; 
                                 i f   ( r e s p o n s e   = =   2 0 0 )   { 
                                         I n p u t S t r e a m   i n   =   m e t h o d . g e t R e s p o n s e B o d y A s S t r e a m ( ) ; 
                                         i n t   t e m p ; 
                                         w h i l e   ( ( t e m p   =   i n . r e a d ( ) )   ! =   - 1 )   { 
                                                 x m l . a p p e n d ( ( c h a r )   t e m p ) ; 
                                         } 
                                         i n . c l o s e ( ) ; 
                                 }   e l s e   { 
                                         i f   ( m e t h o d   ! =   n u l l )   { 
                                                 m e t h o d . r e l e a s e C o n n e c t i o n ( ) ; 
                                         } 
                                         S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d .   I n c o r r e c t   r e s p o n s e   f r o m   H T T P   S e r v e r   ""   +   r e s p o n s e ) ; 
                                         r e t u r n ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 i f   ( m e t h o d   ! =   n u l l )   { 
                                         m e t h o d . r e l e a s e C o n n e c t i o n ( ) ; 
                                 } 
                                 S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d ,   e r r o r   w h i l e   r e a d i n g   X M L   f i l e   f r o m   H T T P   S e r v e r "" ) ; 
                                 e . p r i n t S t a c k T r a c e ( S y s t e m . e r r ) ; 
                                 r e t u r n ; 
                         } 
                 } 
                 s e t P l a i n ( m o n i t o r . g e t R e a d i n g ( ) ) ; 
                 s e t P l a i n ( m o n i t o r . g e t R e a d i n g S t a t u s ( ) ) ; 
                 m o n i t o r . g e t R e a d i n g S t a t u s ( ) . s e t T e x t ( ""             D o n e "" ) ; 
                 s e t B o l d ( m o n i t o r . g e t V a l i d a t i n g ( ) ) ; 
                 s e t B o l d ( m o n i t o r . g e t V a l i d a t i n g S t a t u s ( ) ) ; 
                 m o n i t o r . g e t V a l i d a t i n g S t a t u s ( ) . s e t T e x t ( ""             W o r k i n g "" ) ; 
                 D o c u m e n t B u i l d e r F a c t o r y I m p l   f a c t o r y   =   n e w   D o c u m e n t B u i l d e r F a c t o r y I m p l ( ) ; 
                 t r y   { 
                         D o c u m e n t B u i l d e r   p a r s e r   =   f a c t o r y . n e w D o c u m e n t B u i l d e r ( ) ; 
                         D o c u m e n t   d o c u m e n t   =   p a r s e r . p a r s e ( n e w   B y t e A r r a y I n p u t S t r e a m ( x m l . t o S t r i n g ( ) . g e t B y t e s ( ) ) ) ; 
                         i f   ( m e t h o d   ! =   n u l l )   { 
                                 m e t h o d . r e l e a s e C o n n e c t i o n ( ) ; 
                         } 
                         E l e m e n t   r o o t   =   d o c u m e n t . g e t D o c u m e n t E l e m e n t ( ) ; 
                         N o d e L i s t   t e m p   =   r o o t . g e t E l e m e n t s B y T a g N a m e ( "" r e s o u r c e "" ) ; 
                         f o r   ( i n t   j   =   0 ;   j   <   t e m p . g e t L e n g t h ( ) ;   j + + )   { 
                                 E l e m e n t   r e s o u r c e   =   ( E l e m e n t )   t e m p . i t e m ( j ) ; 
                                 r e s o u r c e s . a d d ( n e w   U R L ( r e s o u r c e . g e t A t t r i b u t e ( "" u r l "" ) ) ) ; 
                         } 
                         N o d e L i s t   c o n n e c t i o n s   =   r o o t . g e t E l e m e n t s B y T a g N a m e ( "" j m x s e r v e r "" ) ; 
                         f o r   ( i n t   j   =   0 ;   j   <   c o n n e c t i o n s . g e t L e n g t h ( ) ;   j + + )   { 
                                 E l e m e n t   c o n n e c t i o n   =   ( E l e m e n t )   c o n n e c t i o n s . i t e m ( j ) ; 
                                 S t r i n g   n a m e   =   c o n n e c t i o n . g e t A t t r i b u t e ( "" n a m e "" ) ; 
                                 S t r i n g   t e m p U r l   =   c o n n e c t i o n . g e t A t t r i b u t e ( "" u r l "" ) ; 
                                 i f   ( t e m p U r l . i n d e x O f ( "" $ { h o s t } "" )   ! =   - 1 )   { 
                                         H o s t D i a l o g   d i a l o g   =   n e w   H o s t D i a l o g ( C o n f i g . g e t H o s t s ( ) ) ; 
                                         S t r i n g   h o s t   =   d i a l o g . s h o w D i a l o g ( ) ; 
                                         i f   ( h o s t   = =   n u l l )   { 
                                                 S y s t e m . g z . p r i n t l n ( "" H o s t   c a n   n o t   b e   n u l l ,   u n a b l e   t o   c r e a t e   p a n e l . "" ) ; 
                                                 r e t u r n ; 
                                         } 
                                         t e m p U r l   =   t e m p U r l . r e p l a c e A l l ( "" \ \ $ \ \ { h o s t \ \ } "" ,   h o s t ) ; 
                                         C o n f i g . a d d H o s t ( h o s t ) ; 
                                 } 
                                 J M X S e r v i c e U R L   j m x U r l   =   n e w   J M X S e r v i c e U R L ( t e m p U r l ) ; 
                                 J m x S e r v e r G r a p h   s e r v e r   =   n e w   J m x S e r v e r G r a p h ( n a m e ,   j m x U r l ,   n e w   J m x W o r k e r ( f a l s e ) ) ; 
                                 s e r v e r s . p u t ( n a m e ,   s e r v e r ) ; 
                                 N o d e L i s t   l i s t e n e r s   =   c o n n e c t i o n . g e t E l e m e n t s B y T a g N a m e ( "" l i s t e n e r "" ) ; 
                                 f o r   ( i n t   g z   =   0 ;   g z   <   l i s t e n e r s . g e t L e n g t h ( ) ;   g z + + )   { 
                                         E l e m e n t   a t t r i b u t e   =   ( E l e m e n t )   l i s t e n e r s . i t e m ( g z ) ; 
                                         S t r i n g   t a s k n a m e   =   a t t r i b u t e . g e t A t t r i b u t e ( "" t a s k n a m e "" ) ; 
                                         M B e a n   m b e a n   =   n e w   M B e a n ( a t t r i b u t e . g e t A t t r i b u t e ( "" m b e a n "" ) ,   n u l l ) ; 
                                         S t r i n g   f i l t e r t y p e   =   a t t r i b u t e . g e t A t t r i b u t e ( "" f i l t e r T y p e "" ) ; 
                                         T a s k N o t i f i c a t i o n L i s t e n e r   l i s t e n e r   =   n e w   T a s k N o t i f i c a t i o n L i s t e n e r ( ) ; 
                                         N o t i f i c a t i o n F i l t e r S u p p o r t   f i l t e r   =   n e w   N o t i f i c a t i o n F i l t e r S u p p o r t ( ) ; 
                                         i f   ( f i l t e r t y p e   = =   n u l l   | |   "" "" . e q u a l s ( f i l t e r t y p e ) )   { 
                                                 f i l t e r   =   n u l l ; 
                                         }   e l s e   { 
                                                 f i l t e r . e n a b l e T y p e ( f i l t e r t y p e ) ; 
                                         } 
                                         T a s k   t a s k   =   n e w   T a s k ( - 1 ,   T a s k . L I S T E N ,   s e r v e r ) ; 
                                         t a s k . s e t M b e a n ( m b e a n ) ; 
                                         t a s k . s e t L i s t e n e r ( l i s t e n e r ) ; 
                                         t a s k . s e t F i l t e r ( f i l t e r ) ; 
                                         s e r v e r . g e t W o r k e r ( ) . a d d T a s k ( t a s k ) ; 
                                         i f   ( t a s k s . g e t ( t a s k n a m e )   ! =   n u l l )   { 
                                                 S y s t e m . g z . p r i n t l n ( "" T a s k   ""   +   t a s k n a m e   +   ""   a l r e a d y   e x i s t s . "" ) ; 
                                                 r e t u r n ; 
                                         } 
                                         L i s t < T a s k >   h a s h T e m p L i s t   =   n e w   A r r a y L i s t < T a s k > ( ) ; 
                                         h a s h T e m p L i s t . a d d ( t a s k ) ; 
                                         t a s k s . p u t ( t a s k n a m e ,   h a s h T e m p L i s t ) ; 
                                 } 
                                 N o d e L i s t   a t t r i b u t e s   =   c o n n e c t i o n . g e t E l e m e n t s B y T a g N a m e ( "" a t t r i b u t e "" ) ; 
                                 f o r   ( i n t   g z   =   0 ;   g z   <   a t t r i b u t e s . g e t L e n g t h ( ) ;   g z + + )   { 
                                         E l e m e n t   a t t r i b u t e   =   ( E l e m e n t )   a t t r i b u t e s . i t e m ( g z ) ; 
                                         S t r i n g   t a s k n a m e   =   a t t r i b u t e . g e t A t t r i b u t e ( "" t a s k n a m e "" ) ; 
                                         M B e a n   m b e a n   =   n e w   M B e a n ( a t t r i b u t e . g e t A t t r i b u t e ( "" m b e a n "" ) ,   n u l l ) ; 
                                         S t r i n g   a t t r i b u t e n a m e   =   a t t r i b u t e . g e t A t t r i b u t e ( "" a t t r i b u t e n a m e "" ) ; 
                                         S t r i n g   f r e q u e n c y   =   a t t r i b u t e . g e t A t t r i b u t e ( "" f r e q u e n c y "" ) ; 
                                         S t r i n g   o n E v e n t   =   a t t r i b u t e . g e t A t t r i b u t e ( "" o n E v e n t "" ) ; 
                                         i f   ( f r e q u e n c y . e q u a l s I g n o r e C a s e ( "" o n c h a n g e "" ) )   { 
                                                 T a s k N o t i f i c a t i o n L i s t e n e r   l i s t e n e r   =   n e w   T a s k N o t i f i c a t i o n L i s t e n e r ( ) ; 
                                                 A t t r i b u t e C h a n g e N o t i f i c a t i o n F i l t e r   f i l t e r   =   n e w   A t t r i b u t e C h a n g e N o t i f i c a t i o n F i l t e r ( ) ; 
                                                 f i l t e r . e n a b l e A t t r i b u t e ( a t t r i b u t e n a m e ) ; 
                                                 T a s k   t a s k   =   n e w   T a s k ( - 1 ,   T a s k . L I S T E N ,   s e r v e r ) ; 
                                                 M B e a n A t t r i b u t e   a t t   =   n e w   M B e a n A t t r i b u t e ( m b e a n ,   a t t r i b u t e n a m e ) ; 
                                                 t a s k . s e t A t t r i b u t e ( a t t ) ; 
                                                 t a s k . s e t M b e a n ( m b e a n ) ; 
                                                 t a s k . s e t L i s t e n e r ( l i s t e n e r ) ; 
                                                 t a s k . s e t F i l t e r ( f i l t e r ) ; 
                                                 s e r v e r . g e t W o r k e r ( ) . a d d T a s k ( t a s k ) ; 
                                                 i f   ( t a s k s . g e t ( t a s k n a m e )   ! =   n u l l )   { 
                                                         S y s t e m . g z . p r i n t l n ( "" T a s k   ""   +   t a s k n a m e   +   ""   a l r e a d y   e x i s t s . "" ) ; 
                                                         r e t u r n ; 
                                                 } 
                                                 T a s k   t a s k 2   =   n e w   T a s k ( - 1 ,   T a s k . G E T _ A T T R I B U T E ,   s e r v e r ) ; 
                                                 t a s k 2 . s e t A t t r i b u t e ( a t t ) ; 
                                                 t a s k 2 . s e t M b e a n ( m b e a n ) ; 
                                                 s e r v e r . g e t W o r k e r ( ) . a d d T a s k ( t a s k 2 ) ; 
                                                 L i s t < T a s k >   h a s h T e m p L i s t   =   n e w   A r r a y L i s t < T a s k > ( ) ; 
                                                 h a s h T e m p L i s t . a d d ( t a s k ) ; 
                                                 h a s h T e m p L i s t . a d d ( t a s k 2 ) ; 
                                                 t a s k s . p u t ( t a s k n a m e ,   h a s h T e m p L i s t ) ; 
                                         }   e l s e   { 
                                                 i n t   f r e q u e n c y 2   =   I n t e g e r . p a r s e I n t ( f r e q u e n c y ) ; 
                                                 T a s k   t a s k   =   n e w   T a s k ( f r e q u e n c y 2 ,   T a s k . G E T _ A T T R I B U T E ,   s e r v e r ) ; 
                                                 M B e a n A t t r i b u t e   a t t   =   n e w   M B e a n A t t r i b u t e ( m b e a n ,   a t t r i b u t e n a m e ) ; 
                                                 t a s k . s e t A t t r i b u t e ( a t t ) ; 
                                                 t a s k . s e t M b e a n ( m b e a n ) ; 
                                                 i f   ( t a s k s . g e t ( t a s k n a m e )   ! =   n u l l )   { 
                                                         S y s t e m . g z . p r i n t l n ( "" T a s k   ""   +   t a s k n a m e   +   ""   a l r e a d y   e x i s t s . "" ) ; 
                                                         r e t u r n ; 
                                                 } 
                                                 L i s t < T a s k >   h a s h T e m p L i s t   =   n e w   A r r a y L i s t < T a s k > ( ) ; 
                                                 h a s h T e m p L i s t . a d d ( t a s k ) ; 
                                                 t a s k s . p u t ( t a s k n a m e ,   h a s h T e m p L i s t ) ; 
                                                 T a s k N o t i f i c a t i o n L i s t e n e r   l i s t e n e r   =   n u l l ; 
                                                 i f   ( o n E v e n t   ! =   n u l l   & &   ! "" "" . e q u a l s ( o n E v e n t ) )   { 
                                                         T a s k   t e m p T a s k   =   t a s k s . g e t ( o n E v e n t ) . g e t ( 0 ) ; 
                                                         i f   ( t e m p T a s k   = =   n u l l )   { 
                                                                 S y s t e m . g z . p r i n t l n ( o n E v e n t   +   ""   w a s   n o t   f o u n d . "" ) ; 
                                                                 r e t u r n ; 
                                                         }   e l s e   { 
                                                                 l i s t e n e r   =   ( T a s k N o t i f i c a t i o n L i s t e n e r )   t e m p T a s k . g e t L i s t e n e r ( ) ; 
                                                         } 
                                                 } 
                                                 i f   ( l i s t e n e r   = =   n u l l )   { 
                                                         s e r v e r . g e t W o r k e r ( ) . a d d T a s k ( t a s k ) ; 
                                                 }   e l s e   { 
                                                         l i s t e n e r . a d d T a s k ( t a s k ) ; 
                                                 } 
                                         } 
                                 } 
                         } 
                         N o d e L i s t   g u i T e m p   =   r o o t . g e t E l e m e n t s B y T a g N a m e ( "" g u i "" ) ; 
                         g u i E l e m e n t   =   ( E l e m e n t )   g u i T e m p . i t e m ( 0 ) ; 
                         t a b N a m e   =   g u i E l e m e n t . g e t A t t r i b u t e ( "" n a m e "" ) ; 
                         i f   ( M o n i t o r S e r v e r . c o n t a i n s ( t a b N a m e ) )   { 
                                 J O p t i o n P a n e . s h o w M e s s a g e D i a l o g ( n u l l ,   "" T h i s   p a n e l   i s   a l r e a d y   o p e n ,   s t o p i n g   c r e a t i n g   o f   p a n e l . "" ,   "" P a n e l   a l r e a d y   e x i s t s "" ,   J O p t i o n P a n e . E R R O R _ M E S S A G E ) ; 
                                 r e t u r n ; 
                         } 
                         f o r   ( i n t   g z   =   0 ;   g z   <   m o n i t o r . g e t T a b ( ) . g e t T a b C o u n t ( ) ;   g z + + )   { 
                                 i f   ( m o n i t o r . g e t T a b ( ) . g e t C o m p o n e n t ( g z ) . e q u a l s ( m o n i t o r ) )   { 
                                         m o n i t o r . g e t T a b ( ) . s e t T i t l e A t ( g z ,   t a b N a m e ) ; 
                                         b r e a k ; 
                                 } 
                         } 
                         N o d e L i s t   t e m p B i n d i n g s   =   r o o t . g e t E l e m e n t s B y T a g N a m e ( "" b i n d i n g "" ) ; 
                         f o r   ( i n t   g z   =   0 ;   g z   <   t e m p B i n d i n g s . g e t L e n g t h ( ) ;   g z + + )   { 
                                 E l e m e n t   b i n d i n g   =   ( E l e m e n t )   t e m p B i n d i n g s . i t e m ( g z ) ; 
                                 S t r i n g   g u i n a m e   =   b i n d i n g . g e t A t t r i b u t e ( "" g u i n a m e "" ) ; 
                                 S t r i n g   t m e t h o d   =   b i n d i n g . g e t A t t r i b u t e ( "" m e t h o d "" ) ; 
                                 S t r i n g   t a s k n a m e   =   b i n d i n g . g e t A t t r i b u t e ( "" t a s k n a m e "" ) ; 
                                 S t r i n g   f o r m a t e r   =   b i n d i n g . g e t A t t r i b u t e ( "" f o r m a t e r "" ) ; 
                                 B i n d i n g C o n t a i n e r   t e m p B i n d i n g ; 
                                 i f   ( f o r m a t e r   = =   n u l l   | |   ( f o r m a t e r   ! =   n u l l   & &   f o r m a t e r . e q u a l s ( "" "" ) ) )   { 
                                         t e m p B i n d i n g   =   n e w   B i n d i n g C o n t a i n e r ( g u i n a m e ,   t m e t h o d ,   t a s k n a m e ) ; 
                                 }   e l s e   { 
                                         t e m p B i n d i n g   =   n e w   B i n d i n g C o n t a i n e r ( g u i n a m e ,   t m e t h o d ,   t a s k n a m e ,   f o r m a t e r ) ; 
                                 } 
                                 b i n d i n g s . a d d ( t e m p B i n d i n g ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         S y s t e m . e r r . p r i n t l n ( "" E x c e p t i o n   m e s s a g e :   ""   +   e . g e t M e s s a g e ( ) ) ; 
                         S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d ,   c o u l d n t   p a r s e   X M L   f i l e . "" ) ; 
                         e . p r i n t S t a c k T r a c e ( S y s t e m . e r r ) ; 
                         r e t u r n ; 
                 } 
                 s e t P l a i n ( m o n i t o r . g e t V a l i d a t i n g ( ) ) ; 
                 s e t P l a i n ( m o n i t o r . g e t V a l i d a t i n g S t a t u s ( ) ) ; 
                 m o n i t o r . g e t V a l i d a t i n g S t a t u s ( ) . s e t T e x t ( ""             D o n e "" ) ; 
                 s e t B o l d ( m o n i t o r . g e t D o w n l o a d ( ) ) ; 
                 s e t B o l d ( m o n i t o r . g e t D o w n l o a d S t a t u s ( ) ) ; 
                 m o n i t o r . g e t D o w n l o a d S t a t u s ( ) . s e t T e x t ( ""             W o r k i n g "" ) ; 
                 L i s t < F i l e >   j a r F i l e s   =   n e w   A r r a y L i s t < F i l e > ( ) ; 
                 F i l e   c a c h e D i r   =   n e w   F i l e ( C o n f i g . g e t C a c h e D i r ( ) ) ; 
                 i f   ( ! c a c h e D i r . e x i s t s ( ) )   { 
                         c a c h e D i r . m k d i r ( ) ; 
                 } 
                 f o r   ( U R L   r e s U r l   :   r e s o u r c e s )   { 
                         t r y   { 
                                 H t t p C l i e n t   c l i e n t   =   n e w   H t t p C l i e n t ( ) ; 
                                 H t t p M e t h o d   m e t h o d R e s   =   n e w   G e t M e t h o d ( r e s U r l . t o S t r i n g ( ) ) ; 
                                 i n t   r e s p o n s e   =   c l i e n t . e x e c u t e M e t h o d ( m e t h o d R e s ) ; 
                                 i f   ( r e s p o n s e   = =   2 0 0 )   { 
                                         i n t   i n d e x   =   r e s U r l . t o S t r i n g ( ) . l a s t I n d e x O f ( "" / "" )   +   1 ; 
                                         F i l e   f i l e   =   n e w   F i l e ( C o n f i g . g e t C a c h e D i r ( )   +   r e s U r l . t o S t r i n g ( ) . s u b s t r i n g ( i n d e x ) ) ; 
                                         F i l e O u t p u t S t r e a m   g z   =   n e w   F i l e O u t p u t S t r e a m ( f i l e ) ; 
                                         I n p u t S t r e a m   i n   =   m e t h o d R e s . g e t R e s p o n s e B o d y A s S t r e a m ( ) ; 
                                         i n t   r e a d T e m p   =   0 ; 
                                         w h i l e   ( ( r e a d T e m p   =   i n . r e a d ( ) )   ! =   - 1 )   { 
                                                 g z . w r i t e ( r e a d T e m p ) ; 
                                         } 
                                         S y s t e m . g z . p r i n t l n ( f i l e . g e t N a m e ( )   +   ""   d o w n l o a d e d . "" ) ; 
                                         m e t h o d R e s . r e l e a s e C o n n e c t i o n ( ) ; 
                                         i f   ( f i l e . g e t N a m e ( ) . e n d s W i t h ( "" . j a r "" ) )   { 
                                                 j a r F i l e s . a d d ( f i l e ) ; 
                                         } 
                                 }   e l s e   { 
                                         m e t h o d R e s . r e l e a s e C o n n e c t i o n ( ) ; 
                                         S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d .   U n a b l e   t o   g e t   r e s o u r c e   ""   +   u r l ) ; 
                                         r e t u r n ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d ,   e r r o r   w h i l e   r e a d i n g   r e s o u r c e   f i l e   f r o m   H T T P   S e r v e r "" ) ; 
                                 e . p r i n t S t a c k T r a c e ( S y s t e m . e r r ) ; 
                                 r e t u r n ; 
                         } 
                 } 
                 U R L [ ]   u r l s   =   n e w   U R L [ j a r F i l e s . s i z e ( ) ] ; 
                 t r y   { 
                         f o r   ( i n t   g z   =   0 ;   g z   <   j a r F i l e s . s i z e ( ) ;   g z + + )   { 
                                 F i l e   f i l e   =   j a r F i l e s . g e t ( g z ) ; 
                                 F i l e   n e w F i l e   =   n e w   F i l e ( C o n f i g . g e t C a c h e D i r ( )   +   "" / ""   +   S y s t e m . c u r r e n t T i m e M i l l i s ( )   +   f i l e . g e t N a m e ( ) ) ; 
                                 F i l e I n p u t S t r e a m   i n   =   n e w   F i l e I n p u t S t r e a m ( f i l e ) ; 
                                 F i l e O u t p u t S t r e a m   g z   =   n e w   F i l e O u t p u t S t r e a m ( n e w F i l e ) ; 
                                 i n t   n   =   0 ; 
                                 b y t e [ ]   b u f   =   n e w   b y t e [ 1 0 2 4 ] ; 
                                 w h i l e   ( ( n   =   i n . r e a d ( b u f ,   0 ,   1 0 2 4 ) )   >   - 1 )   { 
                                         g z . w r i t e ( b u f ,   0 ,   n ) ; 
                                 } 
                                 g z . c l o s e ( ) ; 
                                 g z . c l o s e ( ) ; 
                                 i n . c l o s e ( ) ; 
                                 u r l s [ g z ]   =   n e w   U R L ( "" f i l e : ""   +   n e w F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e 1 )   { 
                         S y s t e m . g z . p r i n t l n ( "" U n a b l e   t o   l o a d   j a r   f i l e s . "" ) ; 
                         e 1 . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 U R L C l a s s L o a d e r   l o a d e r   =   n e w   U R L C l a s s L o a d e r ( u r l s ) ; 
                 e n g i n e . s e t C l a s s L o a d e r ( l o a d e r ) ; 
                 s e t P l a i n ( m o n i t o r . g e t D o w n l o a d ( ) ) ; 
                 s e t P l a i n ( m o n i t o r . g e t D o w n l o a d S t a t u s ( ) ) ; 
                 m o n i t o r . g e t D o w n l o a d S t a t u s ( ) . s e t T e x t ( ""             D o n e "" ) ; 
                 s e t B o l d ( m o n i t o r . g e t G u i ( ) ) ; 
                 s e t B o l d ( m o n i t o r . g e t G u i S t a t u s ( ) ) ; 
                 m o n i t o r . g e t G u i S t a t u s ( ) . s e t T e x t ( ""             W o r k i n g "" ) ; 
                 C o n t a i n e r   c o n t a i n e r ; 
                 t r y   { 
                         S t r i n g   t e m p X m l   =   x m l . t o S t r i n g ( ) ; 
                         i n t   s t a r t   =   t e m p X m l . i n d e x O f ( "" < g u i "" ) ; 
                         s t a r t   =   t e m p X m l . i n d e x O f ( ' > ' ,   s t a r t )   +   1 ; 
                         i n t   e n d   =   t e m p X m l . i n d e x O f ( "" < / g u i > "" ) ; 
                         c o n t a i n e r   =   e n g i n e . r e n d e r ( n e w   S t r i n g R e a d e r ( t e m p X m l . s u b s t r i n g ( s t a r t ,   e n d ) ) ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( S y s t e m . e r r ) ; 
                         S y s t e m . e r r . p r i n t l n ( "" E x c e p t i o n   m s g :   ""   +   e . g e t M e s s a g e ( ) ) ; 
                         S y s t e m . g z . p r i n t l n ( "" L o a d i n g   M o n i t o r   F a i l e d ,   e r r o r   c r e a t i n g   g u i . "" ) ; 
                         r e t u r n ; 
                 } 
                 f o r   ( B i n d i n g C o n t a i n e r   b c o n   :   b i n d i n g s )   { 
                         f o r   ( T a s k   t a s k   :   t a s k s . g e t ( b c o n . g e t T a s k ( ) ) )   { 
                                 i f   ( t a s k   ! =   n u l l )   { 
                                         O b j e c t   c o m p   =   e n g i n e . f i n d ( b c o n . g e t C o m p o n e n t ( ) ) ; 
                                         i f   ( c o m p   ! =   n u l l )   { 
                                                 i f   ( t a s k . g e t T a s k T y p e ( )   = =   T a s k . L I S T E N   & &   t a s k . g e t F i l t e r ( )   i n s t a n c e o f   A t t r i b u t e C h a n g e N o t i f i c a t i o n F i l t e r )   { 
                                                         T a s k N o t i f i c a t i o n L i s t e n e r   l i s t e n e r   =   ( T a s k N o t i f i c a t i o n L i s t e n e r )   t a s k . g e t L i s t e n e r ( ) ; 
                                                         i f   ( b c o n . g e t F o r m a t e r ( )   = =   n u l l )   { 
                                                                 l i s t e n e r . a d d R e s u l t L i s t e n e r ( n e w   B i n d i n g ( c o m p ,   b c o n . g e t M e t h o d ( ) ) ) ; 
                                                         }   e l s e   { 
                                                                 l i s t e n e r . a d d R e s u l t L i s t e n e r ( n e w   B i n d i n g ( c o m p ,   b c o n . g e t M e t h o d ( ) ,   b c o n . g e t F o r m a t e r ( ) ,   l o a d e r ) ) ; 
                                                         } 
                                                 }   e l s e   { 
                                                         i f   ( b c o n . g e t F o r m a t e r ( )   = =   n u l l )   { 
                                                                 t a s k . a d d R e s u l t L i s t e n e r ( n e w   B i n d i n g ( c o m p ,   b c o n . g e t M e t h o d ( ) ) ) ; 
                                                         }   e l s e   { 
                                                                 t a s k . a d d R e s u l t L i s t e n e r ( n e w   B i n d i n g ( c o m p ,   b c o n . g e t M e t h o d ( ) ,   b c o n . g e t F o r m a t e r ( ) ,   l o a d e r ) ) ; 
                                                         } 
                                                 } 
                                         }   e l s e   { 
                                                 S y s t e m . g z . p r i n t l n ( "" R e f e r i n g   t o   g u i   n a m e ,   ""   +   b c o n . g e t C o m p o n e n t ( )   +   "" ,   t h a t   d o e s n t   e x i s t .   U n a b l e   t o   c r e a t e   m o n i t o r . "" ) ; 
                                                 r e t u r n ; 
                                         } 
                                 }   e l s e   { 
                                         S y s t e m . g z . p r i n t l n ( "" R e f e r i n g   t o   t a s k   n a m e ,   ""   +   b c o n . g e t T a s k ( )   +   "" ,   t h a t   d o e s n t   e x i s t .   U n a b l e   t o   c r e a t e   m o n i t o r . "" ) ; 
                                         r e t u r n ; 
                                 } 
                         } 
                 } 
                 f o r   ( i n t   g z   =   0 ;   g z   <   m o n i t o r . g e t T a b ( ) . g e t T a b C o u n t ( ) ;   g z + + )   { 
                         i f   ( m o n i t o r . g e t T a b ( ) . g e t C o m p o n e n t ( g z ) . e q u a l s ( m o n i t o r ) )   { 
                                 m o n i t o r . g e t T a b ( ) . s e t C o m p o n e n t A t ( g z ,   n e w   M o n i t o r C o n t a i n e r P a n e l ( c o n t a i n e r ,   t h i s ) ) ; 
                                 b r e a k ; 
                         } 
                 } 
                 S y s t e m . g z . p r i n t l n ( "" C o n n e c t i n g   t o   s e r v e r ( s ) . "" ) ; 
                 E n u m e r a t i o n < J m x S e r v e r G r a p h >   e   =   s e r v e r s . e l e m e n t s ( ) ; 
                 L i s t < J m x W o r k e r >   l i s t   =   n e w   A r r a y L i s t < J m x W o r k e r > ( ) ; 
                 w h i l e   ( e . h a s M o r e E l e m e n t s ( ) )   { 
                         J m x W o r k e r   w o r k e r   =   e . n e x t E l e m e n t ( ) . g e t W o r k e r ( ) ; 
                         w o r k e r . s e t R u n n i n g ( t r u e ) ; 
                         w o r k e r . s t a r t ( ) ; 
                         l i s t . a d d ( w o r k e r ) ; 
                 } 
                 M o n i t o r S e r v e r . a d d ( t a b N a m e ,   l i s t ) ; 
                 C o n f i g . a d d U r l ( u r l ) ; 
         } 
",1,1,1,-1,out,1.10158e-08,1,23,{'out': 'gz'},MHM,280,0.44999059438705447
54,"CODE1:     void downloadImage(String filename, File imageFile) throws Exception {         String URL = Constants.IMAGE_URL + ""/"" + filename;         SiteResponse response = stratSite.getResponse(URL);         InputStream inputStream = response.getInputStream();         OutputStream outputStream = new FileOutputStream(imageFile);         IOUtils.copy(inputStream, outputStream);     }  ||CODE2:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     } ",63,"        v o i d   d o w n l o a d I m a g e ( S t r i n g   f i l e n a m e ,   F i l e   i m a g e F i l e )   t h r o w s   E x c e p t i o n   { 
                 S t r i n g   U R L   =   C o n s t a n t s . I M A G E _ U R L   +   "" / ""   +   f i l e n a m e ; 
                 S i t e R e s p o n s e   s u c c e s s f u l   =   s t r a t S i t e . g e t R e s p o n s e ( U R L ) ; 
                 I n p u t S t r e a m   i n p u t S t r e a m   =   s u c c e s s f u l . g e t I n p u t S t r e a m ( ) ; 
                 O u t p u t S t r e a m   o u t p u t S t r e a m   =   n e w   F i l e O u t p u t S t r e a m ( i m a g e F i l e ) ; 
                 I O U t i l s . c o p y ( i n p u t S t r e a m ,   o u t p u t S t r e a m ) ; 
         } 
",1,1,1,-1,response,1.7862476e-08,1,2,{'response': 'successful'},MHM,296,0.13470102151234944
58,"CODE1:     public HogsCustomizer() {         m_filename = PathFinder.getCustsFile();         m_currenttaunts = new String[10];         m_textfields = new JTextField[10];         m_color = new Color(255, 255, 255);         boolean exists = (new File(m_filename)).exists();         m_inverted = false;         m_chooser = new JColorChooser();         AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();         m_chooser.removeChooserPanel(panels[0]);         m_chooser.removeChooserPanel(panels[2]);         m_chooser.setPreviewPanel(new JPanel());         Reader reader = null;         if (exists) {             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e) {                 e.printStackTrace();             }         } else {             Object[] options = { ""Yes"", ""No, Thanks"" };             int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);             if (n == 0) {                 try {                     FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();                     FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();                     dstChannel.transferFrom(srcChannel, 0, srcChannel.size());                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                     e.printStackTrace();                     System.exit(0);                 }             } else {                 System.exit(0);             }             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e1) {                 e1.printStackTrace();                 System.exit(0);             }         }         try {             readFromFile(reader);         } catch (Exception e) {             e.printStackTrace();             System.exit(0);         }         Box mainpanel = Box.createVerticalBox();         mainpanel.add(buildTauntsPanel());         mainpanel.add(buildMouseStylePanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildColorPanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildButtonsPanel());         mainpanel.add(Box.createVerticalStrut(10));         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setContentPane(mainpanel);         this.pack();         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();         this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));         this.setTitle(""Hogs Customizer"");         this.setVisible(true);     }  ||CODE2:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     } ",526,"        p u b l i c   H o g s C u s t o m i z e r ( )   { 
                 m _ f i l e n a m e   =   P a t h F i n d e r . g e t C u s t s F i l e ( ) ; 
                 m _ c u r r e n t t a u n t s   =   n e w   S t r i n g [ 1 0 ] ; 
                 m _ t e x t f i e l d s   =   n e w   J T e x t F i e l d [ 1 0 ] ; 
                 m _ c o l o r   =   n e w   C o l o r ( 2 5 5 ,   2 5 5 ,   2 5 5 ) ; 
                 b o o l e a n   e x i s t s   =   ( n e w   F i l e ( m _ f i l e n a m e ) ) . e x i s t s ( ) ; 
                 m _ i n v e r t e d   =   f a l s e ; 
                 m _ c h o o s e r   =   n e w   J C o l o r C h o o s e r ( ) ; 
                 A b s t r a c t C o l o r C h o o s e r P a n e l [ ]   p a n e l s   =   m _ c h o o s e r . g e t C h o o s e r P a n e l s ( ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 0 ] ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 2 ] ) ; 
                 m _ c h o o s e r . s e t P r e v i e w P a n e l ( n e w   J P a n e l ( ) ) ; 
                 R e a d e r   r e a d   =   n u l l ; 
                 i f   ( e x i s t s )   { 
                         t r y   { 
                                 r e a d   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 }   e l s e   { 
                         O b j e c t [ ]   o p t i o n s   =   {   "" Y e s "" ,   "" N o ,   T h a n k s ""   } ; 
                         i n t   n   =   J O p t i o n P a n e . s h o w O p t i o n D i a l o g ( t h i s ,   "" Y o u   d o   n o t   h a v e   a   c u s t o m i z a t i o n   f i l e   i n   y o u r   h o m e   d i r e c t o r y . 
                                   ""   +   "" W o u l d   y o u   l i k e   t o   c r e a t e   o n e ? "" ,   "" H o g s   C u s t o m i z a t i o n "" ,   J O p t i o n P a n e . Y E S _ N O _ O P T I O N ,   J O p t i o n P a n e . Q U E S T I O N _ M E S S A G E ,   n u l l ,   o p t i o n s ,   o p t i o n s [ 1 ] ) ; 
                         i f   ( n   = =   0 )   { 
                                 t r y   { 
                                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( H o g s C o n s t a n t s . C U S T S _ T E M P L A T E ) . g e t C h a n n e l ( ) ; 
                                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( m _ f i l e n a m e ) . g e t C h a n n e l ( ) ; 
                                         d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                                         s r c C h a n n e l . c l o s e ( ) ; 
                                         d s t C h a n n e l . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                         e . p r i n t S t a c k T r a c e ( ) ; 
                                         S y s t e m . e x i t ( 0 ) ; 
                                 } 
                         }   e l s e   { 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                         t r y   { 
                                 r e a d   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e 1 )   { 
                                 e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                 } 
                 t r y   { 
                         r e a d F r o m F i l e ( r e a d ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         S y s t e m . e x i t ( 0 ) ; 
                 } 
                 B o x   m a i n p a n e l   =   B o x . c r e a t e V e r t i c a l B o x ( ) ; 
                 m a i n p a n e l . a d d ( b u i l d T a u n t s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d M o u s e S t y l e P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d C o l o r P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d B u t t o n s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 t h i s . s e t D e f a u l t C l o s e O p e r a t i o n ( J F r a m e . E X I T _ O N _ C L O S E ) ; 
                 t h i s . s e t C o n t e n t P a n e ( m a i n p a n e l ) ; 
                 t h i s . p a c k ( ) ; 
                 D i m e n s i o n   d i m   =   T o o l k i t . g e t D e f a u l t T o o l k i t ( ) . g e t S c r e e n S i z e ( ) ; 
                 t h i s . s e t L o c a t i o n ( d i m . w i d t h   /   2   -   ( t h i s . g e t W i d t h ( )   /   2 ) ,   d i m . h e i g h t   /   2   -   ( t h i s . g e t H e i g h t ( )   /   2 ) ) ; 
                 t h i s . s e t T i t l e ( "" H o g s   C u s t o m i z e r "" ) ; 
                 t h i s . s e t V i s i b l e ( t r u e ) ; 
         } 
",1,1,1,-1,reader,2.7909846e-07,1,4,{'reader': 'read'},MHM,311,0.17555090188980102
65,"CODE1:     public static void main(String[] args) {         if (args.length != 3) {             System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");             System.exit(1);         }         try {             ByteArrayOutputStream os = new ByteArrayOutputStream();             InputStream in = new FileInputStream(args[1]);             int len = 0;             byte buf[] = new byte[1024];             while ((len = in.read(buf)) > 0) os.write(buf, 0, len);             in.close();             os.close();             byte[] data = null;             if (args[0].equals(""dec"")) data = decode(os.toString()); else {                 String strData = encode(os.toByteArray());                 data = strData.getBytes();             }             FileOutputStream fos = new FileOutputStream(args[2]);             fos.write(data);             fos.close();         } catch (Exception e) {             e.printStackTrace();         }     }  ||CODE2:     private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {         File home = new File(System.getProperty(""user.home""));         File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);         FileOutputStream fos = new FileOutputStream(jar_file);         JarOutputStream jos = new JarOutputStream(fos);         ZipEntry ze = new ZipEntry(""Exception"");         jos.putNextEntry(ze);         PrintStream ps = new PrintStream(jos);         throwable.printStackTrace(ps);         for (File file : files) if ((file != null) && file.exists()) {             ze = new ZipEntry(file.getName());             jos.putNextEntry(ze);             byte[] buffer = new byte[65536];             FileInputStream fis = new FileInputStream(file);             int len;             while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);             fis.close();         }         jos.close();         return jar_file.getPath();     } ",210,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 i f   ( a r g s . l e n g t h   ! =   3 )   { 
                         S y s t e m . g e n . p r i n t l n ( "" U s a g e :   H e x S t r T o B i n   e n c / d e c   < i n f i l e N a m e >   < o u t f i l e n a m e > "" ) ; 
                         S y s t e m . e x i t ( 1 ) ; 
                 } 
                 t r y   { 
                         B y t e A r r a y O u t p u t S t r e a m   o s   =   n e w   B y t e A r r a y O u t p u t S t r e a m ( ) ; 
                         I n p u t S t r e a m   i n s   =   n e w   F i l e I n p u t S t r e a m ( a r g s [ 1 ] ) ; 
                         i n t   l e n   =   0 ; 
                         b y t e   b u f [ ]   =   n e w   b y t e [ 1 0 2 4 ] ; 
                         w h i l e   ( ( l e n   =   i n s . r e a d ( b u f ) )   >   0 )   o s . w r i t e ( b u f ,   0 ,   l e n ) ; 
                         i n s . c l o s e ( ) ; 
                         o s . c l o s e ( ) ; 
                         b y t e [ ]   d a t a   =   n u l l ; 
                         i f   ( a r g s [ 0 ] . e q u a l s ( "" d e c "" ) )   d a t a   =   d e c o d e ( o s . t o S t r i n g ( ) ) ;   e l s e   { 
                                 S t r i n g   s t r D a t a   =   e n c o d e ( o s . t o B y t e A r r a y ( ) ) ; 
                                 d a t a   =   s t r D a t a . g e t B y t e s ( ) ; 
                         } 
                         F i l e O u t p u t S t r e a m   f o s   =   n e w   F i l e O u t p u t S t r e a m ( a r g s [ 2 ] ) ; 
                         f o s . w r i t e ( d a t a ) ; 
                         f o s . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,1,-1,out,9.044015e-09,2,4,"{'out': 'gen', 'in': 'ins'}",MHM,313,0.14745446840922039
69,"CODE1:     public boolean backupFile(File oldFile, File newFile) {         boolean isBkupFileOK = false;         FileChannel sourceChannel = null;         FileChannel targetChannel = null;         try {             sourceChannel = new FileInputStream(oldFile).getChannel();             targetChannel = new FileOutputStream(newFile).getChannel();             targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());         } catch (IOException e) {             logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);         } finally {             if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {                 isBkupFileOK = true;             }             try {                 if (sourceChannel != null) {                     sourceChannel.close();                 }                 if (targetChannel != null) {                     targetChannel.close();                 }             } catch (IOException e) {                 logger.log(Level.INFO, ""closing channels failed"");             }         }         return isBkupFileOK;     }  ||CODE2:     public HogsCustomizer() {         m_filename = PathFinder.getCustsFile();         m_currenttaunts = new String[10];         m_textfields = new JTextField[10];         m_color = new Color(255, 255, 255);         boolean exists = (new File(m_filename)).exists();         m_inverted = false;         m_chooser = new JColorChooser();         AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();         m_chooser.removeChooserPanel(panels[0]);         m_chooser.removeChooserPanel(panels[2]);         m_chooser.setPreviewPanel(new JPanel());         Reader reader = null;         if (exists) {             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e) {                 e.printStackTrace();             }         } else {             Object[] options = { ""Yes"", ""No, Thanks"" };             int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);             if (n == 0) {                 try {                     FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();                     FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();                     dstChannel.transferFrom(srcChannel, 0, srcChannel.size());                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                     e.printStackTrace();                     System.exit(0);                 }             } else {                 System.exit(0);             }             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e1) {                 e1.printStackTrace();                 System.exit(0);             }         }         try {             readFromFile(reader);         } catch (Exception e) {             e.printStackTrace();             System.exit(0);         }         Box mainpanel = Box.createVerticalBox();         mainpanel.add(buildTauntsPanel());         mainpanel.add(buildMouseStylePanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildColorPanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildButtonsPanel());         mainpanel.add(Box.createVerticalStrut(10));         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setContentPane(mainpanel);         this.pack();         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();         this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));         this.setTitle(""Hogs Customizer"");         this.setVisible(true);     } ",180,"        p u b l i c   b o o l e a n   b a c k u p F i l e ( F i l e   o l d F i l e ,   F i l e   n e w F i l e )   { 
                 b o o l e a n   i s B k u p F i l e O K   =   f a l s e ; 
                 F i l e C h a n n e l   s o u r c e C h a n n e l   =   n u l l ; 
                 F i l e C h a n n e l   t a r g e t C h a n n e l   =   n u l l ; 
                 t r y   { 
                         s o u r c e C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( o l d F i l e ) . g e t C h a n n e l ( ) ; 
                         t a r g e t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( n e w F i l e ) . g e t C h a n n e l ( ) ; 
                         t a r g e t C h a n n e l . t r a n s f e r F r o m ( s o u r c e C h a n n e l ,   0 ,   s o u r c e C h a n n e l . s i z e ( ) ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         l o g g e r . l o g ( L e v e l . S E V E R E ,   "" I O   e x c e p t i o n   o c c u r r e d   w h i l e   c o p y i n g   f i l e "" ,   e ) ; 
                 }   f i n a l l y   { 
                         i f   ( ( n e w F i l e   ! =   n u l l )   & &   ( n e w F i l e . e x i s t s ( ) )   & &   ( n e w F i l e . l i n e ( )   >   0 ) )   { 
                                 i s B k u p F i l e O K   =   t r u e ; 
                         } 
                         t r y   { 
                                 i f   ( s o u r c e C h a n n e l   ! =   n u l l )   { 
                                         s o u r c e C h a n n e l . c l o s e ( ) ; 
                                 } 
                                 i f   ( t a r g e t C h a n n e l   ! =   n u l l )   { 
                                         t a r g e t C h a n n e l . c l o s e ( ) ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 l o g g e r . l o g ( L e v e l . I N F O ,   "" c l o s i n g   c h a n n e l s   f a i l e d "" ) ; 
                         } 
                 } 
                 r e t u r n   i s B k u p F i l e O K ; 
         } 
",1,1,1,-1,length,-1.9164872e-08,1,1,{'length': 'line'},MHM,302,0.14558923244476318
71,"CODE1:     public void connect(final URLConnectAdapter urlAdapter) {         if (this.connectSettings == null) {             throw new IllegalStateException(""Invalid Connect Settings (is null)"");         }         final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();         BufferedReader in;         try {             in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));             final StringBuilder buf = new StringBuilder(200);             String str;             while ((str = in.readLine()) != null) {                 buf.append(str);                 buf.append('\n');             }             final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());             final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();             for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {                 final String key = entry.getKey();                 final List<String> val = entry.getValue();                 if ((val != null) && (val.size() > 1)) {                     System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());                 }                 if (key != null) {                     result.addHeader(key, val.get(0), val);                 } else {                     result.addHeader(""Status"", val.get(0), val);                 }             }             this.lastResult = result;         } catch (IOException e) {             throw new ConnectException(e);         }     }  ||CODE2:     public static String getHash(String password) {         if (password == null || password.length() == 0) {             return null;         }         try {             MessageDigest digest = MessageDigest.getInstance(""SHA"");             password = saltPassword(password);             digest.update(password.getBytes());             String result = getHexString(digest.digest());             return result;         } catch (NoSuchAlgorithmException ex) {             throw new RuntimeException(ex);         }     } ",301,"        p u b l i c   v o i d   c o n n e c t ( f i n a l   U R L C o n n e c t A d a p t e r   u r l A d a p t e r )   { 
                 i f   ( t h i s . c o n n e c t S e t t i n g s   = =   n u l l )   { 
                         t h r o w   n e w   I l l e g a l S t a t e E x c e p t i o n ( "" I n v a l i d   C o n n e c t   S e t t i n g s   ( i s   n u l l ) "" ) ; 
                 } 
                 f i n a l   H t t p U R L C o n n e c t i o n   h t t p C o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   u r l A d a p t e r . o p e n C o n n e c t i o n ( ) ; 
                 B u f f e r e d R e a d e r   r ; 
                 t r y   { 
                         r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( h t t p C o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         f i n a l   S t r i n g B u i l d e r   b u f   =   n e w   S t r i n g B u i l d e r ( 2 0 0 ) ; 
                         S t r i n g   s t r ; 
                         w h i l e   ( ( s t r   =   r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 b u f . a p p e n d ( s t r ) ; 
                                 b u f . a p p e n d ( ' 
 ' ) ; 
                         } 
                         f i n a l   C o n n e c t R e s u l t   r e s u l t   =   n e w   C o n n e c t R e s u l t ( h t t p C o n n e c t i o n . g e t R e s p o n s e C o d e ( ) ,   b u f . t o S t r i n g ( ) ) ; 
                         f i n a l   M a p < S t r i n g ,   L i s t < S t r i n g > >   h e a d e r F i e l d s   =   h t t p C o n n e c t i o n . g e t H e a d e r F i e l d s ( ) ; 
                         f o r   ( M a p . E n t r y < S t r i n g ,   L i s t < S t r i n g > >   e n t r y   :   h e a d e r F i e l d s . e n t r y S e t ( ) )   { 
                                 f i n a l   S t r i n g   k e y   =   e n t r y . g e t K e y ( ) ; 
                                 f i n a l   L i s t < S t r i n g >   v a l   =   e n t r y . g e t V a l u e ( ) ; 
                                 i f   ( ( v a l   ! =   n u l l )   & &   ( v a l . s i z e ( )   >   1 ) )   { 
                                         S y s t e m . c a t . p r i n t l n ( "" W A R N :   I n v a l i d   h e a d e r   v a l u e   :   ""   +   k e y   +   ""   u r l = ""   +   t h i s . c o n n e c t S e t t i n g s . g e t U r l ( ) ) ; 
                                 } 
                                 i f   ( k e y   ! =   n u l l )   { 
                                         r e s u l t . a d d H e a d e r ( k e y ,   v a l . g e t ( 0 ) ,   v a l ) ; 
                                 }   e l s e   { 
                                         r e s u l t . a d d H e a d e r ( "" S t a t u s "" ,   v a l . g e t ( 0 ) ,   v a l ) ; 
                                 } 
                         } 
                         t h i s . l a s t R e s u l t   =   r e s u l t ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         t h r o w   n e w   C o n n e c t E x c e p t i o n ( e ) ; 
                 } 
         } 
",0,0,0,-1,out,1.4305115e-06,2,4,"{'in': 'r', 'out': 'cat'}",MHM,305,0.1575328270594279
77,"CODE1:     private void copyResource(String relResourceName) {         String projectName = layout.getRootDir().getName();         String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;         InputStream source = getClass().getResourceAsStream(resourceName);         if (source == null) {             throw new RuntimeException(""couldn't find resource "" + resourceName);         }         File dest = new File(layout.getRootDir(), relResourceName);         dest.getParentFile().mkdirs();         dest.createNewFile();         InputStreamReader in = new InputStreamReader(source);         try {             FileOutputStream out = new FileOutputStream(dest);             try {                 IOUtils.copy(in, out);             } finally {                 IOUtils.closeQuietly(out);             }         } finally {             IOUtils.closeQuietly(in);         }     }  ||CODE2:     private List<String> readDescriptor(URL url) {         BufferedReader reader = null;         try {             reader = new BufferedReader(new InputStreamReader(url.openStream()));             List<String> lines = new ArrayList<String>();             String line = reader.readLine();             while (line != null) {                 line = line.trim();                 if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);                 line = reader.readLine();             }             return lines;         } catch (IOException e) {             throw new ExtensionException(""Failed to read extension descriptor '%s'"", e).withArgs(url);         } finally {             IoUtil.closeQuietly(reader);         }     } ",152,"        p r i v a t e   v o i d   c o p y R e s o u r c e ( S t r i n g   r e l R e s o u r c e N a m e )   { 
                 S t r i n g   p r o j e c t N a m e   =   l a y o u t . g e t R o o t D i r ( ) . g e t N a m e ( ) ; 
                 S t r i n g   r e s o u r c e N a m e   =   "" / p r o t o j / ""   +   p r o j e c t N a m e   +   "" / ""   +   r e l R e s o u r c e N a m e ; 
                 I n p u t S t r e a m   s o u r c e   =   g e t C l a s s ( ) . g e t R e s o u r c e A s S t r e a m ( r e s o u r c e N a m e ) ; 
                 i f   ( s o u r c e   = =   n u l l )   { 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( "" c o u l d n ' t   f i n d   r e s o u r c e   ""   +   r e s o u r c e N a m e ) ; 
                 } 
                 F i l e     D e s t   =   n e w   F i l e ( l a y o u t . g e t R o o t D i r ( ) ,   r e l R e s o u r c e N a m e ) ; 
                   D e s t . g e t P a r e n t F i l e ( ) . m k d i r s ( ) ; 
                   D e s t . c r e a t e N e w F i l e ( ) ; 
                 I n p u t S t r e a m R e a d e r   a g a i n   =   n e w   I n p u t S t r e a m R e a d e r ( s o u r c e ) ; 
                 t r y   { 
                         F i l e O u t p u t S t r e a m   p a r e n t   =   n e w   F i l e O u t p u t S t r e a m (   D e s t ) ; 
                         t r y   { 
                                 I O U t i l s . c o p y ( a g a i n ,   p a r e n t ) ; 
                         }   f i n a l l y   { 
                                 I O U t i l s . c l o s e Q u i e t l y ( p a r e n t ) ; 
                         } 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e Q u i e t l y ( a g a i n ) ; 
                 } 
         } 
",0,0,0,-1,dest,0.0,3,10,"{'in': 'again', 'dest': 'loc', 'out': 'parent'}",MHM,300,0.13952199618021646
81,"CODE1:     public boolean execute_check() {         FTPClient ftp = new FTPClient();         File filename = null;         FileChannel channel;         InputStream is;         OutputStream os;         int reply;         if (super.verbose > 0) verbose = true;         ftp.setDefaultPort(port);         ftp.setDefaultTimeout(timeout);         if (verbose) {             System.out.println(""Using FTP Server: "" + hostname);             System.out.println(""Using FTP Port: "" + port);             System.out.println(""Using Timeout of: "" + timeout);         }         if (passive) {             ftp.enterLocalPassiveMode();             if (verbose) System.out.println(""Using Passive Mode"");         }         try {             filename = new File(file);             channel = new RandomAccessFile(filename, ""rw"").getChannel();             if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);             ftp.connect(hostname);             reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");                 check_state = common_h.STATE_CRITICAL;                 check_message = ftp.getReplyString();                 filename.delete();                 ftp.disconnect();                 return true;             }             if (username != null && password != null) {                 if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);                 if (!ftp.login(username, password)) {                     if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);                     check_state = common_h.STATE_CRITICAL;                     check_message = ftp.getReplyString();                     ftp.disconnect();                     filename.delete();                     return true;                 }             }             if (verbose) System.out.println(""Attempting to change to required directory"");             if (!ftp.changeWorkingDirectory(directory)) {                 if (verbose) System.out.println(""Required directory cannot be found!"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Attempting to retrieve specified file!"");             is = ftp.retrieveFileStream(file);             if (is == null) {                 if (verbose) System.out.println(""Unable to locate required file."");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             os = Channels.newOutputStream(channel);             byte[] buf = new byte[4096];             if (verbose) System.out.println(""Beginning File transfer..."");             for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);             if (verbose) {                 System.out.println(""...transfer complete."");                 System.out.println(""Attempting to finalise Command"");             }             if (!ftp.completePendingCommand()) {                 if (verbose) System.out.println(""Unable to finalise command"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Check Completed."");             check_state = common_h.STATE_OK;             check_message = ftp.getReplyString();             is.close();             os.close();             channel.close();             filename.delete();         } catch (IOException e) {             check_state = common_h.STATE_CRITICAL;             check_message = e.getMessage();             if (filename != null) filename.delete();         } finally {             if (ftp.isConnected()) {                 try {                     ftp.logout();                     ftp.disconnect();                 } catch (Exception e) {                 }             }         }         return true;     }  ||CODE2:     public boolean getFile(String local, String remote) throws IOException {         boolean result = false;         GridFTP ftp = new GridFTP();         ftp.setDefaultPort(port);         System.out.println(this + "".getFile "" + remote);         try {             ftp.connect(host);             ftp.login(username, password);             int reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 ftp.disconnect();                 System.err.println(""FTP server refused connection."");                 return false;             }             ftp.get(local, remote);             ftp.logout();             result = true;         } finally {             if (ftp.isConnected()) {                 try {                     ftp.disconnect();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }         System.out.println(this + "".getFile return "" + result);         return result;     } ",763,"        p u b l i c   b o o l e a n   e x e c u t e _ c h e c k ( )   { 
                 F T P C l i e n t   f t p   =   n e w   F T P C l i e n t ( ) ; 
                 F i l e   f i l e n a m e   =   n u l l ; 
                 F i l e C h a n n e l   c h a n n e l ; 
                 I n p u t S t r e a m   i s ; 
                 O u t p u t S t r e a m   o s ; 
                 i n t   r e p l y ; 
                 i f   ( s u p e r . v e r b o s e   >   0 )   v e r b o s e   =   t r u e ; 
                 f t p . s e t D e f a u l t P o r t ( p o r t ) ; 
                 f t p . s e t D e f a u l t T i m e o u t ( t i m e o u t ) ; 
                 i f   ( v e r b o s e )   { 
                         S y s t e m . p a r e n t . p r i n t l n ( "" U s i n g   F T P   S e r v e r :   ""   +   h o s t n a m e ) ; 
                         S y s t e m . p a r e n t . p r i n t l n ( "" U s i n g   F T P   P o r t :   ""   +   p o r t ) ; 
                         S y s t e m . p a r e n t . p r i n t l n ( "" U s i n g   T i m e o u t   o f :   ""   +   t i m e o u t ) ; 
                 } 
                 i f   ( p a s s i v e )   { 
                         f t p . e n t e r L o c a l P a s s i v e M o d e ( ) ; 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" U s i n g   P a s s i v e   M o d e "" ) ; 
                 } 
                 t r y   { 
                         f i l e n a m e   =   n e w   F i l e ( p a r e n t ) ; 
                         c h a n n e l   =   n e w   R a n d o m A c c e s s F i l e ( f i l e n a m e ,   "" r w "" ) . g e t C h a n n e l ( ) ; 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" A t t e m p t i n g   F T P   C o n n e c t i o n   t o   ""   +   h o s t n a m e ) ; 
                         f t p . c o n n e c t ( h o s t n a m e ) ; 
                         r e p l y   =   f t p . g e t R e p l y C o d e ( ) ; 
                         i f   ( ! F T P R e p l y . i s P o s i t i v e C o m p l e t i o n ( r e p l y ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" F T P   C o n n e c t i o n   t o   ""   +   h o s t n a m e   +   ""   f a i l e d "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( u s e r n a m e   ! =   n u l l   & &   p a s s w o r d   ! =   n u l l )   { 
                                 i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" A t t e m p t i n g   t o   l o g   i n   i n t o   F T P   S e r v e r   ""   +   h o s t n a m e ) ; 
                                 i f   ( ! f t p . l o g i n ( u s e r n a m e ,   p a s s w o r d ) )   { 
                                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" U n a b l e   t o   l o g   i n   t o   F T P   S e r v e r   ""   +   h o s t n a m e ) ; 
                                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                                         c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                         f t p . d i s c o n n e c t ( ) ; 
                                         f i l e n a m e . d e l e t e ( ) ; 
                                         r e t u r n   t r u e ; 
                                 } 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" A t t e m p t i n g   t o   c h a n g e   t o   r e q u i r e d   d i r e c t o r y "" ) ; 
                         i f   ( ! f t p . c h a n g e W o r k i n g D i r e c t o r y ( d i r e c t o r y ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" R e q u i r e d   d i r e c t o r y   c a n n o t   b e   f o u n d ! "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" A t t e m p t i n g   t o   r e t r i e v e   s p e c i f i e d   f i l e ! "" ) ; 
                         i s   =   f t p . r e t r i e v e F i l e S t r e a m ( p a r e n t ) ; 
                         i f   ( i s   = =   n u l l )   { 
                                 i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" U n a b l e   t o   l o c a t e   r e q u i r e d   f i l e . "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         o s   =   C h a n n e l s . n e w O u t p u t S t r e a m ( c h a n n e l ) ; 
                         b y t e [ ]   b u f   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" B e g i n n i n g   F i l e   t r a n s f e r . . . "" ) ; 
                         f o r   ( i n t   l e n   =   - 1 ;   ( l e n   =   i s . r e a d ( b u f ) )   ! =   - 1 ;   )   o s . w r i t e ( b u f ,   0 ,   l e n ) ; 
                         i f   ( v e r b o s e )   { 
                                 S y s t e m . p a r e n t . p r i n t l n ( "" . . . t r a n s f e r   c o m p l e t e . "" ) ; 
                                 S y s t e m . p a r e n t . p r i n t l n ( "" A t t e m p t i n g   t o   f i n a l i s e   C o m m a n d "" ) ; 
                         } 
                         i f   ( ! f t p . c o m p l e t e P e n d i n g C o m m a n d ( ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" U n a b l e   t o   f i n a l i s e   c o m m a n d "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . p a r e n t . p r i n t l n ( "" C h e c k   C o m p l e t e d . "" ) ; 
                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ O K ; 
                         c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                         i s . c l o s e ( ) ; 
                         o s . c l o s e ( ) ; 
                         c h a n n e l . c l o s e ( ) ; 
                         f i l e n a m e . d e l e t e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                         c h e c k _ m e s s a g e   =   e . g e t M e s s a g e ( ) ; 
                         i f   ( f i l e n a m e   ! =   n u l l )   f i l e n a m e . d e l e t e ( ) ; 
                 }   f i n a l l y   { 
                         i f   ( f t p . i s C o n n e c t e d ( ) )   { 
                                 t r y   { 
                                         f t p . l o g o u t ( ) ; 
                                         f t p . d i s c o n n e c t ( ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                 } 
                         } 
                 } 
                 r e t u r n   t r u e ; 
         } 
",1,1,1,-1,in,0.0,2,19,"{'in': 'din', 'out': 'parent'}",MHM,309,0.2020491123199463
82,"CODE1:     public ImportFromFile() {         JFrame jf = new JFrame();         JFileChooser fc = new JFileChooser(KTH.data._path);         fc.setFileSelectionMode(JFileChooser.FILES_ONLY);         int returnVal = fc.showOpenDialog(jf);         File file = null;         if (returnVal == JFileChooser.APPROVE_OPTION) {             file = fc.getSelectedFile();             KTH.data._path = file.getParent();             System.out.println(file.getAbsolutePath() + ""\n"");         } else {         }         if (file != null) {             File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);             System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));             if (f.exists() && !IOUtils.isNewerContent(file, f)) {             } else {                 try {                     IOUtils.copyFile(file, f, true);                 } catch (Exception e) {                     KTH.out.err(e);                 }             }             KTH.dc2.removeDc(""Import"");         } else {         }     }  ||CODE2:     private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {         File[] files = folder.listFiles();         for (File file : files) {             if (file.isDirectory()) {                 addFolderToZip(file, zip, baseName);             } else {                 String name = file.getAbsolutePath().substring(baseName.length());                 ZipEntry zipEntry = new ZipEntry(name);                 zip.putNextEntry(zipEntry);                 IOUtils.copy(new FileInputStream(file), zip);                 zip.closeEntry();             }         }     } ",227,"        p u b l i c   I m p o r t F r o m F i l e ( )   { 
                 J F r a m e   j f   =   n e w   J F r a m e ( ) ; 
                 J F i l e C h o o s e r   f c   =   n e w   J F i l e C h o o s e r ( K T H . d a t a . _ p a t h ) ; 
                 f c . s e t F i l e S e l e c t i o n M o d e ( J F i l e C h o o s e r . F I L E S _ O N L Y ) ; 
                 i n t   r e t u r n V a l   =   f c . s h o w O p e n D i a l o g ( j f ) ; 
                 F i l e   f i l e   =   n u l l ; 
                 i f   ( r e t u r n V a l   = =   J F i l e C h o o s e r . A P P R O V E _ O P T I O N )   { 
                         f i l e   =   f c . g e t S e l e c t e d F i l e ( ) ; 
                         K T H . d a t a . _ p a t h   =   f i l e . g e t P a r e n t ( ) ; 
                         S y s t e m . i n n e r . p r i n t l n ( f i l e . g e t A b s o l u t e P a t h ( )   +   "" 
 "" ) ; 
                 }   e l s e   { 
                 } 
                 i f   ( f i l e   ! =   n u l l )   { 
                         F i l e   f   =   n e w   F i l e ( K T H . d a t a . g e t H o m e D i r ( )   +   F i l e . s e p a r a t o r   +   K T H . d a t a . k a t a l o g N a m e ) ; 
                         S y s t e m . i n n e r . p r i n t l n ( f   +   ( f . e x i s t s ( )   ?   ""   i s   f o u n d   ""   :   ""   i s   m i s s i n g   "" ) ) ; 
                         i f   ( f . e x i s t s ( )   & &   ! I O U t i l s . i s N e w e r C o n t e n t ( f i l e ,   f ) )   { 
                         }   e l s e   { 
                                 t r y   { 
                                         I O U t i l s . c o p y F i l e ( f i l e ,   f ,   t r u e ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                         K T H . i n n e r . e r r ( e ) ; 
                                 } 
                         } 
                         K T H . d c 2 . r e m o v e D c ( "" I m p o r t "" ) ; 
                 }   e l s e   { 
                 } 
         } 
",1,1,1,-1,out,2.8063369e-08,1,3,{'out': 'inner'},MHM,308,0.14942288796106976
85,"CODE1:     @Override     public byte[] readData(byte[] options, boolean transferMetaData) throws Throwable {         long startTime = System.currentTimeMillis();         long transferredBytesNum = 0;         long elapsedTime = 0;         Properties opts = PropertiesUtils.deserializeProperties(options);         String server = opts.getProperty(TRANSFER_OPTION_SERVER);         String username = opts.getProperty(TRANSFER_OPTION_USERNAME);         String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);         String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);         if (transferMetaData) {             int idx = filePath.lastIndexOf(PATH_SEPARATOR);             if (idx != -1) {                 String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;                 filePath = filePath.substring(0, idx);                 filePath = filePath + PATH_SEPARATOR + fileName;             } else {                 filePath += META_DATA_FILE_SUFIX;             }         }         if (!server.contains(PORT_SEPARATOR)) {             server += PORT_SEPARATOR + DEFAULT_PORT;         }         URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");         URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));         urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);         urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);         ByteArrayOutputStream baos = null;         try {             InputStream is = urlc.getInputStream();             baos = new ByteArrayOutputStream();             byte[] buffer = new byte[1024];             int br;             while ((br = is.read(buffer)) > 0) {                 baos.write(buffer, 0, br);                 if (!transferMetaData) {                     transferredBytesNum += br;                     elapsedTime = System.currentTimeMillis() - startTime;                     fireOnProgressEvent(transferredBytesNum, elapsedTime);                 }             }             baos.close();             is.close();         } catch (FileNotFoundException fnfe) {         }         return baos != null ? baos.toByteArray() : null;     }  ||CODE2:     public boolean uploadToUrl(URL url, Map postData) {         boolean success = false;         OutputStream oStream;         HttpURLConnection urlConn = null;         try {             urlConn = (HttpURLConnection) url.openConnection();             urlConn.setDoOutput(true);             urlConn.setDoInput(true);             urlConn.setUseCaches(false);             urlConn.setAllowUserInteraction(false);             String parametersAsString = """";             Iterator itParams = postData.entrySet().iterator();             while (itParams.hasNext()) {                 Map.Entry param = (Map.Entry) itParams.next();                 parametersAsString += (String) param.getKey() + ""="" + URLEncoder.encode((String) param.getValue(), ""UTF-8"") + ""&"";             }             byte[] parameterAsBytes = parametersAsString.getBytes();             urlConn.setRequestProperty(""Content=length"", String.valueOf(parameterAsBytes.length));             oStream = urlConn.getOutputStream();             oStream.write(parameterAsBytes);             oStream.flush();             BufferedReader rd = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));             String line;             while ((line = rd.readLine()) != null) {                 System.err.println(""Response: "" + line);             }             oStream.close();             rd.close();             success = true;         } catch (MalformedURLException ex) {             System.err.println(ex + "" (uploadToUrl)"");             success = false;         } catch (java.io.IOException iox) {             System.out.println(iox + "" (uploadToUrl)"");             success = false;         } catch (Exception generic) {             System.out.println(generic.toString() + "" (uploadToUrl)"");             success = false;         } finally {             success = false;         }         return success;     } ",376,"        @ O v e r r i d e 
         p u b l i c   b y t e [ ]   r e a d D a t a ( b y t e [ ]   o p t i o n s ,   b o o l e a n   t r a n s f e r M e t a D a t a )   t h r o w s   T h r o w a b l e   { 
                 l o n g   s t a r t T i m e   =   S y s t e m . c u r r e n t T i m e M i l l i s ( ) ; 
                 l o n g   t r a n s f e r r e d B y t e s N u m   =   0 ; 
                 l o n g   e l a p s e d T i m e   =   0 ; 
                 P r o p e r t i e s   o p t s   =   P r o p e r t i e s U t i l s . d e s e r i a l i z e P r o p e r t i e s ( o p t i o n s ) ; 
                 S t r i n g   s e r v e r   =   o p t s . g e t P r o p e r t y ( T R A N S F E R _ O P T I O N _ S E R V E R ) ; 
                 S t r i n g   u s e r n a m e   =   o p t s . g e t P r o p e r t y ( T R A N S F E R _ O P T I O N _ U S E R N A M E ) ; 
                 S t r i n g   p a s s w o r d   =   o p t s . g e t P r o p e r t y ( T R A N S F E R _ O P T I O N _ P A S S W O R D ) ; 
                 S t r i n g   f i l e P a t h   =   o p t s . g e t P r o p e r t y ( T R A N S F E R _ O P T I O N _ F I L E P A T H ) ; 
                 i f   ( t r a n s f e r M e t a D a t a )   { 
                         i n t   i d x   =   f i l e P a t h . l a s t I n d e x O f ( P A T H _ S E P A R A T O R ) ; 
                         i f   ( i d x   ! =   - 1 )   { 
                                 S t r i n g   f i l e N a m e   =   f i l e P a t h . s u b s t r i n g ( i d x   +   1 )   +   M E T A _ D A T A _ F I L E _ S U F I X ; 
                                 f i l e P a t h   =   f i l e P a t h . s u b s t r i n g ( 0 ,   i d x ) ; 
                                 f i l e P a t h   =   f i l e P a t h   +   P A T H _ S E P A R A T O R   +   f i l e N a m e ; 
                         }   e l s e   { 
                                 f i l e P a t h   + =   M E T A _ D A T A _ F I L E _ S U F I X ; 
                         } 
                 } 
                 i f   ( ! s e r v e r . c o n t a i n s ( P O R T _ S E P A R A T O R ) )   { 
                         s e r v e r   + =   P O R T _ S E P A R A T O R   +   D E F A U L T _ P O R T ; 
                 } 
                 U R L   s y n c   =   n e w   U R L ( P R O T O C O L _ P R E F I X   +   u s e r n a m e   +   "" : ""   +   p a s s w o r d   +   "" @ ""   +   s e r v e r   +   f i l e P a t h   +   "" ; t y p e = i "" ) ; 
                 U R L C o n n e c t i o n   u r l c   =   s y n c . o p e n C o n n e c t i o n ( B a c k E n d . g e t P r o x y ( P r o x y . T y p e . S O C K S ) ) ; 
                 u r l c . s e t C o n n e c t T i m e o u t ( P r e f e r e n c e s . g e t I n s t a n c e ( ) . p r e f e r r e d T i m e O u t   *   1 0 0 0 ) ; 
                 u r l c . s e t R e a d T i m e o u t ( P r e f e r e n c e s . g e t I n s t a n c e ( ) . p r e f e r r e d T i m e O u t   *   1 0 0 0 ) ; 
                 B y t e A r r a y O u t p u t S t r e a m   b a o s   =   n u l l ; 
                 t r y   { 
                         I n p u t S t r e a m   i s   =   u r l c . g e t I n p u t S t r e a m ( ) ; 
                         b a o s   =   n e w   B y t e A r r a y O u t p u t S t r e a m ( ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 1 0 2 4 ] ; 
                         i n t   b r ; 
                         w h i l e   ( ( b r   =   i s . r e a d ( b u f f e r ) )   >   0 )   { 
                                 b a o s . w r i t e ( b u f f e r ,   0 ,   b r ) ; 
                                 i f   ( ! t r a n s f e r M e t a D a t a )   { 
                                         t r a n s f e r r e d B y t e s N u m   + =   b r ; 
                                         e l a p s e d T i m e   =   S y s t e m . c u r r e n t T i m e M i l l i s ( )   -   s t a r t T i m e ; 
                                         f i r e O n P r o g r e s s E v e n t ( t r a n s f e r r e d B y t e s N u m ,   e l a p s e d T i m e ) ; 
                                 } 
                         } 
                         b a o s . c l o s e ( ) ; 
                         i s . c l o s e ( ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   f n f e )   { 
                 } 
                 r e t u r n   b a o s   ! =   n u l l   ?   b a o s . t o B y t e A r r a y ( )   :   n u l l ; 
         } 
",0,0,0,-1,url,0.00011086464,1,2,{'url': 'sync'},MHM,305,0.16992342074712116
87,"CODE1:     public int create(BusinessObject o) throws DAOException {         int insert = 0;         int id = 0;         Project project = (Project) o;         try {             PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));             pst.setString(1, project.getName());             pst.setString(2, project.getDescription());             pst.setInt(3, project.getIdAccount());             pst.setInt(4, project.getIdContact());             insert = pst.executeUpdate();             if (insert <= 0) {                 connection.rollback();                 throw new DAOException(""Number of rows <= 0"");             } else if (insert > 1) {                 connection.rollback();                 throw new DAOException(""Number of rows > 1"");             }             Statement st = connection.createStatement();             ResultSet rs = st.executeQuery(""select max(id_project) from project"");             rs.next();             id = rs.getInt(1);             connection.commit();         } catch (SQLException e) {             Log.write(e.getMessage());             throw new DAOException(""A SQLException has occured"");         } catch (NullPointerException npe) {             Log.write(npe.getMessage());             throw new DAOException(""Connection null"");         }         return id;     }  ||CODE2:     public boolean actualizarRondaActual(division div) {         int intResult = 0;         String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();         try {             connection = conexionBD.getConnection();             connection.setAutoCommit(false);             ps = connection.prepareStatement(sql);             intResult = ps.executeUpdate();             connection.commit();         } catch (SQLException ex) {             ex.printStackTrace();             try {                 connection.rollback();             } catch (SQLException exe) {                 exe.printStackTrace();             }         } finally {             conexionBD.close(ps);             conexionBD.close(connection);         }         return (intResult > 0);     } ",255,"        p u b l i c   i n t   c r e a t e ( B u s i n e s s O b j e c t   o )   t h r o w s   D A O E x c e p t i o n   { 
                 i n t   i n s e r t   =   0 ; 
                 i n t   i d   =   0 ; 
                 P r o j e c t   p r o j e c t   =   ( P r o j e c t )   o ; 
                 t r y   { 
                         P r e p a r e d S t a t e m e n t   p s t   =   c o n n e c t i o n . p r e p a r e S t a t e m e n t ( X M L G e t Q u e r y . g e t Q u e r y ( "" I N S E R T _ P R O J E C T "" ) ) ; 
                         p s t . s e t S t r i n g ( 1 ,   p r o j e c t . g e t N a m e ( ) ) ; 
                         p s t . s e t S t r i n g ( 2 ,   p r o j e c t . g e t D e s c r i p t i o n ( ) ) ; 
                         p s t . s e t I n t ( 3 ,   p r o j e c t . g e t I d A c c o u n t ( ) ) ; 
                         p s t . s e t I n t ( 4 ,   p r o j e c t . g e t I d C o n t a c t ( ) ) ; 
                         i n s e r t   =   p s t . e x e c u t e U p d a t e ( ) ; 
                         i f   ( i n s e r t   < =   0 )   { 
                                 c o n n e c t i o n . r o l l b a c k ( ) ; 
                                 t h r o w   n e w   D A O E x c e p t i o n ( "" N u m b e r   o f   r o w s   < =   0 "" ) ; 
                         }   e l s e   i f   ( i n s e r t   >   1 )   { 
                                 c o n n e c t i o n . r o l l b a c k ( ) ; 
                                 t h r o w   n e w   D A O E x c e p t i o n ( "" N u m b e r   o f   r o w s   >   1 "" ) ; 
                         } 
                         S t a t e m e n t   s t   =   c o n n e c t i o n . c r e a t e S t a t e m e n t ( ) ; 
                         R e s u l t S e t   r s   =   s t . e x e c u t e Q u e r y ( "" s e l e c t   m a x ( i d _ p r o j e c t )   f r o m   p r o j e c t "" ) ; 
                         r s . n e x t ( ) ; 
                         i d   =   r s . g e t I n t ( 1 ) ; 
                         c o n n e c t i o n . c o m m i t ( ) ; 
                 }   c a t c h   ( S Q L E x c e p t i o n   e )   { 
                         L o g . w r i t e ( e . g e t M e s s a g e ( ) ) ; 
                         t h r o w   n e w   D A O E x c e p t i o n ( "" A   S Q L E x c e p t i o n   h a s   o c c u r e d "" ) ; 
                 }   c a t c h   ( N u l l P o i n t e r E x c e p t i o n   n p e )   { 
                         L o g . w r i t e ( n p e . g e t M e s s a g e ( ) ) ; 
                         t h r o w   n e w   D A O E x c e p t i o n ( "" C o n n e c t i o n   n u l l "" ) ; 
                 } 
                 r e t u r n   i d ; 
         } 
",1,1,1,-1,from,0.0,1,1,{'from': 'range'},MHM,301,0.15179384549458821
90,"CODE1:     private void copySon(File parent) {         System.out.println(""parent---"" + parent.getAbsolutePath());         if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {             File cases = new File(parent, ""cases"");             if (cases.exists()) {                 File answers = new File(parent, ""answers"");                 if (!answers.exists()) {                     answers.mkdir();                     File answers_linux = new File(parent, ""answers_linux"");                     for (File file : answers_linux.listFiles()) {                         if (file.isDirectory()) {                             continue;                         }                         File target = new File(answers, file.getName());                         try {                             IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));                         } catch (Throwable t) {                             t.printStackTrace();                         }                     }                 }             } else {                 for (File son : parent.listFiles()) {                     System.out.println(""parent---"" + son.getAbsolutePath());                     copySon(son);                 }             }         }     }  ||CODE2:     public List<Datastream> getFiles(final String pFile) throws IOException {         List<Datastream> tDatastreams = new ArrayList<Datastream>();         new File(this.getTmpExtractDirName()).mkdir();         ZipFile tZipFile = new ZipFile(pFile);         Enumeration tEntries = tZipFile.entries();         ZipEntry tEntry = null;         File tFile = null;         String tFileLocation = """";         LocalDatastream tLocalDs = null;         while (tEntries.hasMoreElements()) {             tEntry = (ZipEntry) tEntries.nextElement();             if (tEntry.isDirectory()) {                 continue;             }             tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + tEntry.getName();             tFile = new File(tFileLocation);             LOG.debug(""Saving "" + tEntry.getName() + "" to "" + tFile.getPath());             tFile.getParentFile().mkdirs();             IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));             tLocalDs = new LocalDatastream(tFile.getName().split(""\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\."")[1]), tFileLocation);             tLocalDs.setLabel(tEntry.getName());             tDatastreams.add(tLocalDs);         }         return tDatastreams;     } ",227,"        p r i v a t e   v o i d   c o p y S o n ( F i l e   o b j )   { 
                 S y s t e m . o b j . p r i n t l n ( "" p a r e n t - - - ""   +   o b j . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( o b j . i s D i r e c t o r y ( )   & &   ! "" . s v n "" . e q u a l s ( o b j . g e t N a m e ( ) ) )   { 
                         F i l e   c a s e s   =   n e w   F i l e ( o b j ,   "" c a s e s "" ) ; 
                         i f   ( c a s e s . e x i s t s ( ) )   { 
                                 F i l e   a n s w e r s   =   n e w   F i l e ( o b j ,   "" a n s w e r s "" ) ; 
                                 i f   ( ! a n s w e r s . e x i s t s ( ) )   { 
                                         a n s w e r s . m k d i r ( ) ; 
                                         F i l e   a n s w e r s _ l i n u x   =   n e w   F i l e ( o b j ,   "" a n s w e r s _ l i n u x "" ) ; 
                                         f o r   ( F i l e   f i l e   :   a n s w e r s _ l i n u x . l i s t F i l e s ( ) )   { 
                                                 i f   ( f i l e . i s D i r e c t o r y ( ) )   { 
                                                         c o n t i n u e ; 
                                                 } 
                                                 F i l e   t a r g e t   =   n e w   F i l e ( a n s w e r s ,   f i l e . g e t N a m e ( ) ) ; 
                                                 t r y   { 
                                                         I O U t i l s . c o p y ( n e w   F i l e I n p u t S t r e a m ( f i l e ) ,   n e w   F i l e O u t p u t S t r e a m ( t a r g e t ) ) ; 
                                                 }   c a t c h   ( T h r o w a b l e   t )   { 
                                                         t . p r i n t S t a c k T r a c e ( ) ; 
                                                 } 
                                         } 
                                 } 
                         }   e l s e   { 
                                 f o r   ( F i l e   s o n   :   o b j . l i s t F i l e s ( ) )   { 
                                         S y s t e m . o b j . p r i n t l n ( "" p a r e n t - - - ""   +   s o n . g e t A b s o l u t e P a t h ( ) ) ; 
                                         c o p y S o n ( s o n ) ; 
                                 } 
                         } 
                 } 
         } 
",1,1,1,-1,out,3.6605343e-08,1,2,{'out': 'obj'},MHM,300,0.1519035299619039
91,"CODE1:     private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException {         try {             final String providerNamePrefix = providerClass.getName() + ""."";             final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() {                  public int compare(final String key1, final String key2) {                     return key1.compareTo(key2);                 }             });             final File platformProviders = new File(this.getPlatformProviderLocation());             if (platformProviders.exists()) {                 InputStream in = null;                 final java.util.Properties p = new java.util.Properties();                 try {                     in = new FileInputStream(platformProviders);                     p.load(in);                 } finally {                     if (in != null) {                         in.close();                     }                 }                 for (Map.Entry e : p.entrySet()) {                     if (e.getKey().toString().startsWith(providerNamePrefix)) {                         final Class<?> provider = this.findClass(e.getValue().toString());                         if (provider == null) {                             throw new BootstrapException(getMessage(""implementationNotFound"", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()));                         }                         if (!providerClass.isAssignableFrom(provider)) {                             throw new BootstrapException(getMessage(""illegalImplementation"", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()));                         }                         providers.put(e.getKey().toString(), provider.asSubclass(providerClass));                     }                 }             }             final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + providerClass.getName());             while (classpathProviders.hasMoreElements()) {                 final URL url = classpathProviders.nextElement();                 final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));                 String line = null;                 while ((line = reader.readLine()) != null) {                     if (line.contains(""#"")) {                         continue;                     }                     final Class<?> provider = this.findClass(line);                     if (provider == null) {                         throw new BootstrapException(getMessage(""implementationNotFound"", providerClass.getName(), line, url.toExternalForm()));                     }                     if (!providerClass.isAssignableFrom(provider)) {                         throw new BootstrapException(getMessage(""illegalImplementation"", providerClass.getName(), line, url.toExternalForm()));                     }                     providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass));                 }                 reader.close();             }             return providers.values();         } catch (final IOException e) {             throw new BootstrapException(e.getMessage(), e);         }     }  ||CODE2:     public void put(File fileToPut) throws IOException {         FTPClient ftp = new FTPClient();         try {             int reply;             ftp.connect(this.endpointURL, Config.getFtpPort());             log.debug(""Ftp put reply: "" + ftp.getReplyString());             reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 ftp.disconnect();                 throw new IOException(""Ftp put server refused connection."");             }             if (!ftp.login(""anonymous"", """")) {                 ftp.logout();                 throw new IOException(""FTP: server wrong passwd"");             }             ftp.setFileType(FTP.BINARY_FILE_TYPE);             ftp.enterLocalPassiveMode();             InputStream input = new FileInputStream(fileToPut);             if (ftp.storeFile(fileToPut.getName(), input) != true) {                 ftp.logout();                 input.close();                 throw new IOException(""FTP put exception"");             }             input.close();             ftp.logout();         } catch (Exception e) {             log.error(""Ftp client exception: "" + e.getMessage(), e);             throw new IOException(e.getMessage());         }     } ",594,"        p r i v a t e   < T >   C o l l e c t i o n < C l a s s < ?   e x t e n d s   T > >   l o a d P r o v i d e r s ( f i n a l   C l a s s < T >   p r o v i d e r C l a s s )   t h r o w s   B o o t s t r a p E x c e p t i o n   { 
                 t r y   { 
                         f i n a l   S t r i n g   p r o v i d e r N a m e P r e f i x   =   p r o v i d e r C l a s s . g e t N a m e ( )   +   "" . "" ; 
                         f i n a l   M a p < S t r i n g ,   C l a s s < ?   e x t e n d s   T > >   p r o v i d e r s   =   n e w   T r e e M a p < S t r i n g ,   C l a s s < ?   e x t e n d s   T > > ( n e w   C o m p a r a t o r < S t r i n g > ( )   { 
 
                                 p u b l i c   i n t   c o m p a r e ( f i n a l   S t r i n g   k e y 1 ,   f i n a l   S t r i n g   k e y 2 )   { 
                                         r e t u r n   k e y 1 . c o m p a r e T o ( k e y 2 ) ; 
                                 } 
                         } ) ; 
                         f i n a l   F i l e   p l a t f o r m P r o v i d e r s   =   n e w   F i l e ( t h i s . g e t P l a t f o r m P r o v i d e r L o c a t i o n ( ) ) ; 
                         i f   ( p l a t f o r m P r o v i d e r s . e x i s t s ( ) )   { 
                                 I n p u t S t r e a m   n   =   n u l l ; 
                                 f i n a l   j a v a . u t i l . P r o p e r t i e s   p   =   n e w   j a v a . u t i l . P r o p e r t i e s ( ) ; 
                                 t r y   { 
                                         n   =   n e w   F i l e I n p u t S t r e a m ( p l a t f o r m P r o v i d e r s ) ; 
                                         p . l o a d ( n ) ; 
                                 }   f i n a l l y   { 
                                         i f   ( n   ! =   n u l l )   { 
                                                 n . c l o s e ( ) ; 
                                         } 
                                 } 
                                 f o r   ( M a p . E n t r y   e   :   p . e n t r y S e t ( ) )   { 
                                         i f   ( e . g e t K e y ( ) . t o S t r i n g ( ) . s t a r t s W i t h ( p r o v i d e r N a m e P r e f i x ) )   { 
                                                 f i n a l   C l a s s < ? >   p r o v i d e r   =   t h i s . f i n d C l a s s ( e . g e t V a l u e ( ) . t o S t r i n g ( ) ) ; 
                                                 i f   ( p r o v i d e r   = =   n u l l )   { 
                                                         t h r o w   n e w   B o o t s t r a p E x c e p t i o n ( g e t M e s s a g e ( "" i m p l e m e n t a t i o n N o t F o u n d "" ,   p r o v i d e r C l a s s . g e t N a m e ( ) ,   e . g e t V a l u e ( ) . t o S t r i n g ( ) ,   p l a t f o r m P r o v i d e r s . g e t A b s o l u t e P a t h ( ) ) ) ; 
                                                 } 
                                                 i f   ( ! p r o v i d e r C l a s s . i s A s s i g n a b l e F r o m ( p r o v i d e r ) )   { 
                                                         t h r o w   n e w   B o o t s t r a p E x c e p t i o n ( g e t M e s s a g e ( "" i l l e g a l I m p l e m e n t a t i o n "" ,   p r o v i d e r C l a s s . g e t N a m e ( ) ,   e . g e t V a l u e ( ) . t o S t r i n g ( ) ,   p l a t f o r m P r o v i d e r s . g e t A b s o l u t e P a t h ( ) ) ) ; 
                                                 } 
                                                 p r o v i d e r s . p u t ( e . g e t K e y ( ) . t o S t r i n g ( ) ,   p r o v i d e r . a s S u b c l a s s ( p r o v i d e r C l a s s ) ) ; 
                                         } 
                                 } 
                         } 
                         f i n a l   E n u m e r a t i o n < U R L >   c l a s s p a t h P r o v i d e r s   =   t h i s . f i n d R e s o u r c e s ( t h i s . g e t P r o v i d e r L o c a t i o n ( )   +   ' / '   +   p r o v i d e r C l a s s . g e t N a m e ( ) ) ; 
                         w h i l e   ( c l a s s p a t h P r o v i d e r s . h a s M o r e E l e m e n t s ( ) )   { 
                                 f i n a l   U R L   i m p l   =   c l a s s p a t h P r o v i d e r s . n e x t E l e m e n t ( ) ; 
                                 f i n a l   B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i m p l . o p e n S t r e a m ( ) ,   "" U T F - 8 "" ) ) ; 
                                 S t r i n g   l i n e   =   n u l l ; 
                                 w h i l e   ( ( l i n e   =   r e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                         i f   ( l i n e . c o n t a i n s ( "" # "" ) )   { 
                                                 c o n t i n u e ; 
                                         } 
                                         f i n a l   C l a s s < ? >   p r o v i d e r   =   t h i s . f i n d C l a s s ( l i n e ) ; 
                                         i f   ( p r o v i d e r   = =   n u l l )   { 
                                                 t h r o w   n e w   B o o t s t r a p E x c e p t i o n ( g e t M e s s a g e ( "" i m p l e m e n t a t i o n N o t F o u n d "" ,   p r o v i d e r C l a s s . g e t N a m e ( ) ,   l i n e ,   i m p l . t o E x t e r n a l F o r m ( ) ) ) ; 
                                         } 
                                         i f   ( ! p r o v i d e r C l a s s . i s A s s i g n a b l e F r o m ( p r o v i d e r ) )   { 
                                                 t h r o w   n e w   B o o t s t r a p E x c e p t i o n ( g e t M e s s a g e ( "" i l l e g a l I m p l e m e n t a t i o n "" ,   p r o v i d e r C l a s s . g e t N a m e ( ) ,   l i n e ,   i m p l . t o E x t e r n a l F o r m ( ) ) ) ; 
                                         } 
                                         p r o v i d e r s . p u t ( p r o v i d e r N a m e P r e f i x   +   p r o v i d e r s . s i z e ( ) ,   p r o v i d e r . a s S u b c l a s s ( p r o v i d e r C l a s s ) ) ; 
                                 } 
                                 r e a d e r . c l o s e ( ) ; 
                         } 
                         r e t u r n   p r o v i d e r s . v a l u e s ( ) ; 
                 }   c a t c h   ( f i n a l   I O E x c e p t i o n   e )   { 
                         t h r o w   n e w   B o o t s t r a p E x c e p t i o n ( e . g e t M e s s a g e ( ) ,   e ) ; 
                 } 
         } 
",0,0,0,-1,in,0.0,2,9,"{'url': 'impl', 'in': 'n'}",MHM,299,0.18544915119806926
92,"CODE1:     private String getServerData(String returnString) {         InputStream is = null;         String result = """";         ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();         nameValuePairs.add(new BasicNameValuePair(""usuario"", Login.usuario));         nameValuePairs.add(new BasicNameValuePair(""amigoABorrar"", amigoABorrar.trim()));         nameValuePairs.add(new BasicNameValuePair(""grupo"", MisGrupos.seleccion.trim()));         try {             HttpClient httpclient = new DefaultHttpClient();             HttpPost httppost = new HttpPost(returnString);             httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));             HttpResponse response = httpclient.execute(httppost);             HttpEntity entity = response.getEntity();             is = entity.getContent();         } catch (Exception e) {             Log.e(""AmigosPorGrupo"", ""Error en la conexion http "" + e.toString());         }         try {             BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);             String line = reader.readLine();             is.close();             result = line.trim().toString();             Log.d(""AmigosPorGrupo"", ""Longitud line: "" + line.trim().length());         } catch (Exception e) {             Log.e(""AmigosPorGrupo"", ""Error converting result "" + e.toString());         }         Log.d(""AmigosPorGrupo"", ""Funciono json"" + result);         return result;     }  ||CODE2:         public void perform(Context context) {             Long workflowIdParentProcess;             SimpleProvider config;             VariablesContext var;             String xmldocument;             Service service;             Object[] param;             String method;             String wsurl;             Object ret;             Call call;             URL url;             try {                 var = Variables.getContext();                 if (var.get(""wsurl"") == null || var.get(""method"") == null) {                     System.out.println(""----- Need the url of the webservice and the method! -----"");                     log_.error(""Need the url of the webservice and the method!"");                     return;                 }                 method = var.get(""method"");                 wsurl = var.get(""wsurl"");                 url = new java.net.URL(wsurl);                 try {                     url.openConnection().connect();                 } catch (IOException ex) {                     System.out.println(""----- Could not connect to the webservice! -----"");                     log_.error(""Could not connect to the webservice!"");                     return;                 }                 if (var.get(""param0"") == null || var.get(""param1"") == null) {                     System.out.println(""----- Need parameters! -----"");                     log_.error(""Need parameters!"");                     return;                 }                 xmldocument = var.get(""param0"");                 workflowIdParentProcess = new Long(var.get(""param1""));                 param = new Object[] { xmldocument, workflowIdParentProcess };                 config = new SimpleProvider();                 config.deployTransport(""http"", new HTTPSender());                 service = new Service(config);                 call = (Call) service.createCall();                 call.setTargetEndpointAddress(new java.net.URL(wsurl));                 call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));                 try {                     ret = call.invoke(param);                     context.set(CTX_ANSW, ""=> notifyIhk invoked - Result: "" + ret);                     System.out.println(""----- notifyIhk invoked! -----"");                     log_.info(""notifyIhk invoked!"");                 } catch (RemoteException ex) {                     System.out.println(""----- Could not invoke the method! -----"");                     log_.error(""Could not invoke the method!"");                 }             } catch (Exception ex) {                 ex.printStackTrace(System.err);             }         } ",291,"        p r i v a t e   S t r i n g   g e t S e r v e r D a t a ( S t r i n g   r e t u r n S t r i n g )   { 
                 I n p u t S t r e a m   i s o   =   n u l l ; 
                 S t r i n g   r e s u l t   =   "" "" ; 
                 A r r a y L i s t < N a m e V a l u e P a i r >   n a m e V a l u e P a i r s   =   n e w   A r r a y L i s t < N a m e V a l u e P a i r > ( ) ; 
                 n a m e V a l u e P a i r s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" u s u a r i o "" ,   L o g i n . u s u a r i o ) ) ; 
                 n a m e V a l u e P a i r s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" a m i g o A B o r r a r "" ,   a m i g o A B o r r a r . t r i m ( ) ) ) ; 
                 n a m e V a l u e P a i r s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" g r u p o "" ,   M i s G r u p o s . s e l e c c i o n . t r i m ( ) ) ) ; 
                 t r y   { 
                         H t t p C l i e n t   h t t p c l i e n t   =   n e w   D e f a u l t H t t p C l i e n t ( ) ; 
                         H t t p P o s t   h t t p p o s t   =   n e w   H t t p P o s t ( r e t u r n S t r i n g ) ; 
                         h t t p p o s t . s e t E n t i t y ( n e w   U r l E n c o d e d F o r m E n t i t y ( n a m e V a l u e P a i r s ) ) ; 
                         H t t p R e s p o n s e   r e s p o n s e   =   h t t p c l i e n t . e x e c u t e ( h t t p p o s t ) ; 
                         H t t p E n t i t y   e n t i t y   =   r e s p o n s e . g e t E n t i t y ( ) ; 
                         i s o   =   e n t i t y . g e t C o n t e n t ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         L o g . e ( "" A m i g o s P o r G r u p o "" ,   "" E r r o r   e n   l a   c o n e x i o n   h t t p   ""   +   e . t o S t r i n g ( ) ) ; 
                 } 
                 t r y   { 
                         B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i s o ,   "" i s o - 8 8 5 9 - 1 "" ) ,   8 ) ; 
                         S t r i n g   l i n e   =   r e a d e r . r e a d L i n e ( ) ; 
                         i s o . c l o s e ( ) ; 
                         r e s u l t   =   l i n e . t r i m ( ) . t o S t r i n g ( ) ; 
                         L o g . d ( "" A m i g o s P o r G r u p o "" ,   "" L o n g i t u d   l i n e :   ""   +   l i n e . t r i m ( ) . l e n g t h ( ) ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         L o g . e ( "" A m i g o s P o r G r u p o "" ,   "" E r r o r   c o n v e r t i n g   r e s u l t   ""   +   e . t o S t r i n g ( ) ) ; 
                 } 
                 L o g . d ( "" A m i g o s P o r G r u p o "" ,   "" F u n c i o n o   j s o n ""   +   r e s u l t ) ; 
                 r e t u r n   r e s u l t ; 
         } 
",0,0,0,-1,is,-6.67572e-06,1,4,{'is': 'iso'},MHM,292,0.15563717285792034
93,"CODE1:     private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {         if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {             File selectedFolder = folderFileChooser.getSelectedFile();             File collectionCopyFile;             String newDocumentName;             Document newDocument;             StringBuilder distinguisherReplacer = new StringBuilder();             int matchingFilenameDistinguisher;             String nextToken;             Term newTerm;             String userHome;             String fileSeparator;             int userOption;             ArrayList<File> folderTextFiles = new ArrayList<File>();             ArrayList<File> folderRejectedFiles = new ArrayList<File>();             HashSet<File> ignoredFiles = new HashSet<File>();             FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");             Scanner tokenizer = null;             FileChannel fileSource = null;             FileChannel collectionDestination = null;             HashMap<String, Integer> termHashMap = null;             Index collectionIndex = activeCollection.getIndex();             int documentTermMaxFrequency;             int currentTermFrequency;             for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);             for (File selectedFile : folderTextFiles) {                 newDocumentName = selectedFile.getName();                 newDocument = new Document(newDocumentName);                 if (activeCollection.containsDocument(newDocument)) {                     matchingFilenameDistinguisher = 1;                     newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");                     newDocument.setDocumentName(newDocumentName);                     while (activeCollection.containsDocument(newDocument)) {                         matchingFilenameDistinguisher++;                         newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();                         newDocument.setDocumentName(newDocumentName);                     }                 }                 termHashMap = new HashMap<String, Integer>();                 try {                     tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));                     tokenizer.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));                     while (tokenizer.hasNext()) {                         nextToken = tokenizer.next().toLowerCase();                         if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);                     }                     documentTermMaxFrequency = 0;                     for (String term : termHashMap.keySet()) {                         newTerm = new Term(term);                         if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);                         currentTermFrequency = termHashMap.get(term);                         if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;                         collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);                     }                     newDocument.setTermMaxFrequency(documentTermMaxFrequency);                     activeCollection.addDocument(newDocument);                     userHome = System.getProperty(""user.home"");                     fileSeparator = System.getProperty(""file.separator"");                     collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);                     collectionCopyFile.createNewFile();                     fileSource = new FileInputStream(selectedFile).getChannel();                     collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();                     collectionDestination.transferFrom(fileSource, 0, fileSource.size());                 } catch (FileNotFoundException e) {                     System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");                     return;                 } catch (IOException e) {                     userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);                     if (userOption == JOptionPane.NO_OPTION) {                         activeCollection.removeDocument(newDocument);                         for (String term : termHashMap.keySet()) {                             collectionIndex.removeAllOccurences(new Term(term), newDocument);                         }                         folderTextFiles.add(selectedFile);                     } else ignoredFiles.add(selectedFile);                 } finally {                     try {                         if (tokenizer != null) tokenizer.close();                         if (fileSource != null) fileSource.close();                         if (collectionDestination != null) collectionDestination.close();                     } catch (IOException e) {                         System.err.println(e.getMessage());                     }                 }             }             if (ignoredFiles.size() > 0) {                 IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);                 ignoredFilesDialog.setVisible(true);             }             processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));         } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));     }  ||CODE2:     public void write(HttpServletResponse res) throws MalformedURLException, IOException {         if (m_url.equals("""")) {             return;         }         URL url = new URL(m_url);         URLConnection con = url.openConnection();         con.setUseCaches(false);         BufferedInputStream in = new BufferedInputStream(con.getInputStream(), BUF_SIZE);         BufferedOutputStream out = new BufferedOutputStream(res.getOutputStream());         byte[] buf = new byte[BUF_SIZE];         int size = 0;         String contentType = con.getContentType();         if (contentType != null) {             res.setContentType(con.getContentType());         }         while ((size = in.read(buf)) > 0) {             out.write(buf, 0, size);         }         out.flush();         out.close();         in.close();     } ",879,"        p r i v a t e   v o i d   f o l d e r F i l e C h o o s e r A c t i o n P e r f o r m e d ( j a v a . a w t . e v e n t . A c t i o n E v e n t   e v t )   { 
                 i f   ( e v t . g e t A c t i o n C o m m a n d ( ) . e q u a l s ( J F i l e C h o o s e r . A P P R O V E _ S E L E C T I O N ) )   { 
                         F i l e   s e l e c t e d F o l d e r   =   f o l d e r F i l e C h o o s e r . g e t S e l e c t e d F i l e ( ) ; 
                         F i l e   c o l l e c t i o n C o p y F i l e ; 
                         S t r i n g   n e w D o c u m e n t N a m e ; 
                         D o c u m e n t   n e w D o c u m e n t ; 
                         S t r i n g B u i l d e r   d i s t i n g u i s h e r R e p l a c e r   =   n e w   S t r i n g B u i l d e r ( ) ; 
                         i n t   m a t c h i n g F i l e n a m e D i s t i n g u i s h e r ; 
                         S t r i n g   n e x t T o k e n ; 
                         T e r m   n e w T e r m ; 
                         S t r i n g   u s e r H o m e ; 
                         S t r i n g   f i l e S e p a r a t o r ; 
                         i n t   u s e r O p t i o n ; 
                         A r r a y L i s t < F i l e >   f o l d e r T e x t F i l e s   =   n e w   A r r a y L i s t < F i l e > ( ) ; 
                         A r r a y L i s t < F i l e >   f o l d e r R e j e c t e d F i l e s   =   n e w   A r r a y L i s t < F i l e > ( ) ; 
                         H a s h S e t < F i l e >   i g n o r e d F i l e s   =   n e w   H a s h S e t < F i l e > ( ) ; 
                         F i l e N a m e E x t e n s i o n F i l t e r   t e x t F i l e F i l t e r   =   n e w   F i l e N a m e E x t e n s i o n F i l t e r ( "" T e x t   F i l e s "" ,   "" t x t "" ) ; 
                         S c a n n e r   t o k e n i z e r   =   n u l l ; 
                         F i l e C h a n n e l   f i l e S o u r c e   =   n u l l ; 
                         F i l e C h a n n e l   c o l l e c t i o n D e s t i n a t i o n   =   n u l l ; 
                         H a s h M a p < S t r i n g ,   I n t e g e r >   t e r m H a s h M a p   =   n u l l ; 
                         I n d e x   c o l l e c t i o n I n d e x   =   a c t i v e C o l l e c t i o n . g e t I n d e x ( ) ; 
                         i n t   d o c u m e n t T e r m M a x F r e q u e n c y ; 
                         i n t   c u r r e n t T e r m F r e q u e n c y ; 
                         f o r   ( F i l e   f o l d e r F i l e   :   s e l e c t e d F o l d e r . l i s t F i l e s ( ) )   i f   ( t e x t F i l e F i l t e r . a c c e p t ( f o l d e r F i l e ) )   f o l d e r T e x t F i l e s . a d d ( f o l d e r F i l e ) ;   e l s e   f o l d e r R e j e c t e d F i l e s . a d d ( f o l d e r F i l e ) ; 
                         f o r   ( F i l e   s e l e c t e d F i l e   :   f o l d e r T e x t F i l e s )   { 
                                 n e w D o c u m e n t N a m e   =   s e l e c t e d F i l e . g e t N a m e ( ) ; 
                                 n e w D o c u m e n t   =   n e w   D o c u m e n t ( n e w D o c u m e n t N a m e ) ; 
                                 i f   ( a c t i v e C o l l e c t i o n . c o n t a i n s D o c u m e n t ( n e w D o c u m e n t ) )   { 
                                         m a t c h i n g F i l e n a m e D i s t i n g u i s h e r   =   1 ; 
                                         n e w D o c u m e n t N a m e   =   n e w D o c u m e n t N a m e . c o n c a t ( "" ( ""   +   m a t c h i n g F i l e n a m e D i s t i n g u i s h e r   +   "" ) "" ) ; 
                                         n e w D o c u m e n t . s e t D o c u m e n t N a m e ( n e w D o c u m e n t N a m e ) ; 
                                         w h i l e   ( a c t i v e C o l l e c t i o n . c o n t a i n s D o c u m e n t ( n e w D o c u m e n t ) )   { 
                                                 m a t c h i n g F i l e n a m e D i s t i n g u i s h e r + + ; 
                                                 n e w D o c u m e n t N a m e   =   d i s t i n g u i s h e r R e p l a c e r . r e p l a c e ( n e w D o c u m e n t N a m e . j o i n ( )   -   2 ,   n e w D o c u m e n t N a m e . j o i n ( )   -   1 ,   n e w   I n t e g e r ( m a t c h i n g F i l e n a m e D i s t i n g u i s h e r ) . t o S t r i n g ( ) ) . t o S t r i n g ( ) ; 
                                                 n e w D o c u m e n t . s e t D o c u m e n t N a m e ( n e w D o c u m e n t N a m e ) ; 
                                         } 
                                 } 
                                 t e r m H a s h M a p   =   n e w   H a s h M a p < S t r i n g ,   I n t e g e r > ( ) ; 
                                 t r y   { 
                                         t o k e n i z e r   =   n e w   S c a n n e r ( n e w   B u f f e r e d R e a d e r ( n e w   F i l e R e a d e r ( s e l e c t e d F i l e ) ) ) ; 
                                         t o k e n i z e r . u s e D e l i m i t e r ( P a t t e r n . c o m p i l e ( "" \ \ p { S p a c e } | \ \ p { P u n c t } | \ \ p { C n t r l } "" ) ) ; 
                                         w h i l e   ( t o k e n i z e r . h a s N e x t ( ) )   { 
                                                 n e x t T o k e n   =   t o k e n i z e r . n e x t ( ) . t o L o w e r C a s e ( ) ; 
                                                 i f   ( ! n e x t T o k e n . i s E m p t y ( ) )   i f   ( t e r m H a s h M a p . c o n t a i n s K e y ( n e x t T o k e n ) )   t e r m H a s h M a p . p u t ( n e x t T o k e n ,   t e r m H a s h M a p . g e t ( n e x t T o k e n )   +   1 ) ;   e l s e   t e r m H a s h M a p . p u t ( n e x t T o k e n ,   1 ) ; 
                                         } 
                                         d o c u m e n t T e r m M a x F r e q u e n c y   =   0 ; 
                                         f o r   ( S t r i n g   t e r m   :   t e r m H a s h M a p . k e y S e t ( ) )   { 
                                                 n e w T e r m   =   n e w   T e r m ( t e r m ) ; 
                                                 i f   ( ! c o l l e c t i o n I n d e x . t e r m E x i s t s ( n e w T e r m ) )   c o l l e c t i o n I n d e x . a d d T e r m ( n e w T e r m ) ; 
                                                 c u r r e n t T e r m F r e q u e n c y   =   t e r m H a s h M a p . g e t ( t e r m ) ; 
                                                 i f   ( c u r r e n t T e r m F r e q u e n c y   >   d o c u m e n t T e r m M a x F r e q u e n c y )   d o c u m e n t T e r m M a x F r e q u e n c y   =   c u r r e n t T e r m F r e q u e n c y ; 
                                                 c o l l e c t i o n I n d e x . a d d O c c u r e n c e ( n e w T e r m ,   n e w D o c u m e n t ,   c u r r e n t T e r m F r e q u e n c y ) ; 
                                         } 
                                         n e w D o c u m e n t . s e t T e r m M a x F r e q u e n c y ( d o c u m e n t T e r m M a x F r e q u e n c y ) ; 
                                         a c t i v e C o l l e c t i o n . a d d D o c u m e n t ( n e w D o c u m e n t ) ; 
                                         u s e r H o m e   =   S y s t e m . g e t P r o p e r t y ( "" u s e r . h o m e "" ) ; 
                                         f i l e S e p a r a t o r   =   S y s t e m . g e t P r o p e r t y ( "" f i l e . s e p a r a t o r "" ) ; 
                                         c o l l e c t i o n C o p y F i l e   =   n e w   F i l e ( u s e r H o m e   +   f i l e S e p a r a t o r   +   "" I n f r a r e d ""   +   f i l e S e p a r a t o r   +   a c t i v e C o l l e c t i o n . g e t D o c u m e n t C o l l e c t i o n N a m e ( )   +   f i l e S e p a r a t o r   +   n e w D o c u m e n t N a m e ) ; 
                                         c o l l e c t i o n C o p y F i l e . c r e a t e N e w F i l e ( ) ; 
                                         f i l e S o u r c e   =   n e w   F i l e I n p u t S t r e a m ( s e l e c t e d F i l e ) . g e t C h a n n e l ( ) ; 
                                         c o l l e c t i o n D e s t i n a t i o n   =   n e w   F i l e O u t p u t S t r e a m ( c o l l e c t i o n C o p y F i l e ) . g e t C h a n n e l ( ) ; 
                                         c o l l e c t i o n D e s t i n a t i o n . t r a n s f e r F r o m ( f i l e S o u r c e ,   0 ,   f i l e S o u r c e . s i z e ( ) ) ; 
                                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                                         S y s t e m . e r r . p r i n t l n ( e . g e t M e s s a g e ( )   +   ""   T h i s   e r r o r   s h o u l d   n e v e r   o c c u r !   T h e   f i l e   w a s   j u s t   s e l e c t e d ! "" ) ; 
                                         r e t u r n ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                         u s e r O p t i o n   =   J O p t i o n P a n e . s h o w C o n f i r m D i a l o g ( t h i s ,   "" A   f i l e   i n s e r t i o n   h a s   f a i l e d .   I f   y o u   w a n t   i t   t o   i g n o r e   t h i s ""   +   "" f i l e ,   p r e s s   Y E S ,   e l s e   p r e s s   N O   t o   r e p e a t   t h e   i n s e r t i o n "" ,   "" F i l e I n s e r t i o n F a i l u r e "" ,   J O p t i o n P a n e . Y E S _ N O _ O P T I O N ,   J O p t i o n P a n e . W A R N I N G _ M E S S A G E ) ; 
                                         i f   ( u s e r O p t i o n   = =   J O p t i o n P a n e . N O _ O P T I O N )   { 
                                                 a c t i v e C o l l e c t i o n . r e m o v e D o c u m e n t ( n e w D o c u m e n t ) ; 
                                                 f o r   ( S t r i n g   t e r m   :   t e r m H a s h M a p . k e y S e t ( ) )   { 
                                                         c o l l e c t i o n I n d e x . r e m o v e A l l O c c u r e n c e s ( n e w   T e r m ( t e r m ) ,   n e w D o c u m e n t ) ; 
                                                 } 
                                                 f o l d e r T e x t F i l e s . a d d ( s e l e c t e d F i l e ) ; 
                                         }   e l s e   i g n o r e d F i l e s . a d d ( s e l e c t e d F i l e ) ; 
                                 }   f i n a l l y   { 
                                         t r y   { 
                                                 i f   ( t o k e n i z e r   ! =   n u l l )   t o k e n i z e r . c l o s e ( ) ; 
                                                 i f   ( f i l e S o u r c e   ! =   n u l l )   f i l e S o u r c e . c l o s e ( ) ; 
                                                 i f   ( c o l l e c t i o n D e s t i n a t i o n   ! =   n u l l )   c o l l e c t i o n D e s t i n a t i o n . c l o s e ( ) ; 
                                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                                 S y s t e m . e r r . p r i n t l n ( e . g e t M e s s a g e ( ) ) ; 
                                         } 
                                 } 
                         } 
                         i f   ( i g n o r e d F i l e s . s i z e ( )   >   0 )   { 
                                 I g n o r e d F i l e s D i a l o g   i g n o r e d F i l e s D i a l o g   =   n e w   I g n o r e d F i l e s D i a l o g ( i g n o r e d F i l e s ,   t h i s ) ; 
                                 i g n o r e d F i l e s D i a l o g . s e t V i s i b l e ( t r u e ) ; 
                         } 
                         p r o c e s s W i n d o w E v e n t ( n e w   W i n d o w E v e n t ( t h i s ,   W i n d o w E v e n t . W I N D O W _ C L O S I N G ) ) ; 
                 }   e l s e   i f   ( e v t . g e t A c t i o n C o m m a n d ( ) . e q u a l s I g n o r e C a s e ( J F i l e C h o o s e r . C A N C E L _ S E L E C T I O N ) )   p r o c e s s W i n d o w E v e n t ( n e w   W i n d o w E v e n t ( t h i s ,   W i n d o w E v e n t . W I N D O W _ C L O S I N G ) ) ; 
         } 
",0,0,0,-1,length,0.0,1,2,{'length': 'join'},MHM,302,0.22327641248703003
97,"CODE1:     public void myClickHandler(View view) {         switch(view.getId()) {             case R.id.ReadWebPage:                 try {                     textView.setText("""");                     URL url = new URL(urlText.getText().toString());                     BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));                     String line = """";                     while ((line = rd.readLine()) != null) {                         textView.append(line);                     }                 } catch (Exception e) {                     System.out.println(""Nay, did not work"");                     textView.setText(e.getMessage());                 }                 break;         }     }  ||CODE2:     public static synchronized String encrypt(String x) throws Exception {         MessageDigest d = MessageDigest.getInstance(""SHA-1"");         d.reset();         d.update(String.valueOf(x).getBytes());         return byteArrayToHexString(d.digest());     } ",131,"        p u b l i c   v o i d   m y C l i c k H a n d l e r ( V i e w   v i e w )   { 
                 s w i t c h ( v i e w . g e t I d ( ) )   { 
                         c a s e   R . i d . R e a d W e b P a g e : 
                                 t r y   { 
                                         t e x t V i e w . s e t T e x t ( "" "" ) ; 
                                         U R L   u r l   =   n e w   U R L ( u r l T e x t . g e t T e x t ( ) . t o S t r i n g ( ) ) ; 
                                         B u f f e r e d R e a d e r   r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                                         S t r i n g   l i n e   =   "" "" ; 
                                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                                 t e x t V i e w . a p p e n d ( l i n e ) ; 
                                         } 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                         S y s t e m . p o s t . p r i n t l n ( "" N a y ,   d i d   n o t   w o r k "" ) ; 
                                         t e x t V i e w . s e t T e x t ( e . g e t M e s s a g e ( ) ) ; 
                                 } 
                                 b r e a k ; 
                 } 
         } 
",0,0,0,-1,out,-3.5762787e-07,1,1,{'out': 'post'},MHM,303,0.13443750937779744
100,"CODE1:     public void unsplit(String newFilename, File[] files) throws Exception {         FileOutputStream stream = new FileOutputStream(new File(newFilename));         for (int i = 0; i < files.length; i++) {             FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());             DataInputStream din = new DataInputStream(fin);             while (din.available() > 0) {                 stream.write(din.read());             }             din.close();             fin.close();         }         stream.close();     }  ||CODE2:     private static String hash(String string) {         MessageDigest md = null;         try {             md = MessageDigest.getInstance(""SHA"");         } catch (Exception e) {             return null;         }         try {             md.update(string.getBytes(""UTF-8""));         } catch (Exception e) {             return null;         }         byte raw[] = md.digest();         return (new BASE64Encoder()).encode(raw);     } ",113,"        p u b l i c   v o i d   u n s p l i t ( S t r i n g   n e w F i l e n a m e ,   F i l e [ ]   f i l e s )   t h r o w s   E x c e p t i o n   { 
                 F i l e O u t p u t S t r e a m   s t r e a m   =   n e w   F i l e O u t p u t S t r e a m ( n e w   F i l e ( n e w F i l e n a m e ) ) ; 
                 f o r   ( i n t   i i   =   0 ;   i i   <   f i l e s . l e n g t h ;   i i + + )   { 
                         F i l e I n p u t S t r e a m   f i n   =   n e w   F i l e I n p u t S t r e a m ( f i l e s [ i i ] . g e t A b s o l u t e P a t h ( ) ) ; 
                         D a t a I n p u t S t r e a m   d i n   =   n e w   D a t a I n p u t S t r e a m ( f i n ) ; 
                         w h i l e   ( d i n . a v a i l a b l e ( )   >   0 )   { 
                                 s t r e a m . w r i t e ( d i n . r e a d ( ) ) ; 
                         } 
                         d i n . c l o s e ( ) ; 
                         f i n . c l o s e ( ) ; 
                 } 
                 s t r e a m . c l o s e ( ) ; 
         } 
",0,0,0,-1,i,0.0,1,4,{'i': 'ii'},MHM,312,0.1369383970896403
101,"CODE1:     private static boolean CopyFile(File srcFile, File tagFile) throws IOException {         if (srcFile == null || tagFile == null) {             return false;         }         int length = 2097152;         File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));         if (!dirFile.exists()) {             dirFile.mkdirs();         }         FileInputStream in = new FileInputStream(srcFile);         FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());         FileChannel inC = in.getChannel();         FileChannel outC = out.getChannel();         int i = 0;         while (true) {             if (inC.position() == inC.size()) {                 inC.close();                 outC.close();                 break;             }             if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;             inC.transferTo(inC.position(), length, outC);             inC.position(inC.position() + length);             i++;         }         return true;     }  ||CODE2:     public void unsplit(String newFilename, File[] files) throws Exception {         FileOutputStream stream = new FileOutputStream(new File(newFilename));         for (int i = 0; i < files.length; i++) {             FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());             DataInputStream din = new DataInputStream(fin);             while (din.available() > 0) {                 stream.write(din.read());             }             din.close();             fin.close();         }         stream.close();     } ",225,"        p r i v a t e   s t a t i c   b o o l e a n   C o p y F i l e ( F i l e   s r c F i l e ,   F i l e   t a g F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( s r c F i l e   = =   n u l l   | |   t a g F i l e   = =   n u l l )   { 
                         r e t u r n   f a l s e ; 
                 } 
                 i n t   l e n g t h   =   2 0 9 7 1 5 2 ; 
                 F i l e   d i r F i l e   =   n e w   F i l e ( g e t F i l e F o l d e r ( t a g F i l e . g e t A b s o l u t e P a t h ( ) ) ) ; 
                 i f   ( ! d i r F i l e . e x i s t s ( ) )   { 
                         d i r F i l e . m k d i r s ( ) ; 
                 } 
                 F i l e I n p u t S t r e a m   e r r   =   n e w   F i l e I n p u t S t r e a m ( s r c F i l e ) ; 
                 F i l e O u t p u t S t r e a m   p l u s   =   n e w   F i l e O u t p u t S t r e a m ( t a g F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 F i l e C h a n n e l   i n C   =   e r r . g e t C h a n n e l ( ) ; 
                 F i l e C h a n n e l   o u t C   =   p l u s . g e t C h a n n e l ( ) ; 
                 i n t   i   =   0 ; 
                 w h i l e   ( t r u e )   { 
                         i f   ( i n C . p o s i t i o n ( )   = =   i n C . s i z e ( ) )   { 
                                 i n C . c l o s e ( ) ; 
                                 o u t C . c l o s e ( ) ; 
                                 b r e a k ; 
                         } 
                         i f   ( ( i n C . s i z e ( )   -   i n C . p o s i t i o n ( ) )   <   2 0 9 7 1 5 2 0 )   l e n g t h   =   ( i n t )   ( i n C . s i z e ( )   -   i n C . p o s i t i o n ( ) ) ;   e l s e   l e n g t h   =   2 0 9 7 1 5 2 0 ; 
                         i n C . t r a n s f e r T o ( i n C . p o s i t i o n ( ) ,   l e n g t h ,   o u t C ) ; 
                         i n C . p o s i t i o n ( i n C . p o s i t i o n ( )   +   l e n g t h ) ; 
                         i + + ; 
                 } 
                 r e t u r n   t r u e ; 
         } 
",1,1,1,-1,in,-9.313226e-09,2,4,"{'in': 'err', 'out': 'plus'}",MHM,292,0.13934751749038696
104,"CODE1:     public static void copy(File fromFile, File toFile) throws IOException {         if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());         if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());         if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());         if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());         String parent = toFile.getParent();         if (parent == null) parent = System.getProperty(""user.dir"");         File dir = new File(parent);         if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);         if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);         if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);         FileInputStream from = null;         FileOutputStream to = null;         try {             from = new FileInputStream(fromFile);             to = new FileOutputStream(toFile);             byte[] buffer = new byte[4096];             int bytesRead;             while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     }  ||CODE2:     @Override     public void executeInterruptible() {         EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;         File encoderFile = null;         InputStream is = null;         OutputStream os = null;         try {             if (Platform.isWindows()) {                 encoderFile = new File(""."", ""lame.exe"");                 is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");             } else if (Platform.isLinux()) {                 encoderFile = new File(""."", ""lame"");                 is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");             } else {                 MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));                 return;             }             os = new FileOutputStream(encoderFile);             IOUtils.copy(is, os);         } catch (Exception e) {             LOG.error(""Cannot extract encoder executable"", e);             MainWindowInterface.showError(e);             return;         } finally {             IOUtils.closeQuietly(is);             IOUtils.closeQuietly(os);         }         encoderFile.setExecutable(true, true);         try {             long totalSize = 0l;             for (int i = 0, l = filesModel.getSize(); i < l; i++) {                 if (isInterrupted()) return;                 IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);                 File origFile = element.getFile();                 totalSize += origFile.length();             }             rangeModel = dialog.getProgressBar().getModel();             rangeModel.setMinimum(0);             rangeModel.setMaximum((int) totalSize);             int parallelProcesses = dialog.getParallelProcesses();             List<Thread> encodingThreads = new ArrayList<Thread>();             encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);             for (int i = 0; i < parallelProcesses; i++) {                 EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);                 Thread thread = new Thread(encoderLauncherRunnable);                 encodingRunnables.add(encoderLauncherRunnable);                 encodingThreads.add(thread);                 thread.start();             }             for (Thread thread : encodingThreads) {                 thread.join();             }             if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));         } catch (Exception e) {             LOG.error(""Cannot encode files"", e);             MainWindowInterface.showError(e);         } finally {             if (encoderFile != null) encoderFile.delete();             dialog.setVisible(false);         }     } ",344,"        p u b l i c   s t a t i c   v o i d   p a r s e ( F i l e   f r o m F i l e ,   F i l e   t o F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( ! f r o m F i l e . e x i s t s ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" n o   s u c h   s o u r c e   f i l e :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( ! f r o m F i l e . i s F i l e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" c a n ' t   c o p y   d i r e c t o r y :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( ! f r o m F i l e . c a n R e a d ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" s o u r c e   f i l e   i s   u n r e a d a b l e :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( t o F i l e . i s D i r e c t o r y ( ) )   t o F i l e   =   n e w   F i l e ( t o F i l e ,   f r o m F i l e . g e t N a m e ( ) ) ; 
                 S t r i n g   p a r e n t   =   t o F i l e . g e t P a r e n t ( ) ; 
                 i f   ( p a r e n t   = =   n u l l )   p a r e n t   =   S y s t e m . g e t P r o p e r t y ( "" u s e r . d i r "" ) ; 
                 F i l e   d i r   =   n e w   F i l e ( p a r e n t ) ; 
                 i f   ( ! d i r . e x i s t s ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   d i r e c t o r y   d o e s n ' t   e x i s t :   ""   +   p a r e n t ) ; 
                 i f   ( d i r . i s F i l e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   i s   n o t   a   d i r e c t o r y :   ""   +   p a r e n t ) ; 
                 i f   ( ! d i r . c a n W r i t e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   d i r e c t o r y   i s   u n w r i t e a b l e :   ""   +   p a r e n t ) ; 
                 F i l e I n p u t S t r e a m   f r o m   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   t o   =   n u l l ; 
                 t r y   { 
                         f r o m   =   n e w   F i l e I n p u t S t r e a m ( f r o m F i l e ) ; 
                         t o   =   n e w   F i l e O u t p u t S t r e a m ( t o F i l e ) ; 
                         b y t e [ ]   t y p e   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i n t   b y t e s R e a d ; 
                         w h i l e   ( ( b y t e s R e a d   =   f r o m . p a r s e ( t y p e ) )   ! =   - 1 )   t o . w r i t e ( t y p e ,   0 ,   b y t e s R e a d ) ; 
                 }   f i n a l l y   { 
                         i f   ( f r o m   ! =   n u l l )   t r y   { 
                                 f r o m . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                         i f   ( t o   ! =   n u l l )   t r y   { 
                                 t o . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                 } 
         } 
",1,1,1,-1,read,-1.9315485e-07,2,4,"{'buffer': 'type', 'read': 'parse'}",MHM,304,0.16258153915405274
107,"CODE1:     public final void close() throws IOException {         if (dataStream == null) throw new NullPointerException(""Write stream is null."");         dataStream.flush();         dataStream.close();         dataStream = null;         File tmpFile = new File(packPath + "".tmp"");         FileOutputStream packStream = new FileOutputStream(packPath);         try {             String nbFiles = Long.toString(currentNbFiles) + ""\0"";             packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));             structBufferWriter.flush();             structBufferWriter.close();             int headerSize = structBuffer.size() + nbFiles.length();             packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));             packStream.write('\0');             packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));             structBuffer.writeTo(packStream);             structBufferWriter = null;             structBuffer = null;             FileInputStream in = new FileInputStream(tmpFile);             try {                 byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];                 int read;                 while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);                 packStream.flush();                 packStream.close();             } finally {                 Utilities.closeStream(in);             }         } finally {             Utilities.closeStream(packStream);         }         if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);         packPath = null;         structBuffer = null;     }  ||CODE2:     private String getFanFouMessage(int pageNo) throws IOException {         URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);         HttpURLConnection request = (HttpURLConnection) url.openConnection();         request.setDoOutput(true);         request.setRequestMethod(""GET"");         String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());         request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);         System.out.println(""Sending request..."");         request.connect();         System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());         BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));         String b = null;         StringBuffer sb = new StringBuffer();         while ((b = reader.readLine()) != null) {             sb.append(b);         }         return sb.toString();     } ",283,"        p u b l i c   f i n a l   v o i d   c l o s e ( )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( d a t a S t r e a m   = =   n u l l )   t h r o w   n e w   N u l l P o i n t e r E x c e p t i o n ( "" W r i t e   s t r e a m   i s   n u l l . "" ) ; 
                 d a t a S t r e a m . f l u s h ( ) ; 
                 d a t a S t r e a m . c l o s e ( ) ; 
                 d a t a S t r e a m   =   n u l l ; 
                 F i l e   t m p F i l e   =   n e w   F i l e ( p a c k P a t h   +   "" . t m p "" ) ; 
                 F i l e O u t p u t S t r e a m   p a c k S t r e a m   =   n e w   F i l e O u t p u t S t r e a m ( p a c k P a t h ) ; 
                 t r y   { 
                         S t r i n g   n b F i l e s   =   L o n g . t o S t r i n g ( c u r r e n t N b F i l e s )   +   "" \ 0 "" ; 
                         p a c k S t r e a m . w r i t e ( F L A T _ P A C K _ H E A D E R . g e t B y t e s ( C h a r s e t s . I S O _ 8 8 5 9 _ 1 ) ) ; 
                         s t r u c t B u f f e r W r i t e r . f l u s h ( ) ; 
                         s t r u c t B u f f e r W r i t e r . c l o s e ( ) ; 
                         i n t   h e a d e r S i z e   =   s t r u c t B u f f e r . s i z e ( )   +   n b F i l e s . l e n g t h ( ) ; 
                         p a c k S t r e a m . w r i t e ( I n t e g e r . t o S t r i n g ( h e a d e r S i z e ) . g e t B y t e s ( C h a r s e t s . I S O _ 8 8 5 9 _ 1 ) ) ; 
                         p a c k S t r e a m . w r i t e ( ' \ 0 ' ) ; 
                         p a c k S t r e a m . w r i t e ( n b F i l e s . g e t B y t e s ( C h a r s e t s . I S O _ 8 8 5 9 _ 1 ) ) ; 
                         s t r u c t B u f f e r . w r i t e T o ( p a c k S t r e a m ) ; 
                         s t r u c t B u f f e r W r i t e r   =   n u l l ; 
                         s t r u c t B u f f e r   =   n u l l ; 
                         F i l e I n p u t S t r e a m   b u f f e r   =   n e w   F i l e I n p u t S t r e a m ( t m p F i l e ) ; 
                         t r y   { 
                                 b y t e [ ]   b u f f e r   =   n e w   b y t e [ F I L E _ C O P Y _ B U F F E R _ L E N ] ; 
                                 i n t   r e a d ; 
                                 w h i l e   ( ( r e a d   =   b u f f e r . r e a d ( b u f f e r ) )   >   0 )   p a c k S t r e a m . w r i t e ( b u f f e r ,   0 ,   r e a d ) ; 
                                 p a c k S t r e a m . f l u s h ( ) ; 
                                 p a c k S t r e a m . c l o s e ( ) ; 
                         }   f i n a l l y   { 
                                 U t i l i t i e s . c l o s e S t r e a m ( b u f f e r ) ; 
                         } 
                 }   f i n a l l y   { 
                         U t i l i t i e s . c l o s e S t r e a m ( p a c k S t r e a m ) ; 
                 } 
                 i f   ( t m p F i l e . i s F i l e ( ) )   U t i l i t i e s . d e l e t e F i l e ( t m p F i l e ) ; 
                 p a c k P a t h   =   n u l l ; 
                 s t r u c t B u f f e r   =   n u l l ; 
         } 
",0,0,0,-1,in,-1.1920929e-07,1,3,{'in': 'buffer'},MHM,310,0.1537869175275167
108,"CODE1:     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {         String url = request.getParameter(""proxyurl"");         URLConnection conn = new URL(url).openConnection();         Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());         response.setContentType(conn.getContentType());         response.setContentLength(conn.getContentLength());         Writer out = response.getWriter();         char[] buf = new char[256];         int len;         while ((len = in.read(buf)) != -1) {             out.write(buf, 0, len);         }         in.close();         out.close();         String log = request.getParameter(""logging"");         if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);     }  ||CODE2:     public static String sha1(String src) {         MessageDigest md1 = null;         try {             md1 = MessageDigest.getInstance(""SHA-1"");         } catch (NoSuchAlgorithmException e) {             e.printStackTrace();         }         try {             md1.update(src.getBytes(""UTF-8""));         } catch (UnsupportedEncodingException e) {             e.printStackTrace();         }         return hex(md1.digest());     } ",182,"        p u b l i c   v o i d   d o G e t ( H t t p S e r v l e t R e q u e s t   r e q u e s t ,   H t t p S e r v l e t R e s p o n s e   r e s p o n s e )   t h r o w s   S e r v l e t E x c e p t i o n ,   I O E x c e p t i o n   { 
                 S t r i n g   s s l   =   r e q u e s t . g e t P a r a m e t e r ( "" p r o x y u r l "" ) ; 
                 U R L C o n n e c t i o n   c o n n   =   n e w   U R L ( s s l ) . o p e n C o n n e c t i o n ( ) ; 
                 R e a d e r   i n n e r   =   n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ,   r e s p o n s e . g e t C h a r a c t e r E n c o d i n g ( ) ) ; 
                 r e s p o n s e . s e t C o n t e n t T y p e ( c o n n . g e t C o n t e n t T y p e ( ) ) ; 
                 r e s p o n s e . s e t C o n t e n t L e n g t h ( c o n n . g e t C o n t e n t L e n g t h ( ) ) ; 
                 W r i t e r   o u t   =   r e s p o n s e . g e t W r i t e r ( ) ; 
                 c h a r [ ]   b u f   =   n e w   c h a r [ 2 5 6 ] ; 
                 i n t   l e n ; 
                 w h i l e   ( ( l e n   =   i n n e r . r e a d ( b u f ) )   ! =   - 1 )   { 
                         o u t . w r i t e ( b u f ,   0 ,   l e n ) ; 
                 } 
                 i n n e r . c l o s e ( ) ; 
                 o u t . c l o s e ( ) ; 
                 S t r i n g   l o g   =   r e q u e s t . g e t P a r a m e t e r ( "" l o g g i n g "" ) ; 
                 i f   ( l o g   ! =   n u l l   & &   l o g . t o L o w e r C a s e ( ) . e q u a l s ( "" t r u e "" ) )   l o g R e q u e s t ( r e q u e s t ) ; 
         } 
",0,0,0,-1,in,-7.1525574e-06,2,5,"{'url': 'Url', 'in': 'inner'}",MHM,298,0.1362797458966573
110,"CODE1:     private static String readGeoJSON(String feature) {         StringBuffer content = new StringBuffer();         try {             URL url = new URL(feature);             HttpURLConnection conn = (HttpURLConnection) url.openConnection();             conn.connect();             BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             String line;             while ((line = rd.readLine()) != null) {                 content.append(line);             }             conn.disconnect();         } catch (Exception e) {         }         return content.toString();     }  ||CODE2:     private static boolean CopyFile(File srcFile, File tagFile) throws IOException {         if (srcFile == null || tagFile == null) {             return false;         }         int length = 2097152;         File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));         if (!dirFile.exists()) {             dirFile.mkdirs();         }         FileInputStream in = new FileInputStream(srcFile);         FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());         FileChannel inC = in.getChannel();         FileChannel outC = out.getChannel();         int i = 0;         while (true) {             if (inC.position() == inC.size()) {                 inC.close();                 outC.close();                 break;             }             if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;             inC.transferTo(inC.position(), length, outC);             inC.position(inC.position() + length);             i++;         }         return true;     } ",111,"        p r i v a t e   s t a t i c   S t r i n g   r e a d G e o J S O N ( S t r i n g   f e a t u r e )   { 
                 S t r i n g B u f f e r   c o n t e n t   =   n e w   S t r i n g B u f f e r ( ) ; 
                 t r y   { 
                         U R L   r l   =   n e w   U R L ( f e a t u r e ) ; 
                         H t t p U R L C o n n e c t i o n   c o n n   =   ( H t t p U R L C o n n e c t i o n )   r l . o p e n C o n n e c t i o n ( ) ; 
                         c o n n . c o n n e c t ( ) ; 
                         B u f f e r e d R e a d e r   r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 c o n t e n t . a p p e n d ( l i n e ) ; 
                         } 
                         c o n n . d i s c o n n e c t ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                 } 
                 r e t u r n   c o n t e n t . t o S t r i n g ( ) ; 
         } 
",0,0,0,-1,url,-8.225441e-06,1,2,{'url': 'rl'},MHM,295,0.13622922897338868
117,"CODE1:     private String hashPassword(String plainTextPassword) {         MessageDigest digest = null;         try {             digest = MessageDigest.getInstance(""SHA-1"");             digest.reset();             digest.update(plainTextPassword.getBytes());             BASE64Encoder enc = new BASE64Encoder();             return enc.encode(digest.digest());         } catch (NoSuchAlgorithmException e) {             log.error(e);             throw new RuntimeException(e);         }     }  ||CODE2:     public void setTableEmbossage(String te, boolean sys) {         fiConf.setProperty(OptNames.pr_emboss_table, te);         fiConf.setProperty(OptNames.fi_is_sys_emboss_table, Boolean.toString(sys));         FileChannel in = null;         FileChannel out = null;         try {             String fichTable;             if (!(te.endsWith("".ent""))) {                 te = te + "".ent"";             }             if (sys) {                 fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + te;             } else {                 fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + te;             }             in = new FileInputStream(fichTable).getChannel();             out = new FileOutputStream(ConfigNat.getUserEmbossTableFolder() + ""/Embtab.ent"").getChannel();             in.transferTo(0, in.size(), out);             in.close();             out.close();         } catch (IOException e) {             e.printStackTrace();         }     } ",86,"        p r i v a t e   S t r i n g   h a s h P a s s w o r d ( S t r i n g   p l a i n T e x t P a s s w o r d )   { 
                 M e s s a g e D i g e s t     d i g E S T   =   n u l l ; 
                 t r y   { 
                           d i g E S T   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" S H A - 1 "" ) ; 
                           d i g E S T . r e s e t ( ) ; 
                           d i g E S T . c h e c k ( p l a i n T e x t P a s s w o r d . g e t B y t e s ( ) ) ; 
                         B A S E 6 4 E n c o d e r   e n c   =   n e w   B A S E 6 4 E n c o d e r ( ) ; 
                         r e t u r n   e n c . e n c o d e (   d i g E S T .   d i g E S T ( ) ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e )   { 
                         l o g . e r r o r ( e ) ; 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( e ) ; 
                 } 
         } 
",0,0,0,-1,update,-5.4836273e-06,2,7,"{'update': 'check', 'digest': 'diged'}",MHM,313,0.13305095036824544
125,"CODE1:     private void getRandomGUID(boolean secure) {         MessageDigest md5 = null;         StringBuffer sbValueBeforeMD5 = new StringBuffer();         try {             md5 = MessageDigest.getInstance(""MD5"");         } catch (NoSuchAlgorithmException e) {             System.out.println(""Error: "" + e);         }         try {             long time = System.currentTimeMillis();             long rand = 0;             if (secure) {                 rand = mySecureRand.nextLong();             } else {                 rand = myRand.nextLong();             }             sbValueBeforeMD5.append(s_id);             sbValueBeforeMD5.append("":"");             sbValueBeforeMD5.append(Long.toString(time));             sbValueBeforeMD5.append("":"");             sbValueBeforeMD5.append(Long.toString(rand));             valueBeforeMD5 = sbValueBeforeMD5.toString();             md5.update(valueBeforeMD5.getBytes());             byte[] array = md5.digest();             StringBuffer sb = new StringBuffer();             for (int j = 0; j < array.length; ++j) {                 int b = array[j] & 0xFF;                 if (b < 0x10) sb.append('0');                 sb.append(Integer.toHexString(b));             }             valueAfterMD5 = sb.toString();         } catch (Exception e) {             System.out.println(""Error:"" + e);         }     }  ||CODE2:     public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {         try {             MessageDigest digest = MessageDigest.getInstance(algorithm);             if (useDefaultEncoding) {                 digest.update(password.getBytes());             } else {                 for (char c : password.toCharArray()) {                     digest.update((byte) (c >> 8));                     digest.update((byte) c);                 }             }             byte[] digestedPassword = digest.digest();             BASE64Encoder encoder = new BASE64Encoder();             String encodedDigested = encoder.encode(digestedPassword);             return prefixKey + encodedDigested;         } catch (NoSuchAlgorithmException ne) {             return password;         }     } ",266,"        p r i v a t e   v o i d   g e t R a n d o m G U I D ( b o o l e a n   s e c u r e )   { 
                 M e s s a g e D i g e s t   m d 5   =   n u l l ; 
                 S t r i n g B u f f e r   s b V a l u e B e f o r e M D 5   =   n e w   S t r i n g B u f f e r ( ) ; 
                 t r y   { 
                         m d 5   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e )   { 
                         S y s t e m . g i n . p r i n t l n ( "" E r r o r :   ""   +   e ) ; 
                 } 
                 t r y   { 
                         l o n g   t i m e   =   S y s t e m . c u r r e n t T i m e M i l l i s ( ) ; 
                         l o n g   r a n d   =   0 ; 
                         i f   ( s e c u r e )   { 
                                 r a n d   =   m y S e c u r e R a n d . n e x t L o n g ( ) ; 
                         }   e l s e   { 
                                 r a n d   =   m y R a n d . n e x t L o n g ( ) ; 
                         } 
                         s b V a l u e B e f o r e M D 5 . a p p e n d ( s _ i d ) ; 
                         s b V a l u e B e f o r e M D 5 . a p p e n d ( "" : "" ) ; 
                         s b V a l u e B e f o r e M D 5 . a p p e n d ( L o n g . t o S t r i n g ( t i m e ) ) ; 
                         s b V a l u e B e f o r e M D 5 . a p p e n d ( "" : "" ) ; 
                         s b V a l u e B e f o r e M D 5 . a p p e n d ( L o n g . t o S t r i n g ( r a n d ) ) ; 
                         v a l u e B e f o r e M D 5   =   s b V a l u e B e f o r e M D 5 . t o S t r i n g ( ) ; 
                         m d 5 . u p d a t e ( v a l u e B e f o r e M D 5 . g e t B y t e s ( ) ) ; 
                         b y t e [ ]   a r r a y   =   m d 5 . d i g e s t ( ) ; 
                         S t r i n g B u f f e r   s b   =   n e w   S t r i n g B u f f e r ( ) ; 
                         f o r   ( i n t   j   =   0 ;   j   <   a r r a y . l e n g t h ;   + + j )   { 
                                 i n t   b   =   a r r a y [ j ]   &   0 x F F ; 
                                 i f   ( b   <   0 x 1 0 )   s b . a p p e n d ( ' 0 ' ) ; 
                                 s b . a p p e n d ( I n t e g e r . t o H e x S t r i n g ( b ) ) ; 
                         } 
                         v a l u e A f t e r M D 5   =   s b . t o S t r i n g ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         S y s t e m . g i n . p r i n t l n ( "" E r r o r : ""   +   e ) ; 
                 } 
         } 
",1,1,1,-1,out,1.1350494e-09,1,2,{'out': 'gin'},MHM,312,0.14983136653900148
127,"CODE1:     public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {         String path = req.getParameter(""path"");         path = URLDecoder.decode(path, ""UTF-8"");         String name = req.getParameter(""name"");         name = new String(name.getBytes(), ""UTF-8"");         String contentType = req.getParameter(""contentType"");         if (path == null) {             NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");             LOG.error(e);             throw e;         }         URL url = new URL(path);         InputStream inStream = null;         try {             inStream = URLUtils.getFileContent(url, req.getSession().getId());             res.setContentType(contentType);             res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");             ServletOutputStream out = res.getOutputStream();             IOUtils.copy(inStream, out);             res.flushBuffer();         } finally {             if (inStream != null) {                 inStream.close();             }         }     }  ||CODE2:     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {         ActionMessages errors = new ActionMessages();         try {             boolean isMultipart = FileUpload.isMultipartContent(request);             if (isMultipart) {                 Map fields = new HashMap();                 Vector attachments = new Vector();                 List items = diskFileUpload.parseRequest(request);                 Iterator iter = items.iterator();                 while (iter.hasNext()) {                     FileItem item = (FileItem) iter.next();                     if (item.isFormField()) {                         fields.put(item.getFieldName(), item.getString());                     } else {                         if (!StringUtils.isBlank(item.getName())) {                             ByteArrayOutputStream baos = null;                             try {                                 baos = new ByteArrayOutputStream();                                 IOUtils.copy(item.getInputStream(), baos);                                 MailPartObj part = new MailPartObj();                                 part.setAttachent(baos.toByteArray());                                 part.setContentType(item.getContentType());                                 part.setName(item.getName());                                 part.setSize(item.getSize());                                 attachments.addElement(part);                             } catch (Exception ex) {                             } finally {                                 IOUtils.closeQuietly(baos);                             }                         }                     }                 }                 String body = """";                 if (fields.get(""taBody"") != null) {                     body = (String) fields.get(""taBody"");                 } else if (fields.get(""taReplyBody"") != null) {                     body = (String) fields.get(""taReplyBody"");                 }                 Preferences preferencesInstance = getPreferencesInstance(request);                 Send sendInstance = getSendInstance(request);                 String mid = (String) fields.get(""mid"");                 sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));             } else {                 errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));                 request.setAttribute(""exception"", ""The form is null"");                 request.setAttribute(""newLocation"", null);                 doTrace(request, DLog.ERROR, getClass(), ""The form is null"");             }         } catch (Exception ex) {             String errorMessage = ExceptionUtilities.parseMessage(ex);             if (errorMessage == null) {                 errorMessage = ""NullPointerException"";             }             errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));             request.setAttribute(""exception"", errorMessage);             doTrace(request, DLog.ERROR, getClass(), errorMessage);         } finally {         }         if (errors.isEmpty()) {             doTrace(request, DLog.INFO, getClass(), ""OK"");             return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);         } else {             saveErrors(request, errors);             return mapping.findForward(Constants.ACTION_FAIL_FORWARD);         }     } ",215,"        p u b l i c   v o i d   e x e c u t e ( H t t p S e r v l e t R e q u e s t   r e q ,   H t t p S e r v l e t R e s p o n s e   r e s ,   H t t p S e r v l e t   p a r e n t )   t h r o w s   E x c e p t i o n   { 
                 S t r i n g   p a t h   =   r e q . g e t P a r a m e t e r ( "" p a t h "" ) ; 
                 p a t h   =   U R L D e c o d e r . d e c o d e ( p a t h ,   "" U T F - 8 "" ) ; 
                 S t r i n g   n a m e   =   r e q . g e t P a r a m e t e r ( "" n a m e "" ) ; 
                 n a m e   =   n e w   S t r i n g ( n a m e . g e t B y t e s ( ) ,   "" U T F - 8 "" ) ; 
                 S t r i n g   c o n t e n t T y p e   =   r e q . g e t P a r a m e t e r ( "" c o n t e n t T y p e "" ) ; 
                 i f   ( p a t h   = =   n u l l )   { 
                         N u l l P o i n t e r E x c e p t i o n   e   =   n e w   N u l l P o i n t e r E x c e p t i o n ( "" T h e   p a t h   a t t r i b u t e   c a n n o t   b e   r e t r i e v e d . "" ) ; 
                         L O G . e r r o r ( e ) ; 
                         t h r o w   e ; 
                 } 
                 s e r v e r   s e r v e r   =   n e w   s e r v e r ( p a t h ) ; 
                 I n p u t S t r e a m   i n S t r e a m   =   n u l l ; 
                 t r y   { 
                         i n S t r e a m   =   U R L U t i l s . g e t F i l e C o n t e n t ( s e r v e r ,   r e q . g e t S e s s i o n ( ) . g e t I d ( ) ) ; 
                         r e s . s e t C o n t e n t T y p e ( c o n t e n t T y p e ) ; 
                         r e s . a d d H e a d e r ( "" C o n t e n t - D i s p o s i t i o n "" ,   "" a t t a c h m e n t ; f i l e n a m e = \ "" ""   +   n a m e   +   "" \ "" "" ) ; 
                         S e r v l e t O u t p u t S t r e a m   i n c   =   r e s . g e t O u t p u t S t r e a m ( ) ; 
                         I O U t i l s . c o p y ( i n S t r e a m ,   i n c ) ; 
                         r e s . f l u s h B u f f e r ( ) ; 
                 }   f i n a l l y   { 
                         i f   ( i n S t r e a m   ! =   n u l l )   { 
                                 i n S t r e a m . c l o s e ( ) ; 
                         } 
                 } 
         } 
",1,1,1,-1,url,-9.712676e-08,2,4,"{'out': 'inc', 'url': 'server'}",MHM,287,0.14779297908147176
128,"CODE1:     private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {         File milestoneDefFile = new File(milestoneDefFileName);         if (!milestoneDefFile.exists()) {             throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");         }         if (!milestoneDefFile.isFile()) {             throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");         }         if (!milestoneDefFile.canRead()) {             throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");         }         File sqlDirectory = new File(sqlDirectoryName);         if (!sqlDirectory.exists()) {             throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");         }         if (!sqlDirectory.isDirectory()) {             throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");         }         if (!sqlDirectory.canRead()) {             throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");         }         File destFile = new File(destFileName);         if (destFile.exists()) {             throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");         }         destFile.createNewFile();         SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();         FileInputStream milestoneDefFIS = null;         try {             milestoneDefFIS = new FileInputStream(milestoneDefFile);             parser.parse(milestoneDefFIS);         } catch (XMLParseException e) {             printXmlError(e, milestoneDefFileName);         } finally {             try {                 if (milestoneDefFIS != null) milestoneDefFIS.close();             } catch (Exception e) {                 _logger.warn(""Exception caught when closing inputstream "", e);             }         }         int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);         int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);         if (fromMilestoneIdx < 0) {             throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");         }         if (toMilestoneIdx < 0) {             throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");         }         if (fromMilestoneIdx == toMilestoneIdx) {             throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");         }         List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);         List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);         FileOutputStream fos = null;         try {             fos = new FileOutputStream(destFile);             for (Iterator<String> it = files.iterator(); it.hasNext(); ) {                 appendFileToOutputStream(fos, sqlDirectory, it.next());             }             for (Iterator<String> it = views.iterator(); it.hasNext(); ) {                 appendFileToOutputStream(fos, sqlDirectory, it.next());             }         } catch (Exception e) {             fos.close();             destFile.delete();             throw e;         } finally {             try {                 if (fos != null) fos.close();             } catch (Exception e) {                 _logger.warn(""Exception caught when closing outputstream "", e);             }         }         System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");     }  ||CODE2:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     } ",616,"        p r i v a t e   s t a t i c   v o i d   g e n e r a t e S Q L U p g r a d e F i l e ( S t r i n g   m i l e s t o n e D e f F i l e N a m e ,   S t r i n g   s q l D i r e c t o r y N a m e ,   S t r i n g   f r o m M i l e s t o n e ,   S t r i n g   d e s t M i l e s t o n e ,   S t r i n g   d e s t F i l e N a m e )   t h r o w s   E x c e p t i o n   { 
                 F i l e   m i l e s t o n e D e f F i l e   =   n e w   F i l e ( m i l e s t o n e D e f F i l e N a m e ) ; 
                 i f   ( ! m i l e s t o n e D e f F i l e . e x i s t s ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   m i l e s t o n e D e f F i l e N a m e   +   "" ]   :   d o e s   n o t   e x i s t s "" ) ; 
                 } 
                 i f   ( ! m i l e s t o n e D e f F i l e . i s F i l e ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   m i l e s t o n e D e f F i l e N a m e   +   "" ]   :   n o t   a   f i l e "" ) ; 
                 } 
                 i f   ( ! m i l e s t o n e D e f F i l e . c a n R e a d ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   m i l e s t o n e D e f F i l e N a m e   +   "" ]   :   n o t   r e a d a b l e "" ) ; 
                 } 
                 F i l e   s q l D i r e c t o r y   =   n e w   F i l e ( s q l D i r e c t o r y N a m e ) ; 
                 i f   ( ! s q l D i r e c t o r y . e x i s t s ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   s q l D i r e c t o r y N a m e   +   "" ]   :   d o e s   n o t   e x i s t s "" ) ; 
                 } 
                 i f   ( ! s q l D i r e c t o r y . i s D i r e c t o r y ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   s q l D i r e c t o r y N a m e   +   "" ]   :   n o t   a   d i r e c t o r y "" ) ; 
                 } 
                 i f   ( ! s q l D i r e c t o r y . c a n R e a d ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   r e a d   [ ""   +   s q l D i r e c t o r y N a m e   +   "" ]   :   n o t   r e a d a b l e "" ) ; 
                 } 
                 F i l e   d e s t F i l e   =   n e w   F i l e ( d e s t F i l e N a m e ) ; 
                 i f   ( d e s t F i l e . e x i s t s ( ) )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   w r i t e   t o   [ ""   +   d e s t F i l e N a m e   +   "" ]   :   a l r e a d y   e x i s t s "" ) ; 
                 } 
                 d e s t F i l e . c r e a t e N e w F i l e ( ) ; 
                 S q l U p g r a d e X m l P a r s e r   p a r s e r   =   S q l U p g r a d e X m l P a r s e r . n e w P a r s e r ( ) ; 
                 F i l e I n p u t S t r e a m   m i l e s t o n e D e f F I S   =   n u l l ; 
                 t r y   { 
                         m i l e s t o n e D e f F I S   =   n e w   F i l e I n p u t S t r e a m ( m i l e s t o n e D e f F i l e ) ; 
                         p a r s e r . p a r s e ( m i l e s t o n e D e f F I S ) ; 
                 }   c a t c h   ( X M L P a r s e E x c e p t i o n   e )   { 
                         p r i n t X m l E r r o r ( e ,   m i l e s t o n e D e f F i l e N a m e ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( m i l e s t o n e D e f F I S   ! =   n u l l )   m i l e s t o n e D e f F I S . c l o s e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 _ l o g g e r . w a r n ( "" E x c e p t i o n   c a u g h t   w h e n   c l o s i n g   i n p u t s t r e a m   "" ,   e ) ; 
                         } 
                 } 
                 i n t   f r o m M i l e s t o n e I d x   =   p a r s e r . g e t M i l e s t o n e I n d e x ( f r o m M i l e s t o n e ) ; 
                 i n t   t o M i l e s t o n e I d x   =   p a r s e r . g e t M i l e s t o n e I n d e x ( d e s t M i l e s t o n e ) ; 
                 i f   ( f r o m M i l e s t o n e I d x   <   0 )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   u p g r a d e   f r o m   m i l e s t o n e   [ ""   +   f r o m M i l e s t o n e   +   "" ]   :   d o e s   n o t   e x i s t   .   ( E x i s i t i n g   m i l e s t o n e s   ""   +   p a r s e r . l i s t M i l e s t o n e s ( )   +   "" ) "" ) ; 
                 } 
                 i f   ( t o M i l e s t o n e I d x   <   0 )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   u p g r a d e   t o   m i l e s t o n e   [ ""   +   d e s t M i l e s t o n e   +   "" ]   :   d o e s   n o t   e x i s t   .   ( E x i s i t i n g   m i l e s t o n e s   ""   +   p a r s e r . l i s t M i l e s t o n e s ( )   +   "" ) "" ) ; 
                 } 
                 i f   ( f r o m M i l e s t o n e I d x   = =   t o M i l e s t o n e I d x )   { 
                         t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( "" C a n n o t   u p g r a d e   t o   t h e   s a m e   m i l e s t o n e "" ) ; 
                 } 
                 L i s t < S t r i n g >   f i l e s   =   p a r s e r . g e t F i l e s F o r M i l e s t o n e s ( f r o m M i l e s t o n e I d x ,   t o M i l e s t o n e I d x ) ; 
                 L i s t < S t r i n g >   v i e w s   =   p a r s e r . g e t V i e w s F o r M i l e s t o n e s ( f r o m M i l e s t o n e I d x ,   t o M i l e s t o n e I d x ) ; 
                 F i l e O u t p u t S t r e a m   f o e s   =   n u l l ; 
                 t r y   { 
                         f o e s   =   n e w   F i l e O u t p u t S t r e a m ( d e s t F i l e ) ; 
                         f o r   ( I t e r a t o r < S t r i n g >   i t   =   f i l e s . i t e r a t o r ( ) ;   i t . h a s N e x t ( ) ;   )   { 
                                 a p p e n d F i l e T o O u t p u t S t r e a m ( f o e s ,   s q l D i r e c t o r y ,   i t . n e x t ( ) ) ; 
                         } 
                         f o r   ( I t e r a t o r < S t r i n g >   i t   =   v i e w s . i t e r a t o r ( ) ;   i t . h a s N e x t ( ) ;   )   { 
                                 a p p e n d F i l e T o O u t p u t S t r e a m ( f o e s ,   s q l D i r e c t o r y ,   i t . n e x t ( ) ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         f o e s . c l o s e ( ) ; 
                         d e s t F i l e . d e l e t e ( ) ; 
                         t h r o w   e ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( f o e s   ! =   n u l l )   f o e s . c l o s e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 _ l o g g e r . w a r n ( "" E x c e p t i o n   c a u g h t   w h e n   c l o s i n g   o u t p u t s t r e a m   "" ,   e ) ; 
                         } 
                 } 
                 S y s t e m . o u t . p r i n t l n ( "" A n   S Q L   u p d a t e   f i l e   h a s   b e e n   g e n e r a t e d   t o   ""   +   d e s t F i l e N a m e   +   "" . "" ) ; 
         } 
",1,1,1,-1,fos,0.0,1,7,{'fos': 'foes'},MHM,243,0.1678970416386922
134,"CODE1:     public String loadURL(URL url) {         String retVal = """";         try {             InputStream inputStream = url.openStream();             BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));             String line = bufferedReader.readLine();             retVal += line + ""\n"";             while (line != null) {                 System.out.println(line);                 line = bufferedReader.readLine();                 if (line != null) retVal += line + ""\n"";             }             bufferedReader.close();         } catch (MalformedURLException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (IOException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (Exception e) {             e.printStackTrace();             retVal = e.getMessage();         }         return retVal;     }  ||CODE2:     protected void fetchDicomSopInstance(File result) throws Exception {         try {             URL url = new URL(this.config.getUrl(""wadoserver.url"").toString() + ""?requestType=WADO&contentType=text/xml"" + ""&studyUID="" + publicationProperties.getProperty(""studyUID"") + ""&seriesUID="" + publicationProperties.getProperty(""seriesUID"") + ""&objectUID="" + publicationProperties.getProperty(""objectUID""));             HttpURLConnection connection = (HttpURLConnection) url.openConnection();             OutputStream ostream;             InputStream istream;             connection.setUseCaches(false);             connection.setRequestProperty(""accept"", ""text/xml"");             connection.connect();             if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {                 throw new Exception(""Error fetching DICOM SOP instance ("" + connection.getResponseCode() + "" "" + connection.getResponseMessage() + "")"");             }             ostream = new BufferedOutputStream(new FileOutputStream(result));             try {                 istream = connection.getInputStream();                 Utilities.copyStream(istream, ostream);             } finally {                 ostream.close();             }         } catch (Exception e) {             throw new Exception(""Error fetching DICOM SOP instance."", e);         }     } ",168,"        p u b l i c   S t r i n g   l o a d U R L ( j o b   j o b )   { 
                 S t r i n g   r e t V a l   =   "" "" ; 
                 t r y   { 
                         I n p u t S t r e a m   i n p u t S t r e a m   =   j o b . o p e n S t r e a m ( ) ; 
                         B u f f e r e d R e a d e r   b u f f e r e d R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n p u t S t r e a m ) ) ; 
                         S t r i n g   l i n e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                         r e t V a l   + =   l i n e   +   "" 
 "" ; 
                         w h i l e   ( l i n e   ! =   n u l l )   { 
                                 S y s t e m . o u t . p r i n t l n ( l i n e ) ; 
                                 l i n e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                                 i f   ( l i n e   ! =   n u l l )   r e t V a l   + =   l i n e   +   "" 
 "" ; 
                         } 
                         b u f f e r e d R e a d e r . c l o s e ( ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 } 
                 r e t u r n   r e t V a l ; 
         } 
",0,0,0,-1,url,-1.5616417e-05,1,2,{'url': 'job'},MHM,302,0.14927902221679687
135,"CODE1:     private String sendQuery(String query) {         File xmlServerResponse = null;         String serverResponse = """";         try {             long start = Calendar.getInstance().getTimeInMillis();             System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");             System.out.println(""    consulta de busqueda -> "" + query);             URL url = new URL(query);             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));             String line = """";             while ((line = in.readLine()) != null) {                 serverResponse += line;             }             long ahora = (Calendar.getInstance().getTimeInMillis() - start);             System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);             System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");         } catch (IOException e) {             e.printStackTrace();         }         return serverResponse;     }  ||CODE2:     public static boolean sendInformation(String reportType, HashMap<String, String> data) {         if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_UDC)) {             logger.debug(""Report usage information to devs..."");             String transferData = ""reportType="" + reportType;             transferData += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");             transferData += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);             for (String key : data.keySet()) {                 transferData += ""&Suppl-"" + key + ""="" + data.get(key);             }             try {                 URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/UsageReport"");                 URLConnection conn = url.openConnection();                 conn.setDoOutput(true);                 OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());                 writer.write(transferData);                 writer.flush();                 StringBuffer answer = new StringBuffer();                 BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));                 String line;                 while ((line = reader.readLine()) != null) {                     answer.append(line + ""\r\n"");                 }                 writer.close();                 reader.close();                 logger.debug(""UDC Server answer: "" + answer.toString());             } catch (Exception e) {                 CrashReporter.reportException(e);                 logger.debug(""Could not report usage data: "" + e.toString());                 return false;             }             return true;         } else {             logger.debug(""Reporting not wished!"");             return false;         }     } ",169,"        p r i v a t e   S t r i n g   s e n d Q u e r y ( S t r i n g   q u e r y )   { 
                 F i l e   x m l S e r v e r R e s p o n s e   =   n u l l ; 
                 S t r i n g   s e r v e r R e s p o n s e   =   "" "" ; 
                 t r y   { 
                         l o n g   s t a r t   =   C a l e n d a r . g e t I n s t a n c e ( ) . g e t T i m e I n M i l l i s ( ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" 
 
 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""         c o n s u l t a   d e   b u s q u e d a   - >   ""   +   q u e r y ) ; 
                         U R L   U R L   =   n e w   U R L ( q u e r y ) ; 
                         B u f f e r e d R e a d e r   i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( U R L . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g   e r r o r   =   "" "" ; 
                         w h i l e   ( ( e r r o r   =   i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 s e r v e r R e s p o n s e   + =   e r r o r ; 
                         } 
                         l o n g   a h o r a   =   ( C a l e n d a r . g e t I n s t a n c e ( ) . g e t T i m e I n M i l l i s ( )   -   s t a r t ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   T i e m p o   t r a n s c u r r i d o   e n   l a   c o n s u l t a   ( e n   m i l e s i m a s )   - >   ""   +   a h o r a ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + 
 
 "" ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   s e r v e r R e s p o n s e ; 
         } 
",1,1,1,-1,url,-0.00034845248,2,5,"{'line': 'error', 'url': 'URL'}",MHM,293,0.14361690282821654
138,"CODE1:     private void copy(File from, File to) throws FileNotFoundException, IOException {         FileReader in;         in = new FileReader(from);         FileWriter out = new FileWriter(to);         int c;         while ((c = in.read()) != -1) out.write(c);         in.close();         out.close();     }  ||CODE2:     protected void copyFile(File sourceFile, File targetFile) throws FileNotFoundException, IOException {         FileChannel inChannel = null;         FileChannel outChannel = null;         try {             inChannel = new FileInputStream(sourceFile).getChannel();             outChannel = new FileOutputStream(targetFile).getChannel();             inChannel.transferTo(0, inChannel.size(), outChannel);         } finally {             try {                 if (inChannel != null) {                     inChannel.close();                 }                 if (outChannel != null) {                     outChannel.close();                 }             } catch (IOException e) {                 e.printStackTrace();             }         }     } ",73,"        p r i v a t e   v o i d   c o p y ( F i l e   f r o m ,   F i l e   t o )   t h r o w s   F i l e N o t F o u n d E x c e p t i o n ,   I O E x c e p t i o n   { 
                 F i l e R e a d e r   u r l ; 
                 u r l   =   n e w   F i l e R e a d e r ( f r o m ) ; 
                 F i l e W r i t e r   c o p y   =   n e w   F i l e W r i t e r ( t o ) ; 
                 i n t   c ; 
                 w h i l e   ( ( c   =   u r l . r e a d ( ) )   ! =   - 1 )   c o p y . w r i t e ( c ) ; 
                 u r l . c l o s e ( ) ; 
                 c o p y . c l o s e ( ) ; 
         } 
",1,1,0,1,in,-0.99986064,2,7,"{'in': 'url', 'out': 'copy'}",MHM,98,0.04520336389541626
139,"CODE1:     public void CopyFile(File source, File destination) throws Exception {         FileInputStream fis = null;         FileOutputStream fos = null;         try {             fis = new FileInputStream(source);             fos = new FileOutputStream(destination);             byte[] buffer = new byte[4096];             int read;             while ((read = fis.read(buffer)) != -1) {                 fos.write(buffer, 0, read);             }         } catch (IOException e) {             e.printStackTrace();         } finally {             try {                 if (fis != null) {                     fis.close();                 }                 if (fos != null) {                     fos.close();                 }             } catch (IOException e) {                 e.printStackTrace();             }         }     }  ||CODE2:     private String storeProxy(String proxyPath, String userName) throws IOException {         File inputFile = new File(proxyPath);         String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;         File outputFile = new File(outfile);         FileReader in = new FileReader(inputFile);         FileWriter out = new FileWriter(outputFile);         int c;         while ((c = in.read()) != -1) out.write(c);         in.close();         out.close();         Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);         try {             p.waitFor();         } catch (InterruptedException e) {             e.printStackTrace();         }         return outfile;     } ",146,"        p u b l i c   v o i d   C o p y F i l e ( F i l e   p r o j e c t ,   F i l e   d e s t i n a t i o n )   t h r o w s   E x c e p t i o n   { 
                 F i l e I n p u t S t r e a m   f i s   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   f o s   =   n u l l ; 
                 t r y   { 
                         f i s   =   n e w   F i l e I n p u t S t r e a m ( p r o j e c t ) ; 
                         f o s   =   n e w   F i l e O u t p u t S t r e a m ( d e s t i n a t i o n ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i n t   r e a d ; 
                         w h i l e   ( ( r e a d   =   f i s . r e a d ( b u f f e r ) )   ! =   - 1 )   { 
                                 f o s . w r i t e ( b u f f e r ,   0 ,   r e a d ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( f i s   ! =   n u l l )   { 
                                         f i s . c l o s e ( ) ; 
                                 } 
                                 i f   ( f o s   ! =   n u l l )   { 
                                         f o s . c l o s e ( ) ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 } 
         } 
",1,1,1,-1,source,-7.485505e-08,1,2,{'source': 'project'},MHM,305,0.1398123304049174
142,"CODE1:     public static void copyFile(File source, File destination) throws IOException {         FileChannel in = null;         FileChannel out = null;         try {             in = new FileInputStream(source).getChannel();             out = new FileOutputStream(destination).getChannel();             long size = in.size();             MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);             out.write(buffer);         } finally {             if (in != null) {                 in.close();             }             if (out != null) {                 out.close();             }         }     }  ||CODE2:     private void load() throws SQLException {         Connection conn = null;         Statement stmt = null;         try {             conn = FidoDataSource.getConnection();             conn.setAutoCommit(false);             stmt = conn.createStatement();             clearTables(stmt);             stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");             stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");             stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");             stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");             stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");             conn.commit();         } catch (SQLException e) {             if (conn != null) conn.rollback();             throw e;         } finally {             if (stmt != null) stmt.close();             if (conn != null) conn.close();         }     } ",117,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e ( F i l e   s o u r c e ,   F i l e   d e s t i n a t i o n )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e C h a n n e l   r e s o u r c e   =   n u l l ; 
                 F i l e C h a n n e l   o u t   =   n u l l ; 
                 t r y   { 
                         r e s o u r c e   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e ) . g e t C h a n n e l ( ) ; 
                         o u t   =   n e w   F i l e O u t p u t S t r e a m ( d e s t i n a t i o n ) . g e t C h a n n e l ( ) ; 
                         l o n g   s i z e   =   r e s o u r c e . s i z e ( ) ; 
                         M a p p e d B y t e B u f f e r   b u f f e r   =   r e s o u r c e . m a p ( F i l e C h a n n e l . M a p M o d e . R E A D _ O N L Y ,   0 ,   s i z e ) ; 
                         o u t . w r i t e ( b u f f e r ) ; 
                 }   f i n a l l y   { 
                         i f   ( r e s o u r c e   ! =   n u l l )   { 
                                 r e s o u r c e . c l o s e ( ) ; 
                         } 
                         i f   ( o u t   ! =   n u l l )   { 
                                 o u t . c l o s e ( ) ; 
                         } 
                 } 
         } 
",0,0,0,-1,in,0.0,1,6,{'in': 'resource'},MHM,291,0.13391191164652508
144,"CODE1:     public DocumentDialog(Frame frame, String title, String document) {         setTitle(title);         textArea = new JTextArea();         textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);         textArea.setEditable(false);         getContentPane().add(textPane);         URL url = DocumentDialog.class.getClassLoader().getResource(document);         try {             StringBuilder sb = new StringBuilder();             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));             String buildNumber = MessageBundle.getBuildNumber();             String releaseNumber = MessageBundle.getReleaseNumber();             String tmp;             while ((tmp = in.readLine()) != null) {                 tmp = tmp.replace(""${build_number}"", buildNumber);                 tmp = tmp.replace(""${release_number}"", releaseNumber);                 sb.append(tmp + ""\n"");             }             textArea.setText(sb.toString());             textArea.setCaretPosition(0);         } catch (IOException e) {             e.printStackTrace();         }     }  ||CODE2:     protected void doBackupOrganize() throws Exception {         Connection con = null;         PreparedStatement ps = null;         ResultSet result = null;         String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;         String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";         DBOperation dbo = factory.createDBOperation(POOL_NAME);         try {             try {                 con = dbo.getConnection();                 con.setAutoCommit(false);                 ps = con.prepareStatement(strSelQuery);                 result = ps.executeQuery();                 ps = con.prepareStatement(strInsQuery);                 while (result.next()) {                     ps.setInt(1, this.versionNO);                     ps.setString(2, result.getString(""organize_id""));                     ps.setString(3, result.getString(""organize_type_id""));                     ps.setString(4, result.getString(""organize_name""));                     ps.setString(5, result.getString(""organize_manager""));                     ps.setString(6, result.getString(""organize_describe""));                     ps.setString(7, result.getString(""work_type""));                     ps.setInt(8, result.getInt(""show_order""));                     ps.setInt(9, result.getInt(""position_x""));                     ps.setInt(10, result.getInt(""position_y""));                     int resultCount = ps.executeUpdate();                     if (resultCount != 1) {                         con.rollback();                         throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);                     }                 }                 con.commit();             } catch (SQLException se) {                 con.rollback();                 throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);             } finally {                 con.setAutoCommit(true);                 close(dbo, ps, result);             }         } catch (SQLException se) {             throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");         }     } ",212,"        p u b l i c   D o c u m e n t D i a l o g ( F r a m e   f r a m e ,   S t r i n g   t i t l e ,   S t r i n g   d o c u m e n t )   { 
                 s e t T i t l e ( t i t l e ) ; 
                 t e x t A r e a   =   n e w   J T e x t A r e a ( ) ; 
                 t e x t P a n e   =   n e w   S t d S c r o l l P a n e ( t e x t A r e a ,   S t d S c r o l l P a n e . V E R T I C A L _ S C R O L L B A R _ A S _ N E E D E D ,   S t d S c r o l l P a n e . H O R I Z O N T A L _ S C R O L L B A R _ A S _ N E E D E D ) ; 
                 t e x t A r e a . s e t E d i t a b l e ( f a l s e ) ; 
                 g e t C o n t e n t P a n e ( ) . a d d ( t e x t P a n e ) ; 
                 U R L   u r l   =   D o c u m e n t D i a l o g . c l a s s . g e t C l a s s L o a d e r ( ) . g e t R e s o u r c e ( d o c u m e n t ) ; 
                 t r y   { 
                         S t r i n g B u i l d e r   s b   =   n e w   S t r i n g B u i l d e r ( ) ; 
                         B u f f e r e d R e a d e r   c o n n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ,   "" U T F - 8 "" ) ) ; 
                         S t r i n g   b u i l d N u m b e r   =   M e s s a g e B u n d l e . g e t B u i l d N u m b e r ( ) ; 
                         S t r i n g   r e l e a s e N u m b e r   =   M e s s a g e B u n d l e . g e t R e l e a s e N u m b e r ( ) ; 
                         S t r i n g   t m p ; 
                         w h i l e   ( ( t m p   =   c o n n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 t m p   =   t m p . r e p l a c e ( "" $ { b u i l d _ n u m b e r } "" ,   b u i l d N u m b e r ) ; 
                                 t m p   =   t m p . r e p l a c e ( "" $ { r e l e a s e _ n u m b e r } "" ,   r e l e a s e N u m b e r ) ; 
                                 s b . a p p e n d ( t m p   +   "" 
 "" ) ; 
                         } 
                         t e x t A r e a . s e t T e x t ( s b . t o S t r i n g ( ) ) ; 
                         t e x t A r e a . s e t C a r e t P o s i t i o n ( 0 ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",0,0,0,-1,,-0.00035244226,0,0,{},MHM,299,0.1536043842633565
146,"CODE1:     private void parse(URL url, String description, boolean qualifiersOnTarget) throws org.xml.sax.SAXException, java.io.IOException {         this.qualifiersOnTarget = qualifiersOnTarget;         model = new Model(description);         if (roughMode) model.setRoughMode(true);         DOMParser parser = new DOMParser();         parser.setFeature(""http://xml.org/sax/features/validation"", false);         parser.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);         parser.parse(new InputSource(url.openStream()));         Document doc = parser.getDocument();         Element documentEl = doc.getDocumentElement();         Element contentEl = demandChildElement(documentEl, ""XMI.content"");         adapter = Adapter.getAdapter(documentEl);         parsePackage(contentEl);         if (!packagePath.isEmpty()) throw new IllegalArgumentException();         packagePath = null;         for (Iterator i = generalizations.iterator(); i.hasNext(); ) parseGeneralization((Element) i.next());         generalizations = null;         for (Iterator i = associations.keySet().iterator(); i.hasNext(); ) {             Element assoel = (Element) i.next();             parseAssociation(assoel, (ModelClass) (associations.get(assoel)));         }         associations = null;         for (Iterator i = classElements.keySet().iterator(); i.hasNext(); ) elaborate((ModelClass) (i.next()));         classElements = null;         if (roughMode) model.determineAllSupertypes(); else model.flatten();         url = null;     }  ||CODE2:     public synchronized void connect() throws FTPConnectionException {         checkLocked();         try {             int reply;             this.disconnect();             if (isSecured()) {                 this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);             } else {                 this.client = new FTPClient();             }             if (this.controlEncoding != null) {                 this.client.setControlEncoding(this.controlEncoding);                 debug(""control encoding : "", controlEncoding);             }             Logger.defaultLogger().info(""Trying to connect to server : "" + this.remoteServer + "" ..."");             debug(""connect : connect"", remoteServer);             client.connect(remoteServer, this.remotePort);             Logger.defaultLogger().info(""Received FTP server response : "" + formatFTPReplyString(client.getReplyString()));             this.connectionId = Util.getRndLong();             reply = client.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 String msg = formatFTPReplyString(client.getReplyString());                 this.disconnect();                 throw new FTPConnectionException(""Unable to communicate with remote FTP server. Got message : "" + msg);             } else {                 Logger.defaultLogger().info(""Trying to log in with user : "" + this.login + "" ..."");                 debug(""connect : login"", login + ""/"" + password);                 if (!client.login(this.login, this.password)) {                     String msg = formatFTPReplyString(client.getReplyString());                     this.disconnect();                     throw new FTPConnectionException(""Unable to login on FTP server ("" + login + ""/"" + password + ""). Received response : "" + msg);                 } else {                     Logger.defaultLogger().info(""Logged in with user : "" + this.login + "". Received response : "" + formatFTPReplyString(client.getReplyString()));                     if (this.passivMode) {                         Logger.defaultLogger().info(""Switching to passive mode ..."");                         debug(""connect : pasv"");                         client.enterLocalPassiveMode();                         reply = client.getReplyCode();                         if (!FTPReply.isPositiveCompletion(reply)) {                             String msg = formatFTPReplyString(client.getReplyString());                             this.disconnect();                             throw new FTPConnectionException(""Unable to switch to passiv mode. Received response : "" + msg);                         } else {                             this.updateOpTime();                         }                     } else {                         this.updateOpTime();                     }                     debug(""connect : bin"");                     client.setFileType(FTP.BINARY_FILE_TYPE);                     Logger.defaultLogger().info(""Connected to server : "" + this.remoteServer);                 }             }         } catch (UnknownHostException e) {             resetClient(e);             throw new FTPConnectionException(""Unknown FTP server : "" + this.remoteServer);         } catch (SocketException e) {             resetClient(e);             throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());         } catch (IOException e) {             resetClient(e);             throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());         } finally {             clearCache();         }     } ",314,"        p r i v a t e   v o i d   p a r s e ( U R L   h t t p ,   S t r i n g   d e s c r i p t i o n ,   b o o l e a n   q u a l i f i e r s O n T a r g e t )   t h r o w s   o r g . x m l . s a x . S A X E x c e p t i o n ,   j a v a . i o . I O E x c e p t i o n   { 
                 t h i s . q u a l i f i e r s O n T a r g e t   =   q u a l i f i e r s O n T a r g e t ; 
                 m o d e l   =   n e w   M o d e l ( d e s c r i p t i o n ) ; 
                 i f   ( r o u g h M o d e )   m o d e l . s e t R o u g h M o d e ( t r u e ) ; 
                 D O M P a r s e r   p a r s e r   =   n e w   D O M P a r s e r ( ) ; 
                 p a r s e r . s e t F e a t u r e ( "" h t t p : / / x m l . o r g / s a x / f e a t u r e s / v a l i d a t i o n "" ,   f a l s e ) ; 
                 p a r s e r . s e t F e a t u r e ( "" h t t p : / / a p a c h e . o r g / x m l / f e a t u r e s / n o n v a l i d a t i n g / l o a d - e x t e r n a l - d t d "" ,   f a l s e ) ; 
                 p a r s e r . p a r s e ( n e w   I n p u t S o u r c e ( h t t p . o p e n S t r e a m ( ) ) ) ; 
                 D o c u m e n t   d o c   =   p a r s e r . g e t D o c u m e n t ( ) ; 
                 E l e m e n t   d o c u m e n t E l   =   d o c . g e t D o c u m e n t E l e m e n t ( ) ; 
                 E l e m e n t   c o n t e n t E l   =   d e m a n d C h i l d E l e m e n t ( d o c u m e n t E l ,   "" X M I . c o n t e n t "" ) ; 
                 a d a p t e r   =   A d a p t e r . g e t A d a p t e r ( d o c u m e n t E l ) ; 
                 p a r s e P a c k a g e ( c o n t e n t E l ) ; 
                 i f   ( ! p a c k a g e P a t h . i s E m p t y ( ) )   t h r o w   n e w   I l l e g a l A r g u m e n t E x c e p t i o n ( ) ; 
                 p a c k a g e P a t h   =   n u l l ; 
                 f o r   ( I t e r a t o r   i   =   g e n e r a l i z a t i o n s . i t e r a t o r ( ) ;   i . h a s N e x t ( ) ;   )   p a r s e G e n e r a l i z a t i o n ( ( E l e m e n t )   i . n e x t ( ) ) ; 
                 g e n e r a l i z a t i o n s   =   n u l l ; 
                 f o r   ( I t e r a t o r   i   =   a s s o c i a t i o n s . k e y S e t ( ) . i t e r a t o r ( ) ;   i . h a s N e x t ( ) ;   )   { 
                         E l e m e n t   a s s o e l   =   ( E l e m e n t )   i . n e x t ( ) ; 
                         p a r s e A s s o c i a t i o n ( a s s o e l ,   ( M o d e l C l a s s )   ( a s s o c i a t i o n s . g e t ( a s s o e l ) ) ) ; 
                 } 
                 a s s o c i a t i o n s   =   n u l l ; 
                 f o r   ( I t e r a t o r   i   =   c l a s s E l e m e n t s . k e y S e t ( ) . i t e r a t o r ( ) ;   i . h a s N e x t ( ) ;   )   e l a b o r a t e ( ( M o d e l C l a s s )   ( i . n e x t ( ) ) ) ; 
                 c l a s s E l e m e n t s   =   n u l l ; 
                 i f   ( r o u g h M o d e )   m o d e l . d e t e r m i n e A l l S u p e r t y p e s ( ) ;   e l s e   m o d e l . f l a t t e n ( ) ; 
                 h t t p   =   n u l l ; 
         } 
",0,0,0,-1,url,5.3167343e-05,1,3,{'url': 'http'},MHM,307,0.16549062728881836
148,"CODE1:     public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {         List<NameValuePair> qparams = new ArrayList<NameValuePair>();         qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));         qparams.add(new BasicNameValuePair(""key"", this.key));         String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");         URI uri = new URI(url);         HttpGet httpget = new HttpGet(uri);         HttpResponse response = httpClient.execute(httpget);         int status = response.getStatusLine().getStatusCode();         errorCheck(response, status);         InputStream content = response.getEntity().getContent();         GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);         return licenses;     }  ||CODE2:     @SuppressWarnings(""deprecation"")     public void testMemberIterator() throws IOException {         GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));         Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember0 = iter.next();         int count0 = IOUtils.copy(gzMember0, new NullOutputStream());         assertEquals(""wrong 1k member count"", 1024, count0);         assertEquals(""wrong member number"", 0, gzin.getMemberNumber());         assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());         assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember1 = iter.next();         int count1 = IOUtils.copy(gzMember1, new NullOutputStream());         assertEquals(""wrong 32k member count"", (32 * 1024), count1);         assertEquals(""wrong member number"", 1, gzin.getMemberNumber());         assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember2 = iter.next();         int count2 = IOUtils.copy(gzMember2, new NullOutputStream());         assertEquals(""wrong 1-byte member count"", 1, count2);         assertEquals(""wrong member number"", 2, gzin.getMemberNumber());         assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());         assertTrue(iter.hasNext());         GZIPMembersInputStream gzMember3 = iter.next();         int count3 = IOUtils.copy(gzMember3, new NullOutputStream());         assertEquals(""wrong 5-byte member count"", 5, count3);         assertEquals(""wrong member number"", 3, gzin.getMemberNumber());         assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());         assertFalse(iter.hasNext());     } ",159,"        p u b l i c   G G L i c e n s e s   g e t L i c e n s e s I n f o ( )   t h r o w s   I l l e g a l S t a t e E x c e p t i o n ,   G G E x c e p t i o n ,   E x c e p t i o n   { 
                 L i s t < N a m e V a l u e P a i r >   q p a r a m s   =   n e w   A r r a y L i s t < N a m e V a l u e P a i r > ( ) ; 
                 q p a r a m s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" m e t h o d "" ,   "" g g . p h o t o s . l i c e n s e s . g e t I n f o "" ) ) ; 
                 q p a r a m s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" k "" ,   t h i s . k ) ) ; 
                 S t r i n g   u r l   =   R E S T _ U R L   +   "" ? ""   +   U R L E n c o d e d U t i l s . f o r m a t ( q p a r a m s ,   "" U T F - 8 "" ) ; 
                 U R I   u r i   =   n e w   U R I ( u r l ) ; 
                 H t t p G e t   h t t p g e t   =   n e w   H t t p G e t ( u r i ) ; 
                 H t t p R e s p o n s e   r e s p o n s e   =   h t t p C l i e n t . e x e c u t e ( h t t p g e t ) ; 
                 i n t   s t a t u s   =   r e s p o n s e . g e t S t a t u s L i n e ( ) . g e t S t a t u s C o d e ( ) ; 
                 e r r o r C h e c k ( r e s p o n s e ,   s t a t u s ) ; 
                 I n p u t S t r e a m   c o n t e n t   =   r e s p o n s e . g e t E n t i t y ( ) . g e t C o n t e n t ( ) ; 
                 G G L i c e n s e s   l i c e n s e s   =   J A X B . u n m a r s h a l ( c o n t e n t ,   G G L i c e n s e s . c l a s s ) ; 
                 r e t u r n   l i c e n s e s ; 
         } 
",0,0,0,-1,key,-4.7683716e-07,1,2,{'key': 'k'},MHM,298,0.14245967467625936
154,"CODE1:     private final void findSubclasses(URL location, String packageName, Class superClass, Set setOfClasses) {         synchronized (results) {             String fqcn = searchClass.getName();             List knownLocations = new ArrayList();             knownLocations.add(location);             for (int loc = 0; loc < knownLocations.size(); loc++) {                 URL url = (URL) knownLocations.get(loc);                 File directory = new File(url.getFile());                 if (directory.exists()) {                     File[] files = directory.listFiles(CLASSES_ONLY);                     for (int i = 0; i < files.length; i++) {                         String filename = files[i].getName();                         String classname = filename.substring(0, filename.length() - 6);                         try {                             if (!fqcn.equals(packageName + ""."" + classname)) {                                 Class c = callClassForName(packageName + ""."" + classname);                                 manageClass(setOfClasses, superClass, c, url);                             }                         } catch (Throwable t) {                             errors.add(t);                         }                     }                 } else {                     try {                         JarURLConnection conn = (JarURLConnection) url.openConnection();                         JarFile jarFile = conn.getJarFile();                         Enumeration e = jarFile.entries();                         while (e.hasMoreElements()) {                             JarEntry entry = (JarEntry) e.nextElement();                             String entryname = entry.getName();                             if (!entry.isDirectory() && entryname.endsWith("".class"")) {                                 String classname = entryname.substring(0, entryname.length() - 6);                                 if (classname.startsWith(""/"")) classname = classname.substring(1);                                 classname = classname.replace('/', '.');                                 try {                                     if (!fqcn.equals(classname)) {                                         Class c = callClassForName(classname);                                         manageClass(setOfClasses, superClass, c, url);                                     }                                 } catch (Throwable t) {                                     errors.add(t);                                 }                             }                         }                     } catch (IOException ioex) {                         errors.add(ioex);                     }                 }             }         }     }  ||CODE2:     private static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {         if (dest.exists()) {             if (force) {                 dest.delete();             } else {                 throw new IOException(""Cannot overwrite existing file: "" + dest.getName());             }         }         byte[] buffer = new byte[bufSize];         int read = 0;         InputStream in = null;         OutputStream out = null;         try {             in = new FileInputStream(src);             out = new FileOutputStream(dest);             while (true) {                 read = in.read(buffer);                 if (read == -1) {                     break;                 }                 out.write(buffer, 0, read);             }         } finally {             if (in != null) {                 try {                     in.close();                 } finally {                     if (out != null) {                         out.close();                     }                 }             }         }     } ",423,"        p r i v a t e   f i n a l   v o i d   f i n d S u b c l a s s e s ( U r l   l o c a t i o n ,   S t r i n g   p a c k a g e N a m e ,   C l a s s   s u p e r C l a s s ,   S e t   s e t O f C l a s s e s )   { 
                 s y n c h r o n i z e d   ( r e s u l t s )   { 
                         S t r i n g   f q c n   =   s e a r c h C l a s s . g e t N a m e ( ) ; 
                         L i s t   k n o w n L o c a t i o n s   =   n e w   A r r a y L i s t ( ) ; 
                         k n o w n L o c a t i o n s . a d d ( l o c a t i o n ) ; 
                         f o r   ( i n t   l o c   =   0 ;   l o c   <   k n o w n L o c a t i o n s . s i z e ( ) ;   l o c + + )   { 
                                 U r l   U r l   =   ( U r l )   k n o w n L o c a t i o n s . g e t ( l o c ) ; 
                                 F i l e   d i r e c t o r y   =   n e w   F i l e ( U r l . g e t F i l e ( ) ) ; 
                                 i f   ( d i r e c t o r y . e x i s t s ( ) )   { 
                                         F i l e [ ]   f i l e s   =   d i r e c t o r y . l i s t F i l e s ( C L A S S E S _ O N L Y ) ; 
                                         f o r   ( i n t   i   =   0 ;   i   <   f i l e s . l e n g t h ;   i + + )   { 
                                                 S t r i n g   f i l e n a m e   =   f i l e s [ i ] . g e t N a m e ( ) ; 
                                                 S t r i n g   c l a s s n a m e   =   f i l e n a m e . s u b s t r i n g ( 0 ,   f i l e n a m e . l e n g t h ( )   -   6 ) ; 
                                                 t r y   { 
                                                         i f   ( ! f q c n . e q u a l s ( p a c k a g e N a m e   +   "" . ""   +   c l a s s n a m e ) )   { 
                                                                 C l a s s   c   =   c a l l C l a s s F o r N a m e ( p a c k a g e N a m e   +   "" . ""   +   c l a s s n a m e ) ; 
                                                                 m a n a g e C l a s s ( s e t O f C l a s s e s ,   s u p e r C l a s s ,   c ,   U r l ) ; 
                                                         } 
                                                 }   c a t c h   ( T h r o w a b l e   t )   { 
                                                         e r r o r s . a d d ( t ) ; 
                                                 } 
                                         } 
                                 }   e l s e   { 
                                         t r y   { 
                                                 J a r U R L C o n n e c t i o n   c o n n   =   ( J a r U R L C o n n e c t i o n )   U r l . o p e n C o n n e c t i o n ( ) ; 
                                                 J a r F i l e   j a r F i l e   =   c o n n . g e t J a r F i l e ( ) ; 
                                                 E n u m e r a t i o n   e   =   j a r F i l e . e n t r i e s ( ) ; 
                                                 w h i l e   ( e . h a s M o r e E l e m e n t s ( ) )   { 
                                                         J a r E n t r y   e n t r y   =   ( J a r E n t r y )   e . n e x t E l e m e n t ( ) ; 
                                                         S t r i n g   e n t r y n a m e   =   e n t r y . g e t N a m e ( ) ; 
                                                         i f   ( ! e n t r y . i s D i r e c t o r y ( )   & &   e n t r y n a m e . e n d s W i t h ( "" . c l a s s "" ) )   { 
                                                                 S t r i n g   c l a s s n a m e   =   e n t r y n a m e . s u b s t r i n g ( 0 ,   e n t r y n a m e . l e n g t h ( )   -   6 ) ; 
                                                                 i f   ( c l a s s n a m e . s t a r t s W i t h ( "" / "" ) )   c l a s s n a m e   =   c l a s s n a m e . s u b s t r i n g ( 1 ) ; 
                                                                 c l a s s n a m e   =   c l a s s n a m e . r e p l a c e ( ' / ' ,   ' . ' ) ; 
                                                                 t r y   { 
                                                                         i f   ( ! f q c n . e q u a l s ( c l a s s n a m e ) )   { 
                                                                                 C l a s s   c   =   c a l l C l a s s F o r N a m e ( c l a s s n a m e ) ; 
                                                                                 m a n a g e C l a s s ( s e t O f C l a s s e s ,   s u p e r C l a s s ,   c ,   U r l ) ; 
                                                                         } 
                                                                 }   c a t c h   ( T h r o w a b l e   t )   { 
                                                                         e r r o r s . a d d ( t ) ; 
                                                                 } 
                                                         } 
                                                 } 
                                         }   c a t c h   ( I O E x c e p t i o n   i o e x )   { 
                                                 e r r o r s . a d d ( i o e x ) ; 
                                         } 
                                 } 
                         } 
                 } 
         } 
",0,0,0,-1,url,2.026558e-06,1,5,{'url': 'Url'},MHM,305,0.15958942969640097
157,"CODE1:     public void run() {         try {             FTPClient c = new FTPClient();             c.configure(ftpConfig);             logger.debug(""Trying to connect"");             c.connect(""127.0.0.1"", 21211);             logger.debug(""Connected"");             c.setSoTimeout(5000);             if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {                 logger.debug(""Houston, we have a problem. D/C"");                 c.disconnect();                 throw new Exception();             }             if (c.login(""drftpd"", ""drftpd"")) {                 logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");                 _sc.addSuccess();                 Thread.sleep(5000);                 c.disconnect();             } else {                 logger.debug(""Login failed, D/C!"");                 throw new Exception();             }         } catch (Exception e) {             logger.debug(e, e);             _sc.addFailure();         }         logger.debug(""exiting"");     }  ||CODE2:     protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {         File inputFile = null;         File outputFile = null;         try {             inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());             OutputStream inputFileStream = null;             try {                 inputFileStream = new FileOutputStream(inputFile);                 IOUtils.copy(inputStream, inputFileStream);             } finally {                 IOUtils.closeQuietly(inputFileStream);             }             outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());             convert(inputFile, inputFormat, outputFile, outputFormat);             InputStream outputFileStream = null;             try {                 outputFileStream = new FileInputStream(outputFile);                 IOUtils.copy(outputFileStream, outputStream);             } finally {                 IOUtils.closeQuietly(outputFileStream);             }         } catch (IOException ioException) {             throw new OpenOfficeException(""conversion failed"", ioException);         } finally {             if (inputFile != null) {                 inputFile.delete();             }             if (outputFile != null) {                 outputFile.delete();             }         }     } ",192,"        p u b l i c   v o i d   r u n ( )   { 
                 t r y   { 
                         F T P C l i e n t   i c   =   n e w   F T P C l i e n t ( ) ; 
                         i c . c o n f i g u r e ( f t p C o n f i g ) ; 
                         l o g g e r . d e b u g ( "" T r y i n g   t o   c o n n e c t "" ) ; 
                         i c . c o n n e c t ( "" 1 2 7 . 0 . 0 . 1 "" ,   2 1 2 1 1 ) ; 
                         l o g g e r . d e b u g ( "" C o n n e c t e d "" ) ; 
                         i c . s e t S o T i m e o u t ( 5 0 0 0 ) ; 
                         i f   ( ! F T P R e p l y . i s P o s i t i v e C o m p l e t i o n ( i c . g e t R e p l y C o d e ( ) ) )   { 
                                 l o g g e r . d e b u g ( "" H o u s t o n ,   w e   h a v e   a   p r o b l e m .   D / C "" ) ; 
                                 i c . d i s c o n n e c t ( ) ; 
                                 t h r o w   n e w   E x c e p t i o n ( ) ; 
                         } 
                         i f   ( i c . l o g i n ( "" d r f t p d "" ,   "" d r f t p d "" ) )   { 
                                 l o g g e r . d e b u g ( "" L o g g e d - i n ,   n o w   w a i t i n g   5   s e c s   a n d   k i l l   t h e   t h r e a d . "" ) ; 
                                 _ s c . a d d S u c c e s s ( ) ; 
                                 T h r e a d . s l e e p ( 5 0 0 0 ) ; 
                                 i c . d i s c o n n e c t ( ) ; 
                         }   e l s e   { 
                                 l o g g e r . d e b u g ( "" L o g i n   f a i l e d ,   D / C ! "" ) ; 
                                 t h r o w   n e w   E x c e p t i o n ( ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   i c )   { 
                         l o g g e r . d e b u g ( i c ,   i c ) ; 
                         _ s c . a d d F a i l u r e ( ) ; 
                 } 
                 l o g g e r . d e b u g ( "" e x i t i n g "" ) ; 
         } 
",0,0,0,-1,c,-1.5497208e-06,1,8,{'c': 'ic'},MHM,302,0.14702532291412354
158,"CODE1:     public static void bubbleSort(int[] polje) {         boolean swapped;         int temp;         int n = polje.length;         do {             swapped = false;             n--;             for (int i = 0; i < n - 1; i++) {                 if (polje[i] > polje[i + 1]) {                     temp = polje[i];                     polje[i] = polje[i + 1];                     polje[i + 1] = temp;                     swapped = true;                 }             }         } while (swapped);     }  ||CODE2:     public void unsplit(String newFilename, File[] files) throws Exception {         FileOutputStream stream = new FileOutputStream(new File(newFilename));         for (int i = 0; i < files.length; i++) {             FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());             DataInputStream din = new DataInputStream(fin);             while (din.available() > 0) {                 stream.write(din.read());             }             din.close();             fin.close();         }         stream.close();     } ",106,"        p u b l i c   s t a t i c   v o i d   b u b b l e S o r t ( i n t [ ]   p o l j e )   { 
                 b o o l e a n   s w a p p e d ; 
                 i n t   t e m p ; 
                 i n t   n   =   p o l j e . l e n g t h ; 
                 d o   { 
                         s w a p p e d   =   f a l s e ; 
                         n - - ; 
                         f o r   ( i n t   p   =   0 ;   p   <   n   -   1 ;   p + + )   { 
                                 i f   ( p o l j e [ p ]   >   p o l j e [ p   +   1 ] )   { 
                                         t e m p   =   p o l j e [ p ] ; 
                                         p o l j e [ p ]   =   p o l j e [ p   +   1 ] ; 
                                         p o l j e [ p   +   1 ]   =   t e m p ; 
                                         s w a p p e d   =   t r u e ; 
                                 } 
                         } 
                 }   w h i l e   ( s w a p p e d ) ; 
         } 
",0,0,0,-1,,-0.00028383732,0,0,{},MHM,312,0.1396051049232483
164,"CODE1:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     }  ||CODE2:     public void write(String resource, String destinationPath) throws IOException, CoreException {         OutputStream output = null;         InputStream contentStream = null;         try {             contentStream = new BufferedInputStream(new FileInputStream(resource));             output = new BufferedOutputStream(new FileOutputStream(destinationPath));             int available = contentStream.available();             available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;             int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);             byte[] readBuffer = new byte[chunkSize];             int n = contentStream.read(readBuffer);             while (n > 0) {                 output.write(readBuffer, 0, n);                 n = contentStream.read(readBuffer);             }         } finally {             if (contentStream != null) {                 try {                     contentStream.close();                 } catch (IOException e) {                     IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);                 }             }             if (output != null) {                 output.close();             }         }     } ",764,"        p u b l i c   v o i d   c o n v e r t ( F i l e   s r c ,   F i l e   s a c )   t h r o w s   I O E x c e p t i o n   { 
                 I n p u t S t r e a m   n i n   =   n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( s r c ) ) ; 
                 D c m P a r s e r   p   =   p f a c t . n e w D c m P a r s e r ( n i n ) ; 
                 D a t a s e t   d s   =   f a c t . n e w D a t a s e t ( ) ; 
                 p . s e t D c m H a n d l e r ( d s . g e t D c m H a n d l e r ( ) ) ; 
                 t r y   { 
                         F i l e F o r m a t   f o r m a t   =   p . d e t e c t F i l e F o r m a t ( ) ; 
                         i f   ( f o r m a t   ! =   F i l e F o r m a t . A C R N E M A _ S T R E A M )   { 
                                 S y s t e m . n e t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   n o t   a n   A C R N E M A   s t r e a m ! "" ) ; 
                                 r e t u r n ; 
                         } 
                         p . p a r s e D c m F i l e ( f o r m a t ,   T a g s . P i x e l D a t a ) ; 
                         i f   ( d s . c o n t a i n s ( T a g s . S t u d y I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S e r i e s I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S O P I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S O P C l a s s U I D ) )   { 
                                 S y s t e m . n e t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   c o n t a i n s   U I D s ! ""   +   ""   = >   p r o b a b l e   a l r e a d y   D I C O M   -   d o   n o t   c o n v e r t "" ) ; 
                                 r e t u r n ; 
                         } 
                         b o o l e a n   h a s P i x e l D a t a   =   p . g e t R e a d T a g ( )   = =   T a g s . P i x e l D a t a ; 
                         b o o l e a n   i n f l a t e   =   h a s P i x e l D a t a   & &   d s . g e t I n t ( T a g s . B i t s A l l o c a t e d ,   0 )   = =   1 2 ; 
                         i n t   p x l e n   =   p . g e t R e a d L e n g t h ( ) ; 
                         i f   ( h a s P i x e l D a t a )   { 
                                 i f   ( i n f l a t e )   { 
                                         d s . p u t U S ( T a g s . B i t s A l l o c a t e d ,   1 6 ) ; 
                                         p x l e n   =   p x l e n   *   4   /   3 ; 
                                 } 
                                 i f   ( p x l e n   ! =   ( d s . g e t I n t ( T a g s . B i t s A l l o c a t e d ,   0 )   > > >   3 )   *   d s . g e t I n t ( T a g s . R o w s ,   0 )   *   d s . g e t I n t ( T a g s . C o l u m n s ,   0 )   *   d s . g e t I n t ( T a g s . N u m b e r O f F r a m e s ,   1 )   *   d s . g e t I n t ( T a g s . N u m b e r O f S a m p l e s ,   1 ) )   { 
                                         S y s t e m . n e t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   m i s m a t c h   p i x e l   d a t a   l e n g t h ! ""   +   ""   = >   d o   n o t   c o n v e r t "" ) ; 
                                         r e t u r n ; 
                                 } 
                         } 
                         d s . p u t U I ( T a g s . S t u d y I n s t a n c e U I D ,   u i d ( s t u d y U I D ) ) ; 
                         d s . p u t U I ( T a g s . S e r i e s I n s t a n c e U I D ,   u i d ( s e r i e s U I D ) ) ; 
                         d s . p u t U I ( T a g s . S O P I n s t a n c e U I D ,   u i d ( i n s t U I D ) ) ; 
                         d s . p u t U I ( T a g s . S O P C l a s s U I D ,   c l a s s U I D ) ; 
                         i f   ( ! d s . c o n t a i n s ( T a g s . N u m b e r O f S a m p l e s ) )   { 
                                 d s . p u t U S ( T a g s . N u m b e r O f S a m p l e s ,   1 ) ; 
                         } 
                         i f   ( ! d s . c o n t a i n s ( T a g s . P h o t o m e t r i c I n t e r p r e t a t i o n ) )   { 
                                 d s . p u t C S ( T a g s . P h o t o m e t r i c I n t e r p r e t a t i o n ,   "" M O N O C H R O M E 2 "" ) ; 
                         } 
                         i f   ( f m i )   { 
                                 d s . s e t F i l e M e t a I n f o ( f a c t . n e w F i l e M e t a I n f o ( d s ,   U I D s . I m p l i c i t V R L i t t l e E n d i a n ) ) ; 
                         } 
                         O u t p u t S t r e a m   n e t   =   n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( s a c ) ) ; 
                         t r y   { 
                         }   f i n a l l y   { 
                                 d s . w r i t e F i l e ( n e t ,   e n c o d e P a r a m ( ) ) ; 
                                 i f   ( h a s P i x e l D a t a )   { 
                                         i f   ( ! s k i p G r o u p L e n )   { 
                                                 n e t . w r i t e ( P X D A T A _ G R O U P L E N ) ; 
                                                 i n t   g r l e n   =   p x l e n   +   8 ; 
                                                 n e t . w r i t e ( ( b y t e )   g r l e n ) ; 
                                                 n e t . w r i t e ( ( b y t e )   ( g r l e n   > >   8 ) ) ; 
                                                 n e t . w r i t e ( ( b y t e )   ( g r l e n   > >   1 6 ) ) ; 
                                                 n e t . w r i t e ( ( b y t e )   ( g r l e n   > >   2 4 ) ) ; 
                                         } 
                                         n e t . w r i t e ( P X D A T A _ T A G ) ; 
                                         n e t . w r i t e ( ( b y t e )   p x l e n ) ; 
                                         n e t . w r i t e ( ( b y t e )   ( p x l e n   > >   8 ) ) ; 
                                         n e t . w r i t e ( ( b y t e )   ( p x l e n   > >   1 6 ) ) ; 
                                         n e t . w r i t e ( ( b y t e )   ( p x l e n   > >   2 4 ) ) ; 
                                 } 
                                 i f   ( i n f l a t e )   { 
                                         i n t   b 2 ,   b 3 ; 
                                         f o r   ( ;   p x l e n   >   0 ;   p x l e n   - =   3 )   { 
                                                 n e t . w r i t e ( n i n . r e a d ( ) ) ; 
                                                 b 2   =   n i n . r e a d ( ) ; 
                                                 b 3   =   n i n . r e a d ( ) ; 
                                                 n e t . w r i t e ( b 2   &   0 x 0 f ) ; 
                                                 n e t . w r i t e ( b 2   > >   4   |   ( ( b 3   &   0 x 0 f )   < <   4 ) ) ; 
                                                 n e t . w r i t e ( b 3   > >   4 ) ; 
                                         } 
                                 }   e l s e   { 
                                         f o r   ( ;   p x l e n   >   0 ;   - - p x l e n )   { 
                                                 n e t . w r i t e ( n i n . r e a d ( ) ) ; 
                                         } 
                                 } 
                                 n e t . c l o s e ( ) ; 
                         } 
                         S y s t e m . n e t . p r i n t ( ' . ' ) ; 
                 }   f i n a l l y   { 
                         n i n . c l o s e ( ) ; 
                 } 
         } 
",1,1,1,-1,in,-6.009941e-08,3,31,"{'out': 'net', 'in': 'nin', 'dest': 'sac'}",MHM,306,0.19213126103083292
169,"CODE1:     public void testJob() {         try {             URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");             url.openConnection();             url.getContent();             System.out.print(""00"");         } catch (Exception e) {             System.out.print(""Daily data update exception:"" + e);         }     }  ||CODE2:     @Override     public void runTask(HashMap jobStack) throws Exception {         String lstrFilter = (String) getResources().get(""filter"");         String lstrTarget = (String) getResources().get(""target"");         String lstrSource = (String) getResources().get(""source"");         String[] lstrFilesFound = null;         lstrFilesFound = searchForFiles(lstrSource, lstrFilter);         if (lstrFilesFound != null) {             for (int i = 0; i < lstrFilesFound.length; i++) {                 getLog().debug(""Found match ["" + lstrSource + File.separator + lstrFilesFound[i] + ""]"");                 File lfileSource = new File(lstrSource + File.separator + lstrFilesFound[i]);                 File lfileTarget = new File(lstrTarget + File.separator + lstrFilesFound[i]);                 FileChannel lfisInput = null;                 FileChannel lfosOutput = null;                 try {                     lfisInput = new FileInputStream(lfileSource).getChannel();                     lfosOutput = new FileOutputStream(lfileTarget).getChannel();                     int maxCount = (32 * 1024 * 1024) - (32 * 1024);                     long size = lfisInput.size();                     long position = 0;                     while (position < size) {                         position += lfisInput.transferTo(position, maxCount, lfosOutput);                     }                 } finally {                     if (lfisInput != null) {                         lfisInput.close();                     }                     if (lfosOutput != null) {                         lfosOutput.close();                     }                 }             }         }     } ",64,"        p u b l i c   v o i d   t e s t J o b ( )   { 
                 t r y   { 
                         U R L   u r l   =   n e w   U R L ( "" h t t p : / / r i c k y s q l . g o t o i p 3 . c o m / m a p p / a d m i n / a d m i n . d o "" ) ; 
                         u r l . o p e n C o n n e c t i o n ( ) ; 
                         u r l . g e t C o n t e n t ( ) ; 
                         S y s t e m . a g a i n . p r i n t ( "" 0 0 "" ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         S y s t e m . a g a i n . p r i n t ( "" D a i l y   d a t a   u p d a t e   e x c e p t i o n : ""   +   e ) ; 
                 } 
         } 
",0,0,0,-1,out,0.0,1,2,{'out': 'again'},MHM,302,0.13356598218282065
171,"CODE1:     public static void copyFiles(File source, File dest) throws IOException {         FileChannel in = null, out = null;         try {             in = new FileInputStream(source).getChannel();             out = new FileOutputStream(dest).getChannel();             long size = in.size();             MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);             out.write(buf);         } finally {             if (in != null) in.close();             if (out != null) out.close();         }     }  ||CODE2:     public static void copyFile(File from, File to) throws Exception {         if (!from.exists()) return;         FileInputStream in = new FileInputStream(from);         FileOutputStream out = new FileOutputStream(to);         byte[] buffer = new byte[BUFFER_SIZE];         int bytes_read;         while (true) {             bytes_read = in.read(buffer);             if (bytes_read == -1) break;             out.write(buffer, 0, bytes_read);         }         out.flush();         out.close();         in.close();     } ",112,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e s ( F i l e   s o u r c e ,   F i l e   d e s t )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e C h a n n e l   i c   =   n u l l ,   o u   =   n u l l ; 
                 t r y   { 
                         i c   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e ) . g e t C h a n n e l ( ) ; 
                         o u   =   n e w   F i l e O u t p u t S t r e a m ( d e s t ) . g e t C h a n n e l ( ) ; 
                         l o n g   s i z e   =   i c . s i z e ( ) ; 
                         M a p p e d B y t e B u f f e r   b u f   =   i c . m a p ( F i l e C h a n n e l . M a p M o d e . R E A D _ O N L Y ,   0 ,   s i z e ) ; 
                         o u . w r i t e ( b u f ) ; 
                 }   f i n a l l y   { 
                         i f   ( i c   ! =   n u l l )   i c . c l o s e ( ) ; 
                         i f   ( o u   ! =   n u l l )   o u . c l o s e ( ) ; 
                 } 
         } 
",1,1,1,-1,in,-3.1111995e-08,2,11,"{'out': 'ou', 'in': 'ic'}",MHM,292,0.13204992214838665
173,"CODE1:     public static void copyFiles(File src, File dest) throws IOException {         if (src.isDirectory()) {             dest.mkdirs();             for (String f : src.list()) {                 String df = dest.getPath() + File.separator + f;                 String sf = src.getPath() + File.separator + f;                 copyFiles(new File(sf), new File(df));             }         } else {             FileInputStream fin = new FileInputStream(src);             FileOutputStream fout = new FileOutputStream(dest);             int c;             while ((c = fin.read()) >= 0) fout.write(c);             fin.close();             fout.close();         }     }  ||CODE2:     public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {         File fromFile = fromFileName.toFile();         File toFile = toFileName.toFile();         if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);         if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);         if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);         if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());         if (toFile.exists()) {             if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);         } else {             String parent = toFile.getParent();             if (parent == null) parent = System.getProperty(""user.dir"");             File dir = new File(parent);             if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);             if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);             if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);         }         InputStream from = null;         OutputStream to = null;         try {             from = new BufferedInputStream(new FileInputStream(fromFile));             to = new BufferedOutputStream(new FileOutputStream(toFile));             byte[] buffer = new byte[4096];             int bytesRead;             while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     } ",146,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e s ( F i l e   s r c ,   F i l e   d e s t )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( s r c . i s D i r e c t o r y ( ) )   { 
                         d e s t . m k d i r s ( ) ; 
                         f o r   ( S t r i n g   v   :   s r c . l i s t ( ) )   { 
                                 S t r i n g   d f   =   d e s t . g e t P a t h ( )   +   F i l e . s e p a r a t o r   +   v ; 
                                 S t r i n g   v   =   s r c . g e t P a t h ( )   +   F i l e . s e p a r a t o r   +   v ; 
                                 c o p y F i l e s ( n e w   F i l e ( v ) ,   n e w   F i l e ( d f ) ) ; 
                         } 
                 }   e l s e   { 
                         F i l e I n p u t S t r e a m   f i n   =   n e w   F i l e I n p u t S t r e a m ( s r c ) ; 
                         F i l e O u t p u t S t r e a m   f o u t   =   n e w   F i l e O u t p u t S t r e a m ( d e s t ) ; 
                         i n t   c l ; 
                         w h i l e   ( ( c l   =   f i n . r e a d ( ) )   > =   0 )   f o u t . w r i t e ( c l ) ; 
                         f i n . c l o s e ( ) ; 
                         f o u t . c l o s e ( ) ; 
                 } 
         } 
",1,1,1,-1,c,-1.3060344e-08,2,6,"{'f': 'v', 'c': 'cl'}",MHM,301,0.15034950971603395
175,"CODE1:     public boolean retrieveByPMID(String pmid) {         try {             URL url = new URL(baseURL + ""&id="" + pmid.trim());             BufferedReader xml = new BufferedReader(new InputStreamReader(url.openStream()));             String line = null;             StringBuffer title_sb = new StringBuffer();             while ((line = xml.readLine()) != null) {                 if (line.indexOf(""<ArticleTitle>"") != -1) {                     title_sb.delete(0, title_sb.length());                     title_sb.append(line.substring(line.indexOf(""<ArticleTitle>"") + 14, line.length() - 15));                 } else if (line.indexOf(""<AbstractText>"") != -1) {                     PrintWriter article = new PrintWriter(new FileWriter(new File(outputDir.getPath() + File.separatorChar + pmid + "".txt"")));                     article.println(title_sb);                     article.println(line.substring(line.indexOf(""<AbstractText>"") + 14, line.length() - 15));                     article.close();                     break;                 }             }             xml.close();         } catch (Exception e) {             e.printStackTrace();         }         return false;     }  ||CODE2:     public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {         int length = list.size();         Index_value[] enemy_dist = new Index_value[length];         if (field.equals("""") || field.equals(""location"")) {             Location cur_loc = this.getLocation();             for (int i = 0; i < length; i++) {                 enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));             }         } else if (field.equals(""health"")) {             for (int i = 0; i < length; i++) {                 enemy_dist[i] = new Index_value(i, list.get(i).health);             }         } else {             say(""impossible to sort list - nothing modified"");             return list;         }         boolean permut;         do {             permut = false;             for (int i = 0; i < length - 1; i++) {                 if (enemy_dist[i].value > enemy_dist[i + 1].value) {                     Index_value a = enemy_dist[i];                     enemy_dist[i] = enemy_dist[i + 1];                     enemy_dist[i + 1] = a;                     permut = true;                 }             }         } while (permut);         RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);         for (int i = 0; i < length; i++) {             new_enemy_list.addLast(list.get(enemy_dist[i].index));         }         return new_enemy_list;     } ",249,"        p u b l i c   b o o l e a n   r e t r i e v e B y P M I D ( S t r i n g   p m i d )   { 
                 t r y   { 
                         U R L   u r l   =   n e w   U R L ( b a s e U R L   +   "" & i d = ""   +   p m i d . t r i m ( ) ) ; 
                         B u f f e r e d R e a d e r   x m l   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e   =   n u l l ; 
                         S t r i n g B u f f e r   t i t l e _ s b   =   n e w   S t r i n g B u f f e r ( ) ; 
                         w h i l e   ( ( l i n e   =   x m l . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 i f   ( l i n e . i n d e x O f ( "" < A r t i c l e T i t l e > "" )   ! =   - 1 )   { 
                                         t i t l e _ s b . d e l e t e ( 0 ,   t i t l e _ s b . l e n g t h ( ) ) ; 
                                         t i t l e _ s b . a p p e n d ( l i n e . s u b s t r i n g ( l i n e . i n d e x O f ( "" < A r t i c l e T i t l e > "" )   +   1 4 ,   l i n e . l e n g t h ( )   -   1 5 ) ) ; 
                                 }   e l s e   i f   ( l i n e . i n d e x O f ( "" < A b s t r a c t T e x t > "" )   ! =   - 1 )   { 
                                         P r i n t W r i t e r   a r t i c l e   =   n e w   P r i n t W r i t e r ( n e w   F i l e W r i t e r ( n e w   F i l e ( o u t p u t D i r . g e t P a t h ( )   +   F i l e . s e p a r a t o r C h a r   +   p m i d   +   "" . t x t "" ) ) ) ; 
                                         a r t i c l e . p r i n t l n ( t i t l e _ s b ) ; 
                                         a r t i c l e . p r i n t l n ( l i n e . s u b s t r i n g ( l i n e . i n d e x O f ( "" < A b s t r a c t T e x t > "" )   +   1 4 ,   l i n e . l e n g t h ( )   -   1 5 ) ) ; 
                                         a r t i c l e . c l o s e ( ) ; 
                                         b r e a k ; 
                                 } 
                         } 
                         x m l . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   i e )   { 
                         i e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   f a l s e ; 
         } 
",0,0,0,-1,e,1.8417835e-05,1,2,{'e': 'ie'},MHM,305,0.15107523997624714
176,"CODE1:     public static boolean encodeFileToFile(String infile, String outfile) {         boolean success = false;         java.io.InputStream in = null;         java.io.OutputStream out = null;         try {             in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);             out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));             byte[] buffer = new byte[65536];             int read = -1;             while ((read = in.read(buffer)) >= 0) {                 out.write(buffer, 0, read);             }             success = true;         } catch (java.io.IOException exc) {             exc.printStackTrace();         } finally {             try {                 in.close();             } catch (Exception exc) {             }             try {                 out.close();             } catch (Exception exc) {             }         }         return success;     }  ||CODE2:     public final void close() throws IOException {         if (dataStream == null) throw new NullPointerException(""Write stream is null."");         dataStream.flush();         dataStream.close();         dataStream = null;         File tmpFile = new File(packPath + "".tmp"");         FileOutputStream packStream = new FileOutputStream(packPath);         try {             String nbFiles = Long.toString(currentNbFiles) + ""\0"";             packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));             structBufferWriter.flush();             structBufferWriter.close();             int headerSize = structBuffer.size() + nbFiles.length();             packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));             packStream.write('\0');             packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));             structBuffer.writeTo(packStream);             structBufferWriter = null;             structBuffer = null;             FileInputStream in = new FileInputStream(tmpFile);             try {                 byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];                 int read;                 while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);                 packStream.flush();                 packStream.close();             } finally {                 Utilities.closeStream(in);             }         } finally {             Utilities.closeStream(packStream);         }         if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);         packPath = null;         structBuffer = null;     } ",193,"        p u b l i c   s t a t i c   b o o l e a n   e n c o d e F i l e T o F i l e ( S t r i n g   i n f i l e ,   S t r i n g   o u t f i l e )   { 
                 b o o l e a n   s u c c e s s   =   f a l s e ; 
                 j a v a . i o . I n p u t S t r e a m   p l u s   =   n u l l ; 
                 j a v a . i o . O u t p u t S t r e a m   c o n n e c t i o n   =   n u l l ; 
                 t r y   { 
                         p l u s   =   n e w   B a s e 6 4 . I n p u t S t r e a m ( n e w   j a v a . i o . B u f f e r e d I n p u t S t r e a m ( n e w   j a v a . i o . F i l e I n p u t S t r e a m ( i n f i l e ) ) ,   B a s e 6 4 . E N C O D E ) ; 
                         c o n n e c t i o n   =   n e w   j a v a . i o . B u f f e r e d O u t p u t S t r e a m ( n e w   j a v a . i o . F i l e O u t p u t S t r e a m ( o u t f i l e ) ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 6 5 5 3 6 ] ; 
                         i n t   r e a d   =   - 1 ; 
                         w h i l e   ( ( r e a d   =   p l u s . r e a d ( b u f f e r ) )   > =   0 )   { 
                                 c o n n e c t i o n . w r i t e ( b u f f e r ,   0 ,   r e a d ) ; 
                         } 
                         s u c c e s s   =   t r u e ; 
                 }   c a t c h   ( j a v a . i o . I O E x c e p t i o n   e x c )   { 
                         e x c . p r i n t S t a c k T r a c e ( ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 p l u s . c l o s e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e x c )   { 
                         } 
                         t r y   { 
                                 c o n n e c t i o n . c l o s e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e x c )   { 
                         } 
                 } 
                 r e t u r n   s u c c e s s ; 
         } 
",1,1,1,-1,in,2.6921043e-09,2,8,"{'out': 'connection', 'in': 'plus'}",MHM,298,0.14828620354334512
181,"CODE1:     private String encryptPassword(String password) throws NoSuchAlgorithmException {         MessageDigest encript = MessageDigest.getInstance(""MD5"");         encript.update(password.getBytes());         byte[] b = encript.digest();         int size = b.length;         StringBuffer h = new StringBuffer(size);         for (int i = 0; i < size; i++) {             h.append(b[i]);         }         return h.toString();     }  ||CODE2:     public void save(Connection conn, boolean commit) throws SQLException {         PreparedStatement stmt = null;         if (!isValid()) {             String errorMessage = ""Unable to save invalid DAO '"" + getClass().getName() + ""'!"";             if (log.isErrorEnabled()) {                 log.error(errorMessage);             }             throw new SQLException(errorMessage);         }         try {             if (isNew()) {                 primaryKey = createNewPrimaryKey();                 stmt = conn.prepareStatement(getInsertSql());             } else {                 stmt = conn.prepareStatement(getUpdateSql());             }             setValues(stmt);             int rowCount = stmt.executeUpdate();             if (rowCount != 1) {                 primaryKey = OvUuid.NULL_UUID;                 if (commit) {                     conn.rollback();                 }                 String errorMessage = ""Invalid number of rows changed!"";                 if (log.isErrorEnabled()) {                     log.error(errorMessage);                 }                 throw new SQLException(errorMessage);             } else {                 if (commit) {                     conn.commit();                 }             }         } finally {             OvJdbcUtils.closeStatement(stmt);         }     } ",94,"        p r i v a t e   S t r i n g   e n c i p h e r S t r i n g ( S t r i n g   p a s s w o r d )   t h r o w s   N o S u c h A l g o r i t h m E x c e p t i o n   { 
                 M e s s a g e D i g e s t   e n c r i p t   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                 e n c r i p t . u p d a t e ( p a s s w o r d . g e t B y t e s ( ) ) ; 
                 b y t e [ ]   b   =   e n c r i p t . s i g n e r ( ) ; 
                 i n t   s i z e   =   b . l e n g t h ; 
                 S t r i n g B u f f e r   h   =   n e w   S t r i n g B u f f e r ( s i z e ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   s i z e ;   i + + )   { 
                         h . a p p e n d ( b [ i ] ) ; 
                 } 
                 r e t u r n   h . t o S t r i n g ( ) ; 
         } 
",0,0,0,-1,digest,-1.8715858e-05,2,2,"{'encryptPassword': 'encipherString', 'digest': 'signer'}",MHM,261,0.12442462841669719
182,"CODE1:     private static File createFileFromURL(URL url) throws IOException {         File tempFile = File.createTempFile(""oboFile"", "".obo"");         PrintStream ps = new PrintStream(tempFile);         BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));         String line;         while ((line = reader.readLine()) != null) {             ps.println(line);         }         ps.close();         return tempFile;     }  ||CODE2:     public void execute() {         check();         FTPClient ftp = new FTPClient();         try {             ftp.connect(host, port);         } catch (IOException ex) {             throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");         }         if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {             throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());         }         try {             try {                 if (!ftp.login(userid, password)) {                     throw new BuildException(""Identification failed"");                 }             } catch (IOException ex) {                 throw new BuildException(ex);             }             if (binary) {                 try {                     ftp.setFileType(FTP.IMAGE_FILE_TYPE);                 } catch (IOException ex) {                     throw new BuildException(ex);                 }                 if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {                     throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());                 }             }             try {                 ftp.changeWorkingDirectory(remotedir);             } catch (IOException ex) {                 throw new BuildException(ex);             }             if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {                 throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());             }             String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;             String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;             BufferedOutputStream outstream = null;             try {                 outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));                 ftp.retrieveFile(remoteFullFileName, outstream);             } catch (IOException ex) {                 throw new BuildException(ex);             }             if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {                 throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");             }         } finally {             try {                 ftp.disconnect();             } catch (IOException ex) {                 System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");             }         }     } ",89,"        p r i v a t e   s t a t i c   F i l e   c r e a t e F i l e F r o m U R L ( U R L   U r l )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e   t e m p F i l e   =   F i l e . c r e a t e T e m p F i l e ( "" o b o F i l e "" ,   "" . o b o "" ) ; 
                 P r i n t S t r e a m   p s   =   n e w   P r i n t S t r e a m ( t e m p F i l e ) ; 
                 B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( U r l . o p e n S t r e a m ( ) ) ) ; 
                 S t r i n g   l i n e ; 
                 w h i l e   ( ( l i n e   =   r e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                         p s . p r i n t l n ( l i n e ) ; 
                 } 
                 p s . c l o s e ( ) ; 
                 r e t u r n   t e m p F i l e ; 
         } 
",0,0,0,-1,url,-2.2768974e-05,1,2,{'url': 'Url'},MHM,301,0.1443140387535095
188,"CODE1:     private static void fileUpload() throws Exception {         file = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");         httpclient = new DefaultHttpClient();         HttpPost httppost = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);         MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);         ContentBody cbFile = new FileBody(file);         mpEntity.addPart(""upfile_0"", cbFile);         mpEntity.addPart(""uploaded"", new StringBody(""on""));         mpEntity.addPart(""hotfile"", new StringBody(""on""));         mpEntity.addPart(""turbobit"", new StringBody(""on""));         mpEntity.addPart(""depositfiles"", new StringBody(""on""));         mpEntity.addPart(""fileserve"", new StringBody(""on""));         mpEntity.addPart(""filefactory"", new StringBody(""on""));         mpEntity.addPart(""netload"", new StringBody(""on""));         mpEntity.addPart(""uploadstation"", new StringBody(""on""));         mpEntity.addPart(""badongo"", new StringBody(""on""));         mpEntity.addPart(""uploading"", new StringBody(""on""));         mpEntity.addPart(""megashare"", new StringBody(""on""));         mpEntity.addPart(""_2shared"", new StringBody(""on""));         httppost.setEntity(mpEntity);         NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());         NULogger.getLogger().info(""Now uploading your file into flameupload.com"");         HttpResponse response = httpclient.execute(httppost);         HttpEntity resEntity = response.getEntity();         NULogger.getLogger().info(response.getStatusLine().toString());         NULogger.getLogger().info(EntityUtils.toString(resEntity));         Header[] allHeaders = response.getAllHeaders();         for (int i = 0; i < allHeaders.length; i++) {             System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());         }         if (response.getStatusLine().getStatusCode() == 302) {             NULogger.getLogger().info(""Files uploaded successfully"");         } else {             throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");         }     }  ||CODE2:     public void desistirCandidatura(Atividade atividade) throws SQLException {         Connection conn = null;         String insert = ""delete from Atividade_has_recurso_humano where atividade_idatividade="" + atividade.getIdAtividade() + "" and usuario_idusuario="" + atividade.getRecursoHumano().getIdUsuario();         try {             conn = connectionFactory.getConnection(true);             conn.setAutoCommit(false);             Statement stmt = conn.createStatement();             Integer result = stmt.executeUpdate(insert);             conn.commit();         } catch (SQLException e) {             conn.rollback();             throw e;         } finally {             conn.close();         }     } ",471,"        p r i v a t e   s t a t i c   v o i d   f i l e U p l o a d ( )   t h r o w s   E x c e p t i o n   { 
                 f i l e   =   n e w   F i l e ( "" c : / D o c u m e n t s   a n d   S e t t i n g s / d i n e s h / D e s k t o p / Z S h a r e U p l o a d e r P l u g i n . j a v a "" ) ; 
                 h t t p c l i e n t   =   n e w   D e f a u l t H t t p C l i e n t ( ) ; 
                 H t t p P o s t   h t t p p o s t   =   n e w   H t t p P o s t ( "" h t t p : / / f l a m e u p l o a d . c o m / c g i / u b r _ u p l o a d . p l ? u p l o a d _ i d = ""   +   u p l o a d i d ) ; 
                 M u l t i p a r t E n t i t y   m p E n t i t y   =   n e w   M u l t i p a r t E n t i t y ( H t t p M u l t i p a r t M o d e . B R O W S E R _ C O M P A T I B L E ) ; 
                 C o n t e n t B o d y   c b F i l e   =   n e w   F i l e B o d y ( f i l e ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p f i l e _ 0 "" ,   c b F i l e ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d e d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" h o t f i l e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" t u r b o b i t "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" d e p o s i t f i l e s "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" f i l e s e r v e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" f i l e f a c t o r y "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" n e t l o a d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d s t a t i o n "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" b a d o n g o "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d i n g "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" m e g a s h a r e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" _ 2 s h a r e d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 h t t p p o s t . s e t E n t i t y ( m p E n t i t y ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . l o g ( L e v e l . I N F O ,   "" e x e c u t i n g   r e q u e s t   { 0 } "" ,   h t t p p o s t . g e t R e q u e s t L i n e ( ) ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( "" N o w   u p l o a d i n g   y o u r   f i l e   i n t o   f l a m e u p l o a d . c o m "" ) ; 
                 H t t p R e s p o n s e   r e s p o n s e   =   h t t p c l i e n t . e x e c u t e ( h t t p p o s t ) ; 
                 H t t p E n t i t y   r e s E n t i t y   =   r e s p o n s e . g e t E n t i t y ( ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( r e s p o n s e . g e t S t a t u s L i n e ( ) . t o S t r i n g ( ) ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( E n t i t y U t i l s . t o S t r i n g ( r e s E n t i t y ) ) ; 
                 H e a d e r [ ]   a l l H e a d e r s   =   r e s p o n s e . g e t A l l H e a d e r s ( ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   a l l H e a d e r s . l e n g t h ;   i + + )   { 
                         S y s t e m . o u t . p r i n t l n ( a l l H e a d e r s [ i ] . g e t N a m e ( )   +   "" = ""   +   a l l H e a d e r s [ i ] . g e t V a l u e ( ) ) ; 
                 } 
                 i f   ( r e s p o n s e . g e t S t a t u s L i n e ( ) . g e t S t a t u s C o d e ( )   = =   3 0 2 )   { 
                         N U L o g g e r . g e t L o g g e r ( ) . i n f o ( "" F i l e s   u p l o a d e d   s u c c e s s f u l l y "" ) ; 
                 }   e l s e   { 
                         t h r o w   n e w   E x c e p t i o n ( "" T h e r e   m i g h t   b e   a   p r o b l e m   w i t h   y o u r   i n t e r n e t   c o n n e c t i o n   o r   s e r v e r   e r r o r .   P l e a s e   t r y   a g a i n   l a t e r   : ( "" ) ; 
                 } 
         } 
",0,0,0,-1,connection,0.0,1,1,{'connection': 'section'},MHM,309,0.17612901131312053
190,"CODE1:     public static void copyFile(File from, File to) throws Exception {         if (!from.exists()) return;         FileInputStream in = new FileInputStream(from);         FileOutputStream out = new FileOutputStream(to);         byte[] buffer = new byte[BUFFER_SIZE];         int bytes_read;         while (true) {             bytes_read = in.read(buffer);             if (bytes_read == -1) break;             out.write(buffer, 0, bytes_read);         }         out.flush();         out.close();         in.close();     }  ||CODE2:     final void importSelectedEntity() {         TreePath path = projectsTree.getSelectionPath();         DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();         Object userObject = selectedNode.getUserObject();         if (userObject instanceof ProjectSet) {             JFileChooser fileChooser = new JFileChooser();             fileChooser.setMultiSelectionEnabled(false);             fileChooser.setFileFilter(new FileNameExtensionFilter(""JFPSM Projects"", ""jfpsm.zip""));             int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());             if (result == JFileChooser.APPROVE_OPTION) {                 String fullname = fileChooser.getSelectedFile().getName();                 String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());                 ProjectSet workspace = (ProjectSet) userObject;                 boolean confirmLoad = true;                 if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {                     confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), ""Overwrite project \"""" + projectName + ""\"""" + ""?"", ""Overwrite project"", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;                     if (confirmLoad) {                         final int count = selectedNode.getChildCount();                         DefaultMutableTreeNode projectNode = null;                         for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {                             projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);                             break;                         }                         Project project = (Project) projectNode.getUserObject();                         for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);                         for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);                         workspace.removeProject(project);                         ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);                     }                 }                 if (confirmLoad) {                     File projectFile = new File(workspace.createProjectPath(projectName));                     boolean success = true;                     try {                         success = projectFile.createNewFile();                         if (success) {                             BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));                             BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));                             byte[] buf = new byte[1024];                             int len;                             while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);                             bis.close();                             bos.close();                         }                     } catch (Throwable throwable) {                         displayErrorMessage(throwable, false);                         success = false;                     }                     if (success) addProject(projectName);                 }             }         } else if (userObject instanceof Map) {             Map map = (Map) userObject;             Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();             importImageForSelectedMap(floor, map);         }     } ",111,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e ( F i l e   f r o m ,   F i l e   t o )   t h r o w s   E x c e p t i o n   { 
                 i f   ( ! f r o m . e x i s t s ( ) )   r e t u r n ; 
                 F i l e I n p u t S t r e a m   l   =   n e w   F i l e I n p u t S t r e a m ( f r o m ) ; 
                 F i l e O u t p u t S t r e a m   e r r o r   =   n e w   F i l e O u t p u t S t r e a m ( t o ) ; 
                 b y t e [ ]   b u f f e r   =   n e w   b y t e [ B U F F E R _ S I Z E ] ; 
                 i n t   b y t e s _ r e a d ; 
                 w h i l e   ( t r u e )   { 
                         b y t e s _ r e a d   =   l . r e a d ( b u f f e r ) ; 
                         i f   ( b y t e s _ r e a d   = =   - 1 )   b r e a k ; 
                         e r r o r . w r i t e ( b u f f e r ,   0 ,   b y t e s _ r e a d ) ; 
                 } 
                 e r r o r . f l u s h ( ) ; 
                 e r r o r . c l o s e ( ) ; 
                 l . c l o s e ( ) ; 
         } 
",1,1,1,-1,in,2.1287997e-07,2,7,"{'in': 'l', 'out': 'error'}",MHM,298,0.13820234537124634
192,"CODE1:     @Override     protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         String reqPath = req.getPathInfo();         if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);         ZipEntry entry = zipInfo.get(reqPath);         if (entry == null) {             logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));             resp.sendError(HttpServletResponse.SC_NOT_FOUND);             return;         }         logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));         ServletUtils.establishContentType(reqPath, resp);         InputStream in = null;         try {             in = new BufferedInputStream(zipFile.getInputStream(entry));             IOUtils.copy(in, resp.getOutputStream());             logger.debug(""Rendered: "" + reqPath);         } catch (FileNotFoundException e) {             logger.error(""zipped resource not found: "" + reqPath);         } finally {             IOUtils.closeQuietly(in);         }     }  ||CODE2:     protected String doIt() throws java.lang.Exception {         StringBuffer sql = null;         int no = 0;         String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;         if (m_deleteOldImported) {             sql = new StringBuffer(""DELETE I_BPartner "" + ""WHERE I_IsImported='Y'"").append(clientCheck);             no = DB.executeUpdate(sql.toString());             log.fine(""Delete Old Impored ="" + no);         }         sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET AD_Client_ID = COALESCE(AD_Client_ID, "").append(m_AD_Client_ID).append(""),"" + "" AD_Org_ID = COALESCE(AD_Org_ID, 0),"" + "" IsActive = COALESCE(IsActive, 'Y'),"" + "" Created = COALESCE(Created, current_timestamp),"" + "" CreatedBy = COALESCE(CreatedBy, 0),"" + "" Updated = COALESCE(Updated, current_timestamp),"" + "" UpdatedBy = COALESCE(UpdatedBy, 0),"" + "" I_ErrorMsg = '',"" + "" I_IsImported = 'N' "" + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");         no = DB.executeUpdate(sql.toString());         log.fine(""Reset="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET GroupValue=(SELECT Value FROM C_BP_Group g WHERE g.IsDefault='Y'"" + "" AND g.AD_Client_ID=i.AD_Client_ID AND ROWNUM=1) "" + ""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Group Default="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g"" + "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID ORDER BY g.IsDefault DESC LIMIT 1) "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Group="" + no);         sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'"" + getMsg(""ImportBPInvalidGroup"") + "". ' "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.config(""Invalid Group="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.isactive='Y'"" + "" AND c.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE CountryCode IS NULL AND C_Country_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Country Default="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c"" + "" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Country="" + no);         sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'"" + getMsg(""ImportBPInvalidCountry"") + "". ' "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.config(""Invalid Country="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set RegionName=(SELECT Name FROM C_Region r"" + "" WHERE r.IsDefault='Y' AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE RegionName IS NULL AND C_Region_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Region Default="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r"" + "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Region_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Region="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'"" + getMsg(""ImportBPInvalidRegion"") + "". ' "" + "" WHERE C_Region_ID IS NULL "" + "" AND EXISTS (SELECT * FROM C_Country c"" + "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion='Y')"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.config(""Invalid Region="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET BPContactGreeting=NULL WHERE C_Greeting_ID IS NULL AND char_length(trim(BPContactGreeting)) = 0 AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Reset Greeting="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g"" + "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Greeting="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'"" + getMsg(""ImportBPInvalidGreeting"") + "". ' "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.config(""Invalid Greeting="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p"" + "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"" + "" AND I_IsImported='N'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Found BPartner="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c"" + "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"" + "" AND I_IsImported='N'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Found Contact="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID"" + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"" + "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"" + "" AND DUMP(i.Address1)=DUMP(l.Address1) AND DUMP(i.Address2)=DUMP(l.Address2)"" + "" AND DUMP(i.City)=DUMP(l.City) AND DUMP(i.Postal)=DUMP(l.Postal) AND DUMP(i.Postal_Add)=DUMP(l.Postal_Add)"" + "" AND DUMP(i.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(i.C_Country_ID)=DUMP(l.C_Country_ID)) "" + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"" + "" AND I_IsImported='N'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Found Location="" + no);         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_Codigo="" + MCategoriaIva.CONSUMIDOR_FINAL + "" WHERE (C_Categoria_IVA_Codigo IS NULL OR C_Categoria_IVA_Codigo = 0) "" + ""  AND I_IsImported='N'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_ID= "" + "" (SELECT C_Categoria_IVA_ID "" + ""  FROM C_Categoria_IVA c "" + ""  WHERE i.C_Categoria_IVA_Codigo=c.Codigo AND c.AD_Client_ID=i.AD_Client_ID "" + "" ) "" + ""WHERE C_Categoria_IVA_ID IS NULL "" + ""  AND I_IsImported='N'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET SalesRep_ID=(SELECT AD_User_ID "" + ""FROM AD_User u "" + ""WHERE u.Name = i.SalesRep_Name AND u.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE SalesRep_ID IS NULL "" + ""AND I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         log.fine(""Set Country="" + no);         int noInsert = 0;         int noUpdate = 0;         sql = new StringBuffer(""SELECT I_BPartner_ID, C_BPartner_ID,"" + ""C_BPartner_Location_ID,COALESCE(Address1,Address2,City,RegionName,CountryCode),"" + ""AD_User_ID,ContactName "" + ""FROM I_BPartner "" + ""WHERE I_IsImported='N'"").append(clientCheck);         Connection conn = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);         try {             log.info(""En importBPartbner antes de hacer el update en c_BPartner"");             PreparedStatement pstmt_updateBPartner = conn.prepareStatement(""UPDATE C_BPartner "" + ""SET Value=aux.Value"" + "",Name=aux.Name"" + "",Name2=aux.Name2"" + "",Description=aux.Description"" + "",DUNS=aux.DUNS"" + "",TaxID=aux.TaxID"" + "",NAICS=aux.NAICS"" + "",C_BP_Group_ID=aux.C_BP_Group_ID"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux.UpdatedBy"" + "",IIBB=aux.IIBB"" + "" from (SELECT Value,Name,Name2,Description,DUNS,TaxID,NAICS,C_BP_Group_ID,UpdatedBy,IIBB FROM I_BPartner WHERE I_BPartner_ID=?) as aux"" + "" WHERE C_BPartner_ID=?"");             log.info(""En importBPartbner despues de hacer el update en c_BPartner"");             PreparedStatement pstmt_insertLocation = conn.prepareStatement(""INSERT INTO C_Location (C_Location_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");             PreparedStatement pstmt_insertBPLocation = conn.prepareStatement(""INSERT INTO C_BPartner_Location ( "" + ""	C_BPartner_Location_ID,"" + ""	AD_Client_ID,"" + ""	AD_Org_ID,"" + ""	IsActive,"" + ""	Created,"" + ""	CreatedBy,"" + ""	Updated,"" + ""	UpdatedBy,"" + ""	Name,"" + ""	IsBillTo,"" + ""	IsShipTo,"" + ""	IsPayFrom,"" + ""	IsRemitTo,"" + ""	Phone,"" + ""	Phone2,"" + ""	Fax,"" + ""	C_BPartner_ID,"" + ""	C_Location_ID) "" + ""SELECT ?,AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""CASE WHEN char_length(trim(coalesce(address1,''))) > 0 THEN address1 "" + ""     WHEN char_length(trim(coalesce(city,''))) > 0 THEN city "" + ""     WHEN char_length(trim(coalesce(regionname,''))) > 0 THEN regionname "" + ""     ELSE name "" + ""END,"" + ""'Y','Y','Y','Y',"" + ""Phone,Phone2,Fax, ?,? "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");             PreparedStatement pstmt_insertBPContact = conn.prepareStatement(""INSERT INTO AD_User (AD_User_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""C_BPartner_ID,C_BPartner_Location_ID,C_Greeting_ID,"" + ""Name,Title,Description,Comments,Phone,Phone2,Fax,EMail,Birthday) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,'Y',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""?,?,C_Greeting_ID,"" + ""ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday "" + ""FROM I_BPartner "" + "" WHERE I_BPartner_ID=?"");             PreparedStatement pstmt_updateBPContact = conn.prepareStatement(""UPDATE AD_User "" + ""SET C_Greeting_ID=aux1.C_Greeting_ID"" + "",Name=aux1.Name"" + "",Title=aux1.Title"" + "",Description=aux1.Description"" + "",Comments=aux1.Commets"" + "",Phone=aux1.Phone"" + "",Phone2=aux1.Phone2"" + "",Fax=aux1.Fax"" + "",EMail=aux1.EMail"" + "",Birthday=aux1.Birthaday"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux1.UpdatedBy"" + "" from (SELECT C_Greeting_ID,ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday,UpdatedBy FROM I_BPartner WHERE I_BPartner_ID=?) as aux1"" + "" WHERE AD_User_ID=?"");             PreparedStatement pstmt_setImported = conn.prepareStatement(""UPDATE I_BPartner SET I_IsImported='Y',"" + "" C_BPartner_ID=?, C_BPartner_Location_ID=?, AD_User_ID=?, "" + "" Updated=current_timestamp, Processed='Y' WHERE I_BPartner_ID=?"");             PreparedStatement pstmt = DB.prepareStatement(sql.toString());             ResultSet rs = pstmt.executeQuery();             while (rs.next()) {                 int I_BPartner_ID = rs.getInt(1);                 int C_BPartner_ID = rs.getInt(2);                 boolean newBPartner = C_BPartner_ID == 0;                 int C_BPartner_Location_ID = rs.getInt(3);                 String newLocali = rs.getString(4);                 boolean newLocation = rs.getString(4) != null;                 int AD_User_ID = rs.getInt(5);                 boolean newContact = rs.getString(6) != null;                 log.fine(""I_BPartner_ID="" + I_BPartner_ID + "", C_BPartner_ID="" + C_BPartner_ID + "", C_BPartner_Location_ID="" + C_BPartner_Location_ID + "" create="" + newLocation + "", AD_User_ID="" + AD_User_ID + "" create="" + newContact);                 if (newBPartner) {                     X_I_BPartner iBP = new X_I_BPartner(getCtx(), I_BPartner_ID, null);                     MBPartner bp = new MBPartner(iBP);                     if (bp.save()) {                         C_BPartner_ID = bp.getC_BPartner_ID();                         log.finest(""Insert BPartner"");                         noInsert++;                     } else {                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPartner failed: "" + CLogger.retrieveErrorAsString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                 } else {                     pstmt_updateBPartner.setInt(1, I_BPartner_ID);                     pstmt_updateBPartner.setInt(2, C_BPartner_ID);                     try {                         no = pstmt_updateBPartner.executeUpdate();                         log.finest(""Update BPartner = "" + no);                         noUpdate++;                     } catch (SQLException ex) {                         log.finest(""Update BPartner -- "" + ex.toString());                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BPartner: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                 }                 if (C_BPartner_Location_ID != 0) {                 } else if (newLocation) {                     int C_Location_ID = 0;                     try {                         C_Location_ID = DB.getNextID(m_AD_Client_ID, ""C_Location"", null);                         if (C_Location_ID <= 0) {                             throw new DBException(""No NextID ("" + C_Location_ID + "")"");                         }                         pstmt_insertLocation.setInt(1, C_Location_ID);                         pstmt_insertLocation.setInt(2, I_BPartner_ID);                         no = pstmt_insertLocation.executeUpdate();                         log.finest(""Insert Location = "" + no);                     } catch (SQLException ex) {                         log.finest(""Insert Location - "" + ex.toString());                         conn.rollback();                         noInsert--;                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert Location: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                     try {                         C_BPartner_Location_ID = (DB.getNextID(m_AD_Client_ID, ""C_BPartner_Location"", null));                         log.finest(""C_BPartner_Location_ID es : "" + C_BPartner_Location_ID);                         if (C_BPartner_Location_ID <= 0) {                             throw new DBException(""No NextID ("" + C_BPartner_Location_ID + "")"");                         }                         pstmt_insertBPLocation.setInt(1, C_BPartner_Location_ID);                         pstmt_insertBPLocation.setInt(2, C_BPartner_ID);                         pstmt_insertBPLocation.setInt(3, C_Location_ID);                         pstmt_insertBPLocation.setInt(4, I_BPartner_ID);                         no = pstmt_insertBPLocation.executeUpdate();                         log.finest(""Insert BP Location = "" + no);                     } catch (Exception ex) {                         log.finest(""Insert BPLocation - "" + ex.toString());                         conn.rollback();                         noInsert--;                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPLocation: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                 }                 if (AD_User_ID != 0) {                     pstmt_updateBPContact.setInt(1, I_BPartner_ID);                     pstmt_updateBPContact.setInt(2, AD_User_ID);                     try {                         no = pstmt_updateBPContact.executeUpdate();                         log.finest(""Update BP Contact = "" + no);                     } catch (SQLException ex) {                         log.finest(""Update BP Contact - "" + ex.toString());                         conn.rollback();                         noInsert--;                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BP Contact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                 } else if (newContact) {                     try {                         AD_User_ID = DB.getNextID(m_AD_Client_ID, ""AD_User"", null);                         if (AD_User_ID <= 0) {                             throw new DBException(""No NextID ("" + AD_User_ID + "")"");                         }                         pstmt_insertBPContact.setInt(1, AD_User_ID);                         pstmt_insertBPContact.setInt(2, C_BPartner_ID);                         if (C_BPartner_Location_ID == 0) {                             pstmt_insertBPContact.setNull(3, Types.NUMERIC);                         } else {                             pstmt_insertBPContact.setInt(3, C_BPartner_Location_ID);                         }                         pstmt_insertBPContact.setInt(4, I_BPartner_ID);                         no = pstmt_insertBPContact.executeUpdate();                         log.finest(""Insert BP Contact = "" + no);                     } catch (Exception ex) {                         log.finest(""Insert BPContact - "" + ex.toString());                         conn.rollback();                         noInsert--;                         sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPContact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);                         DB.executeUpdate(sql.toString());                         continue;                     }                 }                 pstmt_setImported.setInt(1, C_BPartner_ID);                 if (C_BPartner_Location_ID == 0) {                     pstmt_setImported.setNull(2, Types.NUMERIC);                 } else {                     pstmt_setImported.setInt(2, C_BPartner_Location_ID);                 }                 if (AD_User_ID == 0) {                     pstmt_setImported.setNull(3, Types.NUMERIC);                 } else {                     pstmt_setImported.setInt(3, AD_User_ID);                 }                 pstmt_setImported.setInt(4, I_BPartner_ID);                 no = pstmt_setImported.executeUpdate();                 conn.commit();             }             rs.close();             pstmt.close();             pstmt_updateBPartner.close();             pstmt_insertLocation.close();             pstmt_insertBPLocation.close();             pstmt_insertBPContact.close();             pstmt_updateBPContact.close();             pstmt_setImported.close();             conn.close();             conn = null;         } catch (SQLException e) {             try {                 if (conn != null) {                     conn.close();                 }                 conn = null;             } catch (SQLException ex) {             }             throw new Exception(""ImportBPartner.doIt"", e);         } finally {             if (conn != null) {                 conn.close();             }             conn = null;         }         sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='N', Updated=current_timestamp "" + ""WHERE I_IsImported<>'Y'"").append(clientCheck);         no = DB.executeUpdate(sql.toString());         addLog(0, null, new BigDecimal(no), ""@Errors@"");         addLog(0, null, new BigDecimal(noInsert), ""@C_BPartner_ID@: @Inserted@"");         addLog(0, null, new BigDecimal(noUpdate), ""@C_BPartner_ID@: @Updated@"");         return """";     } ",198,"        @ O v e r r i d e 
         p r o t e c t e d   v o i d   d o R e q u e s t ( H t t p S e r v l e t R e q u e s t   r e q ,   H t t p S e r v l e t R e s p o n s e   r e s p )   t h r o w s   S e r v l e t E x c e p t i o n ,   I O E x c e p t i o n   { 
                 S t r i n g   r e q P a t h   =   r e q . g e t P a t h I n f o ( ) ; 
                 i f   ( r e q P a t h . s t a r t s W i t h ( "" / "" ) )   r e q P a t h   =   r e q P a t h . s u b s t r i n g ( 1 ) ; 
                 Z i p E n t r y   z   =   z i p I n f o . g e t ( r e q P a t h ) ; 
                 i f   ( z   = =   n u l l )   { 
                         l o g g e r . d e b u g ( U t i l s . j o i n ( "" R e q u e s t e d   p a t h   n o t   f o u n d :   [ "" ,   r e q P a t h ,   "" ] "" ) ) ; 
                         r e s p . s e n d E r r o r ( H t t p S e r v l e t R e s p o n s e . S C _ N O T _ F O U N D ) ; 
                         r e t u r n ; 
                 } 
                 l o g g e r . d e b u g ( U t i l s . j o i n ( "" R e q u e s t e d   p a t h :   [ "" ,   r e q P a t h ,   "" ] "" ) ) ; 
                 S e r v l e t U t i l s . e s t a b l i s h C o n t e n t T y p e ( r e q P a t h ,   r e s p ) ; 
                 I n p u t S t r e a m   i n   =   n u l l ; 
                 t r y   { 
                         i n   =   n e w   B u f f e r e d I n p u t S t r e a m ( z F i l e s . g e t I n p u t S t r e a m ( z ) ) ; 
                         I O U t i l s . c o p y ( i n ,   r e s p . g e t O u t p u t S t r e a m ( ) ) ; 
                         l o g g e r . d e b u g ( "" R e n d e r e d :   ""   +   r e q P a t h ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         l o g g e r . e r r o r ( "" z i p p e d   r e s o u r c e   n o t   f o u n d :   ""   +   r e q P a t h ) ; 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e Q u i e t l y ( i n ) ; 
                 } 
         } 
",0,0,0,-1,entry,0.0,2,4,"{'zipFile': 'zFiles', 'entry': 'z'}",MHM,289,0.14773087501525878
193,"CODE1:     public boolean PrintPage(String page, String url_addr, String charset) {         File parent_path = new File(new File(page).getParent());         if (!parent_path.exists()) {             parent_path.mkdirs();         }         String r_line = null;         BufferedReader bReader = null;         FileOutputStream out = null;         OutputStreamWriter writer = null;         PrintWriter fileOut = null;         File file = null;         try {             InputStream ins = new URL(url_addr).openStream();             file = new File(page);             if (!file.exists()) {                 file.createNewFile();             }             bReader = new BufferedReader(new InputStreamReader(ins, charset));             out = new FileOutputStream(page);             writer = new OutputStreamWriter(out, charset);             fileOut = new PrintWriter(writer);             while ((r_line = bReader.readLine()) != null) {                 r_line = r_line.trim();                 int str_len = r_line.length();                 if (str_len > 0) {                     fileOut.println(r_line);                     fileOut.flush();                 }             }             ins.close();             ins = null;             fileOut.close();             writer.close();             out.close();             bReader.close();             fileOut = null;             writer = null;             out = null;             bReader = null;             parent_path = null;             file = null;             r_line = null;             return true;         } catch (IOException ioe) {             log.error(ioe.getMessage());             ioe.printStackTrace();             return false;         } catch (Exception es) {             es.printStackTrace();             log.error(""static----------"" + es.getMessage());             return false;         } finally {             try {                 if (fileOut != null) {                     fileOut.close();                     fileOut = null;                 }                 if (writer != null) {                     writer.close();                     writer = null;                 }                 if (out != null) {                     out.close();                     out = null;                 }                 if (bReader != null) {                     bReader.close();                     bReader = null;                 }             } catch (IOException ioe) {                 log.error(ioe.getMessage());             } catch (Exception e) {                 log.error(e.getMessage());             }         }     }  ||CODE2:     private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {         File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");         if (tempFile.exists()) tempFile.delete();         boolean renameOk = zipFile.renameTo(tempFile);         if (!renameOk) {             throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());         }         ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));         ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));         ZipEntry entry = zin.getNextEntry();         byte[] buf = new byte[1024];         while (entry != null) {             String entryName = entry.getName();             boolean inFiles = false;             for (int i = 0; i < files.length; i++) {                 String fileName = dirs[i] + ""/"" + files[i].getName();                 if (fileName.equals(entryName)) {                     inFiles = true;                     break;                 }             }             if (!inFiles) {                 out.putNextEntry(new ZipEntry(entryName));                 int len;                 while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);             }             entry = zin.getNextEntry();         }         zin.close();         for (int i = 0; i < files.length; i++) {             InputStream in = new FileInputStream(files[i]);             out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));             int len;             while ((len = in.read(buf)) > 0) out.write(buf, 0, len);             out.closeEntry();             in.close();         }         out.close();         tempFile.delete();     } ",451,"        p u b l i c   b o o l e a n   P r i n t P a g e ( S t r i n g   p a g e ,   S t r i n g   u r l _ a d d r ,   S t r i n g   c h a r s e t )   { 
                 F i l e   p a r e n t _ p a t h   =   n e w   F i l e ( n e w   F i l e ( p a g e ) . g e t P a r e n t ( ) ) ; 
                 i f   ( ! p a r e n t _ p a t h . e x i s t s ( ) )   { 
                         p a r e n t _ p a t h . m k d i r s ( ) ; 
                 } 
                 S t r i n g   r _ l i n e   =   n u l l ; 
                 B u f f e r e d R e a d e r   b R e a d e r   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   e r r o r   =   n u l l ; 
                 O u t p u t S t r e a m W r i t e r   w r i t e r   =   n u l l ; 
                 P r i n t W r i t e r   f i l e O u t   =   n u l l ; 
                 F i l e   f i l e   =   n u l l ; 
                 t r y   { 
                         I n p u t S t r e a m   i n s   =   n e w   U R L ( u r l _ a d d r ) . o p e n S t r e a m ( ) ; 
                         f i l e   =   n e w   F i l e ( p a g e ) ; 
                         i f   ( ! f i l e . e x i s t s ( ) )   { 
                                 f i l e . c r e a t e N e w F i l e ( ) ; 
                         } 
                         b R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n s ,   c h a r s e t ) ) ; 
                         e r r o r   =   n e w   F i l e O u t p u t S t r e a m ( p a g e ) ; 
                         w r i t e r   =   n e w   O u t p u t S t r e a m W r i t e r ( e r r o r ,   c h a r s e t ) ; 
                         f i l e O u t   =   n e w   P r i n t W r i t e r ( w r i t e r ) ; 
                         w h i l e   ( ( r _ l i n e   =   b R e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 r _ l i n e   =   r _ l i n e . t r i m ( ) ; 
                                 i n t   s t r _ l e n   =   r _ l i n e . l e n g t h ( ) ; 
                                 i f   ( s t r _ l e n   >   0 )   { 
                                         f i l e O u t . p r i n t l n ( r _ l i n e ) ; 
                                         f i l e O u t . f l u s h ( ) ; 
                                 } 
                         } 
                         i n s . c l o s e ( ) ; 
                         i n s   =   n u l l ; 
                         f i l e O u t . c l o s e ( ) ; 
                         w r i t e r . c l o s e ( ) ; 
                         e r r o r . c l o s e ( ) ; 
                         b R e a d e r . c l o s e ( ) ; 
                         f i l e O u t   =   n u l l ; 
                         w r i t e r   =   n u l l ; 
                         e r r o r   =   n u l l ; 
                         b R e a d e r   =   n u l l ; 
                         p a r e n t _ p a t h   =   n u l l ; 
                         f i l e   =   n u l l ; 
                         r _ l i n e   =   n u l l ; 
                         r e t u r n   t r u e ; 
                 }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                         l o g . e r r o r ( i o e . g e t M e s s a g e ( ) ) ; 
                         i o e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t u r n   f a l s e ; 
                 }   c a t c h   ( E x c e p t i o n   e s )   { 
                         e s . p r i n t S t a c k T r a c e ( ) ; 
                         l o g . e r r o r ( "" s t a t i c - - - - - - - - - - ""   +   e s . g e t M e s s a g e ( ) ) ; 
                         r e t u r n   f a l s e ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( f i l e O u t   ! =   n u l l )   { 
                                         f i l e O u t . c l o s e ( ) ; 
                                         f i l e O u t   =   n u l l ; 
                                 } 
                                 i f   ( w r i t e r   ! =   n u l l )   { 
                                         w r i t e r . c l o s e ( ) ; 
                                         w r i t e r   =   n u l l ; 
                                 } 
                                 i f   ( e r r o r   ! =   n u l l )   { 
                                         e r r o r . c l o s e ( ) ; 
                                         e r r o r   =   n u l l ; 
                                 } 
                                 i f   ( b R e a d e r   ! =   n u l l )   { 
                                         b R e a d e r . c l o s e ( ) ; 
                                         b R e a d e r   =   n u l l ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                                 l o g . e r r o r ( i o e . g e t M e s s a g e ( ) ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 l o g . e r r o r ( e . g e t M e s s a g e ( ) ) ; 
                         } 
                 } 
         } 
",0,0,0,-1,out,8.106232e-06,1,8,{'out': 'error'},MHM,302,0.16945786476135255
194,"CODE1:     public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {         FileOutputStream os = null;         DataOutputStream dos = null;         try {             LPKTable[] fileTable = new LPKTable[srcFilePath.length];             long fileOffset = outputOffset(header);             for (int i = 0; i < srcFilePath.length; i++) {                 String sourceFileName = FileUtils.getFileName(srcFilePath[i]);                 long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);                 LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);                 fileOffset = outputNextOffset(sourceFileSize, fileOffset);                 fileTable[i] = ft;             }             File file = new File(makeFilePath);             if (!file.exists()) {                 FileUtils.makedirs(file);             }             os = new FileOutputStream(file);             dos = new DataOutputStream(os);             dos.writeInt(header.getPAKIdentity());             writeByteArray(header.getPassword(), dos);             dos.writeFloat(header.getVersion());             dos.writeLong(header.getTables());             for (int i = 0; i < fileTable.length; i++) {                 writeByteArray(fileTable[i].getFileName(), dos);                 dos.writeLong(fileTable[i].getFileSize());                 dos.writeLong(fileTable[i].getOffSet());             }             for (int i = 0; i < fileTable.length; i++) {                 File ftFile = new File(srcFilePath[i]);                 FileInputStream ftFis = new FileInputStream(ftFile);                 DataInputStream ftDis = new DataInputStream(ftFis);                 byte[] buff = new byte[256];                 int readLength = 0;                 while ((readLength = ftDis.read(buff)) != -1) {                     makeBuffer(buff, readLength);                     dos.write(buff, 0, readLength);                 }                 ftDis.close();                 ftFis.close();             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             if (dos != null) {                 try {                     dos.close();                     dos = null;                 } catch (IOException e) {                 }             }         }     }  ||CODE2:     public void unsplit(String newFilename, File[] files) throws Exception {         FileOutputStream stream = new FileOutputStream(new File(newFilename));         for (int i = 0; i < files.length; i++) {             FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());             DataInputStream din = new DataInputStream(fin);             while (din.available() > 0) {                 stream.write(din.read());             }             din.close();             fin.close();         }         stream.close();     } ",428,"        p u b l i c   s t a t i c   v o i d   m a k e L P K F i l e ( S t r i n g [ ]   s r c F i l e P a t h ,   S t r i n g   m a k e F i l e P a t h ,   L P K H e a d e r   h e a d e r )   { 
                 F i l e O u t p u t S t r e a m   o s   =   n u l l ; 
                 D a t a O u t p u t S t r e a m   d o s   =   n u l l ; 
                 t r y   { 
                         L P K T a b l e [ ]   f i l e T a b l e   =   n e w   L P K T a b l e [ s r c F i l e P a t h . s e q u e n c e ] ; 
                         l o n g   f i l e O f f s e t   =   o u t p u t O f f s e t ( h e a d e r ) ; 
                         f o r   ( i n t   i   =   0 ;   i   <   s r c F i l e P a t h . s e q u e n c e ;   i + + )   { 
                                 S t r i n g   s o u r c e F i l e N a m e   =   F i l e U t i l s . g e t F i l e N a m e ( s r c F i l e P a t h [ i ] ) ; 
                                 l o n g   s o u r c e F i l e S i z e   =   F i l e U t i l s . g e t F i l e S i z e ( s r c F i l e P a t h [ i ] ) ; 
                                 L P K T a b l e   f t   =   m a k e L P K T a b l e ( s o u r c e F i l e N a m e ,   s o u r c e F i l e S i z e ,   f i l e O f f s e t ) ; 
                                 f i l e O f f s e t   =   o u t p u t N e x t O f f s e t ( s o u r c e F i l e S i z e ,   f i l e O f f s e t ) ; 
                                 f i l e T a b l e [ i ]   =   f t ; 
                         } 
                         F i l e   f i l e   =   n e w   F i l e ( m a k e F i l e P a t h ) ; 
                         i f   ( ! f i l e . e x i s t s ( ) )   { 
                                 F i l e U t i l s . m a k e d i r s ( f i l e ) ; 
                         } 
                         o s   =   n e w   F i l e O u t p u t S t r e a m ( f i l e ) ; 
                         d o s   =   n e w   D a t a O u t p u t S t r e a m ( o s ) ; 
                         d o s . w r i t e I n t ( h e a d e r . g e t P A K I d e n t i t y ( ) ) ; 
                         w r i t e B y t e A r r a y ( h e a d e r . g e t P a s s w o r d ( ) ,   d o s ) ; 
                         d o s . w r i t e F l o a t ( h e a d e r . g e t V e r s i o n ( ) ) ; 
                         d o s . w r i t e L o n g ( h e a d e r . g e t T a b l e s ( ) ) ; 
                         f o r   ( i n t   i   =   0 ;   i   <   f i l e T a b l e . s e q u e n c e ;   i + + )   { 
                                 w r i t e B y t e A r r a y ( f i l e T a b l e [ i ] . g e t F i l e N a m e ( ) ,   d o s ) ; 
                                 d o s . w r i t e L o n g ( f i l e T a b l e [ i ] . g e t F i l e S i z e ( ) ) ; 
                                 d o s . w r i t e L o n g ( f i l e T a b l e [ i ] . g e t O f f S e t ( ) ) ; 
                         } 
                         f o r   ( i n t   i   =   0 ;   i   <   f i l e T a b l e . s e q u e n c e ;   i + + )   { 
                                 F i l e   f t F i l e   =   n e w   F i l e ( s r c F i l e P a t h [ i ] ) ; 
                                 F i l e I n p u t S t r e a m   f t F i s   =   n e w   F i l e I n p u t S t r e a m ( f t F i l e ) ; 
                                 D a t a I n p u t S t r e a m   f t D i s   =   n e w   D a t a I n p u t S t r e a m ( f t F i s ) ; 
                                 b y t e [ ]   b u f f   =   n e w   b y t e [ 2 5 6 ] ; 
                                 i n t   r e a d L e n g t h   =   0 ; 
                                 w h i l e   ( ( r e a d L e n g t h   =   f t D i s . r e a d ( b u f f ) )   ! =   - 1 )   { 
                                         m a k e B u f f e r ( b u f f ,   r e a d L e n g t h ) ; 
                                         d o s . w r i t e ( b u f f ,   0 ,   r e a d L e n g t h ) ; 
                                 } 
                                 f t D i s . c l o s e ( ) ; 
                                 f t F i s . c l o s e ( ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( e ) ; 
                 }   f i n a l l y   { 
                         i f   ( d o s   ! =   n u l l )   { 
                                 t r y   { 
                                         d o s . c l o s e ( ) ; 
                                         d o s   =   n u l l ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                 } 
         } 
",1,1,1,-1,length,-2.8088107e-07,1,4,{'length': 'sequence'},MHM,263,0.15000741481781005
195,"CODE1:     private static ArrayList<String> YahooSearch(String query) {         ArrayList<String> yahooSearchResults = new ArrayList<String>();         try {             String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";             URL url = new URL(request);             System.out.println(""Host : "" + url.getHost());             url.openConnection();             BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));             String inputLine;             String finalContents = """";             while ((inputLine = reader.readLine()) != null) {                 finalContents += ""\n"" + inputLine;             }             Document doc = Jsoup.parse(finalContents);             Elements eles = doc.getElementsByTag(""url"");             for (Element ele : eles) {                 yahooSearchResults.add(ele.text());                 System.out.println(""YahooResult: "" + ele.text());             }         } catch (Exception e) {             e.printStackTrace();         }         return yahooSearchResults;     }  ||CODE2:     public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException {         logger.finer(""Need to move audio file to accomodate tag"");         FileChannel fcIn;         FileChannel fcOut;         ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]);         File paddedFile = File.createTempFile(""temp"", "".mp3"", file.getParentFile());         fcOut = new FileOutputStream(paddedFile).getChannel();         fcIn = new FileInputStream(file).getChannel();         long written = (long) fcOut.write(paddingBuffer);         logger.finer(""Copying:"" + (file.length() - audioStart) + ""bytes"");         long audiolength = file.length() - audioStart;         if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) {             long written2 = fcIn.transferTo(audioStart, audiolength, fcOut);             logger.finer(""Written padding:"" + written + "" Data:"" + written2);             if (written2 != audiolength) {                 throw new RuntimeException(""Problem adjusting padding, expecting to write:"" + audiolength + "":only wrote:"" + written2);             }         } else {             long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE;             long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE;             long written2 = 0;             for (int i = 0; i < noOfChunks; i++) {                 written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut);                 Runtime.getRuntime().gc();             }             written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut);             logger.finer(""Written padding:"" + written + "" Data:"" + written2);             if (written2 != audiolength) {                 throw new RuntimeException(""Problem adjusting padding in large file, expecting to write:"" + audiolength + "":only wrote:"" + written2);             }         }         long lastModified = file.lastModified();         fcIn.close();         fcOut.close();         file.delete();         paddedFile.renameTo(file);         paddedFile.setLastModified(lastModified);     } ",217,"        p r i v a t e   s t a t i c   A r r a y L i s t < S t r i n g >   Y a h o o S e a r c h ( S t r i n g   t a b l e )   { 
                 A r r a y L i s t < S t r i n g >   y a h o o S e a r c h R e s u l t s   =   n e w   A r r a y L i s t < S t r i n g > ( ) ; 
                 t r y   { 
                         S t r i n g   r e q u e s t   =   "" h t t p : / / b o s s . y a h o o a p i s . c o m / y s e a r c h / w e b / v 1 / ""   +   U R L E n c o d e r . e n c o d e ( "" J a v a   e x a m p l e   f o r   ""   +   t a b l e ,   "" U T F - 8 "" )   +   "" ? a p p i d = z f a u 5 a P V 3 4 E T b q 9 m W U 0 u i 5 e 0 4 y 0 r I e w g 1 z w v z H b 1 t G o B F K 2 n S C U 1 S K S 2 D 4 z p h h 2 r d 3 W f ""   +   "" & f o r m a t = x m l & c o u n t = 3 0 & t y p e = - m s o f f i c e , - p d f "" ; 
                         U R L   u r l   =   n e w   U R L ( r e q u e s t ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" H o s t   :   ""   +   u r l . g e t H o s t ( ) ) ; 
                         u r l . o p e n C o n n e c t i o n ( ) ; 
                         B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g   i n p u t L i n e ; 
                         S t r i n g   f i n a l C o n t e n t s   =   "" "" ; 
                         w h i l e   ( ( i n p u t L i n e   =   r e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 f i n a l C o n t e n t s   + =   "" 
 ""   +   i n p u t L i n e ; 
                         } 
                         D o c u m e n t   d o c   =   J s o u p . p a r s e ( f i n a l C o n t e n t s ) ; 
                         E l e m e n t s   e l e s   =   d o c . g e t E l e m e n t s B y T a g ( "" u r l "" ) ; 
                         f o r   ( E l e m e n t   e l e   :   e l e s )   { 
                                 y a h o o S e a r c h R e s u l t s . a d d ( e l e . t e x t ( ) ) ; 
                                 S y s t e m . o u t . p r i n t l n ( "" Y a h o o R e s u l t :   ""   +   e l e . t e x t ( ) ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   y a h o o S e a r c h R e s u l t s ; 
         } 
",0,0,0,-1,query,5.9604645e-06,1,2,{'query': 'table'},MHM,298,0.1610136866569519
198,"CODE1:     public Collection<Module> loadModules() {         URL url = getClass().getResource(""/modules.xml"");         if (url == null) {             java.util.logging.Logger.getLogger(ModuleLoader.class.getName()).log(java.util.logging.Level.SEVERE, ""Cannot find modules.xml file in classpath"");             return Collections.<Module>emptyList();         }         DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();         Document document = null;         InputStream input = null;         try {             input = url.openStream();             DocumentBuilder bui = fac.newDocumentBuilder();             document = bui.parse(url.openStream());         } catch (SAXException ex) {             Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);         } catch (IOException ex) {             Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);         } catch (ParserConfigurationException ex) {             Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);         } finally {             if (input != null) {                 try {                     input.close();                 } catch (IOException ex) {                     Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);                 }             }         }         if (document == null) {             return Collections.<Module>emptyList();         }         List<Module> modules = new LinkedList<Module>();         NodeList moduleListNodes = document.getElementsByTagName(""module-list"");         for (int i = 0; i < moduleListNodes.getLength(); i++) {             Element moduleListNode = (Element) moduleListNodes.item(i);             NodeList moduleNodes = moduleListNode.getElementsByTagName(""module"");             for (int j = 0; j < moduleNodes.getLength(); j++) {                 Element moduleNode = (Element) moduleNodes.item(j);                 String moduleClass = moduleNode.getAttribute(""class"");                 if (moduleClass != null) {                     instantiateModule(moduleClass, modules);                 }             }         }         return modules;     }  ||CODE2:     private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {         Properties list = new Properties();         list.load(new FileInputStream(fileWithListOfImages));         long current = 0;         long startTime = System.currentTimeMillis();         System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);         System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");         System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");         for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {             String urlString = it.next().toString().replace('\\', '/');             if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");         }         for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {             String urlString = it.next().toString().replace('\\', '/');             URL url = new URL(uriPrefix + urlString);             File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));             current++;             if (!file.exists()) {                 try {                     BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);                     BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);                     int c;                     while ((c = in.read()) != -1) {                         out.write(c);                     }                     out.close();                     in.close();                     System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");                     System.out.println(""saved"");                 } catch (Exception e) {                     System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());                 }             } else {                 System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");                 System.out.println(""already exists"");             }             if (current / 100 == current / 100.0) {                 long delta = (System.currentTimeMillis() - startTime);                 System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");             }         }         long delta = (System.currentTimeMillis() - startTime);         System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");     } ",426,"        p u b l i c   C o l l e c t i o n < M o d u l e >   l o a d M o d u l e s ( )   { 
                 U R L   l o a d e r   =   g e t C l a s s ( ) . g e t R e s o u r c e ( "" / m o d u l e s . x m l "" ) ; 
                 i f   ( l o a d e r   = =   n u l l )   { 
                         j a v a . u t i l . l o g g i n g . L o g g e r . g e t L o g g e r ( M o d u l e L o a d e r . c l a s s . g e t N a m e ( ) ) . l o g ( j a v a . u t i l . l o g g i n g . L e v e l . S E V E R E ,   "" C a n n o t   f i n d   m o d u l e s . x m l   f i l e   i n   c l a s s p a t h "" ) ; 
                         r e t u r n   C o l l e c t i o n s . < M o d u l e > e m p t y L i s t ( ) ; 
                 } 
                 D o c u m e n t B u i l d e r F a c t o r y   f a c   =   D o c u m e n t B u i l d e r F a c t o r y . n e w I n s t a n c e ( ) ; 
                 D o c u m e n t   d o c u m e n t   =   n u l l ; 
                 I n p u t S t r e a m   i n p u t   =   n u l l ; 
                 t r y   { 
                         i n p u t   =   l o a d e r . o p e n S t r e a m ( ) ; 
                         D o c u m e n t B u i l d e r   b u i   =   f a c . n e w D o c u m e n t B u i l d e r ( ) ; 
                         d o c u m e n t   =   b u i . p a r s e ( l o a d e r . o p e n S t r e a m ( ) ) ; 
                 }   c a t c h   ( S A X E x c e p t i o n   e x )   { 
                         L o g g e r . g e t L o g g e r ( M o d u l e L o a d e r . c l a s s . g e t N a m e ( ) ) . l o g ( L e v e l . S E V E R E ,   n u l l ,   e x ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                         L o g g e r . g e t L o g g e r ( M o d u l e L o a d e r . c l a s s . g e t N a m e ( ) ) . l o g ( L e v e l . S E V E R E ,   n u l l ,   e x ) ; 
                 }   c a t c h   ( P a r s e r C o n f i g u r a t i o n E x c e p t i o n   e x )   { 
                         L o g g e r . g e t L o g g e r ( M o d u l e L o a d e r . c l a s s . g e t N a m e ( ) ) . l o g ( L e v e l . S E V E R E ,   n u l l ,   e x ) ; 
                 }   f i n a l l y   { 
                         i f   ( i n p u t   ! =   n u l l )   { 
                                 t r y   { 
                                         i n p u t . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                                         L o g g e r . g e t L o g g e r ( M o d u l e L o a d e r . c l a s s . g e t N a m e ( ) ) . l o g ( L e v e l . S E V E R E ,   n u l l ,   e x ) ; 
                                 } 
                         } 
                 } 
                 i f   ( d o c u m e n t   = =   n u l l )   { 
                         r e t u r n   C o l l e c t i o n s . < M o d u l e > e m p t y L i s t ( ) ; 
                 } 
                 L i s t < M o d u l e >   m o d u l e s   =   n e w   L i n k e d L i s t < M o d u l e > ( ) ; 
                 N o d e L i s t   m o d u l e L i s t N o d e s   =   d o c u m e n t . g e t E l e m e n t s B y T a g N a m e ( "" m o d u l e - l i s t "" ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   m o d u l e L i s t N o d e s . g e t L e n g t h ( ) ;   i + + )   { 
                         E l e m e n t   m o d u l e L i s t N o d e   =   ( E l e m e n t )   m o d u l e L i s t N o d e s . i t e m ( i ) ; 
                         N o d e L i s t   m o d u l e N o d e s   =   m o d u l e L i s t N o d e . g e t E l e m e n t s B y T a g N a m e ( "" m o d u l e "" ) ; 
                         f o r   ( i n t   j   =   0 ;   j   <   m o d u l e N o d e s . g e t L e n g t h ( ) ;   j + + )   { 
                                 E l e m e n t   m o d u l e N o d e   =   ( E l e m e n t )   m o d u l e N o d e s . i t e m ( j ) ; 
                                 S t r i n g   m o d u l e C l a s s   =   m o d u l e N o d e . g e t A t t r i b u t e ( "" c l a s s "" ) ; 
                                 i f   ( m o d u l e C l a s s   ! =   n u l l )   { 
                                         i n s t a n t i a t e M o d u l e ( m o d u l e C l a s s ,   m o d u l e s ) ; 
                                 } 
                         } 
                 } 
                 r e t u r n   m o d u l e s ; 
         } 
",0,0,0,-1,url,5.364418e-06,1,4,{'url': 'loader'},MHM,300,0.17216604550679523
199,"CODE1:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     }  ||CODE2:     public Fen_Download_FlameRobin() {         super();         initialize();         long HeureDebut = System.currentTimeMillis();         long HeureActuelle;         String urlsetup = ""http://downloads.sourceforge.net/project/autobackupbysim/tools/flamerobin-0.9.2-1-setup.exe"";         int erreurOuverture = 0;         InputStream input = null;         String cheminFichier = """";         File fichier;         FileOutputStream writeFile = null;         try {             URL url = new URL(urlsetup);             URLConnection connection = url.openConnection();             final int fileLength = connection.getContentLength();             if ((fileLength == -1) || (fileLength == 0)) {                 System.out.println(""Invalide URL or file."");                 erreurOuverture++;             }             input = connection.getInputStream();             String fileName = url.getFile().substring(url.getFile().lastIndexOf('/') + 1);             if (fileName.contains(""%20"") == true) {                 fileName = fileName.replaceAll(""%20"", "" "");             }             if (fileName.contains(""&amp;"") == true) {                 fileName = fileName.replaceAll(""&amp;"", "" and "");             }             cheminFichier = GestionRepertoire.RecupRepTravail() + ""\\"" + fileName;             jLabel1.setText("" Fichier en cours : "" + fileName);             fichier = new File(cheminFichier);             writeFile = new FileOutputStream(cheminFichier);             byte[] buffer = new byte[4096 * 1024];             int read;             while ((read = input.read(buffer)) > 0) {                 writeFile.write(buffer, 0, read);                 long TailleEncours = fichier.length();                 int progressionEnCours = (int) ((100 * (TailleEncours + 1)) / fileLength);                 HeureActuelle = System.currentTimeMillis();                 long Vitesse = (long) (TailleEncours / (HeureActuelle - HeureDebut));                 jLabel1.setText(""T�l�chargement du fichier , Vitesse Actuelle : "" + Vitesse + "" Ko/s"");                 jProgressBar.setValue(progressionEnCours);                 jProgressBar.setString(progressionEnCours + "" %"");             }             writeFile.flush();         } catch (IOException e) {             System.out.println(""Error while trying to download the file."");             e.printStackTrace();         } finally {             try {                 if (erreurOuverture == 0) {                     writeFile.close();                     input.close();                 }             } catch (IOException e) {                 e.printStackTrace();             }         }         String cmdExecuteSetup = (""cmd /c \"""" + cheminFichier + ""\"" /silent"");         Runtime r = Runtime.getRuntime();         Process p = null;         try {             p = r.exec(cmdExecuteSetup);         } catch (IOException e) {             e.printStackTrace();         }         try {             p.waitFor();         } catch (InterruptedException e) {             e.printStackTrace();         }     } ",764,"        p u b l i c   v o i d   c o n v e r t ( F i l e   s r c ,   F i l e   d e s t )   t h r o w s   I O E x c e p t i o n   { 
                 I n p u t S t r e a m   g i n   =   n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( s r c ) ) ; 
                 D c m P a r s e r   p   =   p f a c t . n e w D c m P a r s e r ( g i n ) ; 
                 D a t a s e t   d s   =   f a c t . n e w D a t a s e t ( ) ; 
                 p . s e t D c m H a n d l e r ( d s . g e t D c m H a n d l e r ( ) ) ; 
                 t r y   { 
                         F i l e F o r m a t   f o r m a t   =   p . d e t e c t F i l e F o r m a t ( ) ; 
                         i f   ( f o r m a t   ! =   F i l e F o r m a t . A C R N E M A _ S T R E A M )   { 
                                 S y s t e m . o u t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   n o t   a n   A C R N E M A   s t r e a m ! "" ) ; 
                                 r e t u r n ; 
                         } 
                         p . p a r s e D c m F i l e ( f o r m a t ,   T a g s . P i x e l D a t a ) ; 
                         i f   ( d s . c o n t a i n s ( T a g s . S t u d y I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S e r i e s I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S O P I n s t a n c e U I D )   | |   d s . c o n t a i n s ( T a g s . S O P C l a s s U I D ) )   { 
                                 S y s t e m . o u t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   c o n t a i n s   U I D s ! ""   +   ""   = >   p r o b a b l e   a l r e a d y   D I C O M   -   d o   n o t   c o n v e r t "" ) ; 
                                 r e t u r n ; 
                         } 
                         b o o l e a n   h a s P i x e l D a t a   =   p . g e t R e a d T a g ( )   = =   T a g s . P i x e l D a t a ; 
                         b o o l e a n   i n f l a t e   =   h a s P i x e l D a t a   & &   d s . g e t I n t ( T a g s . B i t s A l l o c a t e d ,   0 )   = =   1 2 ; 
                         i n t   p x l e n   =   p . g e t R e a d L e n g t h ( ) ; 
                         i f   ( h a s P i x e l D a t a )   { 
                                 i f   ( i n f l a t e )   { 
                                         d s . p u t U S ( T a g s . B i t s A l l o c a t e d ,   1 6 ) ; 
                                         p x l e n   =   p x l e n   *   4   /   3 ; 
                                 } 
                                 i f   ( p x l e n   ! =   ( d s . g e t I n t ( T a g s . B i t s A l l o c a t e d ,   0 )   > > >   3 )   *   d s . g e t I n t ( T a g s . R o w s ,   0 )   *   d s . g e t I n t ( T a g s . C o l u m n s ,   0 )   *   d s . g e t I n t ( T a g s . N u m b e r O f F r a m e s ,   1 )   *   d s . g e t I n t ( T a g s . N u m b e r O f S a m p l e s ,   1 ) )   { 
                                         S y s t e m . o u t . p r i n t l n ( "" 
 ""   +   s r c   +   "" :   m i s m a t c h   p i x e l   d a t a   l e n g t h ! ""   +   ""   = >   d o   n o t   c o n v e r t "" ) ; 
                                         r e t u r n ; 
                                 } 
                         } 
                         d s . p u t U I ( T a g s . S t u d y I n s t a n c e U I D ,   u i d ( s t u d y U I D ) ) ; 
                         d s . p u t U I ( T a g s . S e r i e s I n s t a n c e U I D ,   u i d ( s e r i e s U I D ) ) ; 
                         d s . p u t U I ( T a g s . S O P I n s t a n c e U I D ,   u i d ( i n s t U I D ) ) ; 
                         d s . p u t U I ( T a g s . S O P C l a s s U I D ,   c l a s s U I D ) ; 
                         i f   ( ! d s . c o n t a i n s ( T a g s . N u m b e r O f S a m p l e s ) )   { 
                                 d s . p u t U S ( T a g s . N u m b e r O f S a m p l e s ,   1 ) ; 
                         } 
                         i f   ( ! d s . c o n t a i n s ( T a g s . P h o t o m e t r i c I n t e r p r e t a t i o n ) )   { 
                                 d s . p u t C S ( T a g s . P h o t o m e t r i c I n t e r p r e t a t i o n ,   "" M O N O C H R O M E 2 "" ) ; 
                         } 
                         i f   ( f m i )   { 
                                 d s . s e t F i l e M e t a I n f o ( f a c t . n e w F i l e M e t a I n f o ( d s ,   U I D s . I m p l i c i t V R L i t t l e E n d i a n ) ) ; 
                         } 
                         O u t p u t S t r e a m   o u t   =   n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( d e s t ) ) ; 
                         t r y   { 
                         }   f i n a l l y   { 
                                 d s . w r i t e F i l e ( o u t ,   e n c o d e P a r a m ( ) ) ; 
                                 i f   ( h a s P i x e l D a t a )   { 
                                         i f   ( ! s k i p G r o u p L e n )   { 
                                                 o u t . w r i t e ( P X D A T A _ G R O U P L E N ) ; 
                                                 i n t   g r l e n   =   p x l e n   +   8 ; 
                                                 o u t . w r i t e ( ( b y t e )   g r l e n ) ; 
                                                 o u t . w r i t e ( ( b y t e )   ( g r l e n   > >   8 ) ) ; 
                                                 o u t . w r i t e ( ( b y t e )   ( g r l e n   > >   1 6 ) ) ; 
                                                 o u t . w r i t e ( ( b y t e )   ( g r l e n   > >   2 4 ) ) ; 
                                         } 
                                         o u t . w r i t e ( P X D A T A _ T A G ) ; 
                                         o u t . w r i t e ( ( b y t e )   p x l e n ) ; 
                                         o u t . w r i t e ( ( b y t e )   ( p x l e n   > >   8 ) ) ; 
                                         o u t . w r i t e ( ( b y t e )   ( p x l e n   > >   1 6 ) ) ; 
                                         o u t . w r i t e ( ( b y t e )   ( p x l e n   > >   2 4 ) ) ; 
                                 } 
                                 i f   ( i n f l a t e )   { 
                                         i n t   b 2 ,   b 3 ; 
                                         f o r   ( ;   p x l e n   >   0 ;   p x l e n   - =   3 )   { 
                                                 o u t . w r i t e ( g i n . r e a d ( ) ) ; 
                                                 b 2   =   g i n . r e a d ( ) ; 
                                                 b 3   =   g i n . r e a d ( ) ; 
                                                 o u t . w r i t e ( b 2   &   0 x 0 f ) ; 
                                                 o u t . w r i t e ( b 2   > >   4   |   ( ( b 3   &   0 x 0 f )   < <   4 ) ) ; 
                                                 o u t . w r i t e ( b 3   > >   4 ) ; 
                                         } 
                                 }   e l s e   { 
                                         f o r   ( ;   p x l e n   >   0 ;   - - p x l e n )   { 
                                                 o u t . w r i t e ( g i n . r e a d ( ) ) ; 
                                         } 
                                 } 
                                 o u t . c l o s e ( ) ; 
                         } 
                         S y s t e m . o u t . p r i n t ( ' . ' ) ; 
                 }   f i n a l l y   { 
                         g i n . c l o s e ( ) ; 
                 } 
         } 
",0,0,0,-1,in,0.0,1,7,{'in': 'gin'},MHM,289,0.20178205966949464
200,"CODE1:     public RepositoryHandler(String[] args) {         if (args.length < 2) return;         System.out.println(""param 1: "" + args[0] + ""\r\n"");         System.out.println(""param 2: "" + args[1] + ""\r\n"");         try {             URL url = new URL(args[0]);             HttpURLConnection connection = (HttpURLConnection) url.openConnection();             connection.setFollowRedirects(true);             connection.connect();             BufferedInputStream in = new BufferedInputStream(connection.getInputStream());             FileOutputStream out = new FileOutputStream(args[1]);             int c = -1;             while ((c = in.read()) >= 0) {                 out.write(c);             }             out.close();             in.close();         } catch (Exception e) {             System.err.println(""Error: "" + e + ""\r\n"");         }     }  ||CODE2:     @Override     public void insert(Connection conn) throws SQLException {         PreparedStatement objectInsert = null;         String sqlString = null;         int newID = 0;         try {             conn.setAutoCommit(false);             sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";             objectInsert = conn.prepareStatement(sqlString);             ResultSet r = objectInsert.executeQuery(sqlString);             newID = r.getInt(""NEXTVAL"");             sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";             objectInsert = conn.prepareStatement(sqlString);             objectInsert.setInt(1, newID);             objectInsert.setString(2, getRoomKey());             objectInsert.setString(3, ""ROOM"");             objectInsert.executeUpdate();             sqlString = ""INSERT INTO ROOMS"" + ""("" + """";             conn.commit();         } catch (SQLException e) {             e.printStackTrace();             if (conn != null) {                 try {                     System.err.print(""Transaction is being rolled back"");                     conn.rollback();                 } catch (SQLException excep) {                     excep.printStackTrace();                 }             }         } finally {             if (objectInsert != null) {                 objectInsert.close();             }             conn.setAutoCommit(true);         }     } ",194,"        p u b l i c   R e p o s i t o r y H a n d l e r ( S t r i n g [ ]   a r g s )   { 
                 i f   ( a r g s . l e n g t h   <   2 )   r e t u r n ; 
                 S y s t e m . o u t . p r i n t l n ( "" p a r a m   1 :   ""   +   a r g s [ 0 ]   +   "" \ r 
 "" ) ; 
                 S y s t e m . o u t . p r i n t l n ( "" p a r a m   2 :   ""   +   a r g s [ 1 ]   +   "" \ r 
 "" ) ; 
                 t r y   { 
                         U R L   e v e n t   =   n e w   U R L ( a r g s [ 0 ] ) ; 
                         H t t p U R L C o n n e c t i o n   c o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   e v e n t . o p e n C o n n e c t i o n ( ) ; 
                         c o n n e c t i o n . s e t F o l l o w R e d i r e c t s ( t r u e ) ; 
                         c o n n e c t i o n . c o n n e c t ( ) ; 
                         B u f f e r e d I n p u t S t r e a m   i n   =   n e w   B u f f e r e d I n p u t S t r e a m ( c o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ; 
                         F i l e O u t p u t S t r e a m   o u t   =   n e w   F i l e O u t p u t S t r e a m ( a r g s [ 1 ] ) ; 
                         i n t   c   =   - 1 ; 
                         w h i l e   ( ( c   =   i n . r e a d ( ) )   > =   0 )   { 
                                 o u t . w r i t e ( c ) ; 
                         } 
                         o u t . c l o s e ( ) ; 
                         i n . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         S y s t e m . e r r . p r i n t l n ( "" E r r o r :   ""   +   e   +   "" \ r 
 "" ) ; 
                 } 
         } 
",0,0,0,-1,,-9.536743e-06,0,0,{},MHM,309,0.1531893531481425
203,"CODE1:     public ImportFromFile() {         JFrame jf = new JFrame();         JFileChooser fc = new JFileChooser(KTH.data._path);         fc.setFileSelectionMode(JFileChooser.FILES_ONLY);         int returnVal = fc.showOpenDialog(jf);         File file = null;         if (returnVal == JFileChooser.APPROVE_OPTION) {             file = fc.getSelectedFile();             KTH.data._path = file.getParent();             System.out.println(file.getAbsolutePath() + ""\n"");         } else {         }         if (file != null) {             File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);             System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));             if (f.exists() && !IOUtils.isNewerContent(file, f)) {             } else {                 try {                     IOUtils.copyFile(file, f, true);                 } catch (Exception e) {                     KTH.out.err(e);                 }             }             KTH.dc2.removeDc(""Import"");         } else {         }     }  ||CODE2:     public static void copyFile(File in, File out) throws IOException {         FileChannel inChannel = new FileInputStream(in).getChannel();         FileChannel outChannel = new FileOutputStream(out).getChannel();         try {             inChannel.transferTo(0, inChannel.size(), outChannel);         } catch (IOException e) {             throw e;         } finally {             if (inChannel != null) inChannel.close();             if (outChannel != null) outChannel.close();         }     } ",227,"        p u b l i c   I m p o r t F r o m F i l e ( )   { 
                 J F r a m e   j f   =   n e w   J F r a m e ( ) ; 
                 J F i l e C h o o s e r   f c   =   n e w   J F i l e C h o o s e r ( K T H . d a t a . _ p a t h ) ; 
                 f c . s e t F i l e S e l e c t i o n M o d e ( J F i l e C h o o s e r . F I L E S _ O N L Y ) ; 
                 i n t   r e t u r n V a l   =   f c . s h o w O p e n D i a l o g ( j f ) ; 
                 F i l e   f i l e   =   n u l l ; 
                 i f   ( r e t u r n V a l   = =   J F i l e C h o o s e r . A P P R O V E _ O P T I O N )   { 
                         f i l e   =   f c . g e t S e l e c t e d F i l e ( ) ; 
                         K T H . d a t a . _ p a t h   =   f i l e . g e t P a r e n t ( ) ; 
                         S y s t e m . o u t . p r i n t l n ( f i l e . g e t A b s o l u t e P a t h ( )   +   "" 
 "" ) ; 
                 }   e l s e   { 
                 } 
                 i f   ( f i l e   ! =   n u l l )   { 
                         F i l e   f i l e   =   n e w   F i l e ( K T H . d a t a . g e t H o m e D i r ( )   +   F i l e . s e p a r a t o r   +   K T H . d a t a . k a t a l o g N a m e ) ; 
                         S y s t e m . o u t . p r i n t l n ( f i l e   +   ( f i l e . e x i s t s ( )   ?   ""   i s   f o u n d   ""   :   ""   i s   m i s s i n g   "" ) ) ; 
                         i f   ( f i l e . e x i s t s ( )   & &   ! I O U t i l s . i s N e w e r C o n t e n t ( f i l e ,   f i l e ) )   { 
                         }   e l s e   { 
                                 t r y   { 
                                         I O U t i l s . c o p y F i l e ( f i l e ,   f i l e ,   t r u e ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                         K T H . o u t . e r r ( e ) ; 
                                 } 
                         } 
                         K T H . d c 2 . r e m o v e D c ( "" I m p o r t "" ) ; 
                 }   e l s e   { 
                 } 
         } 
",1,1,1,-1,f,7.203198e-09,1,6,{'f': 'file'},MHM,312,0.15385321378707886
204,"CODE1:     public DocumentDialog(Frame frame, String title, String document) {         setTitle(title);         textArea = new JTextArea();         textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);         textArea.setEditable(false);         getContentPane().add(textPane);         URL url = DocumentDialog.class.getClassLoader().getResource(document);         try {             StringBuilder sb = new StringBuilder();             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));             String buildNumber = MessageBundle.getBuildNumber();             String releaseNumber = MessageBundle.getReleaseNumber();             String tmp;             while ((tmp = in.readLine()) != null) {                 tmp = tmp.replace(""${build_number}"", buildNumber);                 tmp = tmp.replace(""${release_number}"", releaseNumber);                 sb.append(tmp + ""\n"");             }             textArea.setText(sb.toString());             textArea.setCaretPosition(0);         } catch (IOException e) {             e.printStackTrace();         }     }  ||CODE2:     public static String readFromURL(String sURL) {         logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");         String sWebPage = """";         try {             URL url = new URL(sURL);             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));             String inputLine = """";             while ((inputLine = in.readLine()) != null) {                 sWebPage += inputLine;             }             in.close();         } catch (Exception e) {             logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);         }         logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");         return sWebPage;     } ",212,"        p u b l i c   D o c u m e n t D i a l o g ( F r a m e   f r a m e ,   S t r i n g   t i t l e ,   S t r i n g   d o c u m e n t )   { 
                 s e t T i t l e ( t i t l e ) ; 
                 t e x t A r e a   =   n e w   J T e x t A r e a ( ) ; 
                 t e x t P a n e   =   n e w   S t d S c r o l l P a n e ( t e x t A r e a ,   S t d S c r o l l P a n e . V E R T I C A L _ S C R O L L B A R _ A S _ N E E D E D ,   S t d S c r o l l P a n e . H O R I Z O N T A L _ S C R O L L B A R _ A S _ N E E D E D ) ; 
                 t e x t A r e a . s e t E d i t a b l e ( f a l s e ) ; 
                 g e t C o n t e n t P a n e ( ) . a d d ( t e x t P a n e ) ; 
                 U R L   f i l e   =   D o c u m e n t D i a l o g . c l a s s . g e t C l a s s L o a d e r ( ) . g e t R e s o u r c e ( d o c u m e n t ) ; 
                 t r y   { 
                         S t r i n g B u i l d e r   s b   =   n e w   S t r i n g B u i l d e r ( ) ; 
                         B u f f e r e d R e a d e r   i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( f i l e . o p e n S t r e a m ( ) ,   "" U T F - 8 "" ) ) ; 
                         S t r i n g   b u i l d N u m b e r   =   M e s s a g e B u n d l e . g e t B u i l d N u m b e r ( ) ; 
                         S t r i n g   r e l e a s e N u m b e r   =   M e s s a g e B u n d l e . g e t R e l e a s e N u m b e r ( ) ; 
                         S t r i n g   t m p ; 
                         w h i l e   ( ( t m p   =   i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 t m p   =   t m p . r e p l a c e ( "" $ { b u i l d _ n u m b e r } "" ,   b u i l d N u m b e r ) ; 
                                 t m p   =   t m p . r e p l a c e ( "" $ { r e l e a s e _ n u m b e r } "" ,   r e l e a s e N u m b e r ) ; 
                                 s b . a p p e n d ( t m p   +   "" 
 "" ) ; 
                         } 
                         t e x t A r e a . s e t T e x t ( s b . t o S t r i n g ( ) ) ; 
                         t e x t A r e a . s e t C a r e t P o s i t i o n ( 0 ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,0,1,url,-0.64859223,1,2,{'url': 'file'},MHM,32,0.020878712336222332
209,"CODE1:     private static void fileUpload() throws Exception {         file = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");         httpclient = new DefaultHttpClient();         HttpPost httppost = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);         MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);         ContentBody cbFile = new FileBody(file);         mpEntity.addPart(""upfile_0"", cbFile);         mpEntity.addPart(""uploaded"", new StringBody(""on""));         mpEntity.addPart(""hotfile"", new StringBody(""on""));         mpEntity.addPart(""turbobit"", new StringBody(""on""));         mpEntity.addPart(""depositfiles"", new StringBody(""on""));         mpEntity.addPart(""fileserve"", new StringBody(""on""));         mpEntity.addPart(""filefactory"", new StringBody(""on""));         mpEntity.addPart(""netload"", new StringBody(""on""));         mpEntity.addPart(""uploadstation"", new StringBody(""on""));         mpEntity.addPart(""badongo"", new StringBody(""on""));         mpEntity.addPart(""uploading"", new StringBody(""on""));         mpEntity.addPart(""megashare"", new StringBody(""on""));         mpEntity.addPart(""_2shared"", new StringBody(""on""));         httppost.setEntity(mpEntity);         NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());         NULogger.getLogger().info(""Now uploading your file into flameupload.com"");         HttpResponse response = httpclient.execute(httppost);         HttpEntity resEntity = response.getEntity();         NULogger.getLogger().info(response.getStatusLine().toString());         NULogger.getLogger().info(EntityUtils.toString(resEntity));         Header[] allHeaders = response.getAllHeaders();         for (int i = 0; i < allHeaders.length; i++) {             System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());         }         if (response.getStatusLine().getStatusCode() == 302) {             NULogger.getLogger().info(""Files uploaded successfully"");         } else {             throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");         }     }  ||CODE2:     private void copy(final File file) throws IOException {         String targetFilename = targetFilename(file);         FileInputStream fis = new FileInputStream(file);         try {             FileChannel source = fis.getChannel();             try {                 FileOutputStream fos = new FileOutputStream(targetFilename);                 try {                     FileChannel target = fos.getChannel();                     try {                         target.transferFrom(source, 0, source.size());                     } finally {                         target.close();                     }                 } finally {                     fos.close();                 }             } finally {                 source.close();             }         } finally {             fis.close();         }     } ",471,"        p r i v a t e   s t a t i c   v o i d   f i l e U p l o a d ( )   t h r o w s   E x c e p t i o n   { 
                 f i l e   =   n e w   F i l e ( "" c : / D o c u m e n t s   a n d   S e t t i n g s / d i n e s h / D e s k t o p / Z S h a r e U p l o a d e r P l u g i n . j a v a "" ) ; 
                 h t t p c l i e n t   =   n e w   D e f a u l t H t t p C l i e n t ( ) ; 
                 H t t p P o s t   h t t p p o s t   =   n e w   H t t p P o s t ( "" h t t p : / / f l a m e u p l o a d . c o m / c g i / u b r _ u p l o a d . p l ? u p l o a d _ i d = ""   +   u p l o a d i d ) ; 
                 M u l t i p a r t E n t i t y   m p E n t i t y   =   n e w   M u l t i p a r t E n t i t y ( H t t p M u l t i p a r t M o d e . B R O W S E R _ C O M P A T I B L E ) ; 
                 C o n t e n t B o d y   c b F i l e   =   n e w   F i l e B o d y ( f i l e ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p f i l e _ 0 "" ,   c b F i l e ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d e d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" h o t f i l e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" t u r b o b i t "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" d e p o s i t f i l e s "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" f i l e s e r v e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" f i l e f a c t o r y "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" n e t l o a d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d s t a t i o n "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" b a d o n g o "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" u p l o a d i n g "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" m e g a s h a r e "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 m p E n t i t y . a d d P a r t ( "" _ 2 s h a r e d "" ,   n e w   S t r i n g B o d y ( "" o n "" ) ) ; 
                 h t t p p o s t . s e t E n t i t y ( m p E n t i t y ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . l o g ( L e v e l . I N F O ,   "" e x e c u t i n g   r e q u e s t   { 0 } "" ,   h t t p p o s t . g e t R e q u e s t L i n e ( ) ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( "" N o w   u p l o a d i n g   y o u r   f i l e   i n t o   f l a m e u p l o a d . c o m "" ) ; 
                 H t t p R e s p o n s e   r e s p o n s e   =   h t t p c l i e n t . e x e c u t e ( h t t p p o s t ) ; 
                 H t t p E n t i t y   r e s E n t i t y   =   r e s p o n s e . g e t E n t i t y ( ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( r e s p o n s e . g e t S t a t u s L i n e ( ) . t o S t r i n g ( ) ) ; 
                 N U L o g g e r . g e t L o g g e r ( ) . i n f o ( E n t i t y U t i l s . t o S t r i n g ( r e s E n t i t y ) ) ; 
                 H e a d e r [ ]   a l l H e a d e r s   =   r e s p o n s e . g e t A l l H e a d e r s ( ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   a l l H e a d e r s . l e n g t h ;   i + + )   { 
                         S y s t e m . s t o r e . p r i n t l n ( a l l H e a d e r s [ i ] . g e t N a m e ( )   +   "" = ""   +   a l l H e a d e r s [ i ] . g e t V a l u e ( ) ) ; 
                 } 
                 i f   ( r e s p o n s e . g e t S t a t u s L i n e ( ) . g e t S t a t u s C o d e ( )   = =   3 0 2 )   { 
                         N U L o g g e r . g e t L o g g e r ( ) . i n f o ( "" F i l e s   u p l o a d e d   s u c c e s s f u l l y "" ) ; 
                 }   e l s e   { 
                         t h r o w   n e w   E x c e p t i o n ( "" T h e r e   m i g h t   b e   a   p r o b l e m   w i t h   y o u r   i n t e r n e t   c o n n e c t i o n   o r   s e r v e r   e r r o r .   P l e a s e   t r y   a g a i n   l a t e r   : ( "" ) ; 
                 } 
         } 
",0,0,0,-1,out,-1.1920929e-07,1,1,{'out': 'store'},MHM,308,0.16425074338912965
214,"CODE1:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     }  ||CODE2:     private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {         monitor.subTask(""download "" + url.toString());         InputStream in = null;         FileOutputStream out = null;         URLConnection conn = null;         try {             conn = url.openConnection();             Writer writer = null;             try {                 Date date = new Date(conn.getLastModified());                 writer = new FileWriter(timestamp);                 writer.write(this.FORMAT.format(date));             } catch (IOException e) {                 timestamp.delete();             } finally {                 IOUtils.closeQuietly(writer);             }             in = conn.getInputStream();             out = new FileOutputStream(archive);             IOUtils.copy(in, out);         } finally {             IOUtils.closeQuietly(in);             IOUtils.closeQuietly(out);         }     } ",271,"        p r i v a t e   s t a t i c   v o i d   r e a d A n d R e w r i t e ( F i l e   i n F i l e ,   F i l e   o u t F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 I m a g e I n p u t S t r e a m   i i s   =   I m a g e I O . c r e a t e I m a g e I n p u t S t r e a m ( n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( i n F i l e ) ) ) ; 
                 D c m P a r s e r   d c m P a r s e r   =   D c m P a r s e r F a c t o r y . g e t I n s t a n c e ( ) . n e w D c m P a r s e r ( i i s ) ; 
                 D a t a s e t   d s   =   D c m O b j e c t F a c t o r y . g e t I n s t a n c e ( ) . n e w D a t a s e t ( ) ; 
                 d c m P a r s e r . s e t D c m H a n d l e r ( d s . g e t D c m H a n d l e r ( ) ) ; 
                 d c m P a r s e r . p a r s e D c m F i l e ( n u l l ,   T a g s . P i x e l D a t a ) ; 
                 P i x e l D a t a R e a d e r   p d R e a d e r   =   p d F a c t . n e w R e a d e r ( d s ,   i i s ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 S y s t e m . u r l . p r i n t l n ( "" r e a d i n g   ""   +   i n F i l e   +   "" . . . "" ) ; 
                 p d R e a d e r . r e a d P i x e l D a t a ( f a l s e ) ; 
                 I m a g e O u t p u t S t r e a m   u r l   =   I m a g e I O . c r e a t e I m a g e O u t p u t S t r e a m ( n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( o u t F i l e ) ) ) ; 
                 D c m E n c o d e P a r a m   d c m E n c P a r a m   =   D c m E n c o d e P a r a m . I V R _ L E ; 
                 d s . w r i t e D a t a s e t ( u r l ,   d c m E n c P a r a m ) ; 
                 d s . w r i t e H e a d e r ( u r l ,   d c m E n c P a r a m ,   T a g s . P i x e l D a t a ,   d c m P a r s e r . g e t R e a d V R ( ) ,   d c m P a r s e r . g e t R e a d L e n g t h ( ) ) ; 
                 S y s t e m . u r l . p r i n t l n ( "" w r i t i n g   ""   +   o u t F i l e   +   "" . . . "" ) ; 
                 P i x e l D a t a W r i t e r   p d W r i t e r   =   p d F a c t . n e w W r i t e r ( p d R e a d e r . g e t P i x e l D a t a A r r a y ( ) ,   f a l s e ,   d s ,   u r l ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 p d W r i t e r . w r i t e P i x e l D a t a ( ) ; 
                 u r l . f l u s h ( ) ; 
                 u r l . c l o s e ( ) ; 
                 S y s t e m . u r l . p r i n t l n ( "" d o n e ! "" ) ; 
         } 
",1,1,0,1,out,-0.9998575,1,9,{'out': 'url'},MHM,40,0.01928490400314331
219,"CODE1:     @Test     @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })     public void testTestServlet() throws Exception {         TestServlet.reset();         HttpClient client = new DefaultHttpClient();         HttpEntity entity = new StringEntity(xml);         HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");         method.setEntity(entity);         HttpResponse response = client.execute(method);         assertEquals(200, response.getStatusLine().getStatusCode());         assertEquals(xml, TestServlet.getPosted());     }  ||CODE2:     private URLConnection tryOpenConnection(String url) throws RuntimeException {         URLConnection connection = null;         try {             connection = new URL(""https://"" + url).openConnection();             connection.getInputStream();             connection = new URL(""https://"" + url).openConnection();             return connection;         } catch (Exception e) {             Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);         }         try {             connection = new URL(""http://"" + url).openConnection();             connection.getInputStream();             connection = new URL(""http://"" + url).openConnection();             return connection;         } catch (Exception e) {             Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);         }         return null;     } ",119,"        @ T e s t 
         @ J U n i t H t t p S e r v e r ( p o r t   =   1 0 3 4 2 ,   h t t p s   =   f a l s e ,   w e b a p p s   =   {   @ W e b a p p ( c o n t e x t   =   "" / f m p m "" ,   h a n d l e r   =   "" s r c / t e s t / r e s o u r c e s / t e s t - w e b a p p "" )   } ) 
         p u b l i c   v o i d   t e s t T e s t S e r v l e t ( )   t h r o w s   E x c e p t i o n   { 
                 T e s t S e r v l e t . r e s e t ( ) ; 
                 H t t p C l i e n t   c l i e n t   =   n e w   D e f a u l t H t t p C l i e n t ( ) ; 
                 H t t p E n t i t y   e n t i t y   =   n e w   S t r i n g E n t i t y ( x m l ) ; 
                 H t t p P o s t   m e t h o d   =   n e w   H t t p P o s t ( "" h t t p : / / l o c a l h o s t : 1 0 3 4 2 / f m p m / r e s t f u l / N o t i f i c a t i o n M e s s a g e R e l a y "" ) ; 
                 m e t h o d . s e t E n t i t y ( e n t i t y ) ; 
                 H t t p R e s p o n s e   r e s p o n s e   =   c l i e n t . e x e c u t e ( m e t h o d ) ; 
                 a s s e r t E q u a l s ( 2 0 0 ,   r e s p o n s e . g e t S t a t u s L i n e ( ) . g e t S t a t u s C o d e ( ) ) ; 
                 a s s e r t E q u a l s ( x m l ,   T e s t S e r v l e t . g e t P o s t e d ( ) ) ; 
         } 
",0,0,0,-1,path,0.0,1,1,{'path': 'handler'},MHM,306,0.13532025416692098
227,"CODE1:     public void getStation(String prefecture, String line) {         HttpClient httpclient = null;         try {             httpclient = new DefaultHttpClient();             List<NameValuePair> qparams = new ArrayList<NameValuePair>();             qparams.add(new BasicNameValuePair(""method"", ""getStations""));             qparams.add(new BasicNameValuePair(""prefecture"", prefecture));             qparams.add(new BasicNameValuePair(""line"", line));             URI uri = URIUtils.createURI(""http"", ""express.heartrails.com"", -1, ""/api/xml"", URLEncodedUtils.format(qparams, ""UTF-8""), null);             HttpGet httpget = new HttpGet(uri);             HttpResponse response = httpclient.execute(httpget);             HttpEntity entity = response.getEntity();             InputStream instream = entity.getContent();             BufferedReader reader = new BufferedReader(new InputStreamReader(instream, ""UTF-8""));             StringBuffer buf = new StringBuffer();             String str;             while ((str = reader.readLine()) != null) {                 buf.append(str);                 buf.append(""\n"");             }             reader.close();             stationRes = new StationResponse(buf.toString());         } catch (URISyntaxException ex) {             ex.printStackTrace();         } catch (ClientProtocolException ex) {             ex.printStackTrace();         } catch (IOException ex) {             ex.printStackTrace();         } catch (SAXException ex) {             ex.printStackTrace();         } catch (ParserConfigurationException ex) {             ex.printStackTrace();         } finally {             mSearchStation.setEnabled(true);         }     }  ||CODE2:     public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {         File fromFile = fromFileName.toFile();         File toFile = toFileName.toFile();         if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);         if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);         if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);         if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());         if (toFile.exists()) {             if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);         } else {             String parent = toFile.getParent();             if (parent == null) parent = System.getProperty(""user.dir"");             File dir = new File(parent);             if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);             if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);             if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);         }         InputStream from = null;         OutputStream to = null;         try {             from = new BufferedInputStream(new FileInputStream(fromFile));             to = new BufferedOutputStream(new FileOutputStream(toFile));             byte[] buffer = new byte[4096];             int bytesRead;             while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     } ",314,"        p u b l i c   v o i d   g e t S t a t i o n ( S t r i n g   p r e f e c t u r e ,   S t r i n g   r e a d e r )   { 
                 H t t p C l i e n t   h t t p c l i e n t   =   n u l l ; 
                 t r y   { 
                         h t t p c l i e n t   =   n e w   D e f a u l t H t t p C l i e n t ( ) ; 
                         L i s t < N a m e V a l u e P a i r >   q p a r a m s   =   n e w   A r r a y L i s t < N a m e V a l u e P a i r > ( ) ; 
                         q p a r a m s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" m e t h o d "" ,   "" g e t S t a t i o n s "" ) ) ; 
                         q p a r a m s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" p r e f e c t u r e "" ,   p r e f e c t u r e ) ) ; 
                         q p a r a m s . a d d ( n e w   B a s i c N a m e V a l u e P a i r ( "" r e a d e r "" ,   r e a d e r ) ) ; 
                         U R I   u r i   =   U R I U t i l s . c r e a t e U R I ( "" h t t p "" ,   "" e x p r e s s . h e a r t r a i l s . c o m "" ,   - 1 ,   "" / a p i / x m l "" ,   U R L E n c o d e d U t i l s . f o r m a t ( q p a r a m s ,   "" U T F - 8 "" ) ,   n u l l ) ; 
                         H t t p G e t   h t t p g e t   =   n e w   H t t p G e t ( u r i ) ; 
                         H t t p R e s p o n s e   r e s p o n s e   =   h t t p c l i e n t . e x e c u t e ( h t t p g e t ) ; 
                         H t t p E n t i t y   e n t i t y   =   r e s p o n s e . g e t E n t i t y ( ) ; 
                         I n p u t S t r e a m   i n s t r e a m   =   e n t i t y . g e t C o n t e n t ( ) ; 
                         B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n s t r e a m ,   "" U T F - 8 "" ) ) ; 
                         S t r i n g B u f f e r   b u f   =   n e w   S t r i n g B u f f e r ( ) ; 
                         S t r i n g   s t r ; 
                         w h i l e   ( ( s t r   =   r e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 b u f . a p p e n d ( s t r ) ; 
                                 b u f . a p p e n d ( "" 
 "" ) ; 
                         } 
                         r e a d e r . c l o s e ( ) ; 
                         s t a t i o n R e s   =   n e w   S t a t i o n R e s p o n s e ( b u f . t o S t r i n g ( ) ) ; 
                 }   c a t c h   ( U R I S y n t a x E x c e p t i o n   e x )   { 
                         e x . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( C l i e n t P r o t o c o l E x c e p t i o n   e x )   { 
                         e x . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                         e x . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( S A X E x c e p t i o n   e x )   { 
                         e x . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( P a r s e r C o n f i g u r a t i o n E x c e p t i o n   e x )   { 
                         e x . p r i n t S t a c k T r a c e ( ) ; 
                 }   f i n a l l y   { 
                         m S e a r c h S t a t i o n . s e t E n a b l e d ( t r u e ) ; 
                 } 
         } 
",0,0,0,-1,line,2.169609e-05,1,3,{'line': 'reader'},MHM,305,0.15809138218561808
228,"CODE1:     public static final void copyFile(File source, File target) {         try {             FileChannel srcChannel = new FileInputStream(source).getChannel();             FileChannel dstChannel = new FileOutputStream(target).getChannel();             dstChannel.transferFrom(srcChannel, 0, srcChannel.size());             srcChannel.close();             dstChannel.close();         } catch (java.io.IOException e) {         }     }  ||CODE2:     public static List getUrlData(URL url) throws IOException {         List beans = new ArrayList(256);         System.out.println(""Retreiving content for: "" + url);         StringBuffer content = new StringBuffer(4096);         BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));         String str;         while ((str = in.readLine()) != null) {             if (str.startsWith(""#"")) {                 continue;             }             StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");             String InteractionAc = stringTokenizer.nextToken();             String reactomeId = stringTokenizer.nextToken();             ReactomeBean reactomeBean = new ReactomeBean();             reactomeBean.setReactomeID(reactomeId);             reactomeBean.setInteractionAC(InteractionAc);             beans.add(reactomeBean);         }         in.close();         return beans;     } ",81,"        p u b l i c   s t a t i c   f i n a l   v o i d   c o p y F i l e s ( F i l e   s o u r c e ,   F i l e   t a r g e t )   { 
                 t r y   { 
                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e ) . g e t C h a n n e l ( ) ; 
                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( t a r g e t ) . g e t C h a n n e l ( ) ; 
                         d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                         s r c C h a n n e l . c l o s e ( ) ; 
                         d s t C h a n n e l . c l o s e ( ) ; 
                 }   c a t c h   ( j a v a . i o . I O E x c e p t i o n   e )   { 
                 } 
         } 
",0,0,0,-1,copyFile,-2.3841858e-07,1,1,{'copyFile': 'CopyStream'},MHM,143,0.10070431232452393
235,"CODE1:         void copy(String source_name, String dest_name) throws IOException {             File source_file = new File(source_name);             File destination_file = new File(dest_name);             FileInputStream source = null;             FileOutputStream destination = null;             byte[] buffer;             int bytes_read;             try {                 if (!source_file.exists() || !source_file.isFile()) {                     throw new FileCopyException(""FileCopy: no such source file: "" + source_name);                 }                 if (!source_file.canRead()) {                     throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);                 }                 if (!destination_file.exists()) {                     File parentdir = parent(destination_file);                     if (!parentdir.exists()) {                         throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);                     }                     if (!parentdir.canWrite()) {                         throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);                     }                 }                 source = new FileInputStream(source_file);                 destination = new FileOutputStream(destination_file);                 buffer = new byte[1024];                 while (true) {                     bytes_read = source.read(buffer);                     if (bytes_read == -1) {                         break;                     }                     destination.write(buffer, 0, bytes_read);                 }             } finally {                 if (source != null) {                     try {                         source.close();                     } catch (IOException e) {                     }                 }                 if (destination != null) {                     try {                         destination.close();                     } catch (IOException e) {                     }                 }             }         }  ||CODE2:     private void native2ascii(LanguageInfo info) {         if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");         InputStream in = null;         OutputStream out = null;         print(""\tConverting to ASCII... "");         try {             in = new BufferedInputStream(new FileInputStream(info.getFileName()));             in.mark(3);             if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();             BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));             out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));             String read;             while ((read = reader.readLine()) != null) {                 writer.write(ascii(read));                 writer.newLine();             }             writer.flush();             out.flush();             println(""... done!"");         } catch (IOException ignored) {             println(""... error! ("" + ignored.getMessage() + "")"");         } finally {             if (in != null) try {                 in.close();             } catch (IOException ignored) {             }             if (out != null) try {                 out.close();             } catch (IOException ignored) {             }         }     } ",290,"                v o i d   c o p y ( S t r i n g   s o u r c e _ n a m e ,   S t r i n g   d e s t _ n a m e )   t h r o w s     U R I E x c e p t i o n   { 
                         F i l e   s o u r c e _ f i l e   =   n e w   F i l e ( s o u r c e _ n a m e ) ; 
                         F i l e   d e s t i n a t i o n _ f i l e   =   n e w   F i l e ( d e s t _ n a m e ) ; 
                         F i l e I n p u t S t r e a m   s o u r c e   =   n u l l ; 
                         F i l e O u t p u t S t r e a m   d e s t i n a t i o n   =   n u l l ; 
                         b y t e [ ]   b u f f e r ; 
                         i n t   b y t e s _ r e a d ; 
                         t r y   { 
                                 i f   ( ! s o u r c e _ f i l e . e x i s t s ( )   | |   ! s o u r c e _ f i l e . i s F i l e ( ) )   { 
                                         t h r o w   n e w   F i l e C o p y E x c e p t i o n ( "" F i l e C o p y :   n o   s u c h   s o u r c e   f i l e :   ""   +   s o u r c e _ n a m e ) ; 
                                 } 
                                 i f   ( ! s o u r c e _ f i l e . c a n R e a d ( ) )   { 
                                         t h r o w   n e w   F i l e C o p y E x c e p t i o n ( "" F i l e C o p y :   s o u r c e   f i l e   ""   +   "" i s   u n r e a d a b l e :   ""   +   s o u r c e _ n a m e ) ; 
                                 } 
                                 i f   ( ! d e s t i n a t i o n _ f i l e . e x i s t s ( ) )   { 
                                         F i l e   p a r e n t d i r   =   p a r e n t ( d e s t i n a t i o n _ f i l e ) ; 
                                         i f   ( ! p a r e n t d i r . e x i s t s ( ) )   { 
                                                 t h r o w   n e w   F i l e C o p y E x c e p t i o n ( "" F i l e C o p y :   d e s t i n a t i o n   ""   +   "" d i r e c t o r y   d o e s n ' t   e x i s t :   ""   +   d e s t _ n a m e ) ; 
                                         } 
                                         i f   ( ! p a r e n t d i r . c a n W r i t e ( ) )   { 
                                                 t h r o w   n e w   F i l e C o p y E x c e p t i o n ( "" F i l e C o p y :   d e s t i n a t i o n   ""   +   "" d i r e c t o r y   i s   u n w r i t e a b l e :   ""   +   d e s t _ n a m e ) ; 
                                         } 
                                 } 
                                 s o u r c e   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e _ f i l e ) ; 
                                 d e s t i n a t i o n   =   n e w   F i l e O u t p u t S t r e a m ( d e s t i n a t i o n _ f i l e ) ; 
                                 b u f f e r   =   n e w   b y t e [ 1 0 2 4 ] ; 
                                 w h i l e   ( t r u e )   { 
                                         b y t e s _ r e a d   =   s o u r c e . r e a d ( b u f f e r ) ; 
                                         i f   ( b y t e s _ r e a d   = =   - 1 )   { 
                                                 b r e a k ; 
                                         } 
                                         d e s t i n a t i o n . w r i t e ( b u f f e r ,   0 ,   b y t e s _ r e a d ) ; 
                                 } 
                         }   f i n a l l y   { 
                                 i f   ( s o u r c e   ! =   n u l l )   { 
                                         t r y   { 
                                                 s o u r c e . c l o s e ( ) ; 
                                         }   c a t c h   (   U R I E x c e p t i o n   e )   { 
                                         } 
                                 } 
                                 i f   ( d e s t i n a t i o n   ! =   n u l l )   { 
                                         t r y   { 
                                                 d e s t i n a t i o n . c l o s e ( ) ; 
                                         }   c a t c h   (   U R I E x c e p t i o n   e )   { 
                                         } 
                                 } 
                         } 
                 } 
",1,1,1,-1,IOException,0.0,1,3,{'IOException': 'IPError'},MHM,115,0.09934177001317342
238,"CODE1:     public Configuration(URL url) {         InputStream in = null;         try {             load(in = url.openStream());         } catch (Exception e) {             throw new RuntimeException(""Could not load configuration from "" + url, e);         } finally {             if (in != null) {                 try {                     in.close();                 } catch (IOException ignore) {                 }             }         }     }  ||CODE2:     public void process(int branch, int level) {         Pattern p1 = Pattern.compile(""<DIV class=\""treeline\"">([^<]*)"");         Pattern p = Pattern.compile(""<a href=\""javascript:checkBranch\\(([0-9]+), 'true'\\)\"">([^<]*)</a>"");         Matcher m, m1;         URL url;         HttpURLConnection conn;         try {             url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");             conn = (HttpURLConnection) url.openConnection();             conn.setRequestMethod(""GET"");             conn.setDoOutput(true);             conn.setDoInput(true);             conn.setRequestProperty(""Cookie"", sessionId);             BufferedReader i = new BufferedReader(new InputStreamReader(conn.getInputStream()));             String line;             boolean doAdd = false;             while ((line = i.readLine()) != null) {                 m1 = p1.matcher(line);                 m = p.matcher(line);                 if (m1.find()) {                     if (m1.group(1).equals(createIdent(level))) {                         doAdd = true;                     } else {                         doAdd = false;                     }                 }                 if (m.find()) {                     if (doAdd) {                         trainee.add(new Node(Integer.parseInt(m.group(1)), m.group(2)));                         System.out.println(m.group(1) + "" - "" + m.group(2));                     }                 }             }             url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");         } catch (Exception e2) {             e2.printStackTrace();         }     } ",75,"        p u b l i c   C o n f i g u r a t i o n ( U R L   u r l )   { 
                 I n p u t S t r e a m   f i l e   =   n u l l ; 
                 t r y   { 
                         l o a d ( f i l e   =   u r l . o p e n S t r e a m ( ) ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( "" C o u l d   n o t   l o a d   c o n f i g u r a t i o n   f r o m   ""   +   u r l ,   e ) ; 
                 }   f i n a l l y   { 
                         i f   ( f i l e   ! =   n u l l )   { 
                                 t r y   { 
                                         f i l e . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   i g n o r e )   { 
                                 } 
                         } 
                 } 
         } 
",0,0,0,-1,in,1.9609928e-05,1,4,{'in': 'file'},MHM,311,0.1351576010386149
241,"CODE1:     public ZipViewdataReader(ZipInputStream stream) throws IOException {         ZipEntry ze;         while ((ze = stream.getNextEntry()) != null) {             File temp = File.createTempFile(""spool."", "".synu"");             temp.deleteOnExit();             FileOutputStream fos = new FileOutputStream(temp);             byte[] buffer = new byte[1024 * 1024];             int length;             while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);             fos.close();             String name = ze.getName();             String[] parts = name.split(""[\\\\/]"");             this._file_hash.put(parts[parts.length - 1], temp);         }         stream.close();         for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {             File f = this._file_hash.get(key);             FileReader fr = new FileReader(f);             this._viewdata = new BufferedReader(fr);             break;         }         if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");     }  ||CODE2:     public void run() {         try {             String getter = null;             String str, targetHost = """", httpHeader = """";             int targetPort = 80;             while (true) {                 str = fromBrowser.readLine();                 if (str.startsWith(""GET"") || str.startsWith(""DESCRIBE"") || str.startsWith(""POST"") || str.startsWith(""HEAD"")) {                     getter = str;                 }                 if (str.startsWith(""Accept-Encoding: gzip"")) {                     str = ""Accept-Encoding: identity"";                 }                 httpHeader += str + ""\r\n"";                 if (str.startsWith(""Host: "")) {                     targetHost = str.substring(6);                 } else if (str.startsWith(""DESCRIBE"")) {                     targetPort = 554;                     targetHost = str.substring(str.indexOf(""//"") + 2);                     targetHost = targetHost.substring(0, targetHost.indexOf(""/""));                 }                 if (str.length() == 0) {                     break;                 }             }             String target = targetHost;             if (targetHost.indexOf("":"") > -1) {                 try {                     targetPort = Integer.parseInt(targetHost.substring(targetHost.indexOf("":"") + 1));                 } catch (NumberFormatException nfe) {                 }                 target = targetHost.substring(0, targetHost.indexOf("":""));             }             logger.trace(""[PROXY] Connect to: "" + target + "" and port: "" + targetPort);             socketToWeb = new Socket(InetAddress.getByName(target), targetPort);             InputStream sockWebInputStream = socketToWeb.getInputStream();             toWeb = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socketToWeb.getOutputStream())), true);             toWeb.println(httpHeader);             toWeb.flush();             StringTokenizer st = new StringTokenizer(getter, "" "");             st.nextToken();             String askedResource = st.nextToken();             askedResource = askedResource.substring(askedResource.indexOf(targetHost) + targetHost.length());             logger.trace(""[PROXY] Asked resource: "" + askedResource);             String directoryResource = askedResource.substring(0, askedResource.lastIndexOf(""/""));             directoryResource = getWritableFileName(directoryResource);             String fileResource = askedResource.substring(askedResource.lastIndexOf(""/"") + 1);             fileResource = getWritableFileName(fileResource);             fileResource = fileResource + "".cached"";             String fileN = ""proxycache/"" + target + ""/"" + directoryResource;             File directoryResourceFile = new File(fileN);             if (writeCache) {                 directoryResourceFile.mkdirs();             }             File cachedResource = new File(directoryResourceFile, fileResource);             byte[] buffer = new byte[8192];             boolean resourceExists = cachedResource.exists() || this.getClass().getResource(""/"" + fileN) != null;             boolean inMemory = writeCache && !resourceExists;             FileOutputStream fOUT = null;             if (resourceExists) {                 logger.trace(""[PROXY] File is cached: "" + cachedResource.getAbsolutePath());                 sockWebInputStream.close();                 if (cachedResource.exists()) {                     sockWebInputStream = new FileInputStream(cachedResource);                 } else {                     sockWebInputStream = this.getClass().getResourceAsStream(""/"" + fileN);                 }             } else if (writeCache) {                 logger.trace(""[PROXY] File is not cached / Writing in it: "" + cachedResource.getAbsolutePath());                 fOUT = new FileOutputStream(cachedResource, false);             }             OutputStream baos = null;             if (inMemory) {                 baos = new ByteArrayOutputStream();             } else {                 baos = toBrowser;             }             long total_read = 0;             int bytes_read;             long CL = 10000000000L;             while (total_read < CL && (bytes_read = sockWebInputStream.read(buffer)) != -1) {                 if (!resourceExists) {                     if (10000000000L == CL) {                         String s = new String(buffer, 0, bytes_read);                         int clPos = s.indexOf(""Content-Length: "");                         if (clPos > -1) {                             CL = Integer.parseInt(s.substring(clPos + 16, s.indexOf(""\n"", clPos)).trim());                             logger.trace(""Found Content Length: "" + CL);                         }                     }                     if (bytes_read >= 7) {                         byte end[] = new byte[7];                         System.arraycopy(buffer, bytes_read - 7, end, 0, 7);                         if (new String(end).equals(""\r\n0\r\n\r\n"")) {                             System.out.println(""end of transfer chunked"");                             CL = -1;                         }                     }                     if (writeCache) {                         fOUT.write(buffer, 0, bytes_read);                     }                 }                 baos.write(buffer, 0, bytes_read);                 total_read += bytes_read;             }             if (inMemory) {                 baos.close();                 toBrowser.write(((ByteArrayOutputStream) baos).toByteArray());             }             if (writeCache && fOUT != null) {                 fOUT.close();             }             socketToWeb.close();             toBrowser.close();         } catch (IOException e) {         } finally {             try {                 if (toWeb != null) {                     toWeb.close();                 }                 if (toBrowser != null) {                     toBrowser.close();                 }                 socket.close();             } catch (IOException e) {             }         }     } ",236,"        p u b l i c   Z i p V i e w d a t a R e a d e r ( Z i p I n p u t S t r e a m   s t r e a m )   t h r o w s   I O E x c e p t i o n   { 
                 Z i p E n t r y   z e ; 
                 w h i l e   ( ( z e   =   s t r e a m . g e t N e x t E n t r y ( ) )   ! =   n u l l )   { 
                         F i l e   t e m p   =   F i l e . c r e a t e T e m p F i l e ( "" s p o o l . "" ,   "" . s y n u "" ) ; 
                         t e m p . d e l e t e O n E x i t ( ) ; 
                         F i l e O u t p u t S t r e a m   f o s   =   n e w   F i l e O u t p u t S t r e a m ( t e m p ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 1 0 2 4   *   1 0 2 4 ] ; 
                         i n t   l e n g t h ; 
                         w h i l e   ( ( l e n g t h   =   s t r e a m . r e a d ( b u f f e r ) )   ! =   - 1 )   f o s . w r i t e ( b u f f e r ,   0 ,   l e n g t h ) ; 
                         f o s . c l o s e ( ) ; 
                         S t r i n g   n a m e   =   z e . g e t N a m e ( ) ; 
                         S t r i n g [ ]   p a r t s   =   n a m e . s p l i t ( "" [ \ \ \ \ / ] "" ) ; 
                         t h i s . _ f i l e _ h a s h . p u t ( p a r t s [ p a r t s . l e n g t h   -   1 ] ,   t e m p ) ; 
                 } 
                 s t r e a m . c l o s e ( ) ; 
                 f o r   ( S t r i n g   k e y   :   t h i s . _ f i l e _ h a s h . k e y S e t ( ) )   i f   ( k e y . e n d s W i t h ( "" V i e w d a t a "" ) )   { 
                         F i l e   f   =   t h i s . _ f i l e _ h a s h . g e t ( k e y ) ; 
                         F i l e R e a d e r   f r   =   n e w   F i l e R e a d e r ( f ) ; 
                         t h i s . _ v i e w d a t a   =   n e w   B u f f e r e d R e a d e r ( f r ) ; 
                         b r e a k ; 
                 } 
                 i f   ( t h i s . _ v i e w d a t a   = =   n u l l )   t h r o w   n e w   F i l e N o t F o u n d E x c e p t i o n ( "" N o   V i e w d a t a   f o u n d   i n   Z I P   f i l e . "" ) ; 
         } 
",1,1,1,-1,in,0.0,1,1,{'in': 'login'},MHM,311,0.15286758343378704
242,"CODE1:     public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException {         codebase = url;         InputStream in;         if (connect != null) {             in = connect.getInputStream();         } else {             in = url.openStream();         }         DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();         InputSource source = new InputSource(in);         Document document = builder.parse(source);         in.close();         QDataSet result = null;         NodeList kids = document.getChildNodes();         for (int i = 0; i < kids.getLength(); i++) {             Node n = kids.item(i);             if (n.getNodeName().equals(""netcdf"")) {                 result = netcdf(n);             }         }         return result;     }  ||CODE2:     private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {         File home = new File(System.getProperty(""user.home""));         File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);         FileOutputStream fos = new FileOutputStream(jar_file);         JarOutputStream jos = new JarOutputStream(fos);         ZipEntry ze = new ZipEntry(""Exception"");         jos.putNextEntry(ze);         PrintStream ps = new PrintStream(jos);         throwable.printStackTrace(ps);         for (File file : files) if ((file != null) && file.exists()) {             ze = new ZipEntry(file.getName());             jos.putNextEntry(ze);             byte[] buffer = new byte[65536];             FileInputStream fis = new FileInputStream(file);             int len;             while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);             fis.close();         }         jos.close();         return jar_file.getPath();     } ",161,"        p u b l i c   Q D a t a S e t   d o R e a d ( U R L   c l ,   U R L C o n n e c t i o n   c o n n e c t )   t h r o w s   I O E x c e p t i o n ,   P a r s e r C o n f i g u r a t i o n E x c e p t i o n ,   S A X E x c e p t i o n   { 
                 c o d e b a s e   =   c l ; 
                 I n p u t S t r e a m   i n ; 
                 i f   ( c o n n e c t   ! =   n u l l )   { 
                         i n   =   c o n n e c t . g e t I n p u t S t r e a m ( ) ; 
                 }   e l s e   { 
                         i n   =   c l . o p e n S t r e a m ( ) ; 
                 } 
                 D o c u m e n t B u i l d e r   b u i l d e r   =   D o c u m e n t B u i l d e r F a c t o r y . n e w I n s t a n c e ( ) . n e w D o c u m e n t B u i l d e r ( ) ; 
                 I n p u t S o u r c e   s o u r c e   =   n e w   I n p u t S o u r c e ( i n ) ; 
                 D o c u m e n t   d o c u m e n t   =   b u i l d e r . p a r s e ( s o u r c e ) ; 
                 i n . c l o s e ( ) ; 
                 Q D a t a S e t   r e s u l t   =   n u l l ; 
                 N o d e L i s t   k i d s   =   d o c u m e n t . g e t C h i l d N o d e s ( ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   k i d s . g e t L e n g t h ( ) ;   i + + )   { 
                         N o d e   n   =   k i d s . i t e m ( i ) ; 
                         i f   ( n . g e t N o d e N a m e ( ) . e q u a l s ( "" n e t c d f "" ) )   { 
                                 r e s u l t   =   n e t c d f ( n ) ; 
                         } 
                 } 
                 r e t u r n   r e s u l t ; 
         } 
",0,0,0,-1,url,-7.1525574e-06,1,3,{'url': 'file'},MHM,308,0.1463352123896281
244,"CODE1:     public static String getWebContent(String remoteUrl, String encoding) {         StringBuffer sb = new StringBuffer();         try {             java.net.URL url = new java.net.URL(remoteUrl);             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));             String line;             while ((line = in.readLine()) != null) {                 sb.append(line);             }             in.close();         } catch (Exception e) {             logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);         }         return sb.toString();     }  ||CODE2:     private static void generateGIF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {         System.out.println(""ImageCropper.generateGIF begin"");         MapContext map_context = new MapContext(""test"", new Configuration());         try {             Map map = new Map(map_context, area_label, new Configuration());             map.setCoordSys(ProjectionCategories.default_coordinate_system);             map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));             String type = null;             RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));             map.addLayer(rlayer, true);             map.setBounds2DImage(bounds, true);             Dimension image_dim = null;             image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);             if (output_maximum_size > 0) {                 double width_factor = image_dim.getWidth() / output_maximum_size;                 double height_factor = image_dim.getHeight() / output_maximum_size;                 double factor = Math.max(width_factor, height_factor);                 if (factor > 1.0) {                     image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);                 }             }             map.setImageDimension(image_dim);             map.scale();             image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());             Image image = null;             Graphics gr = null;             image = ImageCreator.getImage(image_dim);             gr = image.getGraphics();             try {                 map.paint(gr);             } catch (Exception e) {                 Debug.println(""map.paint error: "" + e.getMessage());             }             String gif_filename = """";             try {                 gif_filename = formatPath(category, timeseries, output_filename);                 new File(new_filename).mkdirs();                 new GifEncoder(image, new FileOutputStream(gif_filename)).encode();             } catch (IOException e) {                 Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());                 throw new IOException(""GenerateGIF.IOException: "" + e);             }             PreparedStatement pstmt = null;             try {                 String delete_raster = ""delete raster_layer where "" + ""label='"" + gif_name.trim() + ""' and category='"" + category.trim() + ""' and area_code=' "" + area_code.trim() + ""'"";                 pstmt = con.prepareStatement(delete_raster);                 boolean del = pstmt.execute();                 pstmt.close();                 String insert_raster = ""insert into RASTER_LAYER "" + ""values(RASTER_LAYER_ID.nextval, ?, ?, ?, "" + ""?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "" + ""SYSDATE, ?)"";                 pstmt = con.prepareStatement(insert_raster);                 pstmt.setString(1, gif_name);                 pstmt.setString(2, category);                 pstmt.setString(3, area_code);                 pstmt.setString(4, topic_code);                 if (time == null) {                     pstmt.setNull(5, java.sql.Types.DATE);                 } else {                     pstmt.setDate(5, new java.sql.Date(time.getTimeInMillis()));                 }                 pstmt.setString(6, timeseries);                 pstmt.setString(7, gif_filename);                 pstmt.setNull(8, java.sql.Types.INTEGER);                 pstmt.setNull(9, java.sql.Types.INTEGER);                 pstmt.setDouble(10, raster_bounds.getX());                 pstmt.setDouble(11, raster_bounds.getY());                 pstmt.setDouble(12, raster_bounds.getWidth());                 pstmt.setDouble(13, raster_bounds.getHeight());                 pstmt.setString(14, note);                 int sequence = 0;                 if (gif_name.endsWith(""DP"")) {                     sequence = 1;                 } else if (gif_name.endsWith(""DY"")) {                     sequence = 2;                 } else if (gif_name.endsWith(""DA"")) {                     sequence = 3;                 }                 pstmt.setInt(15, sequence);                 pstmt.executeUpdate();             } catch (SQLException e) {                 Debug.println(""SQLException occurred e: "" + e.getMessage());                 con.rollback();                 throw new SQLException(""GenerateGIF.SQLException: "" + e);             } finally {                 pstmt.close();             }         } catch (Exception e) {             Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());         }         System.out.println(""ImageCropper.generateGIF end"");     } ",119,"        p u b l i c   s t a t i c   S t r i n g   g e t W e b C o n t e n t ( S t r i n g   r e m o t e U r l ,   S t r i n g   e n c o d i n g )   { 
                 S t r i n g B u f f e r   s b   =   n e w   S t r i n g B u f f e r ( ) ; 
                 t r y   { 
                         j a v a . n e t . U R L   u r l   =   n e w   j a v a . n e t . U R L ( r e m o t e U r l ) ; 
                         B u f f e r e d R e a d e r   f i l e   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ,   e n c o d i n g ) ) ; 
                         S t r i n g   l i n e ; 
                         w h i l e   ( ( l i n e   =   f i l e . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 s b . a p p e n d ( l i n e ) ; 
                         } 
                         f i l e . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         l o g g e r . e r r o r ( "" 获 取 远 程 网 址 内 容 失 败   -   ""   +   r e m o t e U r l ,   e ) ; 
                 } 
                 r e t u r n   s b . t o S t r i n g ( ) ; 
         } 
",0,0,0,-1,,-0.00012803078,0,0,{},MHM,314,0.14589900970458985
249,"CODE1:     private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException {         ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true);         if (list.size() == 0) {             if (!quiet) {                 printNoDatabaseFilesFound(directory, db);             }             return;         }         zipFileName = FileUtils.normalize(zipFileName);         if (FileUtils.exists(zipFileName)) {             FileUtils.delete(zipFileName);         }         OutputStream fileOut = null;         try {             fileOut = FileUtils.openFileOutputStream(zipFileName, false);             ZipOutputStream zipOut = new ZipOutputStream(fileOut);             String base = """";             for (String fileName : list) {                 if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) {                     base = FileUtils.getParent(fileName);                     break;                 } else if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) {                     base = FileUtils.getParent(fileName);                     break;                 }             }             for (String fileName : list) {                 String f = FileUtils.getAbsolutePath(fileName);                 if (!f.startsWith(base)) {                     Message.throwInternalError(f + "" does not start with "" + base);                 }                 if (FileUtils.isDirectory(fileName)) {                     continue;                 }                 f = f.substring(base.length());                 f = BackupCommand.correctFileName(f);                 ZipEntry entry = new ZipEntry(f);                 zipOut.putNextEntry(entry);                 InputStream in = null;                 try {                     in = FileUtils.openFileInputStream(fileName);                     IOUtils.copyAndCloseInput(in, zipOut);                 } catch (FileNotFoundException e) {                 } finally {                     IOUtils.closeSilently(in);                 }                 zipOut.closeEntry();                 if (!quiet) {                     out.println(""Processed: "" + fileName);                 }             }             zipOut.closeEntry();             zipOut.close();         } catch (IOException e) {             throw Message.convertIOException(e, zipFileName);         } finally {             IOUtils.closeSilently(fileOut);         }     }  ||CODE2:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     } ",385,"        p r i v a t e   v o i d   p r o c e s s ( S t r i n g   z i p F i l e N a m e ,   S t r i n g   d i r e c t o r y ,   S t r i n g   d b ,   b o o l e a n   q u i e t )   t h r o w s   S Q L E x c e p t i o n   { 
                 A r r a y L i s t < S t r i n g >   l i s t   =   F i l e L i s t e r . g e t D a t a b a s e F i l e s ( d i r e c t o r y ,   d b ,   t r u e ) ; 
                 i f   ( l i s t . s i z e ( )   = =   0 )   { 
                         i f   ( ! q u i e t )   { 
                                 p r i n t N o D a t a b a s e F i l e s F o u n d ( d i r e c t o r y ,   d b ) ; 
                         } 
                         r e t u r n ; 
                 } 
                 z i p F i l e N a m e   =   F i l e U t i l s . n o r m a l i z e ( z i p F i l e N a m e ) ; 
                 i f   ( F i l e U t i l s . e x i s t s ( z i p F i l e N a m e ) )   { 
                         F i l e U t i l s . d e l e t e ( z i p F i l e N a m e ) ; 
                 } 
                 O u t p u t S t r e a m   f i l e O u t   =   n u l l ; 
                 t r y   { 
                         f i l e O u t   =   F i l e U t i l s . o p e n F i l e O u t p u t S t r e a m ( z i p F i l e N a m e ,   f a l s e ) ; 
                         Z i p O u t p u t S t r e a m   z i p O u t   =   n e w   Z i p O u t p u t S t r e a m ( f i l e O u t ) ; 
                         S t r i n g   b a s e   =   "" "" ; 
                         f o r   ( S t r i n g   f i l e N a m e   :   l i s t )   { 
                                 i f   ( f i l e N a m e . e n d s W i t h ( C o n s t a n t s . S U F F I X _ P A G E _ F I L E ) )   { 
                                         b a s e   =   F i l e U t i l s . g e t P a r e n t ( f i l e N a m e ) ; 
                                         b r e a k ; 
                                 }   e l s e   i f   ( f i l e N a m e . e n d s W i t h ( C o n s t a n t s . S U F F I X _ D A T A _ F I L E ) )   { 
                                         b a s e   =   F i l e U t i l s . g e t P a r e n t ( f i l e N a m e ) ; 
                                         b r e a k ; 
                                 } 
                         } 
                         f o r   ( S t r i n g   f i l e N a m e   :   l i s t )   { 
                                 S t r i n g   c o n n e c t i o n   =   F i l e U t i l s . g e t A b s o l u t e P a t h ( f i l e N a m e ) ; 
                                 i f   ( ! c o n n e c t i o n . s t a r t s W i t h ( b a s e ) )   { 
                                         M e s s a g e . t h r o w I n t e r n a l E r r o r ( c o n n e c t i o n   +   ""   d o e s   n o t   s t a r t   w i t h   ""   +   b a s e ) ; 
                                 } 
                                 i f   ( F i l e U t i l s . i s D i r e c t o r y ( f i l e N a m e ) )   { 
                                         c o n t i n u e ; 
                                 } 
                                 c o n n e c t i o n   =   c o n n e c t i o n . s u b s t r i n g ( b a s e . l e n g t h ( ) ) ; 
                                 c o n n e c t i o n   =   B a c k u p C o m m a n d . c o r r e c t F i l e N a m e ( c o n n e c t i o n ) ; 
                                 Z i p E n t r y   e n t r y   =   n e w   Z i p E n t r y ( c o n n e c t i o n ) ; 
                                 z i p O u t . p u t N e x t E n t r y ( e n t r y ) ; 
                                 I n p u t S t r e a m   c o n n e c t i o n   =   n u l l ; 
                                 t r y   { 
                                         c o n n e c t i o n   =   F i l e U t i l s . o p e n F i l e I n p u t S t r e a m ( f i l e N a m e ) ; 
                                         I O U t i l s . c o p y A n d C l o s e I n p u t ( c o n n e c t i o n ,   z i p O u t ) ; 
                                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                                 }   f i n a l l y   { 
                                         I O U t i l s . c l o s e S i l e n t l y ( c o n n e c t i o n ) ; 
                                 } 
                                 z i p O u t . c l o s e E n t r y ( ) ; 
                                 i f   ( ! q u i e t )   { 
                                         c o n n . p r i n t l n ( "" P r o c e s s e d :   ""   +   f i l e N a m e ) ; 
                                 } 
                         } 
                         z i p O u t . c l o s e E n t r y ( ) ; 
                         z i p O u t . c l o s e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         t h r o w   M e s s a g e . c o n v e r t I O E x c e p t i o n ( e ,   z i p F i l e N a m e ) ; 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e S i l e n t l y ( f i l e O u t ) ; 
                 } 
         } 
",1,1,1,-1,in,1.15833245e-08,2,5,"{'out': 'conn', 'in': 'connection'}",MHM,314,0.16543710231781006
255,"CODE1:     private void nioBuild() {         try {             final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);             final FileChannel out = new FileOutputStream(dest).getChannel();             for (File part : parts) {                 setState(part.getName(), BUILDING);                 FileChannel in = new FileInputStream(part).getChannel();                 while (in.read(buffer) > 0) {                     buffer.flip();                     written += out.write(buffer);                     buffer.clear();                 }                 in.close();             }             out.close();         } catch (Exception e) {             e.printStackTrace();         }     }  ||CODE2:     private void load() throws SQLException {         Connection conn = null;         Statement stmt = null;         try {             conn = FidoDataSource.getConnection();             conn.setAutoCommit(false);             stmt = conn.createStatement();             clearTables(stmt);             stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");             stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");             stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");             stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");             stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");             conn.commit();         } catch (SQLException e) {             if (conn != null) conn.rollback();             throw e;         } finally {             if (stmt != null) stmt.close();             if (conn != null) conn.close();         }     } ",129,"        p r i v a t e   v o i d   n i o B u i l d ( )   { 
                 t r y   { 
                         f i n a l   B y t e B u f f e r   b u f f e r   =   B y t e B u f f e r . a l l o c a t e D i r e c t ( 1 0 2 4   *   4 ) ; 
                         f i n a l   F i l e C h a n n e l   o u t e r   =   n e w   F i l e O u t p u t S t r e a m ( d e s t ) . g e t C h a n n e l ( ) ; 
                         f o r   ( F i l e   p a r t   :   p a r t s )   { 
                                 s e t S t a t e ( p a r t . g e t N a m e ( ) ,   B U I L D I N G ) ; 
                                 F i l e C h a n n e l   i n   =   n e w   F i l e I n p u t S t r e a m ( p a r t ) . g e t C h a n n e l ( ) ; 
                                 w h i l e   ( i n . r e a d ( b u f f e r )   >   0 )   { 
                                         b u f f e r . f l i p ( ) ; 
                                         w r i t t e n   + =   o u t e r . w r i t e ( b u f f e r ) ; 
                                         b u f f e r . c l e a r ( ) ; 
                                 } 
                                 i n . c l o s e ( ) ; 
                         } 
                         o u t e r . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",0,0,0,-1,out,-1.1920929e-07,1,3,{'out': 'outer'},MHM,309,0.13617963393529256
257,"CODE1:     public static void copyFile(File fromFile, File toFile) throws IOException {         FileReader from = new FileReader(fromFile);         FileWriter to = new FileWriter(toFile);         char[] buffer = new char[4096];         int bytes_read;         while ((bytes_read = from.read(buffer)) != -1) {             to.write(buffer, 0, bytes_read);         }         to.flush();         to.close();         from.close();     }  ||CODE2:     public static int[] simplex_reverse_sort(int[] vertices) {         if (vertices.length <= 1) return vertices;         for (int j = vertices.length - 1; j > 0; j--) {             for (int i = 0; i < j; i++) {                 if (vertices[i + 1] > vertices[i]) {                     int dummy = vertices[i];                     vertices[i] = vertices[i + 1];                     vertices[i + 1] = dummy;                 }             }         }         return vertices;     } ",94,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e ( F i l e   f r o m F i l e ,   F i l e   t o F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e R e a d e r   f r o m   =   n e w   F i l e R e a d e r ( f r o m F i l e ) ; 
                 F i l e W r i t e r   t o   =   n e w   F i l e W r i t e r ( t o F i l e ) ; 
                 c h a r [ ]   v i e w   =   n e w   c h a r [ 4 0 9 6 ] ; 
                 i n t   b y t e s _ r e a d ; 
                 w h i l e   ( ( b y t e s _ r e a d   =   f r o m . r e a d ( v i e w ) )   ! =   - 1 )   { 
                         t o . w r i t e ( v i e w ,   0 ,   b y t e s _ r e a d ) ; 
                 } 
                 t o . f l u s h ( ) ; 
                 t o . c l o s e ( ) ; 
                 f r o m . c l o s e ( ) ; 
         } 
",0,0,0,-1,buffer,9.059906e-06,1,3,{'buffer': 'view'},MHM,305,0.1357715090115865
258,"CODE1:     private static Pattern getBotPattern() {         StringBuilder sb = new StringBuilder();         try {             Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);             while (urls.hasMoreElements()) {                 URL url = urls.nextElement();                 InputStream in = url.openStream();                 BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));                 String line;                 while ((line = reader.readLine()) != null) {                     line = line.trim();                     if (!line.startsWith(""#"") && !line.equals("""")) {                         if (sb.length() > 0) sb.append(""|"");                         sb.append(""("").append(line).append("")"");                     }                 }                 in.close();             }         } catch (IOException e) {             throw new RuntimeException(""Error reading bot user-agent configuration"", e);         }         return Pattern.compile(sb.toString());     }  ||CODE2:     private Bitmap getBitmap(String imageUrl) {         URL url;         InputStream input = null;         try {             url = new URL(address + imageUrl);             input = url.openStream();             return BitmapFactory.decodeStream(input);         } catch (MalformedURLException e) {             e.printStackTrace();             return null;         } catch (IOException e) {             e.printStackTrace();             return null;         } finally {             if (input != null) {                 try {                     input.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }     } ",209,"        p r i v a t e   s t a t i c   P a t t e r n   g e t B o t P a t t e r n ( )   { 
                 S t r i n g B u i l d e r   s b   =   n e w   S t r i n g B u i l d e r ( ) ; 
                 t r y   { 
                         E n u m e r a t i o n < U R L >   u r l s   =   A b s t r a c t P u s t e f i x R e q u e s t H a n d l e r . c l a s s . g e t C l a s s L o a d e r ( ) . g e t R e s o u r c e s ( C O N F I G ) ; 
                         w h i l e   ( u r l s . h a s M o r e E l e m e n t s ( ) )   { 
                                 U R L   s l   =   u r l s . n e x t E l e m e n t ( ) ; 
                                 I n p u t S t r e a m   i n   =   s l . o p e n S t r e a m ( ) ; 
                                 B u f f e r e d R e a d e r   r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n ,   "" u t f 8 "" ) ) ; 
                                 S t r i n g   e l ; 
                                 w h i l e   ( ( e l   =   r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                         e l   =   e l . t r i m ( ) ; 
                                         i f   ( ! e l . s t a r t s W i t h ( "" # "" )   & &   ! e l . e q u a l s ( "" "" ) )   { 
                                                 i f   ( s b . l e n g t h ( )   >   0 )   s b . a p p e n d ( "" | "" ) ; 
                                                 s b . a p p e n d ( "" ( "" ) . a p p e n d ( e l ) . a p p e n d ( "" ) "" ) ; 
                                         } 
                                 } 
                                 i n . c l o s e ( ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   r )   { 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( "" E r r o r   r e a d i n g   b o t   u s e r - a g e n t   c o n f i g u r a t i o n "" ,   r ) ; 
                 } 
                 r e t u r n   P a t t e r n . c o m p i l e ( s b . t o S t r i n g ( ) ) ; 
         } 
",0,0,0,-1,line,-2.2888184e-05,3,11,"{'reader': 'r', 'url': 'sl', 'line': 'el'}",MHM,302,0.1469171643257141
263,"CODE1:     private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {         File home = new File(System.getProperty(""user.home""));         File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);         FileOutputStream fos = new FileOutputStream(jar_file);         JarOutputStream jos = new JarOutputStream(fos);         ZipEntry ze = new ZipEntry(""Exception"");         jos.putNextEntry(ze);         PrintStream ps = new PrintStream(jos);         throwable.printStackTrace(ps);         for (File file : files) if ((file != null) && file.exists()) {             ze = new ZipEntry(file.getName());             jos.putNextEntry(ze);             byte[] buffer = new byte[65536];             FileInputStream fis = new FileInputStream(file);             int len;             while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);             fis.close();         }         jos.close();         return jar_file.getPath();     }  ||CODE2:     public static void main(String[] args) {         try {             if (args.length < 2) {                 System.err.println(""usage: test [src] [dest]"");                 return;             }             FileInputStream in = new FileInputStream(args[0]);             FileOutputStream out = new FileOutputStream(args[1]);             FileChannel src = in.getChannel();             FileChannel channel = out.getChannel();             long pos = 0, len = src.size(), ret;             while (len > 0) {                 if ((ret = channel.transferFrom(src, pos, len)) < 0) break;                 len -= ret;                 pos += ret;             }             out.close();             in.close();         } catch (IOException e) {             e.printStackTrace();         }     } ",212,"        p r i v a t e   S t r i n g   j a r D i a g n o s t i c s ( T h r o w a b l e   t h r o w a b l e ,   F i l e [ ]   p r o j e c t s )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e   h o m e   =   n e w   F i l e ( S y s t e m . g e t P r o p e r t y ( "" u s e r . h o m e "" ) ) ; 
                 F i l e   j a r _ f i l e   =   F i l e . c r e a t e T e m p F i l e ( "" n u a g e s - d i a g n o s t i c . "" ,   "" . j a r "" ,   h o m e ) ; 
                 F i l e O u t p u t S t r e a m   f o s   =   n e w   F i l e O u t p u t S t r e a m ( j a r _ f i l e ) ; 
                 J a r O u t p u t S t r e a m   j o s   =   n e w   J a r O u t p u t S t r e a m ( f o s ) ; 
                 Z i p E n t r y   z e   =   n e w   Z i p E n t r y ( "" E x c e p t i o n "" ) ; 
                 j o s . p u t N e x t E n t r y ( z e ) ; 
                 P r i n t S t r e a m   p s   =   n e w   P r i n t S t r e a m ( j o s ) ; 
                 t h r o w a b l e . p r i n t S t a c k T r a c e ( p s ) ; 
                 f o r   ( F i l e   F i l e   :   p r o j e c t s )   i f   ( ( F i l e   ! =   n u l l )   & &   F i l e . e x i s t s ( ) )   { 
                         z e   =   n e w   Z i p E n t r y ( F i l e . g e t N a m e ( ) ) ; 
                         j o s . p u t N e x t E n t r y ( z e ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 6 5 5 3 6 ] ; 
                         F i l e I n p u t S t r e a m   f i s   =   n e w   F i l e I n p u t S t r e a m ( F i l e ) ; 
                         i n t   l e n ; 
                         w h i l e   ( ( l e n   =   f i s . r e a d ( b u f f e r ) )   >   0 )   j o s . w r i t e ( b u f f e r ,   0 ,   l e n ) ; 
                         f i s . c l o s e ( ) ; 
                 } 
                 j o s . c l o s e ( ) ; 
                 r e t u r n   j a r _ f i l e . g e t P a t h ( ) ; 
         } 
",1,1,1,-1,files,-2.1340384e-08,2,7,"{'file': 'File', 'files': 'projects'}",MHM,295,0.13974700371424356
264,"CODE1:             public void run() {                 final SimpleMessageListener listener = new SimpleMessageListener() {                      public final boolean accept(final String from, final String recipient) {                         return true;                     }                      public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {                         System.out.println(""FROM: "" + from);                         System.out.println(""TO: "" + recipient);                         final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));                         final File file = new File(tmpDir, recipient);                         final FileWriter fw = new FileWriter(file);                         try {                             IOUtils.copy(data, fw);                         } finally {                             fw.close();                         }                     }                 };                 final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));                 smtpServer.start();                 System.out.println(""Started SMTP Server"");             }  ||CODE2:     private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {         monitor.subTask(""download "" + url.toString());         InputStream in = null;         FileOutputStream out = null;         URLConnection conn = null;         try {             conn = url.openConnection();             Writer writer = null;             try {                 Date date = new Date(conn.getLastModified());                 writer = new FileWriter(timestamp);                 writer.write(this.FORMAT.format(date));             } catch (IOException e) {                 timestamp.delete();             } finally {                 IOUtils.closeQuietly(writer);             }             in = conn.getInputStream();             out = new FileOutputStream(archive);             IOUtils.copy(in, out);         } finally {             IOUtils.closeQuietly(in);             IOUtils.closeQuietly(out);         }     } ",176,"                        p u b l i c   v o i d   r u n ( )   { 
                                 f i n a l   S i m p l e M e s s a g e L i s t e n e r   l i s t e n e r   =   n e w   S i m p l e M e s s a g e L i s t e n e r ( )   { 
 
                                         p u b l i c   f i n a l   b o o l e a n   a c c e p t ( f i n a l   S t r i n g   f r o m ,   f i n a l   S t r i n g   r e c i p i e n t )   { 
                                                 r e t u r n   t r u e ; 
                                         } 
 
                                         p u b l i c   f i n a l   v o i d   d e l i v e r ( f i n a l   S t r i n g   f r o m ,   f i n a l   S t r i n g   r e c i p i e n t ,   f i n a l   I n p u t S t r e a m   d a t a )   t h r o w s   T o o M u c h D a t a E x c e p t i o n ,   I O E x c e p t i o n   { 
                                                 S y s t e m . g e n . p r i n t l n ( "" F R O M :   ""   +   f r o m ) ; 
                                                 S y s t e m . g e n . p r i n t l n ( "" T O :   ""   +   r e c i p i e n t ) ; 
                                                 f i n a l   F i l e   t m p D i r   =   n e w   F i l e ( S y s t e m . g e t P r o p e r t y ( "" j a v a . i o . t m p d i r "" ) ) ; 
                                                 f i n a l   F i l e   f i l e   =   n e w   F i l e ( t m p D i r ,   r e c i p i e n t ) ; 
                                                 f i n a l   F i l e W r i t e r   f w   =   n e w   F i l e W r i t e r ( f i l e ) ; 
                                                 t r y   { 
                                                         I O U t i l s . c o p y ( d a t a ,   f w ) ; 
                                                 }   f i n a l l y   { 
                                                         f w . c l o s e ( ) ; 
                                                 } 
                                         } 
                                 } ; 
                                 f i n a l   S M T P S e r v e r   s m t p S e r v e r   =   n e w   S M T P S e r v e r ( n e w   S i m p l e M e s s a g e L i s t e n e r A d a p t e r ( l i s t e n e r ) ) ; 
                                 s m t p S e r v e r . s t a r t ( ) ; 
                                 S y s t e m . g e n . p r i n t l n ( "" S t a r t e d   S M T P   S e r v e r "" ) ; 
                         } 
",1,1,1,-1,out,1.060107e-08,1,3,{'out': 'gen'},MHM,296,0.1393534501393636
266,"CODE1:     static HashSet<ScriptEngineFactory> lookup(ClassLoader loader, String name) {         HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();         try {             Enumeration<URL> urls = loader.getResources(name);             while (urls.hasMoreElements()) {                 URL url = urls.nextElement();                 BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));                 String line;                 while ((line = reader.readLine()) != null) {                     if ((line = trim(line)) != null) {                         try {                             Class<ScriptEngineFactory> clazz = (Class<ScriptEngineFactory>) Class.forName(line, true, loader);                             ScriptEngineFactory factory = clazz.newInstance();                             factories.add(factory);                         } catch (java.lang.UnsupportedClassVersionError error) {                             if (DEBUG) {                                 System.err.println(line + "": version mismatch - ignore"");                             }                         }                     }                 }             }         } catch (IOException ex) {             throw new ScriptException(ex);         } finally {             return factories;         }     }  ||CODE2:     public boolean getFile(String local, String remote) throws IOException {         boolean result = false;         GridFTP ftp = new GridFTP();         ftp.setDefaultPort(port);         System.out.println(this + "".getFile "" + remote);         try {             ftp.connect(host);             ftp.login(username, password);             int reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 ftp.disconnect();                 System.err.println(""FTP server refused connection."");                 return false;             }             ftp.get(local, remote);             ftp.logout();             result = true;         } finally {             if (ftp.isConnected()) {                 try {                     ftp.disconnect();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }         System.out.println(this + "".getFile return "" + result);         return result;     } ",211,"        s t a t i c   H a s h S e t < S c r i p t E n g i n e F a c t o r y >   l o o k u p ( C l a s s L o a d e r   l o a d e r ,   S t r i n g   n a m e )   { 
                 H a s h S e t < S c r i p t E n g i n e F a c t o r y >   f a c t o r i e s   =   n e w   H a s h S e t < S c r i p t E n g i n e F a c t o r y > ( ) ; 
                 t r y   { 
                         E n u m e r a t i o n < U R L >   u r l s   =   l o a d e r . g e t R e s o u r c e s ( n a m e ) ; 
                         w h i l e   ( u r l s . h a s M o r e E l e m e n t s ( ) )   { 
                                 U R L   u r l   =   u r l s . n e x t E l e m e n t ( ) ; 
                                 B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ,   "" U T F - 8 "" ) ) ; 
                                 S t r i n g   l i n e ; 
                                 w h i l e   ( ( l i n e   =   r e a d e r . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                         i f   ( ( l i n e   =   t r i m ( l i n e ) )   ! =   n u l l )   { 
                                                 t r y   { 
                                                         C l a s s < S c r i p t E n g i n e F a c t o r y >   c l a z z   =   ( C l a s s < S c r i p t E n g i n e F a c t o r y > )   C l a s s . f o r N a m e ( l i n e ,   t r u e ,   l o a d e r ) ; 
                                                         S c r i p t E n g i n e F a c t o r y   f a c t o r y   =   c l a z z . n e w I n s t a n c e ( ) ; 
                                                         f a c t o r i e s . a d d ( f a c t o r y ) ; 
                                                 }   c a t c h   ( j a v a . l a n g . U n s u p p o r t e d C l a s s V e r s i o n E r r o r   e r r o r )   { 
                                                         i f   ( D E B U G )   { 
                                                                 S y s t e m . e r r . p r i n t l n ( l i n e   +   "" :   v e r s i o n   m i s m a t c h   -   i g n o r e "" ) ; 
                                                         } 
                                                 } 
                                         } 
                                 } 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   a u x )   { 
                         t h r o w   n e w   S c r i p t E x c e p t i o n ( a u x ) ; 
                 }   f i n a l l y   { 
                         r e t u r n   f a c t o r i e s ; 
                 } 
         } 
",0,0,0,-1,ex,0.0,1,2,{'ex': 'aux'},MHM,294,0.14410799344380695
267,"CODE1:             public void run() {                 final SimpleMessageListener listener = new SimpleMessageListener() {                      public final boolean accept(final String from, final String recipient) {                         return true;                     }                      public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {                         System.out.println(""FROM: "" + from);                         System.out.println(""TO: "" + recipient);                         final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));                         final File file = new File(tmpDir, recipient);                         final FileWriter fw = new FileWriter(file);                         try {                             IOUtils.copy(data, fw);                         } finally {                             fw.close();                         }                     }                 };                 final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));                 smtpServer.start();                 System.out.println(""Started SMTP Server"");             }  ||CODE2:     public static LinkedList<String> read(URL url) throws IOException {         LinkedList<String> data = new LinkedList<String>();         HttpURLConnection con = (HttpURLConnection) url.openConnection();         BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));         String input = """";         while (true) {             input = br.readLine();             if (input == null) break;             data.add(input);         }         br.close();         return data;     } ",176,"                        p u b l i c   v o i d   r u n ( )   { 
                                 f i n a l   S i m p l e M e s s a g e L i s t e n e r   l i s t e n e r   =   n e w   S i m p l e M e s s a g e L i s t e n e r ( )   { 
 
                                         p u b l i c   f i n a l   b o o l e a n   a c c e p t ( f i n a l   S t r i n g   f r o m ,   f i n a l   S t r i n g   r e c i p i e n t )   { 
                                                 r e t u r n   t r u e ; 
                                         } 
 
                                         p u b l i c   f i n a l   v o i d   d e l i v e r ( f i n a l   S t r i n g   f r o m ,   f i n a l   S t r i n g   r e c i p i e n t ,   f i n a l   I n p u t S t r e a m   d a t a )   t h r o w s   T o o M u c h D a t a E x c e p t i o n ,   I O E x c e p t i o n   { 
                                                 S y s t e m . o u t . p r i n t l n ( "" F R O M :   ""   +   f r o m ) ; 
                                                 S y s t e m . o u t . p r i n t l n ( "" T O :   ""   +   r e c i p i e n t ) ; 
                                                 f i n a l   F i l e   t m p D i r   =   n e w   F i l e ( S y s t e m . g e t P r o p e r t y ( "" j a v a . i o . t m p d i r "" ) ) ; 
                                                 f i n a l   F i l e   b a s e   =   n e w   F i l e ( t m p D i r ,   r e c i p i e n t ) ; 
                                                 f i n a l   F i l e W r i t e r   f w   =   n e w   F i l e W r i t e r ( b a s e ) ; 
                                                 t r y   { 
                                                         I O U t i l s . c o p y ( d a t a ,   f w ) ; 
                                                 }   f i n a l l y   { 
                                                         f w . c l o s e ( ) ; 
                                                 } 
                                         } 
                                 } ; 
                                 f i n a l   S M T P S e r v e r   s m t p S e r v e r   =   n e w   S M T P S e r v e r ( n e w   S i m p l e M e s s a g e L i s t e n e r A d a p t e r ( l i s t e n e r ) ) ; 
                                 s m t p S e r v e r . s t a r t ( ) ; 
                                 S y s t e m . o u t . p r i n t l n ( "" S t a r t e d   S M T P   S e r v e r "" ) ; 
                         } 
",0,0,0,-1,file,3.5762787e-07,1,2,{'file': 'base'},MHM,285,0.13747167587280273
271,"CODE1:     public boolean import_pieces(String filename) {         int pieceId;         int i;         int n;         int[] color;         boolean byurl = true;         e2piece temppiece;         color = new int[4];         BufferedReader entree;         try {             if (byurl == true) {                 URL url = new URL(baseURL, filename);                 InputStream in = url.openStream();                 entree = new BufferedReader(new InputStreamReader(in));             } else {                 entree = new BufferedReader(new FileReader(filename));             }             pieceId = 0;             while (true) {                 String lineread = entree.readLine();                 if (lineread == null) {                     break;                 }                 StringTokenizer tok = new StringTokenizer(lineread, "" "");                 n = tok.countTokens();                 if (n == 2) {                 } else {                     for (i = 0; i < 4; i++) {                         color[i] = Integer.parseInt(tok.nextToken());                     }                     pieceId++;                     System.out.println(""Read Piece : "" + pieceId + "":"" + color[0] + "" "" + color[1] + "" "" + color[2] + "" "" + color[3]);                     temppiece = new e2piece(pieceId, color[0] + 1, color[1] + 1, color[2] + 1, color[3] + 1);                     allpieces.add_piece(temppiece);                     unplacedpieces.add_piece(temppiece);                 }             }             return true;         } catch (IOException err) {             return false;         }     }  ||CODE2:     @Override     public void actionPerformed(ActionEvent e) {         if (feedbackView.getText().length() <= 0) return;         try {             TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {                  public java.security.cert.X509Certificate[] getAcceptedIssuers() {                     return null;                 }                  public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {                 }                  public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {                 }             } };             try {                 SSLContext sc = SSLContext.getInstance(""SSL"");                 sc.init(null, trustAllCerts, new java.security.SecureRandom());                 HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());             } catch (Exception e3) {                 e3.printStackTrace();             }             feedback = """";             addLine(""Type            : "" + feedbackView.getType());             addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());             addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));             addLine(""Client Version  : "" + HIRuntime.getClientVersion());             addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());             try {                 addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());             } catch (HIWebServiceException e1) {             }             addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");             addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");             if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {                 HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();                 addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");                 addLine("""");                 addLine(""Stack Trace"");                 addLine(""-----------"");                 ByteArrayOutputStream byteStream = new ByteArrayOutputStream();                 PrintWriter writer = new PrintWriter(byteStream);                 lastWSError.getCause().printStackTrace(writer);                 writer.close();                 addLine(new String(byteStream.toByteArray()));             }             addLine("""");             addLine(""Message"");             addLine(""-------"");             feedback = feedback + feedbackView.getText();             feedback = feedback + ""\n\n"";             feedback = URLEncoder.encode(feedback, ""UTF-8"");             URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");             HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();             connection.setRequestMethod(""POST"");             connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");             connection.setDoOutput(true);             PrintWriter writer = new PrintWriter(connection.getOutputStream());             writer.write(""raw_fb="" + feedback);             writer.close();             connection.connect();             String response = connection.getResponseMessage();             if (response.compareTo(""OK"") == 0) {                 HIRuntime.getGui().clearLastWSError();                 HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");             } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");             connection.disconnect();         } catch (MalformedURLException e1) {             e1.printStackTrace();             HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");         } catch (IOException e2) {             e2.printStackTrace();             HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");         }         HIRuntime.getGui().deregisterComponent(this, false);     } ",307,"        p u b l i c   b o o l e a n   i m p o r t _ p i e c e s ( S t r i n g   f i l e n a m e )   { 
                 i n t   p i e c e I d ; 
                 i n t   e x t ; 
                 i n t   n ; 
                 i n t [ ]   c o l o r ; 
                 b o o l e a n   b y u r l   =   t r u e ; 
                 e 2 p i e c e   t e m p p i e c e ; 
                 c o l o r   =   n e w   i n t [ 4 ] ; 
                 B u f f e r e d R e a d e r   e n t r e e ; 
                 t r y   { 
                         i f   ( b y u r l   = =   t r u e )   { 
                                 U R L   u r l   =   n e w   U R L ( b a s e U R L ,   f i l e n a m e ) ; 
                                 I n p u t S t r e a m   i n   =   u r l . o p e n S t r e a m ( ) ; 
                                 e n t r e e   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n ) ) ; 
                         }   e l s e   { 
                                 e n t r e e   =   n e w   B u f f e r e d R e a d e r ( n e w   F i l e R e a d e r ( f i l e n a m e ) ) ; 
                         } 
                         p i e c e I d   =   0 ; 
                         w h i l e   ( t r u e )   { 
                                 S t r i n g   l i n e r e a d   =   e n t r e e . r e a d L i n e ( ) ; 
                                 i f   ( l i n e r e a d   = =   n u l l )   { 
                                         b r e a k ; 
                                 } 
                                 S t r i n g T o k e n i z e r   t o k   =   n e w   S t r i n g T o k e n i z e r ( l i n e r e a d ,   ""   "" ) ; 
                                 n   =   t o k . c o u n t T o k e n s ( ) ; 
                                 i f   ( n   = =   2 )   { 
                                 }   e l s e   { 
                                         f o r   ( e x t   =   0 ;   e x t   <   4 ;   e x t + + )   { 
                                                 c o l o r [ e x t ]   =   I n t e g e r . p a r s e I n t ( t o k . n e x t T o k e n ( ) ) ; 
                                         } 
                                         p i e c e I d + + ; 
                                         S y s t e m . e x t . p r i n t l n ( "" R e a d   P i e c e   :   ""   +   p i e c e I d   +   "" : ""   +   c o l o r [ 0 ]   +   ""   ""   +   c o l o r [ 1 ]   +   ""   ""   +   c o l o r [ 2 ]   +   ""   ""   +   c o l o r [ 3 ] ) ; 
                                         t e m p p i e c e   =   n e w   e 2 p i e c e ( p i e c e I d ,   c o l o r [ 0 ]   +   1 ,   c o l o r [ 1 ]   +   1 ,   c o l o r [ 2 ]   +   1 ,   c o l o r [ 3 ]   +   1 ) ; 
                                         a l l p i e c e s . a d d _ p i e c e ( t e m p p i e c e ) ; 
                                         u n p l a c e d p i e c e s . a d d _ p i e c e ( t e m p p i e c e ) ; 
                                 } 
                         } 
                         r e t u r n   t r u e ; 
                 }   c a t c h   ( I O E x c e p t i o n   e r r )   { 
                         r e t u r n   f a l s e ; 
                 } 
         } 
",0,0,0,-1,out,-1.1920929e-06,1,1,{'out': 'ext'},MHM,311,0.15630634625752768
278,"CODE1:     public static void copyFile(String file1, String file2) {         File filedata1 = new java.io.File(file1);         if (filedata1.exists()) {             try {                 BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));                 BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));                 try {                     int read;                     while ((read = in.read()) != -1) {                         out.write(read);                     }                     out.flush();                 } catch (IOException ex1) {                     ex1.printStackTrace();                 } finally {                     out.close();                     in.close();                 }             } catch (Exception ex) {                 ex.printStackTrace();             }         }     }  ||CODE2:     private URLConnection getConnection(String url, int count) {         URLConnection conn = null;         try {             conn = new URL(url).openConnection();         } catch (IOException e) {             if (count < 5) {                 System.out.println();                 System.out.print(""getConnection failed - "");                 System.out.println(count);                 System.out.println(""Trying again ..."");                 conn = this.getConnection(url, count++);             } else {                 System.out.println(""Giving up"");                 throw new OntopiaRuntimeException(e);             }         }         return conn;     } ",142,"        p u b l i c   s t a t i c   v o i d   c o p y F i l e ( S t r i n g   f i l e 1 ,   S t r i n g   f i l e 2 )   { 
                 F i l e   f i l e d a t a 1   =   n e w   j a v a . i o . F i l e ( f i l e 1 ) ; 
                 i f   ( f i l e d a t a 1 . e x i s t s ( ) )   { 
                         t r y   { 
                                 B u f f e r e d O u t p u t S t r e a m   i o   =   n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( f i l e 2 ) ) ; 
                                 B u f f e r e d I n p u t S t r e a m   a g a i n   =   n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( f i l e 1 ) ) ; 
                                 t r y   { 
                                         i n t   r e a d ; 
                                         w h i l e   ( ( r e a d   =   a g a i n . r e a d ( ) )   ! =   - 1 )   { 
                                                 i o . w r i t e ( r e a d ) ; 
                                         } 
                                         i o . f l u s h ( ) ; 
                                 }   c a t c h   ( D o w n l o a d c e p t i o n   e x 1 )   { 
                                         e x 1 . p r i n t S t a c k T r a c e ( ) ; 
                                 }   f i n a l l y   { 
                                         i o . c l o s e ( ) ; 
                                         a g a i n . c l o s e ( ) ; 
                                 } 
                         }   c a t c h   ( E x c e p t i o n   e x )   { 
                                 e x . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 } 
         } 
",0,0,0,-1,IOException,0.0,3,8,"{'in': 'again', 'IOException': 'Downloadception', 'out': 'io'}",MHM,235,0.12473264137903849
279,"CODE1:     String fetch_m3u(String m3u) {         InputStream pstream = null;         if (m3u.startsWith(""http://"")) {             try {                 URL url = null;                 if (running_as_applet) {                     url = new URL(getCodeBase(), m3u);                 } else {                     url = new URL(m3u);                 }                 URLConnection urlc = url.openConnection();                 pstream = urlc.getInputStream();             } catch (Exception ee) {                 System.err.println(ee);                 return null;             }         }         if (pstream == null && !running_as_applet) {             try {                 pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);             } catch (Exception ee) {                 System.err.println(ee);                 return null;             }         }         String line = null;         while (true) {             try {                 line = readline(pstream);             } catch (Exception e) {             }             if (line == null) {                 break;             }             return line;         }         return null;     }  ||CODE2:     void testFileObject(JavaFileObject fo) throws Exception {         URI uri = fo.toUri();         System.err.println(""uri: "" + uri);         URLConnection urlconn = uri.toURL().openConnection();         if (urlconn instanceof JarURLConnection) {             JarURLConnection jarconn = (JarURLConnection) urlconn;             File f = new File(jarconn.getJarFile().getName());             foundJars.add(f.getName());         }         try {             byte[] uriData = read(urlconn.getInputStream());             byte[] foData = read(fo.openInputStream());             if (!Arrays.equals(uriData, foData)) {                 if (uriData.length != foData.length) throw new Exception(""data size differs: uri data "" + uriData.length + "" bytes, fo data "" + foData.length + "" bytes"");                 for (int i = 0; i < uriData.length; i++) {                     if (uriData[i] != foData[i]) throw new Exception(""unexpected data returned at offset "" + i + "", uri data "" + uriData[i] + "", fo data "" + foData[i]);                 }                 throw new AssertionError(""cannot find difference"");             }         } finally {             if (urlconn instanceof JarURLConnection) {                 JarURLConnection jarconn = (JarURLConnection) urlconn;                 jarconn.getJarFile().close();             }         }     } ",202,"        S t r i n g   f e t c h _ m 3 u ( S t r i n g   m 3 u )   { 
                 I n p u t S t r e a m   p s t r e a m   =   n u l l ; 
                 i f   ( m 3 u . s t a r t s W i t h ( "" h t t p : / / "" ) )   { 
                         t r y   { 
                                 U R L   s o u r c e   =   n u l l ; 
                                 i f   ( r u n n i n g _ a s _ a p p l e t )   { 
                                         s o u r c e   =   n e w   U R L ( g e t C o d e B a s e ( ) ,   m 3 u ) ; 
                                 }   e l s e   { 
                                         s o u r c e   =   n e w   U R L ( m 3 u ) ; 
                                 } 
                                 U R L C o n n e c t i o n   u r l c   =   s o u r c e . o p e n C o n n e c t i o n ( ) ; 
                                 p s t r e a m   =   u r l c . g e t I n p u t S t r e a m ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e e )   { 
                                 S y s t e m . e r r . p r i n t l n ( e e ) ; 
                                 r e t u r n   n u l l ; 
                         } 
                 } 
                 i f   ( p s t r e a m   = =   n u l l   & &   ! r u n n i n g _ a s _ a p p l e t )   { 
                         t r y   { 
                                 p s t r e a m   =   n e w   F i l e I n p u t S t r e a m ( S y s t e m . g e t P r o p e r t y ( "" u s e r . d i r "" )   +   S y s t e m . g e t P r o p e r t y ( "" f i l e . s e p a r a t o r "" )   +   m 3 u ) ; 
                         }   c a t c h   ( E x c e p t i o n   e e )   { 
                                 S y s t e m . e r r . p r i n t l n ( e e ) ; 
                                 r e t u r n   n u l l ; 
                         } 
                 } 
                 S t r i n g   l i n e   =   n u l l ; 
                 w h i l e   ( t r u e )   { 
                         t r y   { 
                                 l i n e   =   r e a d l i n e ( p s t r e a m ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                         } 
                         i f   ( l i n e   = =   n u l l )   { 
                                 b r e a k ; 
                         } 
                         r e t u r n   l i n e ; 
                 } 
                 r e t u r n   n u l l ; 
         } 
",0,0,0,-1,url,1.1920929e-07,1,4,{'url': 'source'},MHM,295,0.14431978464126588
285,"CODE1:     public String encrypt(String text, String passphrase, int keylen) {         RC2ParameterSpec parm = new RC2ParameterSpec(keylen);         try {             MessageDigest md = MessageDigest.getInstance(""MD5"");             md.update(passphrase.getBytes(getCharset()));             SecretKeySpec skeySpec = new SecretKeySpec(md.digest(), ""RC2"");             Cipher cipher = Cipher.getInstance(""RC2/ECB/NoPadding"");             cipher.init(Cipher.ENCRYPT_MODE, skeySpec, parm);             byte[] newBytes = encodeStringNew(text);             byte[] d = cipher.doFinal(newBytes);             return Base64.encodeBytes(d);         } catch (NoSuchAlgorithmException e) {             e.printStackTrace();         } catch (NoSuchPaddingException e) {             e.printStackTrace();         } catch (InvalidKeyException e) {             e.printStackTrace();         } catch (InvalidAlgorithmParameterException e) {             e.printStackTrace();         } catch (IllegalBlockSizeException e) {             e.printStackTrace();         } catch (BadPaddingException e) {             e.printStackTrace();         }         return null;     }  ||CODE2:     public synchronized String encrypt(String text) throws Exception {         MessageDigest md = null;         try {             md = MessageDigest.getInstance(""SHA-512"");         } catch (NoSuchAlgorithmException e) {             throw new Exception(e.getMessage());         }         md.update(text.getBytes());         byte raw[] = md.digest();         String hash = """";         for (int i = 0; i < raw.length; i++) {             byte temp = raw[i];             String s = Integer.toHexString(new Byte(temp));             while (s.length() < 2) {                 s = ""0"" + s;             }             s = s.substring(s.length() - 2);             hash += s;         }         return hash;     } ",206,"        p u b l i c   S t r i n g   e n c r y p t ( S t r i n g   t e x t ,   S t r i n g   p a s s p h r a s e ,   i n t   k e y l e n )   { 
                 R C 2 P a r a m e t e r S p e c   p a r m   =   n e w   R C 2 P a r a m e t e r S p e c ( k e y l e n ) ; 
                 t r y   { 
                         M e s s a g e D i g e s t   m d   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                         m d . u p d a t e ( p a s s p h r a s e . g e t B y t e s ( g e t C h a r s e t ( ) ) ) ; 
                         S e c r e t K e y S p e c   s k e y S p e c   =   n e w   S e c r e t K e y S p e c ( m d . v a l i d e s t e d ( ) ,   "" R C 2 "" ) ; 
                         C i p h e r   c i p h e r   =   C i p h e r . g e t I n s t a n c e ( "" R C 2 / E C B / N o P a d d i n g "" ) ; 
                         c i p h e r . i n i t ( C i p h e r . E N C R Y P T _ M O D E ,   s k e y S p e c ,   p a r m ) ; 
                         b y t e [ ]   n e w B y t e s   =   e n c o d e S t r i n g N e w ( t e x t ) ; 
                         b y t e [ ]   d   =   c i p h e r . d o F i n a l ( n e w B y t e s ) ; 
                         r e t u r n   B a s e 6 4 . e n c o d e B y t e s ( d ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( N o S u c h P a d d i n g E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( I n v a l i d K e y E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( I n v a l i d A l g o r i t h m P a r a m e t e r E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( I l l e g a l B l o c k S i z e E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( B a d P a d d i n g E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   n u l l ; 
         } 
",1,1,1,-1,digest,-2.1021697e-07,1,1,{'digest': 'validested'},MHM,316,0.14411692221959432
288,"CODE1:     private static boolean CopyFile(File srcFile, File tagFile) throws IOException {         if (srcFile == null || tagFile == null) {             return false;         }         int length = 2097152;         File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));         if (!dirFile.exists()) {             dirFile.mkdirs();         }         FileInputStream in = new FileInputStream(srcFile);         FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());         FileChannel inC = in.getChannel();         FileChannel outC = out.getChannel();         int i = 0;         while (true) {             if (inC.position() == inC.size()) {                 inC.close();                 outC.close();                 break;             }             if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;             inC.transferTo(inC.position(), length, outC);             inC.position(inC.position() + length);             i++;         }         return true;     }  ||CODE2:     public static void main(String[] args) throws IOException {         PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));         String[] files = new File(Constants.INDEX_PATH).list();         for (int i = 0; i < files.length; i++) {             String f = files[i];             if (f.equals(""deletable"") || f.startsWith(""."")) continue;             FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));             FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));             byte[] buf = new byte[16384];             int n;             while ((n = in.read(buf)) > 0) out.write(buf, 0, n);             in.close();             out.close();             filesTxt.println(f);         }         filesTxt.close();     } ",225,"        p r i v a t e   s t a t i c   b o o l e a n   C o p y F i l e ( F i l e   s r c F i l e ,   F i l e   t a g F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( s r c F i l e   = =   n u l l   | |   t a g F i l e   = =   n u l l )   { 
                         r e t u r n   f a l s e ; 
                 } 
                 i n t   l e n g t h   =   2 0 9 7 1 5 2 ; 
                 F i l e   d i r F i l e   =   n e w   F i l e ( g e t F i l e F o l d e r ( t a g F i l e . g e t A b s o l u t e P a t h ( ) ) ) ; 
                 i f   ( ! d i r F i l e . e x i s t s ( ) )   { 
                         d i r F i l e . m k d i r s ( ) ; 
                 } 
                 F i l e I n p u t S t r e a m   a c   =   n e w   F i l e I n p u t S t r e a m ( s r c F i l e ) ; 
                 F i l e O u t p u t S t r e a m   s e s s i o n   =   n e w   F i l e O u t p u t S t r e a m ( t a g F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 F i l e C h a n n e l   i n C   =   a c . g e t C h a n n e l ( ) ; 
                 F i l e C h a n n e l   o u t C   =   s e s s i o n . g e t C h a n n e l ( ) ; 
                 i n t   i   =   0 ; 
                 w h i l e   ( t r u e )   { 
                         i f   ( i n C . p o s i t i o n ( )   = =   i n C . s i z e ( ) )   { 
                                 i n C . c l o s e ( ) ; 
                                 o u t C . c l o s e ( ) ; 
                                 b r e a k ; 
                         } 
                         i f   ( ( i n C . s i z e ( )   -   i n C . p o s i t i o n ( ) )   <   2 0 9 7 1 5 2 0 )   l e n g t h   =   ( i n t )   ( i n C . s i z e ( )   -   i n C . p o s i t i o n ( ) ) ;   e l s e   l e n g t h   =   2 0 9 7 1 5 2 0 ; 
                         i n C . t r a n s f e r T o ( i n C . p o s i t i o n ( ) ,   l e n g t h ,   o u t C ) ; 
                         i n C . p o s i t i o n ( i n C . p o s i t i o n ( )   +   l e n g t h ) ; 
                         i + + ; 
                 } 
                 r e t u r n   t r u e ; 
         } 
",1,1,1,-1,in,1.2012606e-08,2,4,"{'out': 'session', 'in': 'ac'}",MHM,296,0.1449921488761902
291,"CODE1:     public void run() {         InputStreamReader in = null;         OutputStreamWriter out = null;         URL url = null;         File net_file = null;         long in_length = 0;         progress_bar.setValue(0);         progress_bar.setString(""connecting!"");         progress_bar.setStringPainted(true);         if (sync_host_path_name.length() > 0) {             try {                 try {                     if (protocol == Settings.protFTP) {                         url = new URL(""ftp://"" + user_name + "":"" + password + ""@"" + sync_host_path_name);                         URLConnection connection = url.openConnection();                         in = new InputStreamReader(connection.getInputStream());                         in_length = connection.getContentLength();                     } else {                         net_file = new File(sync_host_path_name);                         in = new InputStreamReader(new FileInputStream(net_file), ""US-ASCII"");                         in_length = net_file.length();                     }                     progress_bar.setString(""synchronising!"");                     EventMemory.get_instance(null).import_vCalendar(in, Math.max(in_length, 1), true, progress_bar);                     in.close();                 } catch (Exception x) {                     progress_bar.setString(x.getMessage());                 }                 progress_bar.setValue(0);                 progress_bar.setString(""connecting!"");                 if (protocol == Settings.protFTP) {                     URLConnection connection = url.openConnection();                     connection.setDoOutput(true);                     out = new OutputStreamWriter(connection.getOutputStream(), ""US-ASCII"");                 } else if (protocol == Settings.protFile) {                     out = new OutputStreamWriter(new FileOutputStream(net_file), ""US-ASCII"");                 }                 progress_bar.setString(""writing!"");                 int[] i = new int[EventMemory.get_instance(null).get_size()];                 for (int k = 0; k < i.length; k++) {                     i[k] = k;                 }                 progress_bar.setStringPainted(true);                 EventMemory.get_instance(null).export_vCalendar(out, i, true, progress_bar, true);                 out.close();                 sync_dialog.sync_panel.unlock_input();                 sync_dialog.dispose();             } catch (Exception e) {                 progress_bar.setString(e.getMessage());                 sync_dialog.sync_panel.unlock_input();             }         } else {             progress_bar.setString(""enter a valid URL!"");             sync_dialog.sync_panel.unlock_input();         }     }  ||CODE2:     public static void doVersionCheck(View view) {         view.showWaitCursor();         try {             URL url = new URL(jEdit.getProperty(""version-check.url""));             InputStream in = url.openStream();             BufferedReader bin = new BufferedReader(new InputStreamReader(in));             String line;             String version = null;             String build = null;             while ((line = bin.readLine()) != null) {                 if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();             }             bin.close();             if (version != null && build != null) {                 if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {                     GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);                 }             }         } catch (IOException e) {             String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };             GUIUtilities.error(view, ""read-error"", args);         }         view.hideWaitCursor();     } ",461,"        p u b l i c   v o i d   r u n ( )   { 
                 I n p u t S t r e a m R e a d e r   b   =   n u l l ; 
                 O u t p u t S t r e a m W r i t e r   o u t   =   n u l l ; 
                 U R L   u r l   =   n u l l ; 
                 F i l e   n e t _ f i l e   =   n u l l ; 
                 l o n g   i n _ l e n g t h   =   0 ; 
                 p r o g r e s s _ b a r . s e t V a l u e ( 0 ) ; 
                 p r o g r e s s _ b a r . s e t S t r i n g ( "" c o n n e c t i n g ! "" ) ; 
                 p r o g r e s s _ b a r . s e t S t r i n g P a i n t e d ( t r u e ) ; 
                 i f   ( s y n c _ h o s t _ p a t h _ n a m e . l e n g t h ( )   >   0 )   { 
                         t r y   { 
                                 t r y   { 
                                         i f   ( p r o t o c o l   = =   S e t t i n g s . p r o t F T P )   { 
                                                 u r l   =   n e w   U R L ( "" f t p : / / ""   +   u s e r _ n a m e   +   "" : ""   +   p a s s w o r d   +   "" @ ""   +   s y n c _ h o s t _ p a t h _ n a m e ) ; 
                                                 U R L C o n n e c t i o n   c o n n e c t i o n   =   u r l . o p e n C o n n e c t i o n ( ) ; 
                                                 b   =   n e w   I n p u t S t r e a m R e a d e r ( c o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ; 
                                                 i n _ l e n g t h   =   c o n n e c t i o n . g e t C o n t e n t L e n g t h ( ) ; 
                                         }   e l s e   { 
                                                 n e t _ f i l e   =   n e w   F i l e ( s y n c _ h o s t _ p a t h _ n a m e ) ; 
                                                 b   =   n e w   I n p u t S t r e a m R e a d e r ( n e w   F i l e I n p u t S t r e a m ( n e t _ f i l e ) ,   "" U S - A S C I I "" ) ; 
                                                 i n _ l e n g t h   =   n e t _ f i l e . l e n g t h ( ) ; 
                                         } 
                                         p r o g r e s s _ b a r . s e t S t r i n g ( "" s y n c h r o n i s i n g ! "" ) ; 
                                         E v e n t M e m o r y . g e t _ i n s t a n c e ( n u l l ) . i m p o r t _ v C a l e n d a r ( b ,   M a t h . m a x ( i n _ l e n g t h ,   1 ) ,   t r u e ,   p r o g r e s s _ b a r ) ; 
                                         b . c l o s e ( ) ; 
                                 }   c a t c h   ( E x c e p t i o n   x )   { 
                                         p r o g r e s s _ b a r . s e t S t r i n g ( x . g e t M e s s a g e ( ) ) ; 
                                 } 
                                 p r o g r e s s _ b a r . s e t V a l u e ( 0 ) ; 
                                 p r o g r e s s _ b a r . s e t S t r i n g ( "" c o n n e c t i n g ! "" ) ; 
                                 i f   ( p r o t o c o l   = =   S e t t i n g s . p r o t F T P )   { 
                                         U R L C o n n e c t i o n   c o n n e c t i o n   =   u r l . o p e n C o n n e c t i o n ( ) ; 
                                         c o n n e c t i o n . s e t D o O u t p u t ( t r u e ) ; 
                                         o u t   =   n e w   O u t p u t S t r e a m W r i t e r ( c o n n e c t i o n . g e t O u t p u t S t r e a m ( ) ,   "" U S - A S C I I "" ) ; 
                                 }   e l s e   i f   ( p r o t o c o l   = =   S e t t i n g s . p r o t F i l e )   { 
                                         o u t   =   n e w   O u t p u t S t r e a m W r i t e r ( n e w   F i l e O u t p u t S t r e a m ( n e t _ f i l e ) ,   "" U S - A S C I I "" ) ; 
                                 } 
                                 p r o g r e s s _ b a r . s e t S t r i n g ( "" w r i t i n g ! "" ) ; 
                                 i n t [ ]   b   =   n e w   i n t [ E v e n t M e m o r y . g e t _ i n s t a n c e ( n u l l ) . g e t _ s i z e ( ) ] ; 
                                 f o r   ( i n t   k   =   0 ;   k   <   b . l e n g t h ;   k + + )   { 
                                         b [ k ]   =   k ; 
                                 } 
                                 p r o g r e s s _ b a r . s e t S t r i n g P a i n t e d ( t r u e ) ; 
                                 E v e n t M e m o r y . g e t _ i n s t a n c e ( n u l l ) . e x p o r t _ v C a l e n d a r ( o u t ,   b ,   t r u e ,   p r o g r e s s _ b a r ,   t r u e ) ; 
                                 o u t . c l o s e ( ) ; 
                                 s y n c _ d i a l o g . s y n c _ p a n e l . u n l o c k _ i n p u t ( ) ; 
                                 s y n c _ d i a l o g . d i s p o s e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 p r o g r e s s _ b a r . s e t S t r i n g ( e . g e t M e s s a g e ( ) ) ; 
                                 s y n c _ d i a l o g . s y n c _ p a n e l . u n l o c k _ i n p u t ( ) ; 
                         } 
                 }   e l s e   { 
                         p r o g r e s s _ b a r . s e t S t r i n g ( "" e n t e r   a   v a l i d   U R L ! "" ) ; 
                         s y n c _ d i a l o g . s y n c _ p a n e l . u n l o c k _ i n p u t ( ) ; 
                 } 
         } 
",0,0,0,-1,i,-1.579523e-05,1,4,{'i': 'b'},MHM,312,0.17354923089345295
294,"CODE1:     public ScriptInfoList getScriptList() {         ScriptInfoList scripts = null;         try {             URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);             ObjectInputStream ois = new ObjectInputStream(url.openStream());             scripts = (ScriptInfoList) ois.readObject();             ois.close();             System.out.println(""got script list"");         } catch (Exception e) {             e.printStackTrace();         }         return scripts;     }  ||CODE2:     public void testJob() {         try {             URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");             url.openConnection();             url.getContent();             System.out.print(""00"");         } catch (Exception e) {             System.out.print(""Daily data update exception:"" + e);         }     } ",87,"        p u b l i c   S c r i p t I n f o L i s t   g e t S c r i p t L i s t ( )   { 
                 S c r i p t I n f o L i s t   s c r i p t s   =   n u l l ; 
                 t r y   { 
                         U R L   i m a g e   =   n e w   U R L ( S C R I P T _ U R L   +   "" ? c u s t o m e r = ""   +   c u s t o m e r I D ) ; 
                         O b j e c t I n p u t S t r e a m   o i s   =   n e w   O b j e c t I n p u t S t r e a m ( i m a g e . o p e n S t r e a m ( ) ) ; 
                         s c r i p t s   =   ( S c r i p t I n f o L i s t )   o i s . r e a d O b j e c t ( ) ; 
                         o i s . c l o s e ( ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" g o t   s c r i p t   l i s t "" ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   s c r i p t s ; 
         } 
",0,0,0,-1,url,-5.9604645e-07,1,2,{'url': 'config'},MHM,301,0.1366053859392802
297,"CODE1:     private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {         ServletOutputStream out = null;         InputStream in = null;         if (file.isDirectory() || !file.canRead()) {             logger.debug(""File does not exist: "" + file.getAbsolutePath());             response.setStatus(HttpServletResponse.SC_NOT_FOUND);             return;         }         String mimeType = getServletContext().getMimeType(file.getAbsolutePath());         if (mimeType == null) {             mimeType = WikiFile.UNKNOWN_MIME_TYPE;         }         try {             response.setContentType(mimeType);             response.setContentLength((int) file.length());             out = response.getOutputStream();             in = new FileInputStream(file);             IOUtils.copy(in, out);             out.flush();         } finally {             IOUtils.closeQuietly(in);             IOUtils.closeQuietly(out);         }     }  ||CODE2:     public static Observacion load() {         Observacion obs = new Observacion(new Date());         FTPClient f = new FTPClient();         SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMdd"");         final String datestamp = sdf.format(new Date());         String pathname = String.format(PATHNAME_PATTERN, datestamp);         try {             InetAddress server = InetAddress.getByName(HOST);             f.connect(server);             f.login(USERNAME, PASSWORD);             FTPFile[] files = f.listFiles(pathname, new FTPFileFilter() {                  @Override                 public boolean accept(FTPFile file) {                     return file.getName().startsWith(datestamp);                 }             });             FTPFile file = files[files.length - 1];             f.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);             boolean download = false;             String remote = pathname + ""/"" + file.getName();             if (download) {                 File out = new File(""/home/randres/Desktop/"" + file.getName());                 FileOutputStream fout = new FileOutputStream(out);                 fout.flush();                 fout.close();             } else {                 GZIPInputStream gzipin = new GZIPInputStream(f.retrieveFileStream(remote));                 LineNumberReader lreader = new LineNumberReader(new InputStreamReader(gzipin, ""Cp1250""));                 String line = null;                 while ((line = lreader.readLine()) != null) {                     obs.addEstacion(AemetRetriever.processLine(line));                 }                 lreader.close();             }             f.disconnect();         } catch (Exception e) {             LOGGER.log(Level.WARNING, ""Cannot retrieve data from FTP"", e);         }         return obs;     } ",171,"        p r i v a t e   v o i d   s t r e a m F i l e F r o m F i l e S y s t e m ( F i l e   a p p l i c a t i o n ,   H t t p S e r v l e t R e s p o n s e   r e s p o n s e )   t h r o w s   S e r v l e t E x c e p t i o n ,   I O E x c e p t i o n   { 
                 S e r v l e t O u t p u t S t r e a m   o u t e r   =   n u l l ; 
                 I n p u t S t r e a m   i n n e r   =   n u l l ; 
                 i f   ( a p p l i c a t i o n . i s D i r e c t o r y ( )   | |   ! a p p l i c a t i o n . c a n R e a d ( ) )   { 
                         l o g g e r . d e b u g ( "" F i l e   d o e s   n o t   e x i s t :   ""   +   a p p l i c a t i o n . g e t A b s o l u t e P a t h ( ) ) ; 
                         r e s p o n s e . s e t S t a t u s ( H t t p S e r v l e t R e s p o n s e . S C _ N O T _ F O U N D ) ; 
                         r e t u r n ; 
                 } 
                 S t r i n g   m i m e T y p e   =   g e t S e r v l e t C o n t e x t ( ) . g e t M i m e T y p e ( a p p l i c a t i o n . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( m i m e T y p e   = =   n u l l )   { 
                         m i m e T y p e   =   W i k i F i l e . U N K N O W N _ M I M E _ T Y P E ; 
                 } 
                 t r y   { 
                         r e s p o n s e . s e t C o n t e n t T y p e ( m i m e T y p e ) ; 
                         r e s p o n s e . s e t C o n t e n t L e n g t h ( ( i n t )   a p p l i c a t i o n . l e n g t h ( ) ) ; 
                         o u t e r   =   r e s p o n s e . g e t O u t p u t S t r e a m ( ) ; 
                         i n n e r   =   n e w   F i l e I n p u t S t r e a m ( a p p l i c a t i o n ) ; 
                         I O U t i l s . c o p y ( i n n e r ,   o u t e r ) ; 
                         o u t e r . f l u s h ( ) ; 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e Q u i e t l y ( i n n e r ) ; 
                         I O U t i l s . c l o s e Q u i e t l y ( o u t e r ) ; 
                 } 
         } 
",0,0,0,-1,file,0.0,3,16,"{'in': 'inner', 'out': 'outer', 'file': 'application'}",MHM,291,0.1367087920506795
300,"CODE1:     public void createPdf(final String eventURI) throws IOException, DocumentException {         createSections(eventURI);         even = false;         final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX));         final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));         writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);         writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX));         writer.setBoxSize(""trim"", Dimensions.getDimension(even, Dimension.TRIMBOX));         writer.setBoxSize(""bleed"", Dimensions.getDimension(even, Dimension.BLEEDBOX));         final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();         writer.setPageEvent(event);         document.open();         final PdfContentByte content = writer.getDirectContent();         event.setTabs(Index.INFO.getTab());         importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());         importPages(document, content, MyProperties.getBefore(), event);         addAdPage(document, content);         PdfReader reader = new PdfReader(Presentations.INFO.getOutput());         String[] titles = { """", """" };         for (int i = 1; i <= reader.getNumberOfPages(); i++) {             titles = index.getSubtitle(titles, i);             event.setTabs(titles[0].toLowerCase());             addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE);             addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE);             content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));             document.newPage();             even = !even;         }         addAdPage(document, content);         importPages(document, content, MyProperties.getAfter(), event);         int total = writer.getPageNumber() - 1;         event.setNoMorePageNumbers();         event.setTabs(Schedules.INFO.getTab());         reader = new PdfReader(Schedules.INFO.getOutput());         for (int i = 1; i <= reader.getNumberOfPages(); i++) {             addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE);             content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));             document.newPage();             even = !even;         }         document.close();         final File file = new File(MyProperties.getOutput());         final byte[] original = new byte[(int) file.length()];         final FileInputStream f = new FileInputStream(file);         f.read(original);         reader = new PdfReader(original);         final List<Integer> ranges = new ArrayList<Integer>();         for (int i = 1; i <= total; i++) {             ranges.add(i);             if (i == total / 2) {                 for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {                     ranges.add(j);                 }             }         }         reader.selectPages(ranges);         final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));         stamper.close();     }  ||CODE2:     public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {         String path = req.getParameter(""path"");         path = URLDecoder.decode(path, ""UTF-8"");         String name = req.getParameter(""name"");         name = new String(name.getBytes(), ""UTF-8"");         String contentType = req.getParameter(""contentType"");         if (path == null) {             NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");             LOG.error(e);             throw e;         }         URL url = new URL(path);         InputStream inStream = null;         try {             inStream = URLUtils.getFileContent(url, req.getSession().getId());             res.setContentType(contentType);             res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");             ServletOutputStream out = res.getOutputStream();             IOUtils.copy(inStream, out);             res.flushBuffer();         } finally {             if (inStream != null) {                 inStream.close();             }         }     } ",699,"        p u b l i c   v o i d   c r e a t e P d f ( f i n a l   S t r i n g   e v e n t U R I )   t h r o w s   I O E x c e p t i o n ,   D o c u m e n t E x c e p t i o n   { 
                 c r e a t e S e c t i o n s ( e v e n t U R I ) ; 
                 e v e n   =   f a l s e ; 
                 f i n a l   D o c u m e n t   d o c u m e n t   =   n e w   D o c u m e n t ( D i m e n s i o n s . g e t D i m e n s i o n ( e v e n ,   D i m e n s i o n . M E D I A B O X ) ) ; 
                 f i n a l   P d f W r i t e r   w r i t e r   =   P d f W r i t e r . g e t I n s t a n c e ( d o c u m e n t ,   n e w   F i l e O u t p u t S t r e a m ( M y P r o p e r t i e s . g e t O u t p u t ( ) ) ) ; 
                 w r i t e r . s e t V i e w e r P r e f e r e n c e s ( P d f W r i t e r . P a g e L a y o u t T w o C o l u m n R i g h t ) ; 
                 w r i t e r . s e t C r o p B o x S i z e ( D i m e n s i o n s . g e t D i m e n s i o n ( e v e n ,   D i m e n s i o n . C R O P B O X ) ) ; 
                 w r i t e r . s e t B o x S i z e ( "" t r i m "" ,   D i m e n s i o n s . g e t D i m e n s i o n ( e v e n ,   D i m e n s i o n . T R I M B O X ) ) ; 
                 w r i t e r . s e t B o x S i z e ( "" b l e e d "" ,   D i m e n s i o n s . g e t D i m e n s i o n ( e v e n ,   D i m e n s i o n . B L E E D B O X ) ) ; 
                 f i n a l   E v e n t B a c k g r o u n d A n d P a g e N u m b e r s   e v e n t   =   n e w   E v e n t B a c k g r o u n d A n d P a g e N u m b e r s ( ) ; 
                 w r i t e r . s e t P a g e E v e n t ( e v e n t ) ; 
                 d o c u m e n t . o p e n ( ) ; 
                 f i n a l   P d f C o n t e n t B y t e   c o n t e n t   =   w r i t e r . g e t D i r e c t C o n t e n t ( ) ; 
                 e v e n t . s e t T a b s ( I n d e x . I N F O . g e t T a b ( ) ) ; 
                 i m p o r t P a g e s ( d o c u m e n t ,   c o n t e n t ,   n e w   P d f R e a d e r ( I n d e x . I N F O . g e t O u t p u t ( ) ) ,   I n d e x . I N F O . g e t T i t l e ( ) ) ; 
                 i m p o r t P a g e s ( d o c u m e n t ,   c o n t e n t ,   M y P r o p e r t i e s . g e t B e f o r e ( ) ,   e v e n t ) ; 
                 a d d A d P a g e ( d o c u m e n t ,   c o n t e n t ) ; 
                 P d f R e a d e r   r e a d e r   =   n e w   P d f R e a d e r ( P r e s e n t a t i o n s . I N F O . g e t O u t p u t ( ) ) ; 
                 S t r i n g [ ]   t i t l e s   =   {   "" "" ,   "" ""   } ; 
                 f o r   ( i n t   i   =   1 ;   i   < =   r e a d e r . g e t N u m b e r O f P a g e s ( ) ;   i + + )   { 
                         t i t l e s   =   i n d e x . g e t S u b t i t l e ( t i t l e s ,   i ) ; 
                         e v e n t . s e t T a b s ( t i t l e s [ 0 ] . t o L o w e r C a s e ( ) ) ; 
                         a d d T i t l e L e f t ( c o n t e n t ,   D i m e n s i o n s . g e t T i t l e A r e a ( e v e n ) ,   t i t l e s [ 0 ] ,   M y F o n t s . T I T L E ) ; 
                         a d d T i t l e R i g h t ( c o n t e n t ,   D i m e n s i o n s . g e t T i t l e A r e a ( e v e n ) ,   t i t l e s [ 1 ] ,   M y F o n t s . D A T E ) ; 
                         c o n t e n t . a d d T e m p l a t e ( w r i t e r . g e t I m p o r t e d P a g e ( r e a d e r ,   i ) ,   D i m e n s i o n s . g e t O f f s e t X ( e v e n ) ,   D i m e n s i o n s . g e t O f f s e t Y ( e v e n ) ) ; 
                         d o c u m e n t . n e w P a g e ( ) ; 
                         e v e n   =   ! e v e n ; 
                 } 
                 a d d A d P a g e ( d o c u m e n t ,   c o n t e n t ) ; 
                 i m p o r t P a g e s ( d o c u m e n t ,   c o n t e n t ,   M y P r o p e r t i e s . g e t A f t e r ( ) ,   e v e n t ) ; 
                 i n t   t o t a l   =   w r i t e r . g e t P a g e N u m b e r ( )   -   1 ; 
                 e v e n t . s e t N o M o r e P a g e N u m b e r s ( ) ; 
                 e v e n t . s e t T a b s ( S c h e d u l e s . I N F O . g e t T a b ( ) ) ; 
                 r e a d e r   =   n e w   P d f R e a d e r ( S c h e d u l e s . I N F O . g e t O u t p u t ( ) ) ; 
                 f o r   ( i n t   i   =   1 ;   i   < =   r e a d e r . g e t N u m b e r O f P a g e s ( ) ;   i + + )   { 
                         a d d T i t l e L e f t ( c o n t e n t ,   D i m e n s i o n s . g e t T i t l e A r e a ( e v e n ) ,   S c h e d u l e s . I N F O . g e t T i t l e ( ) ,   M y F o n t s . T I T L E ) ; 
                         c o n t e n t . a d d T e m p l a t e ( w r i t e r . g e t I m p o r t e d P a g e ( r e a d e r ,   i ) ,   D i m e n s i o n s . g e t O f f s e t X ( e v e n ) ,   D i m e n s i o n s . g e t O f f s e t Y ( e v e n ) ) ; 
                         d o c u m e n t . n e w P a g e ( ) ; 
                         e v e n   =   ! e v e n ; 
                 } 
                 d o c u m e n t . c l o s e ( ) ; 
                 f i n a l   F i l e   m e s s a g e   =   n e w   F i l e ( M y P r o p e r t i e s . g e t O u t p u t ( ) ) ; 
                 f i n a l   b y t e [ ]   o r i g i n a l   =   n e w   b y t e [ ( i n t )   m e s s a g e . l e n g t h ( ) ] ; 
                 f i n a l   F i l e I n p u t S t r e a m   f   =   n e w   F i l e I n p u t S t r e a m ( m e s s a g e ) ; 
                 f . r e a d ( o r i g i n a l ) ; 
                 r e a d e r   =   n e w   P d f R e a d e r ( o r i g i n a l ) ; 
                 f i n a l   L i s t < I n t e g e r >   r a n g e s   =   n e w   A r r a y L i s t < I n t e g e r > ( ) ; 
                 f o r   ( i n t   i   =   1 ;   i   < =   t o t a l ;   i + + )   { 
                         r a n g e s . a d d ( i ) ; 
                         i f   ( i   = =   t o t a l   /   2 )   { 
                                 f o r   ( i n t   j   =   t o t a l   +   1 ;   j   < =   r e a d e r . g e t N u m b e r O f P a g e s ( ) ;   j + + )   { 
                                         r a n g e s . a d d ( j ) ; 
                                 } 
                         } 
                 } 
                 r e a d e r . s e l e c t P a g e s ( r a n g e s ) ; 
                 f i n a l   P d f S t a m p e r   s t a m p e r   =   n e w   P d f S t a m p e r ( r e a d e r ,   n e w   F i l e O u t p u t S t r e a m ( M y P r o p e r t i e s . g e t O u t p u t ( ) ) ) ; 
                 s t a m p e r . c l o s e ( ) ; 
         } 
",1,1,1,-1,file,0.0,1,3,{'file': 'message'},MHM,289,0.19694334268569946
303,"CODE1:     private void copySon(File parent) {         System.out.println(""parent---"" + parent.getAbsolutePath());         if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {             File cases = new File(parent, ""cases"");             if (cases.exists()) {                 File answers = new File(parent, ""answers"");                 if (!answers.exists()) {                     answers.mkdir();                     File answers_linux = new File(parent, ""answers_linux"");                     for (File file : answers_linux.listFiles()) {                         if (file.isDirectory()) {                             continue;                         }                         File target = new File(answers, file.getName());                         try {                             IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));                         } catch (Throwable t) {                             t.printStackTrace();                         }                     }                 }             } else {                 for (File son : parent.listFiles()) {                     System.out.println(""parent---"" + son.getAbsolutePath());                     copySon(son);                 }             }         }     }  ||CODE2:     private String hashPassword(String password) {         if (password != null && password.trim().length() > 0) {             try {                 MessageDigest md5 = MessageDigest.getInstance(""MD5"");                 md5.update(password.trim().getBytes());                 BigInteger hash = new BigInteger(1, md5.digest());                 return hash.toString(16);             } catch (NoSuchAlgorithmException nsae) {             }         }         return null;     } ",227,"        p r i v a t e   v o i d   c o p y S o n ( F i l e   p a r e n t )   { 
                 S y s t e m . c o n n . p r i n t l n ( "" p a r e n t - - - ""   +   p a r e n t . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( p a r e n t . i s D i r e c t o r y ( )   & &   ! "" . s v n "" . e q u a l s ( p a r e n t . g e t N a m e ( ) ) )   { 
                         F i l e   c a s e s   =   n e w   F i l e ( p a r e n t ,   "" c a s e s "" ) ; 
                         i f   ( c a s e s . e x i s t s ( ) )   { 
                                 F i l e   a n s w e r s   =   n e w   F i l e ( p a r e n t ,   "" a n s w e r s "" ) ; 
                                 i f   ( ! a n s w e r s . e x i s t s ( ) )   { 
                                         a n s w e r s . m k d i r ( ) ; 
                                         F i l e   a n s w e r s _ l i n u x   =   n e w   F i l e ( p a r e n t ,   "" a n s w e r s _ l i n u x "" ) ; 
                                         f o r   ( F i l e   f i l e   :   a n s w e r s _ l i n u x . l i s t F i l e s ( ) )   { 
                                                 i f   ( f i l e . i s D i r e c t o r y ( ) )   { 
                                                         c o n t i n u e ; 
                                                 } 
                                                 F i l e   t a r g e t   =   n e w   F i l e ( a n s w e r s ,   f i l e . g e t N a m e ( ) ) ; 
                                                 t r y   { 
                                                         I O U t i l s . c o p y ( n e w   F i l e I n p u t S t r e a m ( f i l e ) ,   n e w   F i l e O u t p u t S t r e a m ( t a r g e t ) ) ; 
                                                 }   c a t c h   ( T h r o w a b l e   t )   { 
                                                         t . p r i n t S t a c k T r a c e ( ) ; 
                                                 } 
                                         } 
                                 } 
                         }   e l s e   { 
                                 f o r   ( F i l e   s o n   :   p a r e n t . l i s t F i l e s ( ) )   { 
                                         S y s t e m . c o n n . p r i n t l n ( "" p a r e n t - - - ""   +   s o n . g e t A b s o l u t e P a t h ( ) ) ; 
                                         c o p y S o n ( s o n ) ; 
                                 } 
                         } 
                 } 
         } 
",0,0,0,-1,out,-1.1920929e-07,1,2,{'out': 'conn'},MHM,296,0.13763749202092487
304,"CODE1:     public char check(String password) {         if (captchaRandom.equals(""null"")) {             return 's';         }         if (captchaRandom.equals(""used"")) {             return 'm';         }         String encryptionBase = secret + captchaRandom;         if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {             encryptionBase += "":"" + alphabet + "":"" + letters;         }         MessageDigest md5;         byte[] digest = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };         try {             md5 = MessageDigest.getInstance(""MD5"");             md5.update(encryptionBase.getBytes());             digest = md5.digest();         } catch (NoSuchAlgorithmException e) {         }         String correctPassword = """";         int index;         for (int i = 0; i < letters; i++) {             index = (digest[i] + 256) % 256 % alphabet.length();             correctPassword += alphabet.substring(index, index + 1);         }         if (!password.equals(correctPassword)) {             return 'w';         } else {             captchaRandom = ""used"";             return 't';         }     }  ||CODE2:     ClassFile getClassFile(String name) throws IOException, ConstantPoolException {         URL url = getClass().getResource(name);         InputStream in = url.openStream();         try {             return ClassFile.read(in);         } finally {             in.close();         }     } ",244,"        p u b l i c   c h a r   c h e c k ( S t r i n g   p a s s w o r d )   { 
                 i f   ( c a p t c h a R a n d o m . e q u a l s ( "" n u l l "" ) )   { 
                         r e t u r n   ' s ' ; 
                 } 
                 i f   ( c a p t c h a R a n d o m . e q u a l s ( "" u s e d "" ) )   { 
                         r e t u r n   ' m ' ; 
                 } 
                 S t r i n g   e n c r y p t i o n B a s e   =   s e c r e t   +   c a p t c h a R a n d o m ; 
                 i f   ( ! a l p h a b e t . e q u a l s ( A L P H A B E T _ D E F A U L T )   | |   l e t t e r s   ! =   L E T T E R S _ D E F A U L T )   { 
                         e n c r y p t i o n B a s e   + =   "" : ""   +   a l p h a b e t   +   "" : ""   +   l e t t e r s ; 
                 } 
                 M e s s a g e D i g e s t   m d 5 ; 
                 b y t e [ ]   d i g e s t   =   {   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0 ,   0   } ; 
                 t r y   { 
                         m d 5   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                         m d 5 . u p d a t e ( e n c r y p t i o n B a s e . g e t B y t e s ( ) ) ; 
                         d i g e s t   =   m d 5 . d i g e s t ( ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e u )   { 
                 } 
                 S t r i n g   c o r r e c t P a s s w o r d   =   "" "" ; 
                 i n t   i n d e x ; 
                 f o r   ( i n t   i   =   0 ;   i   <   l e t t e r s ;   i + + )   { 
                         i n d e x   =   ( d i g e s t [ i ]   +   2 5 6 )   %   2 5 6   %   a l p h a b e t . l e n g t h ( ) ; 
                         c o r r e c t P a s s w o r d   + =   a l p h a b e t . s u b s t r i n g ( i n d e x ,   i n d e x   +   1 ) ; 
                 } 
                 i f   ( ! p a s s w o r d . e q u a l s ( c o r r e c t P a s s w o r d ) )   { 
                         r e t u r n   ' w ' ; 
                 }   e l s e   { 
                         c a p t c h a R a n d o m   =   "" u s e d "" ; 
                         r e t u r n   ' t ' ; 
                 } 
         } 
",0,0,0,-1,e,0.0,1,1,{'e': 'eu'},MHM,304,0.15035248200098675
313,"CODE1:     public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {         FileOutputStream os = null;         DataOutputStream dos = null;         try {             LPKTable[] fileTable = new LPKTable[srcFilePath.length];             long fileOffset = outputOffset(header);             for (int i = 0; i < srcFilePath.length; i++) {                 String sourceFileName = FileUtils.getFileName(srcFilePath[i]);                 long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);                 LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);                 fileOffset = outputNextOffset(sourceFileSize, fileOffset);                 fileTable[i] = ft;             }             File file = new File(makeFilePath);             if (!file.exists()) {                 FileUtils.makedirs(file);             }             os = new FileOutputStream(file);             dos = new DataOutputStream(os);             dos.writeInt(header.getPAKIdentity());             writeByteArray(header.getPassword(), dos);             dos.writeFloat(header.getVersion());             dos.writeLong(header.getTables());             for (int i = 0; i < fileTable.length; i++) {                 writeByteArray(fileTable[i].getFileName(), dos);                 dos.writeLong(fileTable[i].getFileSize());                 dos.writeLong(fileTable[i].getOffSet());             }             for (int i = 0; i < fileTable.length; i++) {                 File ftFile = new File(srcFilePath[i]);                 FileInputStream ftFis = new FileInputStream(ftFile);                 DataInputStream ftDis = new DataInputStream(ftFis);                 byte[] buff = new byte[256];                 int readLength = 0;                 while ((readLength = ftDis.read(buff)) != -1) {                     makeBuffer(buff, readLength);                     dos.write(buff, 0, readLength);                 }                 ftDis.close();                 ftFis.close();             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             if (dos != null) {                 try {                     dos.close();                     dos = null;                 } catch (IOException e) {                 }             }         }     }  ||CODE2:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     } ",428,"        p u b l i c   s t a t i c   v o i d   m a k e L P K F i l e ( S t r i n g [ ]   s r c F i l e P a t h ,   S t r i n g   m a k e F i l e P a t h ,   L P K H e a d e r   h e a d e r )   { 
                 F i l e O u t p u t S t r e a m   o s   =   n u l l ; 
                 D a t a O u t p u t S t r e a m   d o s   =   n u l l ; 
                 t r y   { 
                         L P K T a b l e [ ]   f i l e T a b l e   =   n e w   L P K T a b l e [ s r c F i l e P a t h . l e n g t h ] ; 
                         l o n g   f i l e O f f s e t   =   o u t p u t O f f s e t ( h e a d e r ) ; 
                         f o r   ( i n t   u i   =   0 ;   u i   <   s r c F i l e P a t h . l e n g t h ;   u i + + )   { 
                                 S t r i n g   s o u r c e F i l e N a m e   =   F i l e U t i l s . g e t F i l e N a m e ( s r c F i l e P a t h [ u i ] ) ; 
                                 l o n g   s o u r c e F i l e S i z e   =   F i l e U t i l s . g e t F i l e S i z e ( s r c F i l e P a t h [ u i ] ) ; 
                                 L P K T a b l e   f t   =   m a k e L P K T a b l e ( s o u r c e F i l e N a m e ,   s o u r c e F i l e S i z e ,   f i l e O f f s e t ) ; 
                                 f i l e O f f s e t   =   o u t p u t N e x t O f f s e t ( s o u r c e F i l e S i z e ,   f i l e O f f s e t ) ; 
                                 f i l e T a b l e [ u i ]   =   f t ; 
                         } 
                         F i l e   f i l e   =   n e w   F i l e ( m a k e F i l e P a t h ) ; 
                         i f   ( ! f i l e . e x i s t s ( ) )   { 
                                 F i l e U t i l s . m a k e d i r s ( f i l e ) ; 
                         } 
                         o s   =   n e w   F i l e O u t p u t S t r e a m ( f i l e ) ; 
                         d o s   =   n e w   D a t a O u t p u t S t r e a m ( o s ) ; 
                         d o s . w r i t e I n t ( h e a d e r . g e t P A K I d e n t i t y ( ) ) ; 
                         w r i t e B y t e A r r a y ( h e a d e r . g e t P a s s w o r d ( ) ,   d o s ) ; 
                         d o s . w r i t e F l o a t ( h e a d e r . g e t V e r s i o n ( ) ) ; 
                         d o s . w r i t e L o n g ( h e a d e r . g e t T a b l e s ( ) ) ; 
                         f o r   ( i n t   u i   =   0 ;   u i   <   f i l e T a b l e . l e n g t h ;   u i + + )   { 
                                 w r i t e B y t e A r r a y ( f i l e T a b l e [ u i ] . g e t F i l e N a m e ( ) ,   d o s ) ; 
                                 d o s . w r i t e L o n g ( f i l e T a b l e [ u i ] . g e t F i l e S i z e ( ) ) ; 
                                 d o s . w r i t e L o n g ( f i l e T a b l e [ u i ] . g e t O f f S e t ( ) ) ; 
                         } 
                         f o r   ( i n t   u i   =   0 ;   u i   <   f i l e T a b l e . l e n g t h ;   u i + + )   { 
                                 F i l e   f t F i l e   =   n e w   F i l e ( s r c F i l e P a t h [ u i ] ) ; 
                                 F i l e I n p u t S t r e a m   f t F i s   =   n e w   F i l e I n p u t S t r e a m ( f t F i l e ) ; 
                                 D a t a I n p u t S t r e a m   f t D i s   =   n e w   D a t a I n p u t S t r e a m ( f t F i s ) ; 
                                 b y t e [ ]   b u f f   =   n e w   b y t e [ 2 5 6 ] ; 
                                 i n t   r e a d L e n g t h   =   0 ; 
                                 w h i l e   ( ( r e a d L e n g t h   =   f t D i s . r e a d ( b u f f ) )   ! =   - 1 )   { 
                                         m a k e B u f f e r ( b u f f ,   r e a d L e n g t h ) ; 
                                         d o s . w r i t e ( b u f f ,   0 ,   r e a d L e n g t h ) ; 
                                 } 
                                 f t D i s . c l o s e ( ) ; 
                                 f t F i s . c l o s e ( ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( e ) ; 
                 }   f i n a l l y   { 
                         i f   ( d o s   ! =   n u l l )   { 
                                 t r y   { 
                                         d o s . c l o s e ( ) ; 
                                         d o s   =   n u l l ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                 } 
         } 
",1,1,1,-1,i,-4.4339686e-07,1,16,{'i': 'ui'},MHM,325,0.17655534346898397
316,"CODE1:     public boolean execute_check() {         FTPClient ftp = new FTPClient();         File filename = null;         FileChannel channel;         InputStream is;         OutputStream os;         int reply;         if (super.verbose > 0) verbose = true;         ftp.setDefaultPort(port);         ftp.setDefaultTimeout(timeout);         if (verbose) {             System.out.println(""Using FTP Server: "" + hostname);             System.out.println(""Using FTP Port: "" + port);             System.out.println(""Using Timeout of: "" + timeout);         }         if (passive) {             ftp.enterLocalPassiveMode();             if (verbose) System.out.println(""Using Passive Mode"");         }         try {             filename = new File(file);             channel = new RandomAccessFile(filename, ""rw"").getChannel();             if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);             ftp.connect(hostname);             reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");                 check_state = common_h.STATE_CRITICAL;                 check_message = ftp.getReplyString();                 filename.delete();                 ftp.disconnect();                 return true;             }             if (username != null && password != null) {                 if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);                 if (!ftp.login(username, password)) {                     if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);                     check_state = common_h.STATE_CRITICAL;                     check_message = ftp.getReplyString();                     ftp.disconnect();                     filename.delete();                     return true;                 }             }             if (verbose) System.out.println(""Attempting to change to required directory"");             if (!ftp.changeWorkingDirectory(directory)) {                 if (verbose) System.out.println(""Required directory cannot be found!"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Attempting to retrieve specified file!"");             is = ftp.retrieveFileStream(file);             if (is == null) {                 if (verbose) System.out.println(""Unable to locate required file."");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             os = Channels.newOutputStream(channel);             byte[] buf = new byte[4096];             if (verbose) System.out.println(""Beginning File transfer..."");             for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);             if (verbose) {                 System.out.println(""...transfer complete."");                 System.out.println(""Attempting to finalise Command"");             }             if (!ftp.completePendingCommand()) {                 if (verbose) System.out.println(""Unable to finalise command"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Check Completed."");             check_state = common_h.STATE_OK;             check_message = ftp.getReplyString();             is.close();             os.close();             channel.close();             filename.delete();         } catch (IOException e) {             check_state = common_h.STATE_CRITICAL;             check_message = e.getMessage();             if (filename != null) filename.delete();         } finally {             if (ftp.isConnected()) {                 try {                     ftp.logout();                     ftp.disconnect();                 } catch (Exception e) {                 }             }         }         return true;     }  ||CODE2:     private void native2ascii(LanguageInfo info) {         if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");         InputStream in = null;         OutputStream out = null;         print(""\tConverting to ASCII... "");         try {             in = new BufferedInputStream(new FileInputStream(info.getFileName()));             in.mark(3);             if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();             BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));             out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));             String read;             while ((read = reader.readLine()) != null) {                 writer.write(ascii(read));                 writer.newLine();             }             writer.flush();             out.flush();             println(""... done!"");         } catch (IOException ignored) {             println(""... error! ("" + ignored.getMessage() + "")"");         } finally {             if (in != null) try {                 in.close();             } catch (IOException ignored) {             }             if (out != null) try {                 out.close();             } catch (IOException ignored) {             }         }     } ",763,"        p u b l i c   b o o l e a n   e x e c u t e _ c h e c k ( )   { 
                 F T P C l i e n t   f t p   =   n e w   F T P C l i e n t ( ) ; 
                 F i l e   f i l e n a m e   =   n u l l ; 
                 F i l e C h a n n e l   c h a n n e l ; 
                 I n p u t S t r e a m   i s ; 
                 O u t p u t S t r e a m   o s ; 
                 i n t   r e p l y ; 
                 i f   ( s u p e r . v e r b o s e   >   0 )   v e r b o s e   =   t r u e ; 
                 f t p . s e t D e f a u l t P o r t ( p o r t ) ; 
                 f t p . s e t D e f a u l t T i m e o u t ( t i m e o u t ) ; 
                 i f   ( v e r b o s e )   { 
                         S y s t e m . i m a g e . p r i n t l n ( "" U s i n g   F T P   S e r v e r :   ""   +   h o s t n a m e ) ; 
                         S y s t e m . i m a g e . p r i n t l n ( "" U s i n g   F T P   P o r t :   ""   +   p o r t ) ; 
                         S y s t e m . i m a g e . p r i n t l n ( "" U s i n g   T i m e o u t   o f :   ""   +   t i m e o u t ) ; 
                 } 
                 i f   ( p a s s i v e )   { 
                         f t p . e n t e r L o c a l P a s s i v e M o d e ( ) ; 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" U s i n g   P a s s i v e   M o d e "" ) ; 
                 } 
                 t r y   { 
                         f i l e n a m e   =   n e w   F i l e ( f i l e ) ; 
                         c h a n n e l   =   n e w   R a n d o m A c c e s s F i l e ( f i l e n a m e ,   "" r w "" ) . g e t C h a n n e l ( ) ; 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" A t t e m p t i n g   F T P   C o n n e c t i o n   t o   ""   +   h o s t n a m e ) ; 
                         f t p . c o n n e c t ( h o s t n a m e ) ; 
                         r e p l y   =   f t p . g e t R e p l y C o d e ( ) ; 
                         i f   ( ! F T P R e p l y . i s P o s i t i v e C o m p l e t i o n ( r e p l y ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" F T P   C o n n e c t i o n   t o   ""   +   h o s t n a m e   +   ""   f a i l e d "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( u s e r n a m e   ! =   n u l l   & &   p a s s w o r d   ! =   n u l l )   { 
                                 i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" A t t e m p t i n g   t o   l o g   i n   i n t o   F T P   S e r v e r   ""   +   h o s t n a m e ) ; 
                                 i f   ( ! f t p . l o g i n ( u s e r n a m e ,   p a s s w o r d ) )   { 
                                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" U n a b l e   t o   l o g   i n   t o   F T P   S e r v e r   ""   +   h o s t n a m e ) ; 
                                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                                         c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                         f t p . d i s c o n n e c t ( ) ; 
                                         f i l e n a m e . d e l e t e ( ) ; 
                                         r e t u r n   t r u e ; 
                                 } 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" A t t e m p t i n g   t o   c h a n g e   t o   r e q u i r e d   d i r e c t o r y "" ) ; 
                         i f   ( ! f t p . c h a n g e W o r k i n g D i r e c t o r y ( d i r e c t o r y ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" R e q u i r e d   d i r e c t o r y   c a n n o t   b e   f o u n d ! "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" A t t e m p t i n g   t o   r e t r i e v e   s p e c i f i e d   f i l e ! "" ) ; 
                         i s   =   f t p . r e t r i e v e F i l e S t r e a m ( f i l e ) ; 
                         i f   ( i s   = =   n u l l )   { 
                                 i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" U n a b l e   t o   l o c a t e   r e q u i r e d   f i l e . "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         o s   =   C h a n n e l s . n e w O u t p u t S t r e a m ( c h a n n e l ) ; 
                         b y t e [ ]   b u f   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" B e g i n n i n g   F i l e   t r a n s f e r . . . "" ) ; 
                         f o r   ( i n t   l e n   =   - 1 ;   ( l e n   =   i s . t e l l ( b u f ) )   ! =   - 1 ;   )   o s . w r i t e ( b u f ,   0 ,   l e n ) ; 
                         i f   ( v e r b o s e )   { 
                                 S y s t e m . i m a g e . p r i n t l n ( "" . . . t r a n s f e r   c o m p l e t e . "" ) ; 
                                 S y s t e m . i m a g e . p r i n t l n ( "" A t t e m p t i n g   t o   f i n a l i s e   C o m m a n d "" ) ; 
                         } 
                         i f   ( ! f t p . c o m p l e t e P e n d i n g C o m m a n d ( ) )   { 
                                 i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" U n a b l e   t o   f i n a l i s e   c o m m a n d "" ) ; 
                                 c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ W A R N I N G ; 
                                 c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                                 f t p . d i s c o n n e c t ( ) ; 
                                 f i l e n a m e . d e l e t e ( ) ; 
                                 r e t u r n   t r u e ; 
                         } 
                         i f   ( v e r b o s e )   S y s t e m . i m a g e . p r i n t l n ( "" C h e c k   C o m p l e t e d . "" ) ; 
                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ O K ; 
                         c h e c k _ m e s s a g e   =   f t p . g e t R e p l y S t r i n g ( ) ; 
                         i s . c l o s e ( ) ; 
                         o s . c l o s e ( ) ; 
                         c h a n n e l . c l o s e ( ) ; 
                         f i l e n a m e . d e l e t e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         c h e c k _ s t a t e   =   c o m m o n _ h . S T A T E _ C R I T I C A L ; 
                         c h e c k _ m e s s a g e   =   e . g e t M e s s a g e ( ) ; 
                         i f   ( f i l e n a m e   ! =   n u l l )   f i l e n a m e . d e l e t e ( ) ; 
                 }   f i n a l l y   { 
                         i f   ( f t p . i s C o n n e c t e d ( ) )   { 
                                 t r y   { 
                                         f t p . l o g o u t ( ) ; 
                                         f t p . d i s c o n n e c t ( ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                 } 
                         } 
                 } 
                 r e t u r n   t r u e ; 
         } 
",0,0,0,-1,in,0.0,3,20,"{'read': 'tell', 'in': 'inner', 'out': 'image'}",MHM,301,0.19572984377543132
321,"CODE1:     public static void main(String[] args) {         if (args.length <= 0) {             System.out.println("" *** DML script generator and executor ***"");             System.out.println("" You must specify name of the file with SQL script data"");             System.out.println("" Fisrt rows of this file must be:"");             System.out.println("" 1) JDBC driver class for your DBMS"");             System.out.println("" 2) URL for your database instance"");             System.out.println("" 3) user in that database (with sufficient priviliges)"");             System.out.println("" 4) password of that user"");             System.out.println("" Next rows can have:"");             System.out.println(""   '&' before table to insert into,"");             System.out.println(""   '^' before table delete from,"");             System.out.println(""   '*' before table update."");             System.out.println("" Other rows contain parameters of these actions:"");             System.out.println(""   for & action each parameter is a list of values,"");             System.out.println(""   for * action -//- pare of values with 1st PK (will be in where clause),"");             System.out.println(""   for ^ (not obligatory) -//- part of where clause or AND or OR"");             System.out.println(""    (by depault parts are united with OR)"");             System.out.println("" Note: despite SQLScript, 1) list (pare) of values can be separated"");             System.out.println(""   by space or tab, not only comma and 2) string values can be not quoted,"");             System.out.println(""   but in this (2) case only 2 values allowed (even in insert)"");             System.out.println("" '!' before row means that it is a comment."");             System.out.println("" If some exception is occured, all script is rolled back."");             System.out.println("" If you specify 2nd command line argument - file name too -"");             System.out.println(""   connection will be established but all statements will"");             System.out.println(""   be saved in that output file and not transmitted to DB"");             System.out.println("" If you specify 3nd command line argument - connect_string -"");             System.out.println(""   connect information will be added to output file"");             System.out.println(""   in the form 'connect user/password@connect_string'"");             System.exit(0);         }         try {             String[] info = new String[4];             BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));             Writer writer = null;             try {                 for (int i = 0; i < info.length; i++) info[i] = reader.readLine();                 try {                     Class.forName(info[0]);                     Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);                     SQLScript script = new DMLScript(connection);                     if (args.length > 1) {                         writer = new BufferedWriter(new FileWriter(args[1]));                         if (args.length > 2) writer.write(""connect "" + info[2] + ""/"" + info[3] + ""@"" + args[2] + script.statementTerminator);                     }                     try {                         System.out.println(script.executeScript(reader, writer) + "" updates has been performed during script execution"");                     } catch (SQLException e4) {                         reader.close();                         if (writer != null) writer.close();                         System.out.println("" Script execution error: "" + e4);                     }                     connection.close();                 } catch (Exception e3) {                     reader.close();                     if (writer != null) writer.close();                     System.out.println("" Connection error: "" + e3);                 }             } catch (IOException e2) {                 System.out.println(""Error in file "" + args[0]);             }         } catch (FileNotFoundException e1) {             System.out.println(""File "" + args[0] + "" not found"");         }     }  ||CODE2:     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {         ActionMessages errors = new ActionMessages();         try {             boolean isMultipart = FileUpload.isMultipartContent(request);             if (isMultipart) {                 Map fields = new HashMap();                 Vector attachments = new Vector();                 List items = diskFileUpload.parseRequest(request);                 Iterator iter = items.iterator();                 while (iter.hasNext()) {                     FileItem item = (FileItem) iter.next();                     if (item.isFormField()) {                         fields.put(item.getFieldName(), item.getString());                     } else {                         if (!StringUtils.isBlank(item.getName())) {                             ByteArrayOutputStream baos = null;                             try {                                 baos = new ByteArrayOutputStream();                                 IOUtils.copy(item.getInputStream(), baos);                                 MailPartObj part = new MailPartObj();                                 part.setAttachent(baos.toByteArray());                                 part.setContentType(item.getContentType());                                 part.setName(item.getName());                                 part.setSize(item.getSize());                                 attachments.addElement(part);                             } catch (Exception ex) {                             } finally {                                 IOUtils.closeQuietly(baos);                             }                         }                     }                 }                 String body = """";                 if (fields.get(""taBody"") != null) {                     body = (String) fields.get(""taBody"");                 } else if (fields.get(""taReplyBody"") != null) {                     body = (String) fields.get(""taReplyBody"");                 }                 Preferences preferencesInstance = getPreferencesInstance(request);                 Send sendInstance = getSendInstance(request);                 String mid = (String) fields.get(""mid"");                 sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));             } else {                 errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));                 request.setAttribute(""exception"", ""The form is null"");                 request.setAttribute(""newLocation"", null);                 doTrace(request, DLog.ERROR, getClass(), ""The form is null"");             }         } catch (Exception ex) {             String errorMessage = ExceptionUtilities.parseMessage(ex);             if (errorMessage == null) {                 errorMessage = ""NullPointerException"";             }             errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));             request.setAttribute(""exception"", errorMessage);             doTrace(request, DLog.ERROR, getClass(), errorMessage);         } finally {         }         if (errors.isEmpty()) {             doTrace(request, DLog.INFO, getClass(), ""OK"");             return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);         } else {             saveErrors(request, errors);             return mapping.findForward(Constants.ACTION_FAIL_FORWARD);         }     } ",664,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 i f   ( a r g s . l e n g t h   < =   0 )   { 
                         S y s t e m . o u t . p r i n t l n ( ""   * * *   D M L   s c r i p t   g e n e r a t o r   a n d   e x e c u t o r   * * * "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   Y o u   m u s t   s p e c i f y   n a m e   o f   t h e   f i l e   w i t h   S Q L   s c r i p t   d a t a "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   F i s r t   r o w s   o f   t h i s   f i l e   m u s t   b e : "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   1 )   J D B C   d r i v e r   c l a s s   f o r   y o u r   D B M S "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   2 )   U R L   f o r   y o u r   d a t a b a s e   i n s t a n c e "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   3 )   u s e r   i n   t h a t   d a t a b a s e   ( w i t h   s u f f i c i e n t   p r i v i l i g e s ) "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   4 )   p a s s w o r d   o f   t h a t   u s e r "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   N e x t   r o w s   c a n   h a v e : "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       ' & '   b e f o r e   t a b l e   t o   i n s e r t   i n t o , "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       ' ^ '   b e f o r e   t a b l e   d e l e t e   f r o m , "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       ' * '   b e f o r e   t a b l e   u p d a t e . "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   O t h e r   r o w s   c o n t a i n   p a r a m e t e r s   o f   t h e s e   a c t i o n s : "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       f o r   &   a c t i o n   e a c h   p a r a m e t e r   i s   a   l i s t   o f   v a l u e s , "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       f o r   *   a c t i o n   - / / -   p a r e   o f   v a l u e s   w i t h   1 s t   P K   ( w i l l   b e   i n   w h e r e   c l a u s e ) , "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       f o r   ^   ( n o t   o b l i g a t o r y )   - / / -   p a r t   o f   w h e r e   c l a u s e   o r   A N D   o r   O R "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""         ( b y   d e p a u l t   p a r t s   a r e   u n i t e d   w i t h   O R ) "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   N o t e :   d e s p i t e   S Q L S c r i p t ,   1 )   l i s t   ( p a r e )   o f   v a l u e s   c a n   b e   s e p a r a t e d "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       b y   s p a c e   o r   t a b ,   n o t   o n l y   c o m m a   a n d   2 )   s t r i n g   v a l u e s   c a n   b e   n o t   q u o t e d , "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       b u t   i n   t h i s   ( 2 )   c a s e   o n l y   2   v a l u e s   a l l o w e d   ( e v e n   i n   i n s e r t ) "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   ' ! '   b e f o r e   r o w   m e a n s   t h a t   i t   i s   a   c o m m e n t . "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   I f   s o m e   e x c e p t i o n   i s   o c c u r e d ,   a l l   s c r i p t   i s   r o l l e d   b a c k . "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   I f   y o u   s p e c i f y   2 n d   c o m m a n d   l i n e   a r g u m e n t   -   f i l e   n a m e   t o o   - "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       c o n n e c t i o n   w i l l   b e   e s t a b l i s h e d   b u t   a l l   s t a t e m e n t s   w i l l "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       b e   s a v e d   i n   t h a t   o u t p u t   f i l e   a n d   n o t   t r a n s m i t t e d   t o   D B "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""   I f   y o u   s p e c i f y   3 n d   c o m m a n d   l i n e   a r g u m e n t   -   c o n n e c t _ s t r i n g   - "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       c o n n e c t   i n f o r m a t i o n   w i l l   b e   a d d e d   t o   o u t p u t   f i l e "" ) ; 
                         S y s t e m . o u t . p r i n t l n ( ""       i n   t h e   f o r m   ' c o n n e c t   u s e r / p a s s w o r d @ c o n n e c t _ s t r i n g ' "" ) ; 
                         S y s t e m . e x i t ( 0 ) ; 
                 } 
                 t r y   { 
                         S t r i n g [ ]   i n f o   =   n e w   S t r i n g [ 4 ] ; 
                         B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   F i l e R e a d e r ( n e w   F i l e ( a r g s [ 0 ] ) ) ) ; 
                         W r i t e r   w r i t e r   =   n u l l ; 
                         t r y   { 
                                 f o r   ( i n t   i   =   0 ;   i   <   i n f o . l e n g t h ;   i + + )   i n f o [ i ]   =   r e a d e r . r e a d L i n e ( ) ; 
                                 t r y   { 
                                         C l a s s . f o r N a m e ( i n f o [ 0 ] ) ; 
                                         C o n n e c t i o n   c o n n e c t i o n   =   D r i v e r M a n a g e r . g e t C o n n e c t i o n ( i n f o [ 1 ] ,   i n f o [ 2 ] ,   i n f o [ 3 ] ) ; 
                                         S Q L S c r i p t   s c r i p t   =   n e w   D M L S c r i p t ( c o n n e c t i o n ) ; 
                                         i f   ( a r g s . l e n g t h   >   1 )   { 
                                                 w r i t e r   =   n e w   B u f f e r e d W r i t e r ( n e w   F i l e W r i t e r ( a r g s [ 1 ] ) ) ; 
                                                 i f   ( a r g s . l e n g t h   >   2 )   w r i t e r . w r i t e ( "" c o n n e c t   ""   +   i n f o [ 2 ]   +   "" / ""   +   i n f o [ 3 ]   +   "" @ ""   +   a r g s [ 2 ]   +   s c r i p t . s t a t e m e n t T e r m i n a t o r ) ; 
                                         } 
                                         t r y   { 
                                                 S y s t e m . o u t . p r i n t l n ( s c r i p t . e x e c u t e S c r i p t ( r e a d e r ,   w r i t e r )   +   ""   u p d a t e s   h a s   b e e n   p e r f o r m e d   d u r i n g   s c r i p t   e x e c u t i o n "" ) ; 
                                         }   c a t c h   ( S Q L E x c e p t i o n   e 4 )   { 
                                                 r e a d e r . c l o s e ( ) ; 
                                                 i f   ( w r i t e r   ! =   n u l l )   w r i t e r . c l o s e ( ) ; 
                                                 S y s t e m . o u t . p r i n t l n ( ""   S c r i p t   e x e c u t i o n   e r r o r :   ""   +   e 4 ) ; 
                                         } 
                                         c o n n e c t i o n . c l o s e ( ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e 3 )   { 
                                         r e a d e r . c l o s e ( ) ; 
                                         i f   ( w r i t e r   ! =   n u l l )   w r i t e r . c l o s e ( ) ; 
                                         S y s t e m . o u t . p r i n t l n ( ""   C o n n e c t i o n   e r r o r :   ""   +   e 3 ) ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e 2 )   { 
                                 S y s t e m . o u t . p r i n t l n ( "" E r r o r   i n   f i l e   ""   +   a r g s [ 0 ] ) ; 
                         } 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e 1 )   { 
                         S y s t e m . o u t . p r i n t l n ( "" F i l e   ""   +   a r g s [ 0 ]   +   ""   n o t   f o u n d "" ) ; 
                 } 
         } 
",1,1,1,-1,password,0.0,1,1,{'password': 'address'},MHM,303,0.19634406566619872
322,"CODE1:             public void handle() {                 if (requestCounter == 0) {                     requestCounter++;                     return;                 }                 requestCounter++;                 Iterator it = loggerTimeouts.keySet().iterator();                 while (it.hasNext()) {                     String host = (String) it.next();                     String timeout = (String) loggerTimeouts.get(host);                     int timeoutVal = Integer.parseInt(timeout);                     if (timeoutVal > 0) {                         timeoutVal /= 10;                     }                     int timeoutMod = (requestCounter % timeoutVal);                     if (timeoutMod == 0) {                         Object loggerFile = loggerFiles.get(host);                         Object loggerFilenameObject = loggerFilenames.get(host);                         Object loggerDestObject = loggerDests.get(host);                         Object loggerCompressObject = loggerCompresses.get(host);                         Object loggerDayObject = loggerDays.get(host);                         Object loggerArchiveObject = loggerArchives.get(host);                         Object loggerDeleteObject = loggerDeletes.get(host);                         boolean rotateCompress = false;                         boolean rotateDelete = false;                         String rotateDest = null;                         String logFile = null;                         String rotateArchive = null;                         int rotateDays = 0;                         if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {                             rotateCompress = true;                         }                         if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {                             rotateDelete = true;                         }                         if (loggerDestObject != null) {                             rotateDest = (String) loggerDestObject;                         }                         if (loggerFilenameObject != null) {                             logFile = (String) loggerFilenameObject;                         }                         if (loggerArchiveObject != null) {                             rotateArchive = (String) loggerArchiveObject;                         }                         if (loggerDayObject != null) {                             rotateDays = Integer.parseInt((String) loggerDayObject);                         }                         FileChannel srcChannel, destChannel;                         String destOutFile = logFile + ""."" + System.currentTimeMillis();                         String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";                         if (rotateDest != null) {                             (new File(rotateDest)).mkdirs();                             if (destOutFile.indexOf(""/"") != -1) {                                 destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);                             }                             if (destOutFileCompressed.indexOf(""/"") != -1) {                                 destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);                             }                         }                         if (rotateCompress) {                             try {                                 GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));                                 FileInputStream in = new FileInputStream(logFile);                                 byte buf[] = new byte[1024];                                 int len;                                 while ((len = in.read(buf)) > 0) {                                     out.write(buf, 0, len);                                 }                                 in.close();                                 out.finish();                                 out.close();                                 Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");                                 buf = null;                                 out = null;                                 in = null;                             } catch (Exception e) {                                 Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);                             }                         } else {                             try {                                 srcChannel = new FileInputStream(logFile).getChannel();                             } catch (IOException e) {                                 Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());                                 return;                             }                             try {                                 destChannel = new FileOutputStream(destOutFile).getChannel();                             } catch (IOException e) {                                 Debug.debug(""Unable to rotate log file '"" + logFile + ""' to '"" + destOutFile + ""': "" + e.getMessage());                                 return;                             }                             try {                                 destChannel.transferFrom(srcChannel, 0, srcChannel.size());                                 srcChannel.close();                                 destChannel.close();                                 destChannel = null;                                 srcChannel = null;                             } catch (IOException e) {                                 Debug.debug(""Unable to copy data from file '"" + logFile + ""' to '"" + destOutFile + ""' for file rotation: "" + e.getMessage());                                 return;                             }                             Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");                         }                         if (rotateDelete) {                             try {                                 ((PrintStream) loggerFile).close();                             } catch (Exception e) {                             }                             (new File(logFile)).delete();                             loggerFiles.remove(host);                             addLogger(host, logFile);                         }                         if (rotateDest != null) {                             long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);                             long currentTime = System.currentTimeMillis();                             File fileList[] = (new File(rotateDest)).listFiles();                             DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");                             java.util.Date date = new java.util.Date(currentTime);                             String archiveFile = format1.format(date).toString() + "".zip"";                             if (rotateArchive != null) {                                 archiveFile = rotateArchive + ""/"" + archiveFile;                                 (new File(rotateArchive)).mkdirs();                             }                             Archive archive = new Archive(archiveFile);                             for (int i = 0; i < fileList.length; i++) {                                 String currentFilename = fileList[i].getName();                                 long timeDifference = (currentTime - fileList[i].lastModified());                                 if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {                                     if (rotateDest != null) {                                         currentFilename = rotateDest + ""/"" + currentFilename;                                     }                                     if (timeDifference > comparisonTime) {                                         archive.addFile(fileList[i].getName(), currentFilename);                                         fileList[i].delete();                                     }                                 }                             }                             fileList = null;                             format1 = null;                             archive = null;                         }                     }                 }                 it = null;             }  ||CODE2:     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {         ActionMessages errors = new ActionMessages();         try {             boolean isMultipart = FileUpload.isMultipartContent(request);             if (isMultipart) {                 Map fields = new HashMap();                 Vector attachments = new Vector();                 List items = diskFileUpload.parseRequest(request);                 Iterator iter = items.iterator();                 while (iter.hasNext()) {                     FileItem item = (FileItem) iter.next();                     if (item.isFormField()) {                         fields.put(item.getFieldName(), item.getString());                     } else {                         if (!StringUtils.isBlank(item.getName())) {                             ByteArrayOutputStream baos = null;                             try {                                 baos = new ByteArrayOutputStream();                                 IOUtils.copy(item.getInputStream(), baos);                                 MailPartObj part = new MailPartObj();                                 part.setAttachent(baos.toByteArray());                                 part.setContentType(item.getContentType());                                 part.setName(item.getName());                                 part.setSize(item.getSize());                                 attachments.addElement(part);                             } catch (Exception ex) {                             } finally {                                 IOUtils.closeQuietly(baos);                             }                         }                     }                 }                 String body = """";                 if (fields.get(""taBody"") != null) {                     body = (String) fields.get(""taBody"");                 } else if (fields.get(""taReplyBody"") != null) {                     body = (String) fields.get(""taReplyBody"");                 }                 Preferences preferencesInstance = getPreferencesInstance(request);                 Send sendInstance = getSendInstance(request);                 String mid = (String) fields.get(""mid"");                 sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));             } else {                 errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));                 request.setAttribute(""exception"", ""The form is null"");                 request.setAttribute(""newLocation"", null);                 doTrace(request, DLog.ERROR, getClass(), ""The form is null"");             }         } catch (Exception ex) {             String errorMessage = ExceptionUtilities.parseMessage(ex);             if (errorMessage == null) {                 errorMessage = ""NullPointerException"";             }             errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));             request.setAttribute(""exception"", errorMessage);             doTrace(request, DLog.ERROR, getClass(), errorMessage);         } finally {         }         if (errors.isEmpty()) {             doTrace(request, DLog.INFO, getClass(), ""OK"");             return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);         } else {             saveErrors(request, errors);             return mapping.findForward(Constants.ACTION_FAIL_FORWARD);         }     } ",1144,"                        p u b l i c   v o i d   h a n d l e ( )   { 
                                 i f   ( r e q u e s t C o u n t e r   = =   0 )   { 
                                         r e q u e s t C o u n t e r + + ; 
                                         r e t u r n ; 
                                 } 
                                 r e q u e s t C o u n t e r + + ; 
                                 I t e r a t o r   i t   =   l o g g e r T i m e o u t s . k e y S e t ( ) . i t e r a t o r ( ) ; 
                                 w h i l e   ( i t . h a s N e x t ( ) )   { 
                                         S t r i n g   h o s t   =   ( S t r i n g )   i t . n e x t ( ) ; 
                                         S t r i n g   t i m e o u t   =   ( S t r i n g )   l o g g e r T i m e o u t s . g e t ( h o s t ) ; 
                                         i n t   t i m e o u t V a l   =   I n t e g e r . p a r s e I n t ( t i m e o u t ) ; 
                                         i f   ( t i m e o u t V a l   >   0 )   { 
                                                 t i m e o u t V a l   / =   1 0 ; 
                                         } 
                                         i n t   t i m e o u t M o d   =   ( r e q u e s t C o u n t e r   %   t i m e o u t V a l ) ; 
                                         i f   ( t i m e o u t M o d   = =   0 )   { 
                                                 O b j e c t   l o g g e r F i l e   =   l o g g e r F i l e s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r F i l e n a m e O b j e c t   =   l o g g e r F i l e n a m e s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r D e s t O b j e c t   =   l o g g e r D e s t s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r C o m p r e s s O b j e c t   =   l o g g e r C o m p r e s s e s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r D a y O b j e c t   =   l o g g e r D a y s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r A r c h i v e O b j e c t   =   l o g g e r A r c h i v e s . g e t ( h o s t ) ; 
                                                 O b j e c t   l o g g e r D e l e t e O b j e c t   =   l o g g e r D e l e t e s . g e t ( h o s t ) ; 
                                                 b o o l e a n   r o t a t e C o m p r e s s   =   f a l s e ; 
                                                 b o o l e a n   r o t a t e D e l e t e   =   f a l s e ; 
                                                 S t r i n g   r o t a t e D e s t   =   n u l l ; 
                                                 S t r i n g   l o g F i l e   =   n u l l ; 
                                                 S t r i n g   r o t a t e A r c h i v e   =   n u l l ; 
                                                 i n t   r o t a t e D a y s   =   0 ; 
                                                 i f   ( l o g g e r C o m p r e s s O b j e c t   ! =   n u l l   & &   ( ( S t r i n g )   l o g g e r C o m p r e s s O b j e c t ) . e q u a l s I g n o r e C a s e ( "" t r u e "" ) )   { 
                                                         r o t a t e C o m p r e s s   =   t r u e ; 
                                                 } 
                                                 i f   ( l o g g e r D e l e t e O b j e c t   ! =   n u l l   & &   ( ( S t r i n g )   l o g g e r D e l e t e O b j e c t ) . e q u a l s I g n o r e C a s e ( "" t r u e "" ) )   { 
                                                         r o t a t e D e l e t e   =   t r u e ; 
                                                 } 
                                                 i f   ( l o g g e r D e s t O b j e c t   ! =   n u l l )   { 
                                                         r o t a t e D e s t   =   ( S t r i n g )   l o g g e r D e s t O b j e c t ; 
                                                 } 
                                                 i f   ( l o g g e r F i l e n a m e O b j e c t   ! =   n u l l )   { 
                                                         l o g F i l e   =   ( S t r i n g )   l o g g e r F i l e n a m e O b j e c t ; 
                                                 } 
                                                 i f   ( l o g g e r A r c h i v e O b j e c t   ! =   n u l l )   { 
                                                         r o t a t e A r c h i v e   =   ( S t r i n g )   l o g g e r A r c h i v e O b j e c t ; 
                                                 } 
                                                 i f   ( l o g g e r D a y O b j e c t   ! =   n u l l )   { 
                                                         r o t a t e D a y s   =   I n t e g e r . p a r s e I n t ( ( S t r i n g )   l o g g e r D a y O b j e c t ) ; 
                                                 } 
                                                 F i l e C h a n n e l   s r c C h a n n e l ,   d e s t C h a n n e l ; 
                                                 S t r i n g   d e s t O u t F i l e   =   l o g F i l e   +   "" . ""   +   S y s t e m . c u r r e n t T i m e M i l l i s ( ) ; 
                                                 S t r i n g   d e s t O u t F i l e C o m p r e s s e d   =   l o g F i l e   +   "" . ""   +   S y s t e m . c u r r e n t T i m e M i l l i s ( )   +   "" . g z "" ; 
                                                 i f   ( r o t a t e D e s t   ! =   n u l l )   { 
                                                         ( n e w   F i l e ( r o t a t e D e s t ) ) . m k d i r s ( ) ; 
                                                         i f   ( d e s t O u t F i l e . i n d e x O f ( "" / "" )   ! =   - 1 )   { 
                                                                 d e s t O u t F i l e   =   r o t a t e D e s t   +   "" / ""   +   d e s t O u t F i l e . s u b s t r i n g ( d e s t O u t F i l e . l a s t I n d e x O f ( "" / "" )   +   1 ) ; 
                                                         } 
                                                         i f   ( d e s t O u t F i l e C o m p r e s s e d . i n d e x O f ( "" / "" )   ! =   - 1 )   { 
                                                                 d e s t O u t F i l e C o m p r e s s e d   =   r o t a t e D e s t   +   "" / ""   +   d e s t O u t F i l e C o m p r e s s e d . s u b s t r i n g ( d e s t O u t F i l e C o m p r e s s e d . l a s t I n d e x O f ( "" / "" )   +   1 ) ; 
                                                         } 
                                                 } 
                                                 i f   ( r o t a t e C o m p r e s s )   { 
                                                         t r y   { 
                                                                 G Z I P O u t p u t S t r e a m   o u t   =   n e w   G Z I P O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( d e s t O u t F i l e C o m p r e s s e d ) ) ; 
                                                                 F i l e I n p u t S t r e a m   i n   =   n e w   F i l e I n p u t S t r e a m ( l o g F i l e ) ; 
                                                                 b y t e   b u f [ ]   =   n e w   b y t e [ 1 0 2 4 ] ; 
                                                                 i n t   l e n ; 
                                                                 w h i l e   ( ( l e n   =   i n . r e a d ( b u f ) )   >   0 )   { 
                                                                         o u t . w r i t e ( b u f ,   0 ,   l e n ) ; 
                                                                 } 
                                                                 i n . c l o s e ( ) ; 
                                                                 o u t . f i n i s h ( ) ; 
                                                                 o u t . c l o s e ( ) ; 
                                                                 D e b u g . d e b u g ( "" R o t a t e d   l o g   f i l e   ' ""   +   l o g F i l e   +   "" '   t o   ' ""   +   d e s t O u t F i l e C o m p r e s s e d   +   "" ' "" ) ; 
                                                                 b u f   =   n u l l ; 
                                                                 o u t   =   n u l l ; 
                                                                 i n   =   n u l l ; 
                                                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                                                 D e b u g . d e b u g ( "" U n a b l e   t o   r o t a t e   l o g   f i l e   ' ""   +   l o g F i l e   +   "" ' :   ""   +   e ) ; 
                                                         } 
                                                 }   e l s e   { 
                                                         t r y   { 
                                                                 s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( l o g F i l e ) . g e t C h a n n e l ( ) ; 
                                                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                                                 D e b u g . d e b u g ( "" U n a b l e   t o   r e a d   l o g   f i l e   ' ""   +   l o g F i l e   +   "" ' :   ""   +   e . g e t M e s s a g e ( ) ) ; 
                                                                 r e t u r n ; 
                                                         } 
                                                         t r y   { 
                                                                 d e s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( d e s t O u t F i l e ) . g e t C h a n n e l ( ) ; 
                                                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                                                 D e b u g . d e b u g ( "" U n a b l e   t o   r o t a t e   l o g   f i l e   ' ""   +   l o g F i l e   +   "" '   t o   ' ""   +   d e s t O u t F i l e   +   "" ' :   ""   +   e . g e t M e s s a g e ( ) ) ; 
                                                                 r e t u r n ; 
                                                         } 
                                                         t r y   { 
                                                                 d e s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                                                                 s r c C h a n n e l . c l o s e ( ) ; 
                                                                 d e s t C h a n n e l . c l o s e ( ) ; 
                                                                 d e s t C h a n n e l   =   n u l l ; 
                                                                 s r c C h a n n e l   =   n u l l ; 
                                                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                                                 D e b u g . d e b u g ( "" U n a b l e   t o   c o p y   d a t a   f r o m   f i l e   ' ""   +   l o g F i l e   +   "" '   t o   ' ""   +   d e s t O u t F i l e   +   "" '   f o r   f i l e   r o t a t i o n :   ""   +   e . g e t M e s s a g e ( ) ) ; 
                                                                 r e t u r n ; 
                                                         } 
                                                         D e b u g . d e b u g ( "" R o t a t e d   l o g   f i l e   ' ""   +   l o g F i l e   +   "" '   t o   ' ""   +   d e s t O u t F i l e   +   "" ' "" ) ; 
                                                 } 
                                                 i f   ( r o t a t e D e l e t e )   { 
                                                         t r y   { 
                                                                 ( ( P r i n t S t r e a m )   l o g g e r F i l e ) . c l o s e ( ) ; 
                                                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                                         } 
                                                         ( n e w   F i l e ( l o g F i l e ) ) . d e l e t e ( ) ; 
                                                         l o g g e r F i l e s . r e m o v e ( h o s t ) ; 
                                                         a d d L o g g e r ( h o s t ,   l o g F i l e ) ; 
                                                 } 
                                                 i f   ( r o t a t e D e s t   ! =   n u l l )   { 
                                                         l o n g   c o m p a r i s o n T i m e   =   r o t a t e D a y s   *   ( 6 0   *   6 0   *   2 4   *   1 0 0 0 ) ; 
                                                         l o n g   c u r r e n t T i m e   =   S y s t e m . c u r r e n t T i m e M i l l i s ( ) ; 
                                                         F i l e   f i l e L i s t [ ]   =   ( n e w   F i l e ( r o t a t e D e s t ) ) . l i s t F i l e s ( ) ; 
                                                         D a t e F o r m a t   f o r m a t 1   =   n e w   S i m p l e D a t e F o r m a t ( "" y y y y - M M - d d "" ) ; 
                                                         j a v a . u t i l . D a t e   d a t e   =   n e w   j a v a . u t i l . D a t e ( c u r r e n t T i m e ) ; 
                                                         S t r i n g   a r c h i v e F i l e   =   f o r m a t 1 . f o r m a t ( d a t e ) . t o S t r i n g ( )   +   "" . z i p "" ; 
                                                         i f   ( r o t a t e A r c h i v e   ! =   n u l l )   { 
                                                                 a r c h i v e F i l e   =   r o t a t e A r c h i v e   +   "" / ""   +   a r c h i v e F i l e ; 
                                                                 ( n e w   F i l e ( r o t a t e A r c h i v e ) ) . m k d i r s ( ) ; 
                                                         } 
                                                         A r c h i v e   a r c h i v e   =   n e w   A r c h i v e ( a r c h i v e F i l e ) ; 
                                                         f o r   ( i n t   t   =   0 ;   t   <   f i l e L i s t . l e n g t h ;   t + + )   { 
                                                                 S t r i n g   c u r r e n t F i l e n a m e   =   f i l e L i s t [ t ] . g e t N a m e ( ) ; 
                                                                 l o n g   t i m e D i f f e r e n c e   =   ( c u r r e n t T i m e   -   f i l e L i s t [ t ] . l a s t M o d i f i e d ( ) ) ; 
                                                                 i f   ( ( r o t a t e C o m p r e s s   & &   c u r r e n t F i l e n a m e . e n d s W i t h ( "" . g z "" ) )   | |   ( ! r o t a t e C o m p r e s s   & &   c u r r e n t F i l e n a m e . i n d e x O f ( l o g F i l e   +   "" . "" )   ! =   - 1 ) )   { 
                                                                         i f   ( r o t a t e D e s t   ! =   n u l l )   { 
                                                                                 c u r r e n t F i l e n a m e   =   r o t a t e D e s t   +   "" / ""   +   c u r r e n t F i l e n a m e ; 
                                                                         } 
                                                                         i f   ( t i m e D i f f e r e n c e   >   c o m p a r i s o n T i m e )   { 
                                                                                 a r c h i v e . a d d F i l e ( f i l e L i s t [ t ] . g e t N a m e ( ) ,   c u r r e n t F i l e n a m e ) ; 
                                                                                 f i l e L i s t [ t ] . d e l e t e ( ) ; 
                                                                         } 
                                                                 } 
                                                         } 
                                                         f i l e L i s t   =   n u l l ; 
                                                         f o r m a t 1   =   n u l l ; 
                                                         a r c h i v e   =   n u l l ; 
                                                 } 
                                         } 
                                 } 
                                 i t   =   n u l l ; 
                         } 
",1,1,1,-1,i,0.0,1,7,{'i': 't'},MHM,308,0.22070730129877728
326,"CODE1:     public static void main(String[] args) {         FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);         boolean proceed = true;         String input = """";         DataInputStream dis;         OutputStream out;         InputStream in;         File out_file, in_file;         byte[] buffer = new byte[2048];         int bytes_read;         while (proceed) {             fd.show();             if (fd.getFile() != null) {                 try {                     in_file = new File(fd.getDirectory(), fd.getFile());                     out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");                     out = new FileOutputStream(out_file);                     in = new MSZipInputStream(new FileInputStream(in_file));                     while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);                     in.close();                     out.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }             System.out.println(""Do another (y/n)?"");             dis = new DataInputStream(System.in);             try {                 input = dis.readLine();             } catch (Exception blah) {             }             if (input.toLowerCase().startsWith(""n"")) proceed = false;         }     }  ||CODE2:     public static void copy(File from_file, File to_file) throws IOException {         from_file = checkFile(from_file);         if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());         if (to_file.exists()) {             if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());         } else {             String parent = to_file.getParent();             if (parent == null) parent = System.getProperty(""user.dir"");             File dir = new File(parent);             if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);             if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);             if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);         }         FileInputStream from = null;         FileOutputStream to = null;         try {             from = new FileInputStream(from_file);             to = new FileOutputStream(to_file);             byte[] buffer = new byte[4096];             int bytes_read;             while ((bytes_read = from.read(buffer)) != -1) {                 to.write(buffer, 0, bytes_read);             }         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {                 ;             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     } ",268,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 F i l e D i a l o g   f d   =   n e w   F i l e D i a l o g ( n e w   F r a m e ( ) ,   "" F i n d   a   . d e f   f i l e "" ,   F i l e D i a l o g . L O A D ) ; 
                 b o o l e a n   p r o c e e d   =   t r u e ; 
                 S t r i n g   i n p u t   =   "" "" ; 
                 D a t a I n p u t S t r e a m   d i s ; 
                 O u t p u t S t r e a m   o u t ; 
                 I n p u t S t r e a m   i n p u t ; 
                 F i l e   o u t _ f i l e ,   i n _ f i l e ; 
                 b y t e [ ]   b u f f e r   =   n e w   b y t e [ 2 0 4 8 ] ; 
                 i n t   b y t e s _ r e a d ; 
                 w h i l e   ( p r o c e e d )   { 
                         f d . s h o w ( ) ; 
                         i f   ( f d . g e t F i l e ( )   ! =   n u l l )   { 
                                 t r y   { 
                                         i n _ f i l e   =   n e w   F i l e ( f d . g e t D i r e c t o r y ( ) ,   f d . g e t F i l e ( ) ) ; 
                                         o u t _ f i l e   =   n e w   F i l e ( f d . g e t D i r e c t o r y ( ) ,   f d . g e t F i l e ( )   +   "" . o u t "" ) ; 
                                         o u t   =   n e w   F i l e O u t p u t S t r e a m ( o u t _ f i l e ) ; 
                                         i n p u t   =   n e w   M S Z i p I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( i n _ f i l e ) ) ; 
                                         w h i l e   ( ( b y t e s _ r e a d   =   i n p u t . r e a d ( b u f f e r ) )   ! =   - 1 )   o u t . w r i t e ( b u f f e r ,   0 ,   b y t e s _ r e a d ) ; 
                                         i n p u t . c l o s e ( ) ; 
                                         o u t . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                         e . p r i n t S t a c k T r a c e ( ) ; 
                                 } 
                         } 
                         S y s t e m . o u t . p r i n t l n ( "" D o   a n o t h e r   ( y / n ) ? "" ) ; 
                         d i s   =   n e w   D a t a I n p u t S t r e a m ( S y s t e m . i n p u t ) ; 
                         t r y   { 
                                 i n p u t   =   d i s . r e a d L i n e ( ) ; 
                         }   c a t c h   ( E x c e p t i o n   b l a h )   { 
                         } 
                         i f   ( i n p u t . t o L o w e r C a s e ( ) . s t a r t s W i t h ( "" n "" ) )   p r o c e e d   =   f a l s e ; 
                 } 
         } 
",1,1,1,-1,in,-1.173612e-08,1,5,{'in': 'input'},MHM,312,0.15830003023147582
328,"CODE1:     public String loadURL(URL url) {         String retVal = """";         try {             InputStream inputStream = url.openStream();             BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));             String line = bufferedReader.readLine();             retVal += line + ""\n"";             while (line != null) {                 System.out.println(line);                 line = bufferedReader.readLine();                 if (line != null) retVal += line + ""\n"";             }             bufferedReader.close();         } catch (MalformedURLException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (IOException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (Exception e) {             e.printStackTrace();             retVal = e.getMessage();         }         return retVal;     }  ||CODE2:     private String getDocumentAsString(URL url) throws IOException {         StringBuffer result = new StringBuffer();         InputStream in = url.openStream();         int c;         while ((c = in.read()) != -1) result.append((char) c);         return result.toString();     } ",168,"        p u b l i c   S t r i n g   l o a d U R L ( U R L   u r l )   { 
                 S t r i n g   r e t V a l   =   "" "" ; 
                 t r y   { 
                         I n p u t S t r e a m   i n p u t S t r e a m   =   u r l . o p e n S t r e a m ( ) ; 
                         B u f f e r e d R e a d e r   b u f f e r e d R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n p u t S t r e a m ) ) ; 
                         S t r i n g   l i n e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                         r e t V a l   + =   l i n e   +   "" 
 "" ; 
                         w h i l e   ( l i n e   ! =   n u l l )   { 
                                 S y s t e m . s y n c . p r i n t l n ( l i n e ) ; 
                                 l i n e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                                 i f   ( l i n e   ! =   n u l l )   r e t V a l   + =   l i n e   +   "" 
 "" ; 
                         } 
                         b u f f e r e d R e a d e r . c l o s e ( ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   e . g e t M e s s a g e ( ) ; 
                 } 
                 r e t u r n   r e t V a l ; 
         } 
",0,0,0,-1,out,-1.3768673e-05,1,1,{'out': 'sync'},MHM,290,0.13489234050114948
330,"CODE1:     @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })     public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {         File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());         StringBuilder name = new StringBuilder();         try {             if (dir.delete() && dir.mkdirs()) {                 File minDir = new File(dir, ""min"");                 minDir.mkdir();                 File combineFile = new File(minDir, ""style.css"");                 Writer writer = new FileWriter(combineFile);                 boolean first = true;                 for (Node link : linkCss) {                     String path = ((Element) link).getAttribute(""href"");                     URL url = new URL(buildUrl(base, path));                     InputStream inputStream = url.openStream();                     File cssFile = new File(dir, fileName(url));                     FileOutputStream outputStream = new FileOutputStream(cssFile);                     IOUtils.copy(inputStream, outputStream);                     outputStream.close();                     inputStream.close();                     if (!first) {                         writer.write('\n');                     } else {                         first = false;                     }                     Reader reader = new FileReader(cssFile);                     if (Configuration.cssMinification()) {                         CssCompressor cssCompressor = new CssCompressor(reader);                         cssCompressor.compress(writer, 0);                     } else {                         IOUtils.copy(reader, writer);                     }                     reader.close();                     String fileName = cssFile.getName();                     int pos = fileName.lastIndexOf('.');                     if (pos >= 0) {                         fileName = fileName.substring(0, pos);                     }                     name.append(fileName).append("","");                 }                 writer.close();                 FileReader reader = new FileReader(combineFile);                 name.append(hashCode(IOUtils.toString(reader))).append("".css"");                 reader.close();                 File targetFile = new File(Configuration.getCssLocalDir(), name.toString());                 if (!targetFile.exists()) {                     targetFile.getParentFile().mkdirs();                     FileUtils.copyFile(combineFile, targetFile);                     newFiles.add(targetFile);                     logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");                 }             }         } finally {             FileUtils.deleteQuietly(dir);         }         if (name.length() != 0) {             Element element = (Element) linkCss.get(0);             element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());             return element;         } else {             return null;         }     }  ||CODE2:     private void copy(File parent) {         System.out.println(""parent---"" + parent.getAbsolutePath());         if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {             File cases = new File(parent, ""cases"");             if (cases.exists()) {                 File answers = new File(parent, ""answers"");                 if (!answers.exists()) {                     answers.mkdir();                     File answers_linux = new File(parent, ""answers_linux"");                     for (File file : answers_linux.listFiles()) {                         if (file.isDirectory()) {                             continue;                         }                         File target = new File(answers, file.getName());                         try {                             IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));                         } catch (Throwable t) {                             t.printStackTrace();                         }                     }                 }             } else {                 for (File son : parent.listFiles()) {                     System.out.println(""parent---"" + son.getAbsolutePath());                     copySon(son);                 }             }         }     } ",536,"        @ S u p p r e s s W a r n i n g s ( {   "" R e s u l t O f M e t h o d C a l l I g n o r e d ""   } ) 
         p u b l i c   s t a t i c   N o d e   c o m b i n e C s s ( c h a n n e l   c h a n n e l ,   L i s t < N o d e >   l i n k C s s ,   L i s t < F i l e >   n e w F i l e s )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e   d i r   =   F i l e . c r e a t e T e m p F i l e ( "" c s s "" ,   "" ""   +   S y s t e m . c u r r e n t T i m e M i l l i s ( ) ) ; 
                 S t r i n g B u i l d e r   n a m e   =   n e w   S t r i n g B u i l d e r ( ) ; 
                 t r y   { 
                         i f   ( d i r . d e l e t e ( )   & &   d i r . m k d i r s ( ) )   { 
                                 F i l e   m i n D i r   =   n e w   F i l e ( d i r ,   "" m i n "" ) ; 
                                 m i n D i r . m k d i r ( ) ; 
                                 F i l e   c o m b i n e F i l e   =   n e w   F i l e ( m i n D i r ,   "" s t y l e . c s s "" ) ; 
                                 W r i t e r   w r i t e r   =   n e w   F i l e W r i t e r ( c o m b i n e F i l e ) ; 
                                 b o o l e a n   f i r s t   =   t r u e ; 
                                 f o r   ( N o d e   l i n k   :   l i n k C s s )   { 
                                         S t r i n g   p a t h   =   ( ( E l e m e n t )   l i n k ) . g e t A t t r i b u t e ( "" h r e f "" ) ; 
                                         c h a n n e l   c h a n n e l   =   n e w   c h a n n e l ( b u i l d U r l ( c h a n n e l ,   p a t h ) ) ; 
                                         I n p u t S t r e a m   i n p u t S t r e a m   =   c h a n n e l . o p e n S t r e a m ( ) ; 
                                         F i l e   c s s F i l e   =   n e w   F i l e ( d i r ,   f i l e N a m e ( c h a n n e l ) ) ; 
                                         F i l e O u t p u t S t r e a m   o u t p u t S t r e a m   =   n e w   F i l e O u t p u t S t r e a m ( c s s F i l e ) ; 
                                         I O U t i l s . c o p y ( i n p u t S t r e a m ,   o u t p u t S t r e a m ) ; 
                                         o u t p u t S t r e a m . c l o s e ( ) ; 
                                         i n p u t S t r e a m . c l o s e ( ) ; 
                                         i f   ( ! f i r s t )   { 
                                                 w r i t e r . w r i t e ( ' 
 ' ) ; 
                                         }   e l s e   { 
                                                 f i r s t   =   f a l s e ; 
                                         } 
                                         R e a d e r   r e a d e r   =   n e w   F i l e R e a d e r ( c s s F i l e ) ; 
                                         i f   ( C o n f i g u r a t i o n . c s s M i n i f i c a t i o n ( ) )   { 
                                                 C s s C o m p r e s s o r   c s s C o m p r e s s o r   =   n e w   C s s C o m p r e s s o r ( r e a d e r ) ; 
                                                 c s s C o m p r e s s o r . c o m p r e s s ( w r i t e r ,   0 ) ; 
                                         }   e l s e   { 
                                                 I O U t i l s . c o p y ( r e a d e r ,   w r i t e r ) ; 
                                         } 
                                         r e a d e r . c l o s e ( ) ; 
                                         S t r i n g   f i l e N a m e   =   c s s F i l e . g e t N a m e ( ) ; 
                                         i n t   p o s   =   f i l e N a m e . l a s t I n d e x O f ( ' . ' ) ; 
                                         i f   ( p o s   > =   0 )   { 
                                                 f i l e N a m e   =   f i l e N a m e . s u b s t r i n g ( 0 ,   p o s ) ; 
                                         } 
                                         n a m e . a p p e n d ( f i l e N a m e ) . a p p e n d ( "" , "" ) ; 
                                 } 
                                 w r i t e r . c l o s e ( ) ; 
                                 F i l e R e a d e r   r e a d e r   =   n e w   F i l e R e a d e r ( c o m b i n e F i l e ) ; 
                                 n a m e . a p p e n d ( h a s h C o d e ( I O U t i l s . t o S t r i n g ( r e a d e r ) ) ) . a p p e n d ( "" . c s s "" ) ; 
                                 r e a d e r . c l o s e ( ) ; 
                                 F i l e   t a r g e t F i l e   =   n e w   F i l e ( C o n f i g u r a t i o n . g e t C s s L o c a l D i r ( ) ,   n a m e . t o S t r i n g ( ) ) ; 
                                 i f   ( ! t a r g e t F i l e . e x i s t s ( ) )   { 
                                         t a r g e t F i l e . g e t P a r e n t F i l e ( ) . m k d i r s ( ) ; 
                                         F i l e U t i l s . c o p y F i l e ( c o m b i n e F i l e ,   t a r g e t F i l e ) ; 
                                         n e w F i l e s . a d d ( t a r g e t F i l e ) ; 
                                         l o g g e r . i n f o ( "" C o m b i n e d   s e v e r a l   c s s   f i l e s   i n t o   t h e   s i n g l e   ""   +   t a r g e t F i l e   +   ""   [ s i z e = ""   +   t a r g e t F i l e . l e n g t h ( )   +   "" ] . "" ) ; 
                                 } 
                         } 
                 }   f i n a l l y   { 
                         F i l e U t i l s . d e l e t e Q u i e t l y ( d i r ) ; 
                 } 
                 i f   ( n a m e . l e n g t h ( )   ! =   0 )   { 
                         E l e m e n t   e l e m e n t   =   ( E l e m e n t )   l i n k C s s . g e t ( 0 ) ; 
                         e l e m e n t . s e t A t t r i b u t e ( "" h r e f "" ,   C o n f i g u r a t i o n . g e t C s s U r l P r e f i x ( )   +   n a m e . t o S t r i n g ( ) ) ; 
                         r e t u r n   e l e m e n t ; 
                 }   e l s e   { 
                         r e t u r n   n u l l ; 
                 } 
         } 
",1,1,1,-1,url,1.2456439e-08,1,3,{'url': 'channel'},MHM,299,0.18097590605417888
334,"CODE1:     private void serveRedir(OutputStream os, IRequest req) throws IOException {         String urlString = req.getParameter(""url"");         URL url = new URL(urlString);         URLConnection con = url.openConnection();         InputStream is = new BufferedInputStream(con.getInputStream());         String ct = con.getContentType();         int cl = con.getContentLength();         String jsLink = ""<script language=\""JavaScript1.2\"" src=\""/tddt.js\"" type='text/javascript'></script>\n"";         int i;         String head = getHead(""HTTP/1.0 200 OK"", ""Content-Type: "" + ct + ""\nContent-Length: -1"");         os.write(head.getBytes());         if (ct != null && ct.indexOf(""html"") != -1) {             os.write(jsLink.getBytes());             NetUtils.saveChangeLink(url, os);         } else {             int len;             byte[] b = new byte[1024];             while ((len = is.read(b)) >= 0) {                 os.write(b, 0, len);             }         }         os.flush();     }  ||CODE2:     public static void copyFile(String file1, String file2) {         File filedata1 = new java.io.File(file1);         if (filedata1.exists()) {             try {                 BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));                 BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));                 try {                     int read;                     while ((read = in.read()) != -1) {                         out.write(read);                     }                     out.flush();                 } catch (IOException ex1) {                     ex1.printStackTrace();                 } finally {                     out.close();                     in.close();                 }             } catch (Exception ex) {                 ex.printStackTrace();             }         }     } ",215,"        p r i v a t e   v o i d   s e r v e R e d i r ( O u t p u t S t r e a m   o s ,   I R e q u e s t   r e q )   t h r o w s   I O E x c e p t i o n   { 
                 S t r i n g   u r l S t r i n g   =   r e q . g e t P a r a m e t e r ( "" r e a d s "" ) ; 
                 U R L   r e a d s   =   n e w   U R L ( u r l S t r i n g ) ; 
                 U R L C o n n e c t i o n   c o n   =   r e a d s . o p e n C o n n e c t i o n ( ) ; 
                 I n p u t S t r e a m   i s   =   n e w   B u f f e r e d I n p u t S t r e a m ( c o n . g e t I n p u t S t r e a m ( ) ) ; 
                 S t r i n g   c t   =   c o n . g e t C o n t e n t T y p e ( ) ; 
                 i n t   c l   =   c o n . g e t C o n t e n t L e n g t h ( ) ; 
                 S t r i n g   j s L i n k   =   "" < s c r i p t   l a n g u a g e = \ "" J a v a S c r i p t 1 . 2 \ ""   s r c = \ "" / t d d t . j s \ ""   t y p e = ' t e x t / j a v a s c r i p t ' > < / s c r i p t > 
 "" ; 
                 i n t   i ; 
                 S t r i n g   h e a d   =   g e t H e a d ( "" H T T P / 1 . 0   2 0 0   O K "" ,   "" C o n t e n t - T y p e :   ""   +   c t   +   "" 
 C o n t e n t - L e n g t h :   - 1 "" ) ; 
                 o s . w r i t e ( h e a d . g e t B y t e s ( ) ) ; 
                 i f   ( c t   ! =   n u l l   & &   c t . i n d e x O f ( "" h t m l "" )   ! =   - 1 )   { 
                         o s . w r i t e ( j s L i n k . g e t B y t e s ( ) ) ; 
                         N e t U t i l s . s a v e C h a n g e L i n k ( r e a d s ,   o s ) ; 
                 }   e l s e   { 
                         i n t   l e n ; 
                         b y t e [ ]   b   =   n e w   b y t e [ 1 0 2 4 ] ; 
                         w h i l e   ( ( l e n   =   i s . r e a d s ( b ) )   > =   0 )   { 
                                 o s . w r i t e ( b ,   0 ,   l e n ) ; 
                         } 
                 } 
                 o s . f l u s h ( ) ; 
         } 
",0,0,0,-1,read,-1.5497208e-06,1,1,{'read': 'reads'},MHM,304,0.1503299673398336
335,"CODE1:     @Override     protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         String reqPath = req.getPathInfo();         if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);         ZipEntry entry = zipInfo.get(reqPath);         if (entry == null) {             logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));             resp.sendError(HttpServletResponse.SC_NOT_FOUND);             return;         }         logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));         ServletUtils.establishContentType(reqPath, resp);         InputStream in = null;         try {             in = new BufferedInputStream(zipFile.getInputStream(entry));             IOUtils.copy(in, resp.getOutputStream());             logger.debug(""Rendered: "" + reqPath);         } catch (FileNotFoundException e) {             logger.error(""zipped resource not found: "" + reqPath);         } finally {             IOUtils.closeQuietly(in);         }     }  ||CODE2:     public static void main(String[] args) throws Exception {         String linesep = System.getProperty(""line.separator"");         FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));         fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());         fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());         fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());         fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());         fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());         fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());         File[] files = new File(args[0]).listFiles(new JarFileFilter());         for (int i = 0; i < files.length; i++) {             if (new File(files[i].getPath() + "".meta"").exists()) {                 Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));                 Iterator<String> itsect = metaprops.keySet().iterator();                 while (itsect.hasNext()) {                     String section = itsect.next();                     fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());                     fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());                     fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());                     fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());                     fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());                 }             }             if (new File(files[i].getPath() + "".extra"").exists()) {                 fos.write(new String(""The author says:"" + linesep).getBytes());                 FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));                 int len;                 byte[] buf = new byte[1024];                 while ((len = in.read(buf)) > 0) {                     fos.write(buf, 0, len);                 }             }             fos.write(linesep.getBytes());         }         fos.close();     } ",198,"        @ O v e r r i d e 
         p r o t e c t e d   v o i d   d o R e q u e s t ( H t t p S e r v l e t R e q u e s t   r e q ,   H t t p S e r v l e t R e s p o n s e   r e s p )   t h r o w s   S e r v l e t E x c e p t i o n ,   I O E x c e p t i o n   { 
                 S t r i n g   r e q P a t h   =   r e q . g e t P a t h I n f o ( ) ; 
                 i f   ( r e q P a t h . s t a r t s W i t h ( "" / "" ) )   r e q P a t h   =   r e q P a t h . s u b s t r i n g ( 1 ) ; 
                 Z i p E n t r y   e n t r y   =   z i p I n f o . g e t ( r e q P a t h ) ; 
                 i f   ( e n t r y   = =   n u l l )   { 
                         l o g g e r . d e b u g ( U t i l s . j o i n ( "" R e q u e s t e d   p a t h   n o t   f o u n d :   [ "" ,   r e q P a t h ,   "" ] "" ) ) ; 
                         r e s p . s e n d E r r o r ( H t t p S e r v l e t R e s p o n s e . S C _ N O T _ F O U N D ) ; 
                         r e t u r n ; 
                 } 
                 l o g g e r . d e b u g ( U t i l s . j o i n ( "" R e q u e s t e d   p a t h :   [ "" ,   r e q P a t h ,   "" ] "" ) ) ; 
                 S e r v l e t U t i l s . e s t a b l i s h C o n t e n t T y p e ( r e q P a t h ,   r e s p ) ; 
                 I n p u t S t r e a m   o u t   =   n u l l ; 
                 t r y   { 
                         o u t   =   n e w   B u f f e r e d I n p u t S t r e a m ( z i p F i l e . g e t I n p u t S t r e a m ( e n t r y ) ) ; 
                         I O U t i l s . c o p y ( o u t ,   r e s p . g e t O u t p u t S t r e a m ( ) ) ; 
                         l o g g e r . d e b u g ( "" R e n d e r e d :   ""   +   r e q P a t h ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         l o g g e r . e r r o r ( "" z i p p e d   r e s o u r c e   n o t   f o u n d :   ""   +   r e q P a t h ) ; 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e Q u i e t l y ( o u t ) ; 
                 } 
         } 
",1,1,1,-1,in,8.090865e-09,1,4,{'in': 'out'},MHM,289,0.14381707111994427
336,"CODE1:     public int create(BusinessObject o) throws DAOException {         int insert = 0;         int id = 0;         Project project = (Project) o;         try {             PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));             pst.setString(1, project.getName());             pst.setString(2, project.getDescription());             pst.setInt(3, project.getIdAccount());             pst.setInt(4, project.getIdContact());             insert = pst.executeUpdate();             if (insert <= 0) {                 connection.rollback();                 throw new DAOException(""Number of rows <= 0"");             } else if (insert > 1) {                 connection.rollback();                 throw new DAOException(""Number of rows > 1"");             }             Statement st = connection.createStatement();             ResultSet rs = st.executeQuery(""select max(id_project) from project"");             rs.next();             id = rs.getInt(1);             connection.commit();         } catch (SQLException e) {             Log.write(e.getMessage());             throw new DAOException(""A SQLException has occured"");         } catch (NullPointerException npe) {             Log.write(npe.getMessage());             throw new DAOException(""Connection null"");         }         return id;     }  ||CODE2:     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {         FileChannel inputChannel = new FileInputStream(inputFile).getChannel();         FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();         try {             inputChannel.transferTo(0, inputChannel.size(), outputChannel);         } catch (IOException e) {             throw e;         } finally {             if (inputChannel != null) inputChannel.close();             if (outputChannel != null) outputChannel.close();         }     } ",255,"        p u b l i c   i n t   c r e a t e ( B u s i n e s s O b j e c t   o )   t h r o w s   D A O E x c e p t i o n   { 
                 i n t   i n s e r t   =   0 ; 
                 i n t   i d   =   0 ; 
                 P r o j e c t   p r o j e c t   =   ( P r o j e c t )   o ; 
                 t r y   { 
                         P r e p a r e d S t a t e m e n t   p s t   =   c o n n e c t i o n . p r e p a r e S t a t e m e n t ( X M L G e t Q u e r y . g e t Q u e r y ( "" I N S E R T _ P R O J E C T "" ) ) ; 
                         p s t . s e t S t r i n g ( 1 ,   p r o j e c t . g e t N a m e ( ) ) ; 
                         p s t . s e t S t r i n g ( 2 ,   p r o j e c t . g e t D e s c r i p t i o n ( ) ) ; 
                         p s t . s e t I n t ( 3 ,   p r o j e c t . g e t I d A c c o u n t ( ) ) ; 
                         p s t . s e t I n t ( 4 ,   p r o j e c t . g e t I d C o n t a c t ( ) ) ; 
                         i n s e r t   =   p s t . e x e c u t e U p d a t e ( ) ; 
                         i f   ( i n s e r t   < =   0 )   { 
                                 c o n n e c t i o n . r o l l b a c k ( ) ; 
                                 t h r o w   n e w   D A O E x c e p t i o n ( "" N u m b e r   o f   r o w s   < =   0 "" ) ; 
                         }   e l s e   i f   ( i n s e r t   >   1 )   { 
                                 c o n n e c t i o n . r o l l b a c k ( ) ; 
                                 t h r o w   n e w   D A O E x c e p t i o n ( "" N u m b e r   o f   r o w s   >   1 "" ) ; 
                         } 
                         S t a t e m e n t   s t   =   c o n n e c t i o n . c r e a t e S t a t e m e n t ( ) ; 
                         R e s u l t S e t   r s   =   s t . e x e c u t e Q u e r y ( "" s e l e c t   m a x ( i d _ p r o j e c t )   f r o m   p r o j e c t "" ) ; 
                         r s . n e x t ( ) ; 
                         i d   =   r s . g e t I n t ( 1 ) ; 
                         c o n n e c t i o n . c o m m i t ( ) ; 
                 }   c a t c h   ( S Q L E x c e p t i o n     e x c )   { 
                         L o g . w r i t e (   e x c . g e t M e s s a g e ( ) ) ; 
                         t h r o w   n e w   D A O E x c e p t i o n ( "" A   S Q L E x c e p t i o n   h a s   o c c u r e d "" ) ; 
                 }   c a t c h   ( N u l l P o i n t e r E x c e p t i o n   n p e )   { 
                         L o g . w r i t e ( n p e . g e t M e s s a g e ( ) ) ; 
                         t h r o w   n e w   D A O E x c e p t i o n ( "" C o n n e c t i o n   n u l l "" ) ; 
                 } 
                 r e t u r n   i d ; 
         } 
",0,0,0,-1,e,0.0,1,2,{'e': ' ev'},MHM,263,0.13899736404418944
338,"CODE1:     private void renderScript(PhaseEvent event) {         URL url = AjaxPhaseListener.class.getResource(SCRIPT_RESOURCE_NAME);         URLConnection conn = null;         InputStream stream = null;         BufferedReader bufReader = null;         HttpServletResponse response = (HttpServletResponse) event.getFacesContext().getExternalContext().getResponse();         OutputStreamWriter outWriter = null;         String curLine = null;         try {             outWriter = new OutputStreamWriter(response.getOutputStream(), response.getCharacterEncoding());             conn = url.openConnection();             conn.setUseCaches(false);             stream = conn.getInputStream();             bufReader = new BufferedReader(new InputStreamReader(stream));             response.setContentType(""text/javascript"");             response.setStatus(200);             while (null != (curLine = bufReader.readLine())) {                 outWriter.write(curLine + ""\n"");             }             outWriter.flush();             outWriter.close();             event.getFacesContext().responseComplete();         } catch (Exception e) {             String message = null;             message = ""Can't load script file:"" + url.toExternalForm();         }     }  ||CODE2:     public static void copy(String source, String dest) throws java.io.IOException {         java.io.BufferedInputStream in = null;         java.io.BufferedOutputStream out = null;         try {             in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);             out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);             while (in.available() != 0) {                 out.write(in.read());             }         } catch (java.io.IOException e) {             throw e;         } finally {             try {                 if (in != null) {                     in.close();                 }                 if (out != null) {                     out.close();                 }             } catch (java.io.IOException E) {             }         }     } ",211,"        p r i v a t e   v o i d   r e n d e r S c r i p t ( P h a s e E v e n t   e v e n t )   { 
                 U R L   f i l e   =   A j a x P h a s e L i s t e n e r . c l a s s . g e t R e s o u r c e ( S C R I P T _ R E S O U R C E _ N A M E ) ; 
                 U R L C o n n e c t i o n   c o n n   =   f i l e ; 
                 I n p u t S t r e a m   s t r e a m   =   f i l e ; 
                 B u f f e r e d R e a d e r   b u f R e a d e r   =   f i l e ; 
                 H t t p S e r v l e t R e s p o n s e   r e s p o n s e   =   ( H t t p S e r v l e t R e s p o n s e )   e v e n t . g e t F a c e s C o n t e x t ( ) . g e t E x t e r n a l C o n t e x t ( ) . g e t R e s p o n s e ( ) ; 
                 O u t p u t S t r e a m W r i t e r   o u t W r i t e r   =   f i l e ; 
                 S t r i n g   c u r L i n e   =   f i l e ; 
                 t r y   { 
                         o u t W r i t e r   =   n e w   O u t p u t S t r e a m W r i t e r ( r e s p o n s e . g e t O u t p u t S t r e a m ( ) ,   r e s p o n s e . g e t C h a r a c t e r E n c o d i n g ( ) ) ; 
                         c o n n   =   f i l e .   o p e n C o n n e c t o r ( ) ; 
                         c o n n . s e t U s e C a c h e s ( f a l s e ) ; 
                         s t r e a m   =   c o n n . g e t I n p u t S t r e a m ( ) ; 
                         b u f R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( s t r e a m ) ) ; 
                         r e s p o n s e . s e t C o n t e n t T y p e ( "" t e x t / j a v a s c r i p t "" ) ; 
                         r e s p o n s e . s e t S t a t u s ( 2 0 0 ) ; 
                         w h i l e   ( f i l e   ! =   ( c u r L i n e   =   b u f R e a d e r . r e a d L i n e ( ) ) )   { 
                                 o u t W r i t e r . w r i t e ( c u r L i n e   +   "" 
 "" ) ; 
                         } 
                         o u t W r i t e r . f l u s h ( ) ; 
                         o u t W r i t e r . c l o s e ( ) ; 
                         e v e n t . g e t F a c e s C o n t e x t ( ) . r e s p o n s e C o m p l e t e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         S t r i n g   m e s s a g e   =   f i l e ; 
                         m e s s a g e   =   "" C a n ' t   l o a d   s c r i p t   f i l e : ""   +   f i l e . t o E x t e r n a l F o r m ( ) ; 
                 } 
         } 
",0,0,1,1,url,0.9994296,2,4,"{'openConnection': 'initConnector', 'url': 'file'}",MHM,187,0.11347386042277018
356,"CODE1:     protected byte[] generateHashBytes() {         String s = createString(false);         MessageDigest md;         try {             md = MessageDigest.getInstance(""MD5"");         } catch (NoSuchAlgorithmException nsa) {             System.out.println(""Can't get MD5 implementation "" + nsa);             throw new RuntimeException(""DynanmicAddress2: Can't get MD5 implementation"");         }         if (m_key != null) md.update(m_key.getBytes(), 0, m_key.length());         md.update(s.getBytes(), 0, s.length());         byte[] hash = md.digest();         return hash;     }  ||CODE2:     private File download(String filename, URL url) {         int size = -1;         int received = 0;         try {             fireDownloadStarted(filename);             File file = createFile(filename);             BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));             System.out.println(""������Դ��"" + filename + "", url="" + url);             InputStream bis = url.openStream();             byte[] buf = new byte[1024];             int count = 0;             long lastUpdate = 0;             size = bis.available();             while ((count = bis.read(buf)) != -1) {                 bos.write(buf, 0, count);                 received += count;                 long now = System.currentTimeMillis();                 if (now - lastUpdate > 500) {                     fireDownloadUpdate(filename, size, received);                     lastUpdate = now;                 }             }             bos.close();             System.out.println(""��Դ������ϣ�"" + filename);             fireDownloadCompleted(filename);             return file;         } catch (IOException e) {             System.out.println(""������Դʧ�ܣ�"" + filename + "", error="" + e.getMessage());             fireDownloadInterrupted(filename);             if (!(e instanceof FileNotFoundException)) {                 e.printStackTrace();             }         }         return null;     } ",121,"        p r o t e c t e d   b y t e [ ]   g e n e r a t e H a s h B y t e s ( )   { 
                 S t r i n g   s   =   c r e a t e S t r i n g ( f a l s e ) ; 
                 M e s s a g e D i g e s t   m d ; 
                 t r y   { 
                         m d   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" M D 5 "" ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   n s a )   { 
                         S y s t e m . e r r . p r i n t l n ( "" C a n ' t   g e t   M D 5   i m p l e m e n t a t i o n   ""   +   n s a ) ; 
                         t h r o w   n e w   R u n t i m e E x c e p t i o n ( "" D y n a n m i c A d d r e s s 2 :   C a n ' t   g e t   M D 5   i m p l e m e n t a t i o n "" ) ; 
                 } 
                 i f   ( m _ k e y   ! =   n u l l )   m d . u p d a t e ( m _ k e y . g e t B y t e s ( ) ,   0 ,   m _ k e y . l e n g t h ( ) ) ; 
                 m d . u p d a t e ( s . g e t B y t e s ( ) ,   0 ,   s . l e n g t h ( ) ) ; 
                 b y t e [ ]   h a s h   =   m d . d i g e s t ( ) ; 
                 r e t u r n   h a s h ; 
         } 
",0,0,0,-1,out,0.0,1,1,{'out': 'err'},MHM,330,0.13883288304011027
359,"CODE1:     public void copy(String source, String target) throws IOException {         @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();         @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();         targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());     }  ||CODE2:     public static void main(String[] args) throws Exception {         File inputFile = new File(args[0]);         BufferedReader reader = new BufferedReader(new FileReader(inputFile));         StringBuffer stringBuffer = new StringBuffer();         String readed;         while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\r\n"");         readed = stringBuffer.toString();         reader.close();         File outputFile = new File(args[0] + "".output"");         BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));         readed = readed.replaceAll(""\\t+"", ""#"");         readed = readed.replaceAll(""\\s*#\\s*"", ""#"");         readed = readed.replaceAll(""Latitude,.*"", """");         readed = readed.replaceAll(""Flag of"", """");         readed = readed.replaceAll(""^\\s+$"", """");         writer.write(readed);         writer.close();     } ",67,"        p u b l i c   v o i d   c o p y ( S t r i n g   u r l ,   S t r i n g   t a r g e t )   t h r o w s   I O E x c e p t i o n   { 
                 @ C l e a n u p   F i l e C h a n n e l   s o u r c e C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( n e w   F i l e ( u r l ) ) . g e t C h a n n e l ( ) ; 
                 @ C l e a n u p   F i l e C h a n n e l   t a r g e t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( n e w   F i l e ( t a r g e t ) ) . g e t C h a n n e l ( ) ; 
                 t a r g e t C h a n n e l . t r a n s f e r F r o m ( s o u r c e C h a n n e l ,   0 ,   s o u r c e C h a n n e l . s i z e ( ) ) ; 
         } 
",1,1,0,1,source,-0.99983627,1,2,{'source': 'url'},MHM,36,0.0190122127532959
362,"CODE1:     public FetchTextFromWebPage(String path) {         HTMLEditorKit.Parser parser;         HTMLFile = new File(path);         byte[] html = new byte[new Long(HTMLFile.length()).intValue()];         try {             FileInputStream fis = new FileInputStream(HTMLFile);             try {                 fis.read(html);             } catch (IOException e) {                 e.printStackTrace();             }             ByteArrayInputStream ba_read = new ByteArrayInputStream(html);             r = new InputStreamReader(ba_read);         } catch (FileNotFoundException e) {             URL url = null;             try {                 url = new URL(path);                 URLConnection connection = null;                 try {                     connection = url.openConnection();                     connection.setDoInput(true);                     InputStream inStream = null;                     try {                         inStream = connection.getInputStream();                         BufferedReader input = new BufferedReader(new InputStreamReader(inStream));                         StringBuffer sbr = new StringBuffer();                         String line = null;                         try {                             while ((line = input.readLine()) != null) {                                 System.out.println(line);                                 sbr.append(line + ""\n"");                             }                         } catch (IOException e1) {                             e1.printStackTrace();                         }                         File temp = new File(""//home//wiki14//temp.txt"");                         if (!temp.exists()) {                             if (!temp.createNewFile()) System.out.println(""File caanot be created"");                         } else {                             temp.delete();                             if (!temp.createNewFile()) System.out.println(""File caanot be created"");                         }                         java.io.FileWriter fw = new java.io.FileWriter(temp);                         fw.write(sbr.toString());                         fw.close();                         byte[] newbyte = new byte[new Long(sbr.length()).intValue()];                         ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);                         r = new InputStreamReader(ba_read);                     } catch (IOException e1) {                         e1.printStackTrace();                     }                 } catch (IOException e1) {                     e1.printStackTrace();                 }             } catch (MalformedURLException e1) {                 e1.printStackTrace();             }         }         parser = new ParserDelegator();         htmltextparser = new HtmlTextParser();         htmltextparser.initData();         try {             parser.parse(r, htmltextparser, true);         } catch (IOException e) {             e.printStackTrace();         }         try {             r.close();         } catch (IOException e) {             e.printStackTrace();         }     }  ||CODE2:     public ViewInitListener() throws IOException {         URL url = this.getClass().getResource(VIEW_INIT_CONFIG);         log.debug(""Loading configuration from: "" + url);         config = new Properties();         InputStream in = url.openStream();         config.load(in);         in.close();     } ",490,"        p u b l i c   F e t c h T e x t F r o m W e b P a g e ( S t r i n g   p a t h )   { 
                 H T M L E d i t o r K i t . P a r s e r   p a r s e r ; 
                 H T M L F i l e   =   n e w   F i l e ( p a t h ) ; 
                 b y t e [ ]   h t m l   =   n e w   b y t e [ n e w   L o n g ( H T M L F i l e . l e n g t h ( ) ) . i n t V a l u e ( ) ] ; 
                 t r y   { 
                         F i l e I n p u t S t r e a m   f i s   =   n e w   F i l e I n p u t S t r e a m ( H T M L F i l e ) ; 
                         t r y   { 
                                 f i s . r e a d ( h t m l ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                         B y t e A r r a y I n p u t S t r e a m   b a _ r e a d   =   n e w   B y t e A r r a y I n p u t S t r e a m ( h t m l ) ; 
                         r   =   n e w   I n p u t S t r e a m R e a d e r ( b a _ r e a d ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         U R L   U R L   =   n u l l ; 
                         t r y   { 
                                 U R L   =   n e w   U R L ( p a t h ) ; 
                                 U R L C o n n e c t i o n   c o n n e c t i o n   =   n u l l ; 
                                 t r y   { 
                                         c o n n e c t i o n   =   U R L . o p e n C o n n e c t i o n ( ) ; 
                                         c o n n e c t i o n . s e t D o I n p u t ( t r u e ) ; 
                                         I n p u t S t r e a m   i n S t r e a m   =   n u l l ; 
                                         t r y   { 
                                                 i n S t r e a m   =   c o n n e c t i o n . g e t I n p u t S t r e a m ( ) ; 
                                                 B u f f e r e d R e a d e r   i n p u t   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n S t r e a m ) ) ; 
                                                 S t r i n g B u f f e r   s b r   =   n e w   S t r i n g B u f f e r ( ) ; 
                                                 S t r i n g   l i n e   =   n u l l ; 
                                                 t r y   { 
                                                         w h i l e   ( ( l i n e   =   i n p u t . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                                                 S y s t e m . o u t . p r i n t l n ( l i n e ) ; 
                                                                 s b r . a p p e n d ( l i n e   +   "" 
 "" ) ; 
                                                         } 
                                                 }   c a t c h   ( I O E x c e p t i o n   e 1 )   { 
                                                         e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                                 } 
                                                 F i l e   p a r t   =   n e w   F i l e ( "" / / h o m e / / w i k i 1 4 / / t e m p . t x t "" ) ; 
                                                 i f   ( ! p a r t . e x i s t s ( ) )   { 
                                                         i f   ( ! p a r t . c r e a t e N e w F i l e ( ) )   S y s t e m . o u t . p r i n t l n ( "" F i l e   c a a n o t   b e   c r e a t e d "" ) ; 
                                                 }   e l s e   { 
                                                         p a r t . d e l e t e ( ) ; 
                                                         i f   ( ! p a r t . c r e a t e N e w F i l e ( ) )   S y s t e m . o u t . p r i n t l n ( "" F i l e   c a a n o t   b e   c r e a t e d "" ) ; 
                                                 } 
                                                 j a v a . i o . F i l e W r i t e r   f w   =   n e w   j a v a . i o . F i l e W r i t e r ( p a r t ) ; 
                                                 f w . w r i t e ( s b r . t o S t r i n g ( ) ) ; 
                                                 f w . c l o s e ( ) ; 
                                                 b y t e [ ]   n e w b y t e   =   n e w   b y t e [ n e w   L o n g ( s b r . l e n g t h ( ) ) . i n t V a l u e ( ) ] ; 
                                                 B y t e A r r a y I n p u t S t r e a m   b a _ r e a d   =   n e w   B y t e A r r a y I n p u t S t r e a m ( n e w b y t e ) ; 
                                                 r   =   n e w   I n p u t S t r e a m R e a d e r ( b a _ r e a d ) ; 
                                         }   c a t c h   ( I O E x c e p t i o n   e 1 )   { 
                                                 e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                         } 
                                 }   c a t c h   ( I O E x c e p t i o n   e 1 )   { 
                                         e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                 } 
                         }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e 1 )   { 
                                 e 1 . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 } 
                 p a r s e r   =   n e w   P a r s e r D e l e g a t o r ( ) ; 
                 h t m l t e x t p a r s e r   =   n e w   H t m l T e x t P a r s e r ( ) ; 
                 h t m l t e x t p a r s e r . i n i t D a t a ( ) ; 
                 t r y   { 
                         p a r s e r . p a r s e ( r ,   h t m l t e x t p a r s e r ,   t r u e ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 t r y   { 
                         r . c l o s e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",0,0,0,-1,temp,-3.4749508e-05,1,6,{'temp': 'part'},MHM,304,0.16412105957667034
363,"CODE1:     public HogsCustomizer() {         m_filename = PathFinder.getCustsFile();         m_currenttaunts = new String[10];         m_textfields = new JTextField[10];         m_color = new Color(255, 255, 255);         boolean exists = (new File(m_filename)).exists();         m_inverted = false;         m_chooser = new JColorChooser();         AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();         m_chooser.removeChooserPanel(panels[0]);         m_chooser.removeChooserPanel(panels[2]);         m_chooser.setPreviewPanel(new JPanel());         Reader reader = null;         if (exists) {             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e) {                 e.printStackTrace();             }         } else {             Object[] options = { ""Yes"", ""No, Thanks"" };             int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);             if (n == 0) {                 try {                     FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();                     FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();                     dstChannel.transferFrom(srcChannel, 0, srcChannel.size());                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                     e.printStackTrace();                     System.exit(0);                 }             } else {                 System.exit(0);             }             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e1) {                 e1.printStackTrace();                 System.exit(0);             }         }         try {             readFromFile(reader);         } catch (Exception e) {             e.printStackTrace();             System.exit(0);         }         Box mainpanel = Box.createVerticalBox();         mainpanel.add(buildTauntsPanel());         mainpanel.add(buildMouseStylePanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildColorPanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildButtonsPanel());         mainpanel.add(Box.createVerticalStrut(10));         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setContentPane(mainpanel);         this.pack();         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();         this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));         this.setTitle(""Hogs Customizer"");         this.setVisible(true);     }  ||CODE2:     public boolean copyOneOfMyFile(File f, String dest) {         if (!ownsThisFile(f.getName())) return false;         if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);         try {             BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));             BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));             int len = 1024;             byte[] read = new byte[len];             while ((len = in.read(read)) > 0) out.write(read, 0, len);             out.flush();             out.close();             in.close();             if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());         } catch (IOException e) {             System.out.println(""copy directory : "" + e);             return false;         }         return true;     } ",526,"        p u b l i c   H o g s C u s t o m i z e r ( )   { 
                 m _ f i l e n a m e   =   P a t h F i n d e r . g e t C u s t s F i l e ( ) ; 
                 m _ c u r r e n t t a u n t s   =   n e w   S t r i n g [ 1 0 ] ; 
                 m _ t e x t f i e l d s   =   n e w   J T e x t F i e l d [ 1 0 ] ; 
                 m _ c o l o r   =   n e w   C o l o r ( 2 5 5 ,   2 5 5 ,   2 5 5 ) ; 
                 b o o l e a n   e x i s t s   =   ( n e w   F i l e ( m _ f i l e n a m e ) ) . e x i s t s ( ) ; 
                 m _ i n v e r t e d   =   f a l s e ; 
                 m _ c h o o s e r   =   n e w   J C o l o r C h o o s e r ( ) ; 
                 A b s t r a c t C o l o r C h o o s e r P a n e l [ ]   p a n e l s   =   m _ c h o o s e r . g e t C h o o s e r P a n e l s ( ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 0 ] ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 2 ] ) ; 
                 m _ c h o o s e r . s e t P r e v i e w P a n e l ( n e w   J P a n e l ( ) ) ; 
                 R e a d e r   r e a d e r   =   n u l l ; 
                 i f   ( e x i s t s )   { 
                         t r y   { 
                                 r e a d e r   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 }   e l s e   { 
                         O b j e c t [ ]   o p t i o n s   =   {   "" Y e s "" ,   "" N o ,   T h a n k s ""   } ; 
                         i n t   n   =   J O p t i o n P a n e . s h o w O p t i o n D i a l o g ( t h i s ,   "" Y o u   d o   n o t   h a v e   a   c u s t o m i z a t i o n   f i l e   i n   y o u r   h o m e   d i r e c t o r y . 
                                   ""   +   "" W o u l d   y o u   l i k e   t o   c r e a t e   o n e ? "" ,   "" H o g s   C u s t o m i z a t i o n "" ,   J O p t i o n P a n e . Y E S _ N O _ O P T I O N ,   J O p t i o n P a n e . Q U E S T I O N _ M E S S A G E ,   n u l l ,   o p t i o n s ,   o p t i o n s [ 1 ] ) ; 
                         i f   ( n   = =   0 )   { 
                                 t r y   { 
                                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( H o g s C o n s t a n t s . C U S T S _ T E M P L A T E ) . g e t C h a n n e l ( ) ; 
                                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( m _ f i l e n a m e ) . g e t C h a n n e l ( ) ; 
                                         d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                                         s r c C h a n n e l . c l o s e ( ) ; 
                                         d s t C h a n n e l . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                         e . p r i n t S t a c k T r a c e ( ) ; 
                                         S y s t e m . e x i t ( 0 ) ; 
                                 } 
                         }   e l s e   { 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                         t r y   { 
                                 r e a d e r   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e 1 )   { 
                                 e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                 } 
                 t r y   { 
                         r e a d F r o m F i l e ( r e a d e r ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         S y s t e m . e x i t ( 0 ) ; 
                 } 
                 B o x   m a i n p a n e l   =   B o x . c r e a t e V e r t i c a l B o x ( ) ; 
                 m a i n p a n e l . a d d ( b u i l d T a u n t s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d M o u s e S t y l e P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d C o l o r P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d B u t t o n s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 t h i s . s e t D e f a u l t C l o s e O p e r a t i o n ( J F r a m e . E X I T _ O N _ C L O S E ) ; 
                 t h i s . s e t C o n t e n t P a n e ( m a i n p a n e l ) ; 
                 t h i s . p a c k ( ) ; 
                 D i m e n s i o n   d i m   =   T o o l k i t . g e t D e f a u l t T o o l k i t ( ) . g e t S c r e e n S i z e ( ) ; 
                 t h i s . s e t L o c a t i o n ( d i m . w i d t h   /   2   -   ( t h i s . g e t W i d t h ( )   /   2 ) ,   d i m . h e i g h t   /   2   -   ( t h i s . g e t H e i g h t ( )   /   2 ) ) ; 
                 t h i s . s e t T i t l e ( "" H o g s   C u s t o m i z e r "" ) ; 
                 t h i s . s e t V i s i b l e ( t r u e ) ; 
         } 
",1,1,1,-1,in,0.0,1,1,{'in': 'bin'},MHM,243,0.1601873834927877
364,"CODE1:     public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {         File sourceFile = getTileFile(x, y, zoom, tileSource);         if (!sourceFile.exists()) return false;         FileInputStream fis = null;         FileOutputStream fos = null;         long sourceBytes = 0;         long writtenBytes = 0;         try {             fis = new FileInputStream(sourceFile);             fos = new FileOutputStream(targetFileName);             FileChannel source = fis.getChannel();             FileChannel destination = fos.getChannel();             sourceBytes = source.size();             writtenBytes = destination.transferFrom(source, 0, sourceBytes);         } finally {             Utilities.closeStream(fis);             Utilities.closeStream(fos);         }         if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");         return true;     }  ||CODE2:     public void fileCopy(File src, File dest) throws IOException {         if (!dest.exists()) {             final File parent = new File(dest.getParent());             if (!parent.exists() && !parent.mkdirs()) {                 throw new IOException();             }             if (!dest.createNewFile()) {             }         }         FileInputStream is = null;         FileOutputStream os = null;         try {             is = new FileInputStream(src);             os = new FileOutputStream(dest);             final FileChannel srcChannel = is.getChannel();             final FileChannel dstChannel = os.getChannel();             dstChannel.transferFrom(srcChannel, 0, srcChannel.size());             srcChannel.close();             dstChannel.close();         } finally {             try {                 if (is != null) {                     is.close();                 }             } finally {                 if (os != null) {                     os.close();                 }             }         }     } ",162,"        p u b l i c   b o o l e a n   c o p y S t o r e d T i l e T o ( F i l e   t a r g e t F i l e N a m e ,   i n t   x ,   i n t   y ,   i n t   z o o m ,   M a p S o u r c e   t i l e S o u r c e )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e   s o u r c e F i l e   =   g e t T i l e F i l e ( x ,   y ,   z o o m ,   t i l e S o u r c e ) ; 
                 i f   ( ! s o u r c e F i l e . e x i s t s ( ) )   r e t u r n   f a l s e ; 
                 F i l e I n p u t S t r e a m     f o e s   =   n u l l ; 
                 F i l e O u t p u t S t r e a m     f o e s   =   n u l l ; 
                 l o n g   s o u r c e B y t e s   =   0 ; 
                 l o n g   w r i t t e n B y t e s   =   0 ; 
                 t r y   { 
                           f o e s   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e F i l e ) ; 
                           f o e s   =   n e w   F i l e O u t p u t S t r e a m ( t a r g e t F i l e N a m e ) ; 
                         F i l e C h a n n e l   s o u r c e   =     f o e s . g e t C h a n n e l ( ) ; 
                         F i l e C h a n n e l   d e s t i n a t i o n   =     f o e s . g e t C h a n n e l ( ) ; 
                         s o u r c e B y t e s   =   s o u r c e . s i z e ( ) ; 
                         w r i t t e n B y t e s   =   d e s t i n a t i o n . t r a n s f e r F r o m ( s o u r c e ,   0 ,   s o u r c e B y t e s ) ; 
                 }   f i n a l l y   { 
                         U t i l i t i e s . c l o s e S t r e a m (   f o e s ) ; 
                         U t i l i t i e s . c l o s e S t r e a m (   f o e s ) ; 
                 } 
                 i f   ( w r i t t e n B y t e s   ! =   s o u r c e B y t e s )   t h r o w   n e w   I O E x c e p t i o n ( "" T a r g e t   f i l e ' s   s i z e   i s   n o t   e q u a l   t o   t h e   s o u r c e   f i l e ' s   s i z e ! "" ) ; 
                 r e t u r n   t r u e ; 
         } 
",1,1,1,-1,fos,0.0,1,4,{'fos': ' fis'},MHM,308,0.14677082697550456
366,"CODE1:     public void CopyFile(File source, File destination) throws Exception {         FileInputStream fis = null;         FileOutputStream fos = null;         try {             fis = new FileInputStream(source);             fos = new FileOutputStream(destination);             byte[] buffer = new byte[4096];             int read;             while ((read = fis.read(buffer)) != -1) {                 fos.write(buffer, 0, read);             }         } catch (IOException e) {             e.printStackTrace();         } finally {             try {                 if (fis != null) {                     fis.close();                 }                 if (fos != null) {                     fos.close();                 }             } catch (IOException e) {                 e.printStackTrace();             }         }     }  ||CODE2:     private void displayDiffResults() throws IOException {         File outFile = File.createTempFile(""diff"", "".htm"");         outFile.deleteOnExit();         FileOutputStream outStream = new FileOutputStream(outFile);         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));         out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");         if (addedTable.length() > 0) {             out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");             out.write(addedTable.toString());             out.write(""</table><br><br>"");         }         if (modifiedTable.length() > 0) {             out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");             out.write(modifiedTable.toString());             out.write(""</table><br><br>"");         }         if (deletedTable.length() > 0) {             out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");             out.write(deletedTable.toString());             out.write(""</table><br><br>"");         }         out.write(""<table name=METRICS BORDER>\n"");         if (modifiedTable.length() > 0 || deletedTable.length() > 0) {             out.write(""<tr><td>Base:&nbsp;</td><td>"");             out.write(Long.toString(base));             out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");             out.write(Long.toString(deleted));             out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");             out.write(Long.toString(modified));             out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");             out.write(Long.toString(added));             out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");             out.write(Long.toString(added + modified));             out.write(""</td></tr>\n"");         }         out.write(""<tr><td>Total:&nbsp;</td><td>"");         out.write(Long.toString(total));         out.write(""</td></tr>\n</table></div>"");         redlinesOut.close();         out.flush();         InputStream redlines = new FileInputStream(redlinesTempFile);         byte[] buffer = new byte[4096];         int bytesRead;         while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);         outStream.write(""</BODY></HTML>"".getBytes());         outStream.close();         Browser.launch(outFile.toURL().toString());     } ",146,"        p u b l i c   v o i d   C o p y F i l e ( F i l e   s o u r c e ,   F i l e   d e s t i n a t i o n )   t h r o w s   X   { 
                 F i l e I n p u t S t r e a m   f i s   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   f o s   =   n u l l ; 
                 t r y   { 
                         f i s   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e ) ; 
                         f o s   =   n e w   F i l e O u t p u t S t r e a m ( d e s t i n a t i o n ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i n t   r e a d ; 
                         w h i l e   ( ( r e a d   =   f i s . r e a d ( b u f f e r ) )   ! =   - 1 )   { 
                                 f o s . w r i t e ( b u f f e r ,   0 ,   r e a d ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( f i s   ! =   n u l l )   { 
                                         f i s . c l o s e ( ) ; 
                                 } 
                                 i f   ( f o s   ! =   n u l l )   { 
                                         f o s . c l o s e ( ) ; 
                                 } 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 } 
         } 
",1,1,1,-1,Exception,-1.6516424e-08,1,1,{'Exception': 'X'},MHM,306,0.14814701080322265
368,"CODE1:     private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {         Map<String, String> result = new LinkedHashMap();         while (urls.hasNext()) {             URL url = urls.next();             BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));             String s = reader.readLine();             while (s != null) {                 s = s.trim();                 if (s.length() > 0) {                     String[] ss = s.split(""\\s"");                     for (int i = 1; i < ss.length; i++) {                         result.put(ss[i], ss[0]);                     }                 }                 s = reader.readLine();             }             reader.close();         }         return result;     }  ||CODE2:     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {         ActionMessages errors = new ActionMessages();         try {             boolean isMultipart = FileUpload.isMultipartContent(request);             if (isMultipart) {                 Map fields = new HashMap();                 Vector attachments = new Vector();                 List items = diskFileUpload.parseRequest(request);                 Iterator iter = items.iterator();                 while (iter.hasNext()) {                     FileItem item = (FileItem) iter.next();                     if (item.isFormField()) {                         fields.put(item.getFieldName(), item.getString());                     } else {                         if (!StringUtils.isBlank(item.getName())) {                             ByteArrayOutputStream baos = null;                             try {                                 baos = new ByteArrayOutputStream();                                 IOUtils.copy(item.getInputStream(), baos);                                 MailPartObj part = new MailPartObj();                                 part.setAttachent(baos.toByteArray());                                 part.setContentType(item.getContentType());                                 part.setName(item.getName());                                 part.setSize(item.getSize());                                 attachments.addElement(part);                             } catch (Exception ex) {                             } finally {                                 IOUtils.closeQuietly(baos);                             }                         }                     }                 }                 String body = """";                 if (fields.get(""taBody"") != null) {                     body = (String) fields.get(""taBody"");                 } else if (fields.get(""taReplyBody"") != null) {                     body = (String) fields.get(""taReplyBody"");                 }                 Preferences preferencesInstance = getPreferencesInstance(request);                 Send sendInstance = getSendInstance(request);                 String mid = (String) fields.get(""mid"");                 sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));             } else {                 errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));                 request.setAttribute(""exception"", ""The form is null"");                 request.setAttribute(""newLocation"", null);                 doTrace(request, DLog.ERROR, getClass(), ""The form is null"");             }         } catch (Exception ex) {             String errorMessage = ExceptionUtilities.parseMessage(ex);             if (errorMessage == null) {                 errorMessage = ""NullPointerException"";             }             errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));             request.setAttribute(""exception"", errorMessage);             doTrace(request, DLog.ERROR, getClass(), errorMessage);         } finally {         }         if (errors.isEmpty()) {             doTrace(request, DLog.INFO, getClass(), ""OK"");             return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);         } else {             saveErrors(request, errors);             return mapping.findForward(Constants.ACTION_FAIL_FORWARD);         }     } ",170,"        p r i v a t e   M a p < S t r i n g ,   S t r i n g >   r e a d S t u f f ( I t e r a t o r < U R L >   u r l s )   t h r o w s   I O E x c e p t i o n   { 
                 M a p < S t r i n g ,   S t r i n g >   r e s u l t   =   n e w   L i n k e d H a s h M a p ( ) ; 
                 w h i l e   ( u r l s . h a s N e x t ( ) )   { 
                         U R L   u r l   =   u r l s . n e x t ( ) ; 
                         B u f f e r e d R e a d e r   r e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g   s   =   r e a d e r . r e a d L i n e ( ) ; 
                         w h i l e   ( s   ! =   n u l l )   { 
                                 s   =   s . t r i m ( ) ; 
                                 i f   ( s . l e n g t h ( )   >   0 )   { 
                                         S t r i n g [ ]   s s   =   s . s p l i t ( "" \ \ s "" ) ; 
                                         f o r   ( i n t   t i   =   1 ;   t i   <   s s . l e n g t h ;   t i + + )   { 
                                                 r e s u l t . p u t ( s s [ t i ] ,   s s [ 0 ] ) ; 
                                         } 
                                 } 
                                 s   =   r e a d e r . r e a d L i n e ( ) ; 
                         } 
                         r e a d e r . c l o s e ( ) ; 
                 } 
                 r e t u r n   r e s u l t ; 
         } 
",0,0,0,-1,,-1.3411045e-05,0,0,{},MHM,314,0.14990487496058147
370,"CODE1:     private void delete(String location) throws Exception {         URL url = new URL(location);         HttpURLConnection conn = (HttpURLConnection) url.openConnection();         conn.setRequestMethod(""DELETE"");         conn.connect();         int responseCode = conn.getResponseCode();         if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {             String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";             fail(response);         }     }  ||CODE2:     public void run() {         try {             FTPClient c = new FTPClient();             c.configure(ftpConfig);             logger.debug(""Trying to connect"");             c.connect(""127.0.0.1"", 21211);             logger.debug(""Connected"");             c.setSoTimeout(5000);             if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {                 logger.debug(""Houston, we have a problem. D/C"");                 c.disconnect();                 throw new Exception();             }             if (c.login(""drftpd"", ""drftpd"")) {                 logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");                 _sc.addSuccess();                 Thread.sleep(5000);                 c.disconnect();             } else {                 logger.debug(""Login failed, D/C!"");                 throw new Exception();             }         } catch (Exception e) {             logger.debug(e, e);             _sc.addFailure();         }         logger.debug(""exiting"");     } ",106,"        p r i v a t e   v o i d   d e l e t e ( S t r i n g   l o c a t i o n )   t h r o w s   E x c e p t i o n   { 
                 U R L   s s l   =   n e w   U R L ( l o c a t i o n ) ; 
                 H t t p U R L C o n n e c t i o n   c o n n   =   ( H t t p U R L C o n n e c t i o n )   s s l . o p e n C o n n e c t i o n ( ) ; 
                 c o n n . s e t R e q u e s t M e t h o d ( "" D E L E T E "" ) ; 
                 c o n n . c o n n e c t ( ) ; 
                 i n t   r e s p o n s e C o d e   =   c o n n . g e t R e s p o n s e C o d e ( ) ; 
                 i f   ( r e s p o n s e C o d e   ! =   H t t p U R L C o n n e c t i o n . H T T P _ O K   & &   r e s p o n s e C o d e   ! =   H t t p U R L C o n n e c t i o n . H T T P _ N O _ C O N T E N T )   { 
                         S t r i n g   r e s p o n s e   =   "" l o c a t i o n   ""   +   l o c a t i o n   +   ""   r e s p o n d e d :   ""   +   c o n n . g e t R e s p o n s e M e s s a g e ( )   +   ""   ( ""   +   r e s p o n s e C o d e   +   "" ) "" ; 
                         f a i l ( r e s p o n s e ) ; 
                 } 
         } 
",0,0,0,-1,url,2.7358532e-05,1,2,{'url': 'ssl'},MHM,303,0.135160760084788
373,"CODE1:     public boolean deleteByQuery(String query, int coreId) {         try {             URL url = new URL(solrUrl + ""/core"" + coreId + ""/update"");             URLConnection conn = url.openConnection();             conn.setDoOutput(true);             conn.setRequestProperty(""Content-type"", ""text/xml"");             conn.setRequestProperty(""charset"", ""utf-8"");             OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());             System.out.println(""******************"" + query);             wr.write(""<delete><query>"" + query + ""</query></delete>"");             wr.flush();             BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             String line;             while ((line = rd.readLine()) != null) {                 System.out.println(line);             }             wr.close();             rd.close();             conn = url.openConnection();             conn.setDoOutput(true);             conn.setRequestProperty(""Content-type"", ""text/xml"");             conn.setRequestProperty(""charset"", ""utf-8"");             wr = new OutputStreamWriter(conn.getOutputStream());             wr.write(""<commit/>"");             wr.flush();             rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             while ((line = rd.readLine()) != null) {                 System.out.println(line);             }             wr.close();             rd.close();         } catch (Exception e) {             e.printStackTrace();             return false;         }         return true;     }  ||CODE2:     ClassFile getClassFile(String name) throws IOException, ConstantPoolException {         URL url = getClass().getResource(name);         InputStream in = url.openStream();         try {             return ClassFile.read(in);         } finally {             in.close();         }     } ",320,"        p u b l i c   b o o l e a n   d e l e t e B y Q u e r y ( S t r i n g   q u e r y ,   i n t   c o r e I d )   { 
                 t r y   { 
                         U R L   u r l   =   n e w   U R L ( s o l r U r l   +   "" / c o r e ""   +   c o r e I d   +   "" / u p d a t e "" ) ; 
                         U R L C o n n e c t i o n   c o n n   =   u r l . o p e n C o n n e c t i o n ( ) ; 
                         c o n n . s e t D o O u t p u t ( t r u e ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - t y p e "" ,   "" t e x t / x m l "" ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" c h a r s e t "" ,   "" u t f - 8 "" ) ; 
                         O u t p u t S t r e a m W r i t e r   w r   =   n e w   O u t p u t S t r e a m W r i t e r ( c o n n . g e t O u t p u t S t r e a m ( ) ) ; 
                         S y s t e m . o u t e r . p r i n t l n ( "" * * * * * * * * * * * * * * * * * * ""   +   q u e r y ) ; 
                         w r . w r i t e ( "" < d e l e t e > < q u e r y > ""   +   q u e r y   +   "" < / q u e r y > < / d e l e t e > "" ) ; 
                         w r . f l u s h ( ) ; 
                         B u f f e r e d R e a d e r   r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 S y s t e m . o u t e r . p r i n t l n ( l i n e ) ; 
                         } 
                         w r . c l o s e ( ) ; 
                         r d . c l o s e ( ) ; 
                         c o n n   =   u r l . o p e n C o n n e c t i o n ( ) ; 
                         c o n n . s e t D o O u t p u t ( t r u e ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" C o n t e n t - t y p e "" ,   "" t e x t / x m l "" ) ; 
                         c o n n . s e t R e q u e s t P r o p e r t y ( "" c h a r s e t "" ,   "" u t f - 8 "" ) ; 
                         w r   =   n e w   O u t p u t S t r e a m W r i t e r ( c o n n . g e t O u t p u t S t r e a m ( ) ) ; 
                         w r . w r i t e ( "" < c o m m i t / > "" ) ; 
                         w r . f l u s h ( ) ; 
                         r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 S y s t e m . o u t e r . p r i n t l n ( l i n e ) ; 
                         } 
                         w r . c l o s e ( ) ; 
                         r d . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t u r n   f a l s e ; 
                 } 
                 r e t u r n   t r u e ; 
         } 
",0,0,0,-1,out,-1.0728836e-06,1,3,{'out': 'outer'},MHM,306,0.14859679142634075
377,"CODE1:     public void connect(final URLConnectAdapter urlAdapter) {         if (this.connectSettings == null) {             throw new IllegalStateException(""Invalid Connect Settings (is null)"");         }         final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();         BufferedReader in;         try {             in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));             final StringBuilder buf = new StringBuilder(200);             String str;             while ((str = in.readLine()) != null) {                 buf.append(str);                 buf.append('\n');             }             final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());             final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();             for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {                 final String key = entry.getKey();                 final List<String> val = entry.getValue();                 if ((val != null) && (val.size() > 1)) {                     System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());                 }                 if (key != null) {                     result.addHeader(key, val.get(0), val);                 } else {                     result.addHeader(""Status"", val.get(0), val);                 }             }             this.lastResult = result;         } catch (IOException e) {             throw new ConnectException(e);         }     }  ||CODE2:     private String getContents(Server server, String uri) throws TechnicalException {         try {             URL url = new URL(""http://localhost:"" + PORT + uri);             return StreamUtils.getStreamContent(url.openStream());         } catch (Exception e) {             e.printStackTrace();             throw new TechnicalException(e);         }     } ",301,"        p u b l i c   v o i d   c o n n e c t ( f i n a l   U R L C o n n e c t A d a p t e r   u r l A d a p t e r )   { 
                 i f   ( t h i s . c o n n e c t S e t t i n g s   = =   n u l l )   { 
                         t h r o w   n e w   I l l e g a l S t a t e E x c e p t i o n ( "" I n v a l i d   C o n n e c t   S e t t i n g s   ( i s   n u l l ) "" ) ; 
                 } 
                 f i n a l   H t t p U R L C o n n e c t i o n   h t t p C o n n e c t i o n   =   ( H t t p U R L C o n n e c t i o n )   u r l A d a p t e r . o p e n C o n n e c t i o n ( ) ; 
                 B u f f e r e d R e a d e r   i n ; 
                 t r y   { 
                         i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( h t t p C o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         f i n a l   S t r i n g B u i l d e r   b u f   =   n e w   S t r i n g B u i l d e r ( 2 0 0 ) ; 
                         S t r i n g   s t r ; 
                         w h i l e   ( ( s t r   =   i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 b u f . a p p e n d ( s t r ) ; 
                                 b u f . a p p e n d ( ' 
 ' ) ; 
                         } 
                         f i n a l   C o n n e c t R e s u l t   r e s u l t   =   n e w   C o n n e c t R e s u l t ( h t t p C o n n e c t i o n . g e t R e s p o n s e C o d e ( ) ,   b u f . t o S t r i n g ( ) ) ; 
                         f i n a l   M a p < S t r i n g ,   L i s t < S t r i n g > >   h e a d e r F i e l d s   =   h t t p C o n n e c t i o n . g e t H e a d e r F i e l d s ( ) ; 
                         f o r   ( M a p . E n t r y < S t r i n g ,   L i s t < S t r i n g > >   e n t r y   :   h e a d e r F i e l d s . e n t r y S e t ( ) )   { 
                                 f i n a l   S t r i n g   k e y   =   e n t r y . g e t K e y ( ) ; 
                                 f i n a l   L i s t < S t r i n g >   v a l   =   e n t r y . g e t V a l u e ( ) ; 
                                 i f   ( ( v a l   ! =   n u l l )   & &   ( v a l . s i z e ( )   >   1 ) )   { 
                                         S y s t e m . p a s s w o r d . p r i n t l n ( "" W A R N :   I n v a l i d   h e a d e r   v a l u e   :   ""   +   k e y   +   ""   u r l = ""   +   t h i s . c o n n e c t S e t t i n g s . g e t U r l ( ) ) ; 
                                 } 
                                 i f   ( k e y   ! =   n u l l )   { 
                                         r e s u l t . a d d H e a d e r ( k e y ,   v a l . g e t ( 0 ) ,   v a l ) ; 
                                 }   e l s e   { 
                                         r e s u l t . a d d H e a d e r ( "" S t a t u s "" ,   v a l . g e t ( 0 ) ,   v a l ) ; 
                                 } 
                         } 
                         t h i s . l a s t R e s u l t   =   r e s u l t ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         t h r o w   n e w   C o n n e c t E x c e p t i o n ( e ) ; 
                 } 
         } 
",0,0,0,-1,,-2.2888184e-05,0,0,{},MHM,305,0.14857970476150512
379,"CODE1:     private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {         synchronized (results) {             Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);             Vector<Class<?>> v = new Vector<Class<?>>();             String fqcn = searchClass.getName();             List<URL> knownLocations = new ArrayList<URL>();             knownLocations.add(location);             for (int loc = 0; loc < knownLocations.size(); loc++) {                 URL url = knownLocations.get(loc);                 File directory = new File(url.getFile());                 if (directory.exists()) {                     String[] files = directory.list();                     for (int i = 0; i < files.length; i++) {                         if (files[i].endsWith("".class"")) {                             String classname = files[i].substring(0, files[i].length() - 6);                             try {                                 Class<?> c = Class.forName(packageName + ""."" + classname);                                 if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + ""."" + classname)) {                                     thisResult.put(c, url);                                 }                             } catch (ClassNotFoundException cnfex) {                                 errors.add(cnfex);                             } catch (Exception ex) {                                 errors.add(ex);                             }                         }                     }                 } else {                     try {                         JarURLConnection conn = (JarURLConnection) url.openConnection();                         JarFile jarFile = conn.getJarFile();                         Enumeration<JarEntry> e = jarFile.entries();                         while (e.hasMoreElements()) {                             JarEntry entry = e.nextElement();                             String entryname = entry.getName();                             if (!entry.isDirectory() && entryname.endsWith("".class"")) {                                 String classname = entryname.substring(0, entryname.length() - 6);                                 if (classname.startsWith(""/"")) classname = classname.substring(1);                                 classname = classname.replace('/', '.');                                 try {                                     Class c = Class.forName(classname);                                     if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {                                         thisResult.put(c, url);                                     }                                 } catch (ClassNotFoundException cnfex) {                                     errors.add(cnfex);                                 } catch (NoClassDefFoundError ncdfe) {                                     errors.add(ncdfe);                                 } catch (UnsatisfiedLinkError ule) {                                     errors.add(ule);                                 } catch (Exception exception) {                                     errors.add(exception);                                 } catch (Error error) {                                     errors.add(error);                                 }                             }                         }                     } catch (IOException ioex) {                         errors.add(ioex);                     }                 }             }             results.putAll(thisResult);             Iterator<Class<?>> it = thisResult.keySet().iterator();             while (it.hasNext()) {                 v.add(it.next());             }             return v;         }     }  ||CODE2:     public static boolean copyFile(final File inFile, final File outFile) {         try {             FileChannel ic = new FileInputStream(inFile).getChannel();             FileChannel oc = new FileOutputStream(outFile).getChannel();             ic.transferTo(0, ic.size(), oc);             ic.close();             oc.close();             return true;         } catch (IOException e) {             SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);             return false;         }     } ",623,"        p r i v a t e   f i n a l   V e c t o r < C l a s s < ? > >   f i n d S u b c l a s s e s ( U R L   l o c a t i o n ,   S t r i n g   p a c k a g e N a m e ,   C l a s s < ? >   s u p e r C l a s s )   { 
                 s y n c h r o n i z e d   ( r e s u l t s )   { 
                         M a p < C l a s s < ? > ,   U R L >   t h i s R e s u l t   =   n e w   T r e e M a p < C l a s s < ? > ,   U R L > ( C L A S S _ C O M P A R A T O R ) ; 
                         V e c t o r < C l a s s < ? > >   v   =   n e w   V e c t o r < C l a s s < ? > > ( ) ; 
                         S t r i n g   f q c n   =   s e a r c h C l a s s . g e t N a m e ( ) ; 
                         L i s t < U R L >   k n o w n L o c a t i o n s   =   n e w   A r r a y L i s t < U R L > ( ) ; 
                         k n o w n L o c a t i o n s . a d d ( l o c a t i o n ) ; 
                         f o r   ( i n t   l o c   =   0 ;   l o c   <   k n o w n L o c a t i o n s . s i z e ( ) ;   l o c + + )   { 
                                 U R L   u r l   =   k n o w n L o c a t i o n s . g e t ( l o c ) ; 
                                 F i l e   d i r e c t o r y   =   n e w   F i l e ( u r l . g e t F i l e ( ) ) ; 
                                 i f   ( d i r e c t o r y . e x i s t s ( ) )   { 
                                         S t r i n g [ ]   f i l e s   =   d i r e c t o r y . l i s t ( ) ; 
                                         f o r   ( i n t   i   =   0 ;   i   <   f i l e s . l e n g t h ;   i + + )   { 
                                                 i f   ( f i l e s [ i ] . e n d s W i t h ( "" . c l a s s "" ) )   { 
                                                         S t r i n g   c l a s s n a m e   =   f i l e s [ i ] . s u b s t r i n g ( 0 ,   f i l e s [ i ] . l e n g t h ( )   -   6 ) ; 
                                                         t r y   { 
                                                                 C l a s s < ? >   c f   =   C l a s s . f o r N a m e ( p a c k a g e N a m e   +   "" . ""   +   c l a s s n a m e ) ; 
                                                                 i f   ( s u p e r C l a s s . i s A s s i g n a b l e F r o m ( c f )   & &   ! f q c n . e q u a l s ( p a c k a g e N a m e   +   "" . ""   +   c l a s s n a m e ) )   { 
                                                                         t h i s R e s u l t . p u t ( c f ,   u r l ) ; 
                                                                 } 
                                                         }   c a t c h   ( C l a s s N o t F o u n d E x c e p t i o n   c n f e x )   { 
                                                                 e r r o r s . a d d ( c n f e x ) ; 
                                                         }   c a t c h   ( E x c e p t i o n   e x )   { 
                                                                 e r r o r s . a d d ( e x ) ; 
                                                         } 
                                                 } 
                                         } 
                                 }   e l s e   { 
                                         t r y   { 
                                                 J a r U R L C o n n e c t i o n   c o n n   =   ( J a r U R L C o n n e c t i o n )   u r l . o p e n C o n n e c t i o n ( ) ; 
                                                 J a r F i l e   j a r F i l e   =   c o n n . g e t J a r F i l e ( ) ; 
                                                 E n u m e r a t i o n < J a r E n t r y >   e   =   j a r F i l e . e n t r i e s ( ) ; 
                                                 w h i l e   ( e . h a s M o r e E l e m e n t s ( ) )   { 
                                                         J a r E n t r y   e n t r y   =   e . n e x t E l e m e n t ( ) ; 
                                                         S t r i n g   e n t r y n a m e   =   e n t r y . g e t N a m e ( ) ; 
                                                         i f   ( ! e n t r y . i s D i r e c t o r y ( )   & &   e n t r y n a m e . e n d s W i t h ( "" . c l a s s "" ) )   { 
                                                                 S t r i n g   c l a s s n a m e   =   e n t r y n a m e . s u b s t r i n g ( 0 ,   e n t r y n a m e . l e n g t h ( )   -   6 ) ; 
                                                                 i f   ( c l a s s n a m e . s t a r t s W i t h ( "" / "" ) )   c l a s s n a m e   =   c l a s s n a m e . s u b s t r i n g ( 1 ) ; 
                                                                 c l a s s n a m e   =   c l a s s n a m e . r e p l a c e ( ' / ' ,   ' . ' ) ; 
                                                                 t r y   { 
                                                                         C l a s s   c f   =   C l a s s . f o r N a m e ( c l a s s n a m e ) ; 
                                                                         i f   ( s u p e r C l a s s . i s A s s i g n a b l e F r o m ( c f )   & &   ! f q c n . e q u a l s ( c l a s s n a m e ) )   { 
                                                                                 t h i s R e s u l t . p u t ( c f ,   u r l ) ; 
                                                                         } 
                                                                 }   c a t c h   ( C l a s s N o t F o u n d E x c e p t i o n   c n f e x )   { 
                                                                         e r r o r s . a d d ( c n f e x ) ; 
                                                                 }   c a t c h   ( N o C l a s s D e f F o u n d E r r o r   n c d f e )   { 
                                                                         e r r o r s . a d d ( n c d f e ) ; 
                                                                 }   c a t c h   ( U n s a t i s f i e d L i n k E r r o r   u l e )   { 
                                                                         e r r o r s . a d d ( u l e ) ; 
                                                                 }   c a t c h   ( E x c e p t i o n   e x c e p t i o n )   { 
                                                                         e r r o r s . a d d ( e x c e p t i o n ) ; 
                                                                 }   c a t c h   ( E r r o r   e r r o r )   { 
                                                                         e r r o r s . a d d ( e r r o r ) ; 
                                                                 } 
                                                         } 
                                                 } 
                                         }   c a t c h   ( I O E x c e p t i o n   i o e x )   { 
                                                 e r r o r s . a d d ( i o e x ) ; 
                                         } 
                                 } 
                         } 
                         r e s u l t s . p u t A l l ( t h i s R e s u l t ) ; 
                         I t e r a t o r < C l a s s < ? > >   i t   =   t h i s R e s u l t . k e y S e t ( ) . i t e r a t o r ( ) ; 
                         w h i l e   ( i t . h a s N e x t ( ) )   { 
                                 v . a d d ( i t . n e x t ( ) ) ; 
                         } 
                         r e t u r n   v ; 
                 } 
         } 
",0,0,0,-1,c,-2.3841858e-07,1,6,{'c': 'cf'},MHM,296,0.18446003595987956
381,"CODE1:     private String sendQuery(String query) {         File xmlServerResponse = null;         String serverResponse = """";         try {             long start = Calendar.getInstance().getTimeInMillis();             System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");             System.out.println(""    consulta de busqueda -> "" + query);             URL url = new URL(query);             BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));             String line = """";             while ((line = in.readLine()) != null) {                 serverResponse += line;             }             long ahora = (Calendar.getInstance().getTimeInMillis() - start);             System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);             System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");         } catch (IOException e) {             e.printStackTrace();         }         return serverResponse;     }  ||CODE2:     private static Collection<String> crossCheckFromOBOFile(String category) throws Exception {         Collection<String> miCol = new ArrayList<String>();         String revision = ""1.48"";         URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + ""?revision="" + revision);         log.debug(""url "" + url);         BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));         String inputLine;         int termCounter = 0;         int miCounter = 0;         int obsoleteCounter = 0;         int obsoleteCounterDef = 0;         int typedefCounter = 0;         int drugTerm = 0;         int psiTerm = 0;         String mi = null;         while ((inputLine = in.readLine()) != null) {             String temp;             temp = inputLine;             if (inputLine.startsWith(""[Term]"")) {                 termCounter++;             } else if (inputLine.matches(""id:\\s+(MI:.*)"")) {                 mi = temp.split(""\\s+"")[1];                 miCounter++;             } else if (inputLine.contains(""is_obsolete: true"")) {                 obsoleteCounter++;             } else if (inputLine.matches(""def:.*?OBSOLETE.*"")) {                 obsoleteCounterDef++;             } else if (inputLine.startsWith(""[Typedef]"")) {                 typedefCounter++;             } else if (inputLine.matches(""subset:\\s+PSI-MI\\s+slim"")) {                 psiTerm++;                 if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) miCol.add(mi);             } else if (inputLine.matches(""subset:\\s+Drugable"")) {                 drugTerm++;                 if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) miCol.add(mi);             }         }         Assert.assertEquals(948, termCounter);         Assert.assertEquals(948, miCounter);         Assert.assertEquals(53, obsoleteCounter);         Assert.assertEquals(53, obsoleteCounterDef);         Assert.assertEquals(1, typedefCounter);         Assert.assertEquals(844, psiTerm);         Assert.assertEquals(124, drugTerm);         in.close();         return miCol;     } ",169,"        p r i v a t e   S t r i n g   s e n d Q u e r y ( S t r i n g   q u e r y )   { 
                 F i l e   x m l S e r v e r R e s p o n s e   =   n u l l ; 
                 S t r i n g   s e r v e r R e s p o n s e   =   "" "" ; 
                 t r y   { 
                         l o n g   s t a r t   =   C a l e n d a r . g e t I n s t a n c e ( ) . g e t T i m e I n M i l l i s ( ) ; 
                         S y s t e m . c a l l . p r i n t l n ( "" 
 
 + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + "" ) ; 
                         S y s t e m . c a l l . p r i n t l n ( ""         c o n s u l t a   d e   b u s q u e d a   - >   ""   +   q u e r y ) ; 
                         U R L   u r l   =   n e w   U R L ( q u e r y ) ; 
                         B u f f e r e d R e a d e r   i   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                         S t r i n g   l i n e   =   "" "" ; 
                         w h i l e   ( ( l i n e   =   i . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 s e r v e r R e s p o n s e   + =   l i n e ; 
                         } 
                         l o n g   a h o r a   =   ( C a l e n d a r . g e t I n s t a n c e ( ) . g e t T i m e I n M i l l i s ( )   -   s t a r t ) ; 
                         S y s t e m . c a l l . p r i n t l n ( ""   T i e m p o   t r a n s c u r r i d o   e n   l a   c o n s u l t a   ( e n   m i l e s i m a s )   - >   ""   +   a h o r a ) ; 
                         S y s t e m . c a l l . p r i n t l n ( "" + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + 
 
 "" ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   s e r v e r R e s p o n s e ; 
         } 
",1,1,1,-1,in,-6.255694e-05,2,6,"{'in': 'i', 'out': 'call'}",MHM,300,0.14419738054275513
385,"CODE1:     private static boolean copyFile(String src, String dest) {         try {             File inputFile = new File(src);             File outputFile = new File(dest);             FileInputStream in = new FileInputStream(inputFile);             FileOutputStream out = new FileOutputStream(outputFile);             FileChannel inc = in.getChannel();             FileChannel outc = out.getChannel();             inc.transferTo(0, inc.size(), outc);             inc.close();             outc.close();             in.close();             out.close();             return true;         } catch (Exception e) {             e.printStackTrace();             return false;         }     }  ||CODE2:     public static final String hash(String password) {         MessageDigest md = null;         try {             md = MessageDigest.getInstance(""SHA-512"");             password = password + salt;             md.update(password.getBytes(""utf8""));             byte[] b = md.digest();             StringBuilder output = new StringBuilder(32);             for (int i = 0; i < b.length; i++) {                 String temp = Integer.toHexString(b[i] & 0xff);                 if (temp.length() < 2) {                     output.append(""0"");                 }                 output.append(temp);             }             return output.toString();         } catch (Exception e) {             throw new RuntimeException(e);         }     } ",128,"        p r i v a t e   s t a t i c   b o o l e a n   c o p y F i l e ( S t r i n g   s r c ,   S t r i n g   d e s t )   { 
                 t r y   { 
                         F i l e   i n p u t F i l e   =   n e w   F i l e ( s r c ) ; 
                         F i l e   o u t p u t F i l e   =   n e w   F i l e ( d e s t ) ; 
                         F i l e I n p u t S t r e a m   I n   =   n e w   F i l e I n p u t S t r e a m ( i n p u t F i l e ) ; 
                         F i l e O u t p u t S t r e a m   b u f f e r   =   n e w   F i l e O u t p u t S t r e a m ( o u t p u t F i l e ) ; 
                         F i l e C h a n n e l   i n c   =   I n . g e t C h a n n e l ( ) ; 
                         F i l e C h a n n e l   o u t c   =   b u f f e r . g e t C h a n n e l ( ) ; 
                         i n c . t r a n s f e r T o ( 0 ,   i n c . s i z e ( ) ,   o u t c ) ; 
                         i n c . c l o s e ( ) ; 
                         o u t c . c l o s e ( ) ; 
                         I n . c l o s e ( ) ; 
                         b u f f e r . c l o s e ( ) ; 
                         r e t u r n   t r u e ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t u r n   f a l s e ; 
                 } 
         } 
",0,0,0,-1,in,-1.1920929e-07,2,6,"{'out': 'buffer', 'in': 'In'}",MHM,309,0.1359607458114624
391,"CODE1:     public void fileCopy(File src, File dest) throws IOException {         if (!dest.exists()) {             final File parent = new File(dest.getParent());             if (!parent.exists() && !parent.mkdirs()) {                 throw new IOException();             }             if (!dest.createNewFile()) {             }         }         FileInputStream is = null;         FileOutputStream os = null;         try {             is = new FileInputStream(src);             os = new FileOutputStream(dest);             final FileChannel srcChannel = is.getChannel();             final FileChannel dstChannel = os.getChannel();             dstChannel.transferFrom(srcChannel, 0, srcChannel.size());             srcChannel.close();             dstChannel.close();         } finally {             try {                 if (is != null) {                     is.close();                 }             } finally {                 if (os != null) {                     os.close();                 }             }         }     }  ||CODE2:     private File extractResource(String resourceName, File destDir) {         File file = new File(destDir, resourceName);         InputStream in = getClass().getResourceAsStream(resourceName);         try {             FileOutputStream out = FileUtils.openOutputStream(file);             try {                 IOUtils.copy(in, out);             } finally {                 if (out != null) {                     out.close();                 }             }         } finally {             if (in != null) {                 in.close();             }         }         return file;     } ",187,"        p u b l i c   v o i d   f i l e C o p y ( F i l e   s r c ,   F i l e   d e s t )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( ! d e s t . e x i s t s ( ) )   { 
                         f i n a l   F i l e   p a r e n t   =   n e w   F i l e ( d e s t . g e t P a r e n t ( ) ) ; 
                         i f   ( ! p a r e n t . e x i s t s ( )   & &   ! p a r e n t . m k d i r s ( ) )   { 
                                 t h r o w   n e w   I O E x c e p t i o n ( ) ; 
                         } 
                         i f   ( ! d e s t . c r e a t e N e w F i l e ( ) )   { 
                         } 
                 } 
                 F i l e I n p u t S t r e a m   b a s   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   o s   =   n u l l ; 
                 t r y   { 
                         b a s   =   n e w   F i l e I n p u t S t r e a m ( s r c ) ; 
                         o s   =   n e w   F i l e O u t p u t S t r e a m ( d e s t ) ; 
                         f i n a l   F i l e C h a n n e l   s r c C h a n n e l   =   b a s . g e t C h a n n e l ( ) ; 
                         f i n a l   F i l e C h a n n e l   d s t C h a n n e l   =   o s . g e t C h a n n e l ( ) ; 
                         d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                         s r c C h a n n e l . c l o s e ( ) ; 
                         d s t C h a n n e l . c l o s e ( ) ; 
                 }   f i n a l l y   { 
                         t r y   { 
                                 i f   ( b a s   ! =   n u l l )   { 
                                         b a s . c l o s e ( ) ; 
                                 } 
                         }   f i n a l l y   { 
                                 i f   ( o s   ! =   n u l l )   { 
                                         o s . c l o s e ( ) ; 
                                 } 
                         } 
                 } 
         } 
",1,1,1,-1,is,-4.3008185e-08,1,5,{'is': 'bas'},MHM,295,0.1317195455233256
397,"CODE1:     public static void copy(File fromFile, File toFile) throws IOException {         if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());         if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());         if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());         if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());         String parent = toFile.getParent();         if (parent == null) parent = System.getProperty(""user.dir"");         File dir = new File(parent);         if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);         if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);         if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);         FileInputStream from = null;         FileOutputStream to = null;         try {             from = new FileInputStream(fromFile);             to = new FileOutputStream(toFile);             byte[] buffer = new byte[4096];             int bytesRead;             while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     }  ||CODE2:     public static void copy(File from_file, File to_file) throws IOException {         from_file = checkFile(from_file);         if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());         if (to_file.exists()) {             if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());         } else {             String parent = to_file.getParent();             if (parent == null) parent = System.getProperty(""user.dir"");             File dir = new File(parent);             if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);             if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);             if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);         }         FileInputStream from = null;         FileOutputStream to = null;         try {             from = new FileInputStream(from_file);             to = new FileOutputStream(to_file);             byte[] buffer = new byte[4096];             int bytes_read;             while ((bytes_read = from.read(buffer)) != -1) {                 to.write(buffer, 0, bytes_read);             }         } finally {             if (from != null) try {                 from.close();             } catch (IOException e) {                 ;             }             if (to != null) try {                 to.close();             } catch (IOException e) {             }         }     } ",344,"        p u b l i c   s t a t i c   v o i d   c o p y ( F i l e   f r o m F i l e ,   F i l e   t o F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( ! f r o m F i l e . e x i s t s ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" n o   s u c h   s o u r c e   f i l e :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( ! f r o m F i l e . i s F i l e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" c a n ' t   c o p y   d i r e c t o r y :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( ! f r o m F i l e . c a n R e a d ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" s o u r c e   f i l e   i s   u n r e a d a b l e :   ""   +   f r o m F i l e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( t o F i l e . i s D i r e c t o r y ( ) )   t o F i l e   =   n e w   F i l e ( t o F i l e ,   f r o m F i l e . g e t N a m e ( ) ) ; 
                 S t r i n g   p a r e n t   =   t o F i l e . g e t P a r e n t ( ) ; 
                 i f   ( p a r e n t   = =   n u l l )   p a r e n t   =   S y s t e m . g e t P r o p e r t y ( "" u s e r . d i r "" ) ; 
                 F i l e   d i r   =   n e w   F i l e ( p a r e n t ) ; 
                 i f   ( ! d i r . e x i s t s ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   d i r e c t o r y   d o e s n ' t   e x i s t :   ""   +   p a r e n t ) ; 
                 i f   ( d i r . i s F i l e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   i s   n o t   a   d i r e c t o r y :   ""   +   p a r e n t ) ; 
                 i f   ( ! d i r . c a n W r i t e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e C o p y :   ""   +   "" d e s t i n a t i o n   d i r e c t o r y   i s   u n w r i t e a b l e :   ""   +   p a r e n t ) ; 
                 F i l e I n p u t S t r e a m   u r l   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   x   =   n u l l ; 
                 t r y   { 
                         u r l   =   n e w   F i l e I n p u t S t r e a m ( f r o m F i l e ) ; 
                         x   =   n e w   F i l e O u t p u t S t r e a m ( t o F i l e ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ 4 0 9 6 ] ; 
                         i n t   b y t e s R e a d ; 
                         w h i l e   ( ( b y t e s R e a d   =   u r l . r e a d ( b u f f e r ) )   ! =   - 1 )   x . w r i t e ( b u f f e r ,   0 ,   b y t e s R e a d ) ; 
                 }   f i n a l l y   { 
                         i f   ( u r l   ! =   n u l l )   t r y   { 
                                 u r l . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                         i f   ( x   ! =   n u l l )   t r y   { 
                                 x . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                 } 
         } 
",1,1,0,1,from,-0.99984235,2,10,"{'from': 'url', 'to': 'x'}",MHM,97,0.051769451300303145
398,"CODE1:     public void init() {         File[] configsDirectories = { XPontusConstantsIF.XPONTUS_PLUGINS_DATA_DIR, XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, XPontusConstantsIF.XPONTUS_DATABASE_CONFIG_DIR, XPontusConstantsIF.XPONTUS_PLUGINS_DIR, XPontusConstantsIF.XPONTUS_CACHE_DIR };         for (int i = 0; i < configsDirectories.length; i++) {             if (!configsDirectories[i].exists()) {                 configsDirectories[i].mkdirs();             }         }         String[] locations = { ""/net/sf/xpontus/configuration/editorPanel.properties"", ""/net/sf/xpontus/configuration/general.properties"", ""/net/sf/xpontus/configuration/mimetypes.properties"" };         try {             for (String loc : locations) {                 String outName = FilenameUtils.getName(loc);                 File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName);                 if (!output.exists()) {                     if (loc.equals(locations[0])) {                         Properties hackProps = new Properties();                         InputStream is = getClass().getResourceAsStream(loc);                         hackProps.load(is);                         Font hackFont = UIManager.getFont(""EditorPane.font"");                         StrBuilder strFont = new StrBuilder();                         strFont.append(hackFont.getFamily() + "","" + hackFont.getStyle() + "","" + hackFont.getSize());                         hackProps.put(""EditorPane.Font"", strFont.toString());                         OutputStream out = new FileOutputStream(output);                         hackProps.store(out, null);                         out.close();                         is.close();                     } else {                         InputStream is = getClass().getResourceAsStream(loc);                         OutputStream out = new FileOutputStream(output);                         IOUtils.copy(is, out);                         out.close();                         is.close();                     }                 }                 if (!outName.equals(""mimetypes.properties"")) {                     Properties m_properties = PropertiesConfigurationLoader.load(output);                     Iterator it = m_properties.keySet().iterator();                     while (it.hasNext()) {                         Object m_key = it.next();                         Object m_value = m_properties.get(m_key);                         XPontusConfig.put(m_key, m_value);                     }                 }             }         } catch (Exception err) {             err.printStackTrace();         }         Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE);         String[] f = m_props.get(""EditorPane.Font"").toString().split("","");         String family = f[0].trim();         String style1 = f[1].trim();         int style = Integer.parseInt(style1);         int size = Integer.parseInt(f[2].trim());         Font m_font = new Font(family, style, size);         XPontusConfig.put(""EditorPane.Font"", m_font);         Map map = new HashMap();         map.put(ROLE, this);         PropertiesHolder.registerProperty(XPontusSettings.KEY, map);         DockableContainerFactory.setFactory(new XPontusDockableContainerFactory());         FileHistoryList.init();         initDefaultSettings();     }  ||CODE2:     public static void extractZipFile(String filename) {         try {             byte[] buf = new byte[1024];             ZipInputStream zipinputstream = null;             ZipEntry zipentry;             zipinputstream = new ZipInputStream(new FileInputStream(filename));             zipentry = zipinputstream.getNextEntry();             while (zipentry != null) {                 String entryName = zipentry.getName();                 int n;                 FileOutputStream fileoutputstream;                 File newFile = new File(entryName);                 String directory = newFile.getParent();                 if (directory == null) {                     if (newFile.isDirectory()) break;                 }                 fileoutputstream = new FileOutputStream(entryName);                 while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);                 fileoutputstream.close();                 zipinputstream.closeEntry();                 zipentry = zipinputstream.getNextEntry();             }             zipinputstream.close();         } catch (Exception e) {             e.printStackTrace();         }     } ",570,"        p u b l i c   v o i d   i n i t ( )   { 
                 F i l e [ ]   c o n f i g s D i r e c t o r i e s   =   {   X P o n t u s C o n s t a n t s I F . X P O N T U S _ P L U G I N S _ D A T A _ D I R ,   X P o n t u s C o n s t a n t s I F . X P O N T U S _ P R E F E R E N C E S _ D I R ,   X P o n t u s C o n s t a n t s I F . X P O N T U S _ D A T A B A S E _ C O N F I G _ D I R ,   X P o n t u s C o n s t a n t s I F . X P O N T U S _ P L U G I N S _ D I R ,   X P o n t u s C o n s t a n t s I F . X P O N T U S _ C A C H E _ D I R   } ; 
                 f o r   ( i n t   i   =   0 ;   i   <   c o n f i g s D i r e c t o r i e s . l e n g t h ;   i + + )   { 
                         i f   ( ! c o n f i g s D i r e c t o r i e s [ i ] . e x i s t s ( ) )   { 
                                 c o n f i g s D i r e c t o r i e s [ i ] . m k d i r s ( ) ; 
                         } 
                 } 
                 S t r i n g [ ]   l o c a t i o n s   =   {   "" / n e t / s f / x p o n t u s / c o n f i g u r a t i o n / e d i t o r P a n e l . p r o p e r t i e s "" ,   "" / n e t / s f / x p o n t u s / c o n f i g u r a t i o n / g e n e r a l . p r o p e r t i e s "" ,   "" / n e t / s f / x p o n t u s / c o n f i g u r a t i o n / m i m e t y p e s . p r o p e r t i e s ""   } ; 
                 t r y   { 
                         f o r   ( S t r i n g   l o c   :   l o c a t i o n s )   { 
                                 S t r i n g   o u t N a m e   =   F i l e n a m e U t i l s . g e t N a m e ( l o c ) ; 
                                 F i l e   q u e r y   =   n e w   F i l e ( X P o n t u s C o n s t a n t s I F . X P O N T U S _ P R E F E R E N C E S _ D I R ,   o u t N a m e ) ; 
                                 i f   ( ! q u e r y . e x i s t s ( ) )   { 
                                         i f   ( l o c . e q u a l s ( l o c a t i o n s [ 0 ] ) )   { 
                                                 P r o p e r t i e s   h a c k P r o p s   =   n e w   P r o p e r t i e s ( ) ; 
                                                 I n p u t S t r e a m   i s   =   g e t C l a s s ( ) . g e t R e s o u r c e A s S t r e a m ( l o c ) ; 
                                                 h a c k P r o p s . l o a d ( i s ) ; 
                                                 F o n t   h a c k F o n t   =   U I M a n a g e r . g e t F o n t ( "" E d i t o r P a n e . f o n t "" ) ; 
                                                 S t r B u i l d e r   s t r F o n t   =   n e w   S t r B u i l d e r ( ) ; 
                                                 s t r F o n t . a p p e n d ( h a c k F o n t . g e t F a m i l y ( )   +   "" , ""   +   h a c k F o n t . g e t S t y l e ( )   +   "" , ""   +   h a c k F o n t . g e t S i z e ( ) ) ; 
                                                 h a c k P r o p s . p u t ( "" E d i t o r P a n e . F o n t "" ,   s t r F o n t . t o S t r i n g ( ) ) ; 
                                                 O u t p u t S t r e a m   q u e r y   =   n e w   F i l e O u t p u t S t r e a m ( q u e r y ) ; 
                                                 h a c k P r o p s . s t o r e ( q u e r y ,   n u l l ) ; 
                                                 q u e r y . c l o s e ( ) ; 
                                                 i s . c l o s e ( ) ; 
                                         }   e l s e   { 
                                                 I n p u t S t r e a m   i s   =   g e t C l a s s ( ) . g e t R e s o u r c e A s S t r e a m ( l o c ) ; 
                                                 O u t p u t S t r e a m   q u e r y   =   n e w   F i l e O u t p u t S t r e a m ( q u e r y ) ; 
                                                 I O U t i l s . c o p y ( i s ,   q u e r y ) ; 
                                                 q u e r y . c l o s e ( ) ; 
                                                 i s . c l o s e ( ) ; 
                                         } 
                                 } 
                                 i f   ( ! o u t N a m e . e q u a l s ( "" m i m e t y p e s . p r o p e r t i e s "" ) )   { 
                                         P r o p e r t i e s   m _ p r o p e r t i e s   =   P r o p e r t i e s C o n f i g u r a t i o n L o a d e r . l o a d ( q u e r y ) ; 
                                         I t e r a t o r   i t   =   m _ p r o p e r t i e s . k e y S e t ( ) . i t e r a t o r ( ) ; 
                                         w h i l e   ( i t . h a s N e x t ( ) )   { 
                                                 O b j e c t   m _ k e y   =   i t . n e x t ( ) ; 
                                                 O b j e c t   m _ v a l u e   =   m _ p r o p e r t i e s . g e t ( m _ k e y ) ; 
                                                 X P o n t u s C o n f i g . p u t ( m _ k e y ,   m _ v a l u e ) ; 
                                         } 
                                 } 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e r r )   { 
                         e r r . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 P r o p e r t i e s   m _ p r o p s   =   P r o p e r t i e s C o n f i g u r a t i o n L o a d e r . l o a d ( X P o n t u s C o n f i g u r a t i o n C o n s t a n t s I F . E D I T O R _ P R E F E R E N C E S _ F I L E ) ; 
                 S t r i n g [ ]   f   =   m _ p r o p s . g e t ( "" E d i t o r P a n e . F o n t "" ) . t o S t r i n g ( ) . s p l i t ( "" , "" ) ; 
                 S t r i n g   f a m i l y   =   f [ 0 ] . t r i m ( ) ; 
                 S t r i n g   s t y l e 1   =   f [ 1 ] . t r i m ( ) ; 
                 i n t   s t y l e   =   I n t e g e r . p a r s e I n t ( s t y l e 1 ) ; 
                 i n t   s i z e   =   I n t e g e r . p a r s e I n t ( f [ 2 ] . t r i m ( ) ) ; 
                 F o n t   m _ f o n t   =   n e w   F o n t ( f a m i l y ,   s t y l e ,   s i z e ) ; 
                 X P o n t u s C o n f i g . p u t ( "" E d i t o r P a n e . F o n t "" ,   m _ f o n t ) ; 
                 M a p   m a p   =   n e w   H a s h M a p ( ) ; 
                 m a p . p u t ( R O L E ,   t h i s ) ; 
                 P r o p e r t i e s H o l d e r . r e g i s t e r P r o p e r t y ( X P o n t u s S e t t i n g s . K E Y ,   m a p ) ; 
                 D o c k a b l e C o n t a i n e r F a c t o r y . s e t F a c t o r y ( n e w   X P o n t u s D o c k a b l e C o n t a i n e r F a c t o r y ( ) ) ; 
                 F i l e H i s t o r y L i s t . i n i t ( ) ; 
                 i n i t D e f a u l t S e t t i n g s ( ) ; 
         } 
",1,1,1,-1,out,2.2719905e-07,1,6,{'out': 'query'},MHM,299,0.17669288714726766
400,"CODE1:     public void run() {         if (name == null) {             System.err.println(""Must set file name for retrieval"");             return;         }         if (handle == null) {             System.err.println(""Must set CCNHandle"");             return;         }         if (htmlPane == null) {             System.err.println(""Must set JEditorPane"");             return;         }         JFrame frame = new JFrame();         JFileChooser chooser = new JFileChooser();         File f = null;         chooser.setCurrentDirectory(null);         int returnVal = chooser.showSaveDialog(frame);         if (returnVal == JFileChooser.APPROVE_OPTION) {             f = chooser.getSelectedFile();         } else {             htmlPane.setText(""Save File cancelled"");             return;         }         boolean overwrite = false;         try {             if (f.exists()) {                 htmlPane.setText(""Overwriting contents of "" + f.getPath());                 overwrite = true;             } else {                 f.createNewFile();             }             if (f.canWrite()) {             } else {                 htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");                 return;             }         } catch (IOException e) {             System.err.println(""could not create "" + f.getPath() + "" for saving content to filesystem"");             htmlPane.setText(""could not create "" + f.getPath() + "" for saving content to filesystem"");         }         try {             if (!overwrite) htmlPane.setText(""saving "" + name + "" to "" + f.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + f.getCanonicalPath() + "" to save "" + name);             CCNFileInputStream fis = new CCNFileInputStream(name, handle);             FileOutputStream output = new FileOutputStream(f);             byte[] buffer = new byte[readsize];             int readcount = 0;             int readtotal = 0;             while ((readcount = fis.read(buffer)) != -1) {                 readtotal += readcount;                 output.write(buffer, 0, readcount);                 output.flush();             }             htmlPane.setText(""Saved "" + name + "" to "" + f.getCanonicalPath());         } catch (Exception e) {             htmlPane.setText(""Could not save "" + name + "" to "" + f.getPath() + "" This may be a prefix for an object or just may not be available at this time."");             System.err.println(""Could not retrieve file: "" + name);         }     }  ||CODE2:     public static void copyFileNIO(String src, String dst) {         try {             FileChannel srcChannel = new FileInputStream(src).getChannel();             FileChannel dstChannel = new FileOutputStream(dst).getChannel();             dstChannel.transferFrom(srcChannel, 0, srcChannel.size());             srcChannel.close();             dstChannel.close();         } catch (IOException e) {             e.printStackTrace();         }     } ",454,"        p u b l i c   v o i d   r u n ( )   { 
                 i f   ( n a m e   = =   n u l l )   { 
                         S y s t e m . e r r . p r i n t l n ( "" M u s t   s e t   f i l e   n a m e   f o r   r e t r i e v a l "" ) ; 
                         r e t u r n ; 
                 } 
                 i f   ( h a n d l e   = =   n u l l )   { 
                         S y s t e m . e r r . p r i n t l n ( "" M u s t   s e t   C C N H a n d l e "" ) ; 
                         r e t u r n ; 
                 } 
                 i f   ( h t m l P a n e   = =   n u l l )   { 
                         S y s t e m . e r r . p r i n t l n ( "" M u s t   s e t   J E d i t o r P a n e "" ) ; 
                         r e t u r n ; 
                 } 
                 J F r a m e   f r a m e   =   n e w   J F r a m e ( ) ; 
                 J F i l e C h o o s e r   c h o o s e r   =   n e w   J F i l e C h o o s e r ( ) ; 
                 F i l e   f   =   n u l l ; 
                 c h o o s e r . s e t C u r r e n t D i r e c t o r y ( n u l l ) ; 
                 i n t   r e t u r n V a l   =   c h o o s e r . s h o w S a v e D i a l o g ( f r a m e ) ; 
                 i f   ( r e t u r n V a l   = =   J F i l e C h o o s e r . A P P R O V E _ O P T I O N )   { 
                         f   =   c h o o s e r . g e t S e l e c t e d F i l e ( ) ; 
                 }   e l s e   { 
                         h t m l P a n e . s e t T e x t ( "" S a v e   F i l e   c a n c e l l e d "" ) ; 
                         r e t u r n ; 
                 } 
                 b o o l e a n   o v e r w r i t e   =   f a l s e ; 
                 t r y   { 
                         i f   ( f . e x i s t s ( ) )   { 
                                 h t m l P a n e . s e t T e x t ( "" O v e r w r i t i n g   c o n t e n t s   o f   ""   +   f . g e t P a t h ( ) ) ; 
                                 o v e r w r i t e   =   t r u e ; 
                         }   e l s e   { 
                                 f . c r e a t e N e w F i l e ( ) ; 
                         } 
                         i f   ( f . c a n W r i t e ( ) )   { 
                         }   e l s e   { 
                                 h t m l P a n e . s e t T e x t ( "" T h e   C o n t e n t E x p l o r e r   i s   u n a b l e   t o   w r i t e   t h e   c o n t e n t   t o   t h e   s p e c i f i e d   f i l e . "" ) ; 
                                 r e t u r n ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         S y s t e m . e r r . p r i n t l n ( "" c o u l d   n o t   c r e a t e   ""   +   f . g e t P a t h ( )   +   ""   f o r   s a v i n g   c o n t e n t   t o   f i l e s y s t e m "" ) ; 
                         h t m l P a n e . s e t T e x t ( "" c o u l d   n o t   c r e a t e   ""   +   f . g e t P a t h ( )   +   ""   f o r   s a v i n g   c o n t e n t   t o   f i l e s y s t e m "" ) ; 
                 } 
                 t r y   { 
                         i f   ( ! o v e r w r i t e )   h t m l P a n e . s e t T e x t ( "" s a v i n g   ""   +   n a m e   +   ""   t o   ""   +   f . g e t C a n o n i c a l P a t h ( ) ) ;   e l s e   h t m l P a n e . s e t T e x t ( "" o v e r w r i t i n g   c o n t e n t s   o f   ""   +   f . g e t C a n o n i c a l P a t h ( )   +   ""   t o   s a v e   ""   +   n a m e ) ; 
                         C C N F i l e I n p u t S t r e a m   f i s   =   n e w   C C N F i l e I n p u t S t r e a m ( n a m e ,   h a n d l e ) ; 
                         F i l e O u t p u t S t r e a m   o u t   =   n e w   F i l e O u t p u t S t r e a m ( f ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ r e a d s i z e ] ; 
                         i n t   r e a d c o u n t   =   0 ; 
                         i n t   r e a d t o t a l   =   0 ; 
                         w h i l e   ( ( r e a d c o u n t   =   f i s . r e a d ( b u f f e r ) )   ! =   - 1 )   { 
                                 r e a d t o t a l   + =   r e a d c o u n t ; 
                                 o u t . w r i t e ( b u f f e r ,   0 ,   r e a d c o u n t ) ; 
                                 o u t . f l u s h ( ) ; 
                         } 
                         h t m l P a n e . s e t T e x t ( "" S a v e d   ""   +   n a m e   +   ""   t o   ""   +   f . g e t C a n o n i c a l P a t h ( ) ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         h t m l P a n e . s e t T e x t ( "" C o u l d   n o t   s a v e   ""   +   n a m e   +   ""   t o   ""   +   f . g e t P a t h ( )   +   ""   T h i s   m a y   b e   a   p r e f i x   f o r   a n   o b j e c t   o r   j u s t   m a y   n o t   b e   a v a i l a b l e   a t   t h i s   t i m e . "" ) ; 
                         S y s t e m . e r r . p r i n t l n ( "" C o u l d   n o t   r e t r i e v e   f i l e :   ""   +   n a m e ) ; 
                 } 
         } 
",1,1,1,-1,file,0.0,2,4,"{'file': 'cache', 'output': 'out'}",MHM,297,0.1611399451891581
403,"CODE1:     public static void main(String[] args) {         try {             Object o = Naming.lookup(""Server"");             IServer serverStub = (IServer) o;             File srcDir = new File(args[0]);             File dstDir = new File(args[1]);             File[] srcFiles = srcDir.listFiles();             long position = 0;             for (File f : srcFiles) {                 if (f.isDirectory()) continue;                 try {                     FileChannel srcChannel = new FileInputStream(f).getChannel();                     String fileName = dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();                     FileChannel dstChannel = new FileOutputStream(fileName).getChannel();                     System.out.println(""Coping "" + fileName);                     ByteBuffer buffer = ByteBuffer.allocate(65536);                     int nr = 0;                     srcChannel.position(nr);                     nr = srcChannel.read(buffer);                     while (nr > -1) {                         buffer.flip();                         byte[] bytes = new byte[buffer.limit()];                         buffer.get(bytes);                         position = serverStub.write(bytes, position);                         buffer.clear();                         nr = srcChannel.read(buffer);                     }                     System.out.println(""Done "");                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                 }             }         } catch (MalformedURLException e) {             e.printStackTrace();         } catch (RemoteException e) {             e.printStackTrace();         } catch (NotBoundException e) {             e.printStackTrace();         }     }  ||CODE2:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     } ",323,"        p u b l i c   s t a t i c   v o i d   m a i n ( S t r i n g [ ]   a r g s )   { 
                 t r y   { 
                         O b j e c t   o   =   N a m i n g . l o o k u p ( "" S e r v e r "" ) ; 
                         I S e r v e r   s e r v e r S t u b   =   ( I S e r v e r )   o ; 
                         F i l e   s r c D i r   =   n e w   F i l e ( a r g s [ 0 ] ) ; 
                         F i l e   d s t D i r   =   n e w   F i l e ( a r g s [ 1 ] ) ; 
                         F i l e [ ]   s r c F i l e s   =   s r c D i r . l i s t F i l e s ( ) ; 
                         l o n g   p o s i t i o n   =   0 ; 
                         f o r   ( F i l e   f   :   s r c F i l e s )   { 
                                 i f   ( f . i s D i r e c t o r y ( ) )   c o n t i n u e ; 
                                 t r y   { 
                                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( f ) . g e t C h a n n e l ( ) ; 
                                         S t r i n g   f i l e N a m e   =   d s t D i r . g e t A b s o l u t e P a t h ( )   +   S y s t e m . g e t P r o p e r t y ( "" f i l e . s e p a r a t o r "" )   +   f . g e t N a m e ( ) ; 
                                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( f i l e N a m e ) . g e t C h a n n e l ( ) ; 
                                         S y s t e m . o u t . p r i n t l n ( "" C o p i n g   ""   +   f i l e N a m e ) ; 
                                         B y t e B u f f e r   s i z e   =   B y t e B u f f e r . a l l o c a t e ( 6 5 5 3 6 ) ; 
                                         i n t   n r   =   0 ; 
                                         s r c C h a n n e l . p o s i t i o n ( n r ) ; 
                                         n r   =   s r c C h a n n e l . r e a d ( s i z e ) ; 
                                         w h i l e   ( n r   >   - 1 )   { 
                                                 s i z e . f l i p ( ) ; 
                                                 b y t e [ ]   b y t e s   =   n e w   b y t e [ s i z e . s i z e ( ) ] ; 
                                                 s i z e . p r i n t ( b y t e s ) ; 
                                                 p o s i t i o n   =   s e r v e r S t u b . w r i t e ( b y t e s ,   p o s i t i o n ) ; 
                                                 s i z e . c l e a r ( ) ; 
                                                 n r   =   s r c C h a n n e l . r e a d ( s i z e ) ; 
                                         } 
                                         S y s t e m . o u t . p r i n t l n ( "" D o n e   "" ) ; 
                                         s r c C h a n n e l . c l o s e ( ) ; 
                                         d s t C h a n n e l . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 } 
                         } 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( R e m o t e E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 }   c a t c h   ( N o t B o u n d E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
         } 
",1,1,1,-1,buffer,-3.259629e-08,2,8,"{'buffer': 'size', 'get': 'print'}",MHM,261,0.1410107970237732
405,"CODE1:     @SuppressWarnings(""unchecked"")     public static <T> List<T> getServices(String service) {         String serviceUri = ""META-INF/services/"" + service;         ClassLoader loader = Thread.currentThread().getContextClassLoader();         try {             Enumeration<URL> urls = loader.getResources(serviceUri);             if (urls.hasMoreElements()) {                 List<T> services = new ArrayList<T>(1);                 do {                     URL url = urls.nextElement();                     _LOG.finest(""Processing:{0}"", url);                     try {                         BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));                         try {                             while (true) {                                 String line = in.readLine();                                 if (line == null) break;                                 T instance = (T) _parseLine(loader, line);                                 if (instance != null) services.add(instance);                             }                         } finally {                             in.close();                         }                     } catch (Exception e) {                         _LOG.warning(""ERR_PARSING_URL"", url);                         _LOG.warning(e);                     }                 } while (urls.hasMoreElements());                 if (services.size() == 1) return Collections.singletonList(services.get(0));                 return Collections.unmodifiableList(services);             }         } catch (IOException e) {             _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);             _LOG.severe(e);         }         return Collections.emptyList();     }  ||CODE2:     public InputStream getDaoConfig(String connectionType) throws IOException {         URL url = null;         if (connectionType.equals(SQL.ORACLE)) {             url = DTSWFDBConfig.class.getResource(""oracle.xml"");         } else if (connectionType.equals(SQL.SQL2K)) {             url = DTSWFDBConfig.class.getResource(""sql2k.xml"");         } else if (connectionType.equals(SQL.CACHE)) {             url = DTSWFDBConfig.class.getResource(""cache.xml"");         }         return url.openStream();     } ",287,"        @ S u p p r e s s W a r n i n g s ( "" u n c h e c k e d "" ) 
         p u b l i c   s t a t i c   < T >   L i s t < T >   g e t S e r v i c e s ( S t r i n g   s e r v i c e )   { 
                 S t r i n g   s e r v i c e U r i   =   "" M E T A - I N F / s e r v i c e s / ""   +   s e r v i c e ; 
                 C l a s s L o a d e r   l o a d e r   =   T h r e a d . c u r r e n t T h r e a d ( ) . g e t C o n t e x t C l a s s L o a d e r ( ) ; 
                 t r y   { 
                         E n u m e r a t i o n < U R L >   u r l s   =   l o a d e r . g e t R e s o u r c e s ( s e r v i c e U r i ) ; 
                         i f   ( u r l s . h a s M o r e E l e m e n t s ( ) )   { 
                                 L i s t < T >   s e r v i c e s   =   n e w   A r r a y L i s t < T > ( 1 ) ; 
                                 d o   { 
                                         U R L   u r l   =   u r l s . n e x t E l e m e n t ( ) ; 
                                         _ L O G . f i n e s t ( "" P r o c e s s i n g : { 0 } "" ,   u r l ) ; 
                                         t r y   { 
                                                 B u f f e r e d R e a d e r   I n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( u r l . o p e n S t r e a m ( ) ) ) ; 
                                                 t r y   { 
                                                         w h i l e   ( t r u e )   { 
                                                                 S t r i n g   l i n e   =   I n . r e a d L i n e ( ) ; 
                                                                 i f   ( l i n e   = =   n u l l )   b r e a k ; 
                                                                 T   i n s t a n c e   =   ( T )   _ p a r s e L i n e ( l o a d e r ,   l i n e ) ; 
                                                                 i f   ( i n s t a n c e   ! =   n u l l )   s e r v i c e s . a d d ( i n s t a n c e ) ; 
                                                         } 
                                                 }   f i n a l l y   { 
                                                         I n . c l o s e ( ) ; 
                                                 } 
                                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                                 _ L O G . w a r n i n g ( "" E R R _ P A R S I N G _ U R L "" ,   u r l ) ; 
                                                 _ L O G . w a r n i n g ( e ) ; 
                                         } 
                                 }   w h i l e   ( u r l s . h a s M o r e E l e m e n t s ( ) ) ; 
                                 i f   ( s e r v i c e s . s i z e ( )   = =   1 )   r e t u r n   C o l l e c t i o n s . s i n g l e t o n L i s t ( s e r v i c e s . g e t ( 0 ) ) ; 
                                 r e t u r n   C o l l e c t i o n s . u n m o d i f i a b l e L i s t ( s e r v i c e s ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         _ L O G . s e v e r e ( "" E R R _ L O A D I N G _ R E S R O U C E "" ,   s e r v i c e U r i ) ; 
                         _ L O G . s e v e r e ( e ) ; 
                 } 
                 r e t u r n   C o l l e c t i o n s . e m p t y L i s t ( ) ; 
         } 
",0,0,0,-1,in,3.0994415e-06,1,3,{'in': 'In'},MHM,306,0.16094955205917358
410,"CODE1:     public static String setErrorServer(String newServer) {         String old = errorServerURL;         try {             URL url = new URL(newServer);             HttpURLConnection conn = (HttpURLConnection) url.openConnection();             conn.setInstanceFollowRedirects(false);             BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));             StringBuilder page = new StringBuilder();             String line = null;             while ((line = rd.readLine()) != null) {                 page.append(line);             }             rd.close();             if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);         } catch (UnknownHostException ex) {             System.out.println(""Accepting setting for error sever, unable to check"");         } catch (MalformedURLException ex) {             throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);         } catch (IOException ex) {             throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);         }         errorServerURL = newServer;         return old;     }  ||CODE2:     private static String getTextFromURL(HttpServletRequest req, String urlString) {         StringBuffer buffer = new StringBuffer();         if (!urlString.startsWith(""http"")) {             String requestURL = req.getRequestURL().toString();             urlString = requestURL.substring(0, requestURL.lastIndexOf(""/"")) + urlString;         }         try {             URL url = new URL(urlString);             BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));             String line = """";             while ((line = input.readLine()) != null) {                 buffer.append(line);                 buffer.append(Constants.LF);             }         } catch (FileNotFoundException nf) {             log.error(""File not found: "" + urlString, nf);         } catch (Exception e) {             log.error(""Exception while reading file: "" + urlString, e);         }         return buffer.toString();     } ",209,"        p u b l i c   s t a t i c   S t r i n g   s e t E r r o r S e r v e r ( S t r i n g   n e w S e r v e r )   { 
                 S t r i n g   o l d   =   e r r o r S e r v e r U R L ; 
                 t r y   { 
                         U R L   l i s t   =   n e w   U R L ( n e w S e r v e r ) ; 
                         H t t p U R L C o n n e c t i o n   l i s t   =   ( H t t p U R L C o n n e c t i o n )   l i s t . o p e n C o n n e c t i o n ( ) ; 
                         l i s t . s e t I n s t a n c e F o l l o w R e d i r e c t s ( f a l s e ) ; 
                         B u f f e r e d R e a d e r   r d   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( l i s t . g e t I n p u t S t r e a m ( ) ) ) ; 
                         S t r i n g B u i l d e r   p a g e   =   n e w   S t r i n g B u i l d e r ( ) ; 
                         S t r i n g   l i n e   =   n u l l ; 
                         w h i l e   ( ( l i n e   =   r d . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 p a g e . a p p e n d ( l i n e ) ; 
                         } 
                         r d . c l o s e ( ) ; 
                         i f   ( ! p a g e . t o S t r i n g ( ) . e q u a l s ( "" m a R l a "" ) )   t h r o w   n e w   C o n f i g u r a t i o n E x c e p t i o n ( "" U R L   g i v e n   f o r   e r r o r   s e r v e r   i s   i n v a l i d "" ,   C o n f i g T y p e . E r r o r S e r v e r ) ; 
                 }   c a t c h   ( U n k n o w n H o s t E x c e p t i o n   e x )   { 
                         S y s t e m . l i s t . p r i n t l n ( "" A c c e p t i n g   s e t t i n g   f o r   e r r o r   s e v e r ,   u n a b l e   t o   c h e c k "" ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e x )   { 
                         t h r o w   n e w   C o n f i g u r a t i o n E x c e p t i o n ( "" U R L   g i v e n   f o r   e r r o r   s e r v e r   ( ' ""   +   n e w S e r v e r   +   "" ' )   a p p e a r s   i n v a l i d "" ,   C o n f i g T y p e . E r r o r S e r v e r ,   e x ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                         t h r o w   n e w   C o n f i g u r a t i o n E x c e p t i o n ( "" U R L   g i v e n   f o r   e r r o r   s e r v e r   c o u l d   n o t   b e   r e a c h e d "" ,   C o n f i g T y p e . E r r o r S e r v e r ,   e x ) ; 
                 } 
                 e r r o r S e r v e r U R L   =   n e w S e r v e r ; 
                 r e t u r n   o l d ; 
         } 
",1,1,1,-1,out,0.00080773607,1,1,{'out': 'list'},MHM,306,0.14218934377034506
413,"CODE1:     private void copyFile(File src, File dst) throws IOException {         InputStream in = new FileInputStream(src);         OutputStream out = new FileOutputStream(dst);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) out.write(buf, 0, len);         in.close();         out.close();     }  ||CODE2:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     } ",84,"        p r i v a t e   v o i d   c o p y F i l e ( F i l e   s r c ,   F i l e   d s t )   t h r o w s   I O E x c e p t i o n   { 
                 I n p u t S t r e a m   i n   =   n e w   F i l e I n p u t S t r e a m ( s r c ) ; 
                 O u t p u t S t r e a m   u r l   =   n e w   F i l e O u t p u t S t r e a m ( d s t ) ; 
                 b y t e [ ]   b u f   =   n e w   b y t e [ 1 0 2 4 ] ; 
                 i n t   l e n ; 
                 w h i l e   ( ( l e n   =   i n . r e a d ( b u f ) )   >   0 )   u r l . w r i t e ( b u f ,   0 ,   l e n ) ; 
                 i n . c l o s e ( ) ; 
                 u r l . c l o s e ( ) ; 
         } 
",1,1,0,1,out,-0.9998246,1,3,{'out': 'url'},MHM,36,0.018135579427083333
417,"CODE1:     public ImportFromFile() {         JFrame jf = new JFrame();         JFileChooser fc = new JFileChooser(KTH.data._path);         fc.setFileSelectionMode(JFileChooser.FILES_ONLY);         int returnVal = fc.showOpenDialog(jf);         File file = null;         if (returnVal == JFileChooser.APPROVE_OPTION) {             file = fc.getSelectedFile();             KTH.data._path = file.getParent();             System.out.println(file.getAbsolutePath() + ""\n"");         } else {         }         if (file != null) {             File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);             System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));             if (f.exists() && !IOUtils.isNewerContent(file, f)) {             } else {                 try {                     IOUtils.copyFile(file, f, true);                 } catch (Exception e) {                     KTH.out.err(e);                 }             }             KTH.dc2.removeDc(""Import"");         } else {         }     }  ||CODE2:     public void notifyIterationEnds(final IterationEndsEvent event) {         log.info(""moving files..."");         File source = new File(""deqsim.log"");         if (source.exists()) {             File destination = new File(Controler.getIterationFilename(""deqsim.log""));             if (!IOUtils.renameFile(source, destination)) {                 log.info(""WARNING: Could not move deqsim.log to its iteration directory."");             }         }         int parallelCnt = 0;         source = new File(""deqsim.log."" + parallelCnt);         while (source.exists()) {             File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));             if (!IOUtils.renameFile(source, destination)) {                 log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");             }             parallelCnt++;             source = new File(""deqsim.log."" + parallelCnt);         }         source = new File(""loads_out.txt"");         if (source.exists()) {             File destination = new File(Controler.getIterationFilename(""loads_out.txt""));             try {                 IOUtils.copyFile(source, destination);             } catch (FileNotFoundException e) {                 log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");             } catch (IOException e) {                 log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");             }             destination = new File(""loads_in.txt"");             if (!IOUtils.renameFile(source, destination)) {                 log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");             }         }         source = new File(""linkprocs.txt"");         if (source.exists()) {             File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));             if (!IOUtils.renameFile(source, destination)) {                 log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");             }         }     } ",227,"        p u b l i c   I m p o r t F r o m F i l e ( )   { 
                 J F r a m e   j f   =   n e w   J F r a m e ( ) ; 
                 J F i l e C h o o s e r   f c   =   n e w   J F i l e C h o o s e r ( K T H . d a t a . _ p a t h ) ; 
                 f c . s e t F i l e S e l e c t i o n M o d e ( J F i l e C h o o s e r . F I L E S _ O N L Y ) ; 
                 i n t   r e t u r n V a l   =   f c . s h o w O p e n D i a l o g ( j f ) ; 
                 F i l e   f i l e   =   n u l l ; 
                 i f   ( r e t u r n V a l   = =   J F i l e C h o o s e r . A P P R O V E _ O P T I O N )   { 
                         f i l e   =   f c . g e t S e l e c t e d F i l e ( ) ; 
                         K T H . d a t a . _ p a t h   =   f i l e . g e t P a r e n t ( ) ; 
                         S y s t e m . o u t . p r i n t l n ( f i l e . g e t A b s o l u t e P a t h ( )   +   "" 
 "" ) ; 
                 }   e l s e   { 
                 } 
                 i f   ( f i l e   ! =   n u l l )   { 
                         F i l e   f   =   n e w   F i l e ( K T H . d a t a . g e t H o m e D i r ( )   +   F i l e . s e p a r a t o r   +   K T H . d a t a . k a t a l o g N a m e ) ; 
                         S y s t e m . o u t . p r i n t l n ( f   +   ( f . e x i s t s ( )   ?   ""   i s   f o u n d   ""   :   ""   i s   m i s s i n g   "" ) ) ; 
                         i f   ( f . e x i s t s ( )   & &   ! I O U t i l s . i s N e w e r C o n t e n t ( f i l e ,   f ) )   { 
                         }   e l s e   { 
                                 t r y   { 
                                         I O U t i l s . c o p y F i l e ( f i l e ,   f ,   t r u e ) ; 
                                 }   c a t c h   ( E x c e p t i o n   e )   { 
                                         K T H . o u t . e r r ( e ) ; 
                                 } 
                         } 
                         K T H . d c 2 . r e m o v e D c ( "" I m p o r t "" ) ; 
                 }   e l s e   { 
                 } 
         } 
",1,1,1,-1,is,0.0,1,2,{'is': 'are'},MHM,269,0.13517425060272217
423,"CODE1:     @Override     public void copy(File source, File dest) throws IOException {         FileChannel in = null;         FileChannel out = null;         try {             in = (new FileInputStream(source)).getChannel();             out = (new FileOutputStream(dest)).getChannel();             in.transferTo(0, source.length(), out);         } catch (FileNotFoundException e) {             throw new IOException(""Wrong source or destination path for backup operation!"");         } finally {             if (out != null) {                 out.close();             }             if (in != null) {                 in.close();             }         }     }  ||CODE2:     @Override     public boolean performOk() {         this.setPropertyValue(""bea.home"", this.beaHome.getText());         this.setPropertyValue(""bea.domain"", this.domainDirectory.getText());         Display.getDefault().syncExec(new Runnable() {              public void run() {                 saveWLHome();                 for (final TabControl control : tabControls) {                     control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);                 }                 if (isEnabledJCLCopy()) {                     final File url = new File(WLPropertyPage.this.domainDirectory.getText());                     File lib = new File(url, ""lib"");                     File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");                     if (!log4jLibrary.exists()) {                         InputStream srcFile = null;                         FileOutputStream fos = null;                         try {                             srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));                             fos = new FileOutputStream(log4jLibrary);                             IOUtils.copy(srcFile, fos);                             srcFile.close();                             fos.flush();                             fos.close();                             srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));                             File jcl = new File(lib, ""commons-logging-1.0.4.jar"");                             fos = new FileOutputStream(jcl);                             IOUtils.copy(srcFile, fos);                         } catch (IOException e) {                             Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);                         } finally {                             try {                                 if (srcFile != null) {                                     srcFile.close();                                     srcFile = null;                                 }                                 if (fos != null) {                                     fos.flush();                                     fos.close();                                     fos = null;                                 }                             } catch (IOException e) {                             }                         }                     }                 }                 if (isEnabledJSTLCopy()) {                     File url = new File(WLPropertyPage.this.domainDirectory.getText());                     File lib = new File(url, ""lib"");                     File jstlLibrary = new File(lib, ""jstl.jar"");                     if (!jstlLibrary.exists()) {                         InputStream srcFile = null;                         FileOutputStream fos = null;                         try {                             srcFile = toInputStream(new Path(""jstl/jstl.jar""));                             fos = new FileOutputStream(jstlLibrary);                             IOUtils.copy(srcFile, fos);                         } catch (IOException e) {                             Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);                         } finally {                             try {                                 if (srcFile != null) {                                     srcFile.close();                                     srcFile = null;                                 }                                 if (fos != null) {                                     fos.flush();                                     fos.close();                                     fos = null;                                 }                             } catch (final IOException e) {                                 Logger.getLog().debug(""I/O exception closing resources"", e);                             }                         }                     }                 }             }         });         return super.performOk();     } ",119,"        @ O v e r r i d e 
         p u b l i c   v o i d   c o p y ( F i l e   u r l ,   F i l e   d e s t )   t h r o w s   I O E x c e p t i o n   { 
                 F i l e C h a n n e l   i n   =   n u l l ; 
                 F i l e C h a n n e l   u r l   =   n u l l ; 
                 t r y   { 
                         i n   =   ( n e w   F i l e I n p u t S t r e a m ( u r l ) ) . g e t C h a n n e l ( ) ; 
                         u r l   =   ( n e w   F i l e O u t p u t S t r e a m ( d e s t ) ) . g e t C h a n n e l ( ) ; 
                         i n . t r a n s f e r T o ( 0 ,   u r l . l e n g t h ( ) ,   u r l ) ; 
                 }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                         t h r o w   n e w   I O E x c e p t i o n ( "" W r o n g   s o u r c e   o r   d e s t i n a t i o n   p a t h   f o r   b a c k u p   o p e r a t i o n ! "" ) ; 
                 }   f i n a l l y   { 
                         i f   ( u r l   ! =   n u l l )   { 
                                 u r l . c l o s e ( ) ; 
                         } 
                         i f   ( i n   ! =   n u l l )   { 
                                 i n . c l o s e ( ) ; 
                         } 
                 } 
         } 
",1,1,0,1,out,-0.9998589,1,5,{'out': 'url'},MHM,161,0.07875053882598877
428,"CODE1:     public String encryptToSHA(String info) {         byte[] digesta = null;         try {             MessageDigest alga = MessageDigest.getInstance(""SHA-1"");             alga.update(info.getBytes());             digesta = alga.digest();         } catch (NoSuchAlgorithmException e) {             e.printStackTrace();         }         String rs = byte2hex(digesta);         return rs;     }  ||CODE2:     public int setData(String mysql) {         int mycount = 0;         try {             conn.setAutoCommit(false);             mycount = 0;             stmt = conn.createStatement();             mycount = stmt.executeUpdate(mysql);         } catch (Exception e) {             mycount = -1;         } finally {             if (mycount > 0) {                 try {                     conn.commit();                 } catch (SQLException e) {                     e.printStackTrace();                 }             } else {                 try {                     conn.rollback();                 } catch (SQLException e) {                     e.printStackTrace();                 }             }         }         return mycount;     } ",74,"        p u b l i c   S t r i n g   e n c r y p t T o S H A ( S t r i n g   i n f o )   { 
                 b y t e [ ]   d i g e s t a   =   n u l l ; 
                 t r y   { 
                         M e s s a g e D i g e s t   a l g a   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" S H A - 1 "" ) ; 
                         a l g a . u p d a t e ( i n f o . g e t B y t e s ( ) ) ; 
                         d i g e s t a   =   a l g a . l o g e n g e ( ) ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 S t r i n g   r s   =   b y t e 2 h e x ( d i g e s t a ) ; 
                 r e t u r n   r s ; 
         } 
",0,0,0,-1,,-1.6868114e-05,0,0,{},MHM,320,0.13629332383473713
433,"CODE1:     void queryFile(String rendezvousProgram, String rendezvousMD5) {         try {             XMLConfigParser.readUrlHost();             String url = XMLConfigParser.urlHost;             String query;             String param1 = ""op=query"";             String param2 = ""program="" + rendezvousProgram;             String param3 = ""md5="" + rendezvousMD5;             query = String.format(""%s&%s&%s"", param1, param2, param3);             openConnection(query, url);             String line = br.readLine();             NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);             br.close();         } catch (MalformedURLException e) {             NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);         } catch (IOException e) {             NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());         }     }  ||CODE2:     public DBAccess(String pathToDb) {         if (instance != null) {             throw new IllegalStateException();         }         System.setProperty(""derby.system.home"", pathToDb);         try {             boolean exists = new File(pathToDb).exists();             new EmbeddedDriver();             Properties props = new Properties();             if (exists) {                 connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);                 connection.setAutoCommit(true);                 Statement statement = connection.createStatement();                 try {                 } finally {                     statement.close();                 }             } else {                 connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);                 connection.setAutoCommit(true);                 URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");                 BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));                 StringBuilder query = new StringBuilder();                 for (String s = reader.readLine(); s != null; s = reader.readLine()) {                     if (query.length() > 0) {                         query.append('\n');                     }                     query.append(s);                 }                 reader.close();                 Statement statement = connection.createStatement();                 try {                     String[] statements = query.toString().split("";(\\s)*"");                     for (String s : statements) {                         statement.execute(s);                     }                 } finally {                     statement.close();                 }             }         } catch (Exception e) {             throw new RuntimeException(e);         }         instance = this;     } ",159,"        v o i d   q u e r y F i l e ( S t r i n g   r e n d e z v o u s P r o g r a m ,   S t r i n g   r e n d e z v o u s M D 5 )   { 
                 t r y   { 
                         X M L C o n f i g P a r s e r . r e a d U r l H o s t ( ) ; 
                         S t r i n g   u r l   =   X M L C o n f i g P a r s e r . u r l H o s t ; 
                         S t r i n g   q u e r y ; 
                         S t r i n g   p a r a m 1   =   "" o p = q u e r y "" ; 
                         S t r i n g   p a r a m 2   =   "" p r o g r a m = ""   +   r e n d e z v o u s P r o g r a m ; 
                         S t r i n g   p a r a m 3   =   "" m d 5 = ""   +   r e n d e z v o u s M D 5 ; 
                         q u e r y   =   S t r i n g . f o r m a t ( "" % s & % s & % s "" ,   p a r a m 1 ,   p a r a m 2 ,   p a r a m 3 ) ; 
                         o p e n C o n n e c t i o n ( q u e r y ,   u r l ) ; 
                         S t r i n g   l i n e   =   t r . r e a d L i n e ( ) ; 
                         N e t w o r k L o g . l o g M s g ( N e t w o r k L o g . L O G _ D E B U G ,   t h i s ,   "" ( Q u e r y )   R e s p o n s e   o f   t h e   s e r v e r :   ""   +   l i n e ) ; 
                         t r . c l o s e ( ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   e )   { 
                         N e t w o r k L o g . l o g M s g ( N e t w o r k L o g . L O G _ E R R O R ,   t h i s ,   "" E r r o r ""   +   e ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         N e t w o r k L o g . l o g M s g ( N e t w o r k L o g . L O G _ E R R O R ,   t h i s ,   e . g e t M e s s a g e ( ) ) ; 
                 } 
         } 
",0,0,0,-1,br,-2.6583672e-05,1,2,{'br': 'tr'},MHM,314,0.15077717701594034
438,"CODE1:     public HogsCustomizer() {         m_filename = PathFinder.getCustsFile();         m_currenttaunts = new String[10];         m_textfields = new JTextField[10];         m_color = new Color(255, 255, 255);         boolean exists = (new File(m_filename)).exists();         m_inverted = false;         m_chooser = new JColorChooser();         AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();         m_chooser.removeChooserPanel(panels[0]);         m_chooser.removeChooserPanel(panels[2]);         m_chooser.setPreviewPanel(new JPanel());         Reader reader = null;         if (exists) {             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e) {                 e.printStackTrace();             }         } else {             Object[] options = { ""Yes"", ""No, Thanks"" };             int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);             if (n == 0) {                 try {                     FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();                     FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();                     dstChannel.transferFrom(srcChannel, 0, srcChannel.size());                     srcChannel.close();                     dstChannel.close();                 } catch (IOException e) {                     e.printStackTrace();                     System.exit(0);                 }             } else {                 System.exit(0);             }             try {                 reader = new FileReader(m_filename);             } catch (FileNotFoundException e1) {                 e1.printStackTrace();                 System.exit(0);             }         }         try {             readFromFile(reader);         } catch (Exception e) {             e.printStackTrace();             System.exit(0);         }         Box mainpanel = Box.createVerticalBox();         mainpanel.add(buildTauntsPanel());         mainpanel.add(buildMouseStylePanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildColorPanel());         mainpanel.add(Box.createVerticalStrut(10));         mainpanel.add(buildButtonsPanel());         mainpanel.add(Box.createVerticalStrut(10));         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setContentPane(mainpanel);         this.pack();         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();         this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));         this.setTitle(""Hogs Customizer"");         this.setVisible(true);     }  ||CODE2:     @Override     public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {         boolean found = false;         String name = getArgument(request.getPathInfo());         if (StringUtils.contains(name, '/')) {             File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);             if (file.exists() && file.isFile()) {                 found = true;                 MagicMatch match = Magic.getMagicMatch(file, true);                 response.setContentType(match.getMimeType());                 FileInputStream in = new FileInputStream(file);                 IOUtils.copyLarge(in, response.getOutputStream());                 in.close();             }         } else if (!StringUtils.isBlank(name)) {             int articleId = NumberUtils.toInt(name);             if (articleId > 0) {                 Article article = articleDao.load(articleId);                 if (article != null) {                     found = true;                     sendArticle(request, response, article);                 }             }         } else {             int page = NumberUtils.toInt(request.getParameter(""page""), 0);             Date fromDate = null;             String from = request.getParameter(""from"");             if (StringUtils.isNotBlank(from)) {                 try {                     fromDate = dayMonthYearEn.parse(from);                 } catch (ParseException e) {                 }             }             Date untilDate = null;             String until = request.getParameter(""until"");             if (StringUtils.isNotBlank(until)) {                 try {                     untilDate = dayMonthYearEn.parse(until);                 } catch (ParseException e) {                 }             }             sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));             found = true;         }         if (found != true) {             response.setStatus(HttpServletResponse.SC_NOT_FOUND);         }     } ",526,"        p u b l i c   H o g s C u s t o m i z e r ( )   { 
                 m _ f i l e n a m e   =   P a t h F i n d e r . g e t C u s t s F i l e ( ) ; 
                 m _ c u r r e n t t a u n t s   =   n e w   S t r i n g [ 1 0 ] ; 
                 m _ t e x t f i e l d s   =   n e w   J T e x t F i e l d [ 1 0 ] ; 
                 m _ c o l o r   =   n e w   C o l o r ( 2 5 5 ,   2 5 5 ,   2 5 5 ) ; 
                 b o o l e a n   e x i s t s   =   ( n e w   F i l e ( m _ f i l e n a m e ) ) . e x i s t s ( ) ; 
                 m _ i n v e r t e d   =   f a l s e ; 
                 m _ c h o o s e r   =   n e w   J C o l o r C h o o s e r ( ) ; 
                 A b s t r a c t C o l o r C h o o s e r P a n e l [ ]   p a n e l s   =   m _ c h o o s e r . g e t C h o o s e r P a n e l s ( ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 0 ] ) ; 
                 m _ c h o o s e r . r e m o v e C h o o s e r P a n e l ( p a n e l s [ 2 ] ) ; 
                 m _ c h o o s e r . s e t P r e v i e w P a n e l ( n e w   J P a n e l ( ) ) ; 
                 R e a d e r   r e a d e r   =   n u l l ; 
                 i f   ( e x i s t s )   { 
                         t r y   { 
                                 r e a d e r   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e )   { 
                                 e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 }   e l s e   { 
                         O b j e c t [ ]   o p t i o n s   =   {   "" Y e s "" ,   "" N o ,   T h a n k s ""   } ; 
                         i n t   n   =   J O p t i o n P a n e . s h o w O p t i o n D i a l o g ( t h i s ,   "" Y o u   d o   n o t   h a v e   a   c u s t o m i z a t i o n   f i l e   i n   y o u r   h o m e   d i r e c t o r y . 
                                   ""   +   "" W o u l d   y o u   l i k e   t o   c r e a t e   o n e ? "" ,   "" H o g s   C u s t o m i z a t i o n "" ,   J O p t i o n P a n e . Y E S _ N O _ O P T I O N ,   J O p t i o n P a n e . Q U E S T I O N _ M E S S A G E ,   n u l l ,   o p t i o n s ,   o p t i o n s [ 1 ] ) ; 
                         i f   ( n   = =   0 )   { 
                                 t r y   { 
                                         F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( H o g s C o n s t a n t s . C U S T S _ T E M P L A T E ) . g e t C h a n n e l ( ) ; 
                                         F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( m _ f i l e n a m e ) . g e t C h a n n e l ( ) ; 
                                         d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . i z e ( ) ) ; 
                                         s r c C h a n n e l . c l o s e ( ) ; 
                                         d s t C h a n n e l . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                         e . p r i n t S t a c k T r a c e ( ) ; 
                                         S y s t e m . e x i t ( 0 ) ; 
                                 } 
                         }   e l s e   { 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                         t r y   { 
                                 r e a d e r   =   n e w   F i l e R e a d e r ( m _ f i l e n a m e ) ; 
                         }   c a t c h   ( F i l e N o t F o u n d E x c e p t i o n   e 1 )   { 
                                 e 1 . p r i n t S t a c k T r a c e ( ) ; 
                                 S y s t e m . e x i t ( 0 ) ; 
                         } 
                 } 
                 t r y   { 
                         r e a d F r o m F i l e ( r e a d e r ) ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         S y s t e m . e x i t ( 0 ) ; 
                 } 
                 B o x   m a i n p a n e l   =   B o x . c r e a t e V e r t i c a l B o x ( ) ; 
                 m a i n p a n e l . a d d ( b u i l d T a u n t s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d M o u s e S t y l e P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d C o l o r P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 m a i n p a n e l . a d d ( b u i l d B u t t o n s P a n e l ( ) ) ; 
                 m a i n p a n e l . a d d ( B o x . c r e a t e V e r t i c a l S t r u t ( 1 0 ) ) ; 
                 t h i s . s e t D e f a u l t C l o s e O p e r a t i o n ( J F r a m e . E X I T _ O N _ C L O S E ) ; 
                 t h i s . s e t C o n t e n t P a n e ( m a i n p a n e l ) ; 
                 t h i s . p a c k ( ) ; 
                 D i m e n s i o n   d i m   =   T o o l k i t . g e t D e f a u l t T o o l k i t ( ) . g e t S c r e e n S i z e ( ) ; 
                 t h i s . s e t L o c a t i o n ( d i m . w i d t h   /   2   -   ( t h i s . g e t W i d t h ( )   /   2 ) ,   d i m . h e i g h t   /   2   -   ( t h i s . g e t H e i g h t ( )   /   2 ) ) ; 
                 t h i s . s e t T i t l e ( "" H o g s   C u s t o m i z e r "" ) ; 
                 t h i s . s e t V i s i b l e ( t r u e ) ; 
         } 
",1,1,1,-1,size,4.4605986e-07,1,1,{'size': 'uri'},MHM,298,0.18012060324350992
442,"CODE1:     public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {         MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);         mdAlgorithm.update(plainText.getBytes());         byte[] digest = mdAlgorithm.digest();         StringBuffer hexString = new StringBuffer();         for (int i = 0; i < digest.length; i++) {             plainText = Integer.toHexString(0xFF & digest[i]);             if (plainText.length() < 2) {                 plainText = ""0"" + plainText;             }             hexString.append(plainText);         }         return hexString.toString();     }  ||CODE2:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     } ",121,"        p u b l i c   s t a t i c   S t r i n g   g e t H a s h T e x t ( S t r i n g   p l a i n T e x t ,   S t r i n g   a l g o r i t h m )   t h r o w s   N o S u c h A l g o r i t h m E x c e p t i o n   { 
                 M e s s a g e D i g e s t   m d A l g o r i t h m   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( a l g o r i t h m ) ; 
                 m d A l g o r i t h m . u p d a t e ( p l a i n T e x t . g e t B y t e s ( ) ) ; 
                 b y t e [ ]   d i g e s t   =   m d A l g o r i t h m . d i g e s t ( ) ; 
                 S t r i n g B u f f e r   h e x S t r i n g   =   n e w   S t r i n g B u f f e r ( ) ; 
                 f o r   ( i n t   i   =   0 ;   i   <   d i g e s t . l o c ;   i + + )   { 
                         p l a i n T e x t   =   I n t e g e r . t o H e x S t r i n g ( 0 x F F   &   d i g e s t [ i ] ) ; 
                         i f   ( p l a i n T e x t . l o c ( )   <   2 )   { 
                                 p l a i n T e x t   =   "" 0 ""   +   p l a i n T e x t ; 
                         } 
                         h e x S t r i n g . a p p e n d ( p l a i n T e x t ) ; 
                 } 
                 r e t u r n   h e x S t r i n g . t o S t r i n g ( ) ; 
         } 
",0,0,0,-1,length,4.7683716e-07,1,2,{'length': 'loc'},MHM,305,0.1392068823178609
445,"CODE1:     public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {         if (destFile.exists()) {             throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);         }         if (!sourceFile.exists()) {             return;         }         boolean succ = sourceFile.renameTo(destFile);         if (succ) {             NLogger.warn(FileUtils.class, ""First renameTo operation worked!"");             return;         }         NLogger.warn(FileUtils.class, ""First renameTo operation failed."");         System.gc();         Thread.yield();         succ = sourceFile.renameTo(destFile);         if (succ) {             return;         }         NLogger.warn(FileUtils.class, ""Second renameTo operation failed."");         FileInputStream input = null;         FileOutputStream output = null;         try {             input = new FileInputStream(sourceFile);             output = new FileOutputStream(destFile);             long lengthLeft = sourceFile.length();             byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];             int read;             while (lengthLeft > 0) {                 read = input.read(buffer);                 if (read == -1) {                     break;                 }                 lengthLeft -= read;                 output.write(buffer, 0, read);             }         } catch (IOException exp) {             NLogger.warn(FileUtils.class, ""Third renameTo operation failed."");             throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);         } finally {             IOUtil.closeQuietly(input);             IOUtil.closeQuietly(output);         }         destFile.setLastModified(sourceFile.lastModified());         FileUtils.deleteFileMultiFallback(sourceFile);     }  ||CODE2:     private static Pattern getBotPattern() {         StringBuilder sb = new StringBuilder();         try {             Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);             while (urls.hasMoreElements()) {                 URL url = urls.nextElement();                 InputStream in = url.openStream();                 BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));                 String line;                 while ((line = reader.readLine()) != null) {                     line = line.trim();                     if (!line.startsWith(""#"") && !line.equals("""")) {                         if (sb.length() > 0) sb.append(""|"");                         sb.append(""("").append(line).append("")"");                     }                 }                 in.close();             }         } catch (IOException e) {             throw new RuntimeException(""Error reading bot user-agent configuration"", e);         }         return Pattern.compile(sb.toString());     } ",306,"        p u b l i c   s t a t i c   v o i d   r e n a m e F i l e M u l t i F a l l b a c k ( F i l e   s o u r c e F i l e ,   F i l e   d e s t F i l e )   t h r o w s   F i l e H a n d l i n g E x c e p t i o n   { 
                 i f   ( d e s t F i l e . e x i s t s ( ) )   { 
                         t h r o w   n e w   F i l e H a n d l i n g E x c e p t i o n ( F i l e H a n d l i n g E x c e p t i o n . F I L E _ A L R E A D Y _ E X I S T S ) ; 
                 } 
                 i f   ( ! s o u r c e F i l e . e x i s t s ( ) )   { 
                         r e t u r n ; 
                 } 
                 b o o l e a n   s u c c   =   s o u r c e F i l e . r e n a m e T o ( d e s t F i l e ) ; 
                 i f   ( s u c c )   { 
                         N L o g g e r . w a r n ( F i l e U t i l s . c l a s s ,   "" F i r s t   r e n a m e T o   o p e r a t i o n   w o r k e d ! "" ) ; 
                         r e t u r n ; 
                 } 
                 N L o g g e r . w a r n ( F i l e U t i l s . c l a s s ,   "" F i r s t   r e n a m e T o   o p e r a t i o n   f a i l e d . "" ) ; 
                 S y s t e m . g c ( ) ; 
                 T h r e a d . y i e l d ( ) ; 
                 s u c c   =   s o u r c e F i l e . r e n a m e T o ( d e s t F i l e ) ; 
                 i f   ( s u c c )   { 
                         r e t u r n ; 
                 } 
                 N L o g g e r . w a r n ( F i l e U t i l s . c l a s s ,   "" S e c o n d   r e n a m e T o   o p e r a t i o n   f a i l e d . "" ) ; 
                 F i l e I n p u t S t r e a m   i n p u t   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   o u t p u t   =   n u l l ; 
                 t r y   { 
                         i n p u t   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e F i l e ) ; 
                         o u t p u t   =   n e w   F i l e O u t p u t S t r e a m ( d e s t F i l e ) ; 
                         l o n g   l e n g t h L e f t   =   s o u r c e F i l e . l e n g t h ( ) ; 
                         b y t e [ ]   b u f f e r   =   n e w   b y t e [ ( i n t )   M a t h . m i n ( B U F F E R _ L E N G T H ,   l e n g t h L e f t   +   1 ) ] ; 
                         i n t   r e a d ; 
                         w h i l e   ( l e n g t h L e f t   >   0 )   { 
                                 r e a d   =   i n p u t . r e a d ( b u f f e r ) ; 
                                 i f   ( r e a d   = =   - 1 )   { 
                                         b r e a k ; 
                                 } 
                                 l e n g t h L e f t   - =   r e a d ; 
                                 o u t p u t . w r i t e ( b u f f e r ,   0 ,   r e a d ) ; 
                         } 
                 }   c a t c h   (   I O c e p t i o n   e x p )   { 
                         N L o g g e r . w a r n ( F i l e U t i l s . c l a s s ,   "" T h i r d   r e n a m e T o   o p e r a t i o n   f a i l e d . "" ) ; 
                         t h r o w   n e w   F i l e H a n d l i n g E x c e p t i o n ( F i l e H a n d l i n g E x c e p t i o n . R E N A M E _ F A I L E D ,   e x p ) ; 
                 }   f i n a l l y   { 
                         I O U t i l . c l o s e Q u i e t l y ( i n p u t ) ; 
                         I O U t i l . c l o s e Q u i e t l y ( o u t p u t ) ; 
                 } 
                 d e s t F i l e . s e t L a s t M o d i f i e d ( s o u r c e F i l e . l a s t M o d i f i e d ( ) ) ; 
                 F i l e U t i l s . d e l e t e F i l e M u l t i F a l l b a c k ( s o u r c e F i l e ) ; 
         } 
",0,0,0,-1,IOException,0.0,1,1,{'IOException': ' IOError'},MHM,107,0.09202560981114706
456,"CODE1:     public static boolean buildPerMovieDiffBinary(String masterFile) {         try {             File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);             FileChannel inC = new FileInputStream(inFile).getChannel();             System.out.println(inC.size());             short movie1, movie2;             int count;             float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;             long position;             for (long i = 1; i < 17770; i++) {                 File outFile = new File(""C:\\NetflixData\\download\\SmartGrape\\CFItemToItemStats\\Movie--"" + i + ""-MatrixData.txt"");                 FileChannel outC = new FileOutputStream(outFile, true).getChannel();                 ByteBuffer buf = ByteBuffer.allocate(17770 * 44);                 for (long j = 1; j < i; j++) {                     ByteBuffer bbuf = ByteBuffer.allocate(44);                     position = 0;                     position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();                     position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();                     position += new Long((i - j - 1) * 44).longValue();                     inC.position(position);                     inC.read(bbuf);                     bbuf.flip();                     buf.putShort(bbuf.getShort());                     bbuf.getShort();                     buf.putInt(bbuf.getInt());                     buf.putFloat(-bbuf.getInt());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                     buf.putFloat(bbuf.getFloat());                 }                 buf.putShort(new Long(i).shortValue());                 buf.putInt(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 buf.putFloat(0);                 position = 0;                 position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();                 position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();                 ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);                 while (remainingBuf.hasRemaining()) {                     remainingBuf.getShort();                     buf.putShort(remainingBuf.getShort());                     buf.putInt(remainingBuf.getInt());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                     buf.putFloat(remainingBuf.getFloat());                 }                 buf.flip();                 outC.write(buf);                 buf.clear();                 outC.close();             }             return true;         } catch (Exception e) {             e.printStackTrace();             return false;         }     }  ||CODE2:     public void testReadPerMemberAllFour() throws IOException {         GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));         gzin.setEofEachMember(true);         int count0 = IOUtils.copy(gzin, new NullOutputStream());         assertEquals(""wrong 1k member count"", 1024, count0);         assertEquals(""wrong member number"", 0, gzin.getMemberNumber());         assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());         assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());         gzin.nextMember();         int count1 = IOUtils.copy(gzin, new NullOutputStream());         assertEquals(""wrong 32k member count"", (32 * 1024), count1);         assertEquals(""wrong member number"", 1, gzin.getMemberNumber());         assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());         gzin.nextMember();         int count2 = IOUtils.copy(gzin, new NullOutputStream());         assertEquals(""wrong 1-byte member count"", 1, count2);         assertEquals(""wrong member number"", 2, gzin.getMemberNumber());         assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());         gzin.nextMember();         int count3 = IOUtils.copy(gzin, new NullOutputStream());         assertEquals(""wrong 5-byte member count"", 5, count3);         assertEquals(""wrong member number"", 3, gzin.getMemberNumber());         assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());         assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());         gzin.nextMember();         int countEnd = IOUtils.copy(gzin, new NullOutputStream());         assertEquals(""wrong eof count"", 0, countEnd);     } ",810,"        p u b l i c   s t a t i c   b o o l e a n   b u i l d P e r M o v i e D i f f B i n a r y ( S t r i n g   m a s t e r F i l e )   { 
                 t r y   { 
                         F i l e   i n F i l e   =   n e w   F i l e ( c o m p l e t e P a t h   +   f S e p   +   "" S m a r t G R A P E ""   +   f S e p   +   m a s t e r F i l e ) ; 
                         F i l e C h a n n e l   i n C   =   n e w   F i l e I n p u t S t r e a m ( i n F i l e ) . g e t C h a n n e l ( ) ; 
                         S y s t e m . d o t . p r i n t l n ( i n C . s i z e ( ) ) ; 
                         s h o r t   m o v i e 1 ,   m o v i e 2 ; 
                         i n t   c o u n t ; 
                         f l o a t   d i f f R a t i n g ,   s u m X Y ,   s u m X ,   s u m Y ,   s u m X 2 ,   s u m Y 2 ,   p e a r s o n C o r r ,   a d j u s t e d C o s i n e C o r r ,   c o s i n e C o r r ; 
                         l o n g   p o s i t i o n ; 
                         f o r   ( l o n g   i   =   1 ;   i   <   1 7 7 7 0 ;   i + + )   { 
                                 F i l e   o u t F i l e   =   n e w   F i l e ( "" C : \ \ N e t f l i x D a t a \ \ d o w n l o a d \ \ S m a r t G r a p e \ \ C F I t e m T o I t e m S t a t s \ \ M o v i e - - ""   +   i   +   "" - M a t r i x D a t a . t x t "" ) ; 
                                 F i l e C h a n n e l   o u t C   =   n e w   F i l e O u t p u t S t r e a m ( o u t F i l e ,   t r u e ) . g e t C h a n n e l ( ) ; 
                                 B y t e B u f f e r   b u f   =   B y t e B u f f e r . a l l o c a t e ( 1 7 7 7 0   *   4 4 ) ; 
                                 f o r   ( l o n g   j   =   1 ;   j   <   i ;   j + + )   { 
                                         B y t e B u f f e r   b b u f   =   B y t e B u f f e r . a l l o c a t e ( 4 4 ) ; 
                                         p o s i t i o n   =   0 ; 
                                         p o s i t i o n   + =   n e w   L o n g ( 1 7 7 6 9 ) . l o n g V a l u e ( )   *   n e w   L o n g ( 1 7 7 7 0 ) . l o n g V a l u e ( )   *   n e w   L o n g ( 2 2 ) . l o n g V a l u e ( ) ; 
                                         p o s i t i o n   - =   n e w   L o n g ( ( 1 7 7 6 9   -   ( j   -   1 ) ) ) . l o n g V a l u e ( )   *   n e w   L o n g ( ( 1 7 7 7 0   -   ( j   -   1 ) ) ) . l o n g V a l u e ( )   *   n e w   L o n g ( 2 2 ) . l o n g V a l u e ( ) ; 
                                         p o s i t i o n   + =   n e w   L o n g ( ( i   -   j   -   1 )   *   4 4 ) . l o n g V a l u e ( ) ; 
                                         i n C . p o s i t i o n ( p o s i t i o n ) ; 
                                         i n C . r e a d ( b b u f ) ; 
                                         b b u f . f l i p ( ) ; 
                                         b u f . p u t S h o r t ( b b u f . g e t S h o r t ( ) ) ; 
                                         b b u f . g e t S h o r t ( ) ; 
                                         b u f . p u t I n t ( b b u f . g e t I n t ( ) ) ; 
                                         b u f . p u t F l o a t ( - b b u f . g e t I n t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( b b u f . g e t F l o a t ( ) ) ; 
                                 } 
                                 b u f . p u t S h o r t ( n e w   L o n g ( i ) . s h o r t V a l u e ( ) ) ; 
                                 b u f . p u t I n t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 b u f . p u t F l o a t ( 0 ) ; 
                                 p o s i t i o n   =   0 ; 
                                 p o s i t i o n   + =   n e w   L o n g ( 1 7 7 6 9 ) . l o n g V a l u e ( )   *   n e w   L o n g ( 1 7 7 7 0 ) . l o n g V a l u e ( )   *   n e w   L o n g ( 2 2 ) . l o n g V a l u e ( ) ; 
                                 p o s i t i o n   - =   n e w   L o n g ( ( 1 7 7 6 9   -   ( i   -   1 ) ) ) . l o n g V a l u e ( )   *   n e w   L o n g ( ( 1 7 7 7 0   -   ( i   -   1 ) ) ) . l o n g V a l u e ( )   *   n e w   L o n g ( 2 2 ) . l o n g V a l u e ( ) ; 
                                 B y t e B u f f e r   r e m a i n i n g B u f   =   i n C . m a p ( F i l e C h a n n e l . M a p M o d e . R E A D _ O N L Y ,   p o s i t i o n ,   ( 1 7 7 7 0   -   i )   *   4 4 ) ; 
                                 w h i l e   ( r e m a i n i n g B u f . h a s R e m a i n i n g ( ) )   { 
                                         r e m a i n i n g B u f . g e t S h o r t ( ) ; 
                                         b u f . p u t S h o r t ( r e m a i n i n g B u f . g e t S h o r t ( ) ) ; 
                                         b u f . p u t I n t ( r e m a i n i n g B u f . g e t I n t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                         b u f . p u t F l o a t ( r e m a i n i n g B u f . g e t F l o a t ( ) ) ; 
                                 } 
                                 b u f . f l i p ( ) ; 
                                 o u t C . w r i t e ( b u f ) ; 
                                 b u f . c l e a r ( ) ; 
                                 o u t C . c l o s e ( ) ; 
                         } 
                         r e t u r n   t r u e ; 
                 }   c a t c h   ( E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t u r n   f a l s e ; 
                 } 
         } 
",1,1,1,-1,out,1.8590072e-08,1,1,{'out': 'dot'},MHM,330,0.206062122186025
457,"CODE1:     public String getSHA1Hex(String original) {         MessageDigest digest;         String result = """";         try {             digest = MessageDigest.getInstance(""sha1"");             digest.reset();             digest.update(original.getBytes());             byte[] dig = digest.digest();             String hexStr = """";             for (int i = 0; i < dig.length; i++) {                 hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);             }             result = hexStr;         } catch (NoSuchAlgorithmException e) {             e.printStackTrace();         }         return result;     }  ||CODE2:     public static String getMD5(String s) {         try {             MessageDigest m = MessageDigest.getInstance(""MD5"");             m.update(s.getBytes(), 0, s.length());             s = new BigInteger(1, m.digest()).toString(16);         } catch (NoSuchAlgorithmException ex) {             ex.printStackTrace();         }         return s;     } ",129,"        p u b l i c   S t r i n g   g e t S H A 1 H e x ( S t r i n g   o r i g i n a l )   { 
                 M e s s a g e D i g e s t   d i g e s t ; 
                 S t r i n g   r e s u l t   =   "" "" ; 
                 t r y   { 
                         d i g e s t   =   M e s s a g e D i g e s t . g e t I n s t a n c e ( "" s h a 1 "" ) ; 
                         d i g e s t . r e s e t ( ) ; 
                         d i g e s t . u p d a t e ( o r i g i n a l . g e t B y t e s ( ) ) ; 
                         b y t e [ ]   d i g   =   d i g e s t . d i g e s t ( ) ; 
                         S t r i n g   h e x S t r   =   "" "" ; 
                         f o r   ( i n t   p   =   0 ;   p   <   d i g . l e n g t h ;   p + + )   { 
                                 h e x S t r   + =   I n t e g e r . t o S t r i n g ( ( d i g [ p ]   &   0 x f f )   +   0 x 1 0 0 ,   1 6 ) . s u b s t r i n g ( 1 ) ; 
                         } 
                         r e s u l t   =   h e x S t r ; 
                 }   c a t c h   ( N o S u c h A l g o r i t h m E x c e p t i o n   e )   { 
                         e . p r i n t S t a c k T r a c e ( ) ; 
                 } 
                 r e t u r n   r e s u l t ; 
         } 
",1,1,1,-1,i,1.7082493e-07,1,4,{'i': 'p'},MHM,311,0.13952303330103558
458,"CODE1:     public static void copyFile(File source, File destination, boolean lazy) {         if (!source.exists()) {             return;         }         if (lazy) {             String oldContent = null;             try {                 oldContent = read(source);             } catch (Exception e) {                 return;             }             String newContent = null;             try {                 newContent = read(destination);             } catch (Exception e) {             }             if (oldContent == null || !oldContent.equals(newContent)) {                 copyFile(source, destination, false);             }         } else {             if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {                 destination.getParentFile().mkdirs();             }             try {                 FileChannel srcChannel = new FileInputStream(source).getChannel();                 FileChannel dstChannel = new FileOutputStream(destination).getChannel();                 dstChannel.transferFrom(srcChannel, 0, srcChannel.size());                 srcChannel.close();                 dstChannel.close();             } catch (IOException ioe) {                 ioe.printStackTrace();             }         }     }  ||CODE2:     public FetchTextFromWebPage(String path) {         HTMLEditorKit.Parser parser;         HTMLFile = new File(path);         byte[] html = new byte[new Long(HTMLFile.length()).intValue()];         try {             FileInputStream fis = new FileInputStream(HTMLFile);             try {                 fis.read(html);             } catch (IOException e) {                 e.printStackTrace();             }             ByteArrayInputStream ba_read = new ByteArrayInputStream(html);             r = new InputStreamReader(ba_read);         } catch (FileNotFoundException e) {             URL url = null;             try {                 url = new URL(path);                 URLConnection connection = null;                 try {                     connection = url.openConnection();                     connection.setDoInput(true);                     InputStream inStream = null;                     try {                         inStream = connection.getInputStream();                         BufferedReader input = new BufferedReader(new InputStreamReader(inStream));                         StringBuffer sbr = new StringBuffer();                         String line = null;                         try {                             while ((line = input.readLine()) != null) {                                 System.out.println(line);                                 sbr.append(line + ""\n"");                             }                         } catch (IOException e1) {                             e1.printStackTrace();                         }                         File temp = new File(""//home//wiki14//temp.txt"");                         if (!temp.exists()) {                             if (!temp.createNewFile()) System.out.println(""File caanot be created"");                         } else {                             temp.delete();                             if (!temp.createNewFile()) System.out.println(""File caanot be created"");                         }                         java.io.FileWriter fw = new java.io.FileWriter(temp);                         fw.write(sbr.toString());                         fw.close();                         byte[] newbyte = new byte[new Long(sbr.length()).intValue()];                         ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);                         r = new InputStreamReader(ba_read);                     } catch (IOException e1) {                         e1.printStackTrace();                     }                 } catch (IOException e1) {                     e1.printStackTrace();                 }             } catch (MalformedURLException e1) {                 e1.printStackTrace();             }         }         parser = new ParserDelegator();         htmltextparser = new HtmlTextParser();         htmltextparser.initData();         try {             parser.parse(r, htmltextparser, true);         } catch (IOException e) {             e.printStackTrace();         }         try {             r.close();         } catch (IOException e) {             e.printStackTrace();         }     } ",215,"        p u b l i c   s t a t i c   v o i d     c o p y F i l e s ( F i l e   s l i c e ,   F i l e   d e s t i n a t i o n ,   b o o l e a n   l a z y )   { 
                 i f   ( ! s l i c e . e x i s t s ( ) )   { 
                         r e t u r n ; 
                 } 
                 i f   ( l a z y )   { 
                         S t r i n g   o l d C o n t e n t   =   n u l l ; 
                         t r y   { 
                                 o l d C o n t e n t   =   r e a d ( s l i c e ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                                 r e t u r n ; 
                         } 
                         S t r i n g   n e w C o n t e n t   =   n u l l ; 
                         t r y   { 
                                 n e w C o n t e n t   =   r e a d ( d e s t i n a t i o n ) ; 
                         }   c a t c h   ( E x c e p t i o n   e )   { 
                         } 
                         i f   ( o l d C o n t e n t   = =   n u l l   | |   ! o l d C o n t e n t . e q u a l s ( n e w C o n t e n t ) )   { 
                                   c o p y F i l e s ( s l i c e ,   d e s t i n a t i o n ,   f a l s e ) ; 
                         } 
                 }   e l s e   { 
                         i f   ( ( d e s t i n a t i o n . g e t P a r e n t F i l e ( )   ! =   n u l l )   & &   ( ! d e s t i n a t i o n . g e t P a r e n t F i l e ( ) . e x i s t s ( ) ) )   { 
                                 d e s t i n a t i o n . g e t P a r e n t F i l e ( ) . m k d i r s ( ) ; 
                         } 
                         t r y   { 
                                 F i l e C h a n n e l   s r c C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( s l i c e ) . g e t C h a n n e l ( ) ; 
                                 F i l e C h a n n e l   d s t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( d e s t i n a t i o n ) . g e t C h a n n e l ( ) ; 
                                 d s t C h a n n e l . t r a n s f e r F r o m ( s r c C h a n n e l ,   0 ,   s r c C h a n n e l . s i z e ( ) ) ; 
                                 s r c C h a n n e l . c l o s e ( ) ; 
                                 d s t C h a n n e l . c l o s e ( ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                                 i o e . p r i n t S t a c k T r a c e ( ) ; 
                         } 
                 } 
         } 
",0,0,0,-1,copyFile,0.0,2,7,"{'copyFile': ' copyfile', 'source': 'slice'}",MHM,202,0.12356510957082113
459,"CODE1:     private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {         if (source == null) throw new NullPointerException(""Parameter 'source' is null"");         if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());         if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());         if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");         if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");         File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");         switch(type) {             case MOVE:                 if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\.jpg"")) {                     for (int i = 0; i < frames_.size(); i++) {                         Frame f = frames_.get(i);                         if (f.getFile().compareTo(source) == 0) {                             frames_.remove(i);                             break;                         }                     }                 }                 source.renameTo(tmp);                 break;             case COPY:                 FileChannel inChannel = new FileInputStream(source).getChannel();                 FileChannel outChannel = new FileOutputStream(tmp).getChannel();                 inChannel.transferTo(0, inChannel.size(), outChannel);                 if (inChannel != null) inChannel.close();                 if (outChannel != null) outChannel.close();                 break;         }         for (int i = frames_.size() - 1; i >= index; i--) {             Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));             frames_.get(i).moveTo(newFrame);             frames_.set(i, newFrame);         }         File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));         tmp.renameTo(newLocation);         Frame f = new Frame(newLocation);         f.createThumbNail();         frames_.set(index, f);         return f;     }  ||CODE2:     public static void copyFile(File source, File dest) throws IOException {         log.debug(""Copy from {} to {}"", source.getAbsoluteFile(), dest.getAbsoluteFile());         FileInputStream fi = new FileInputStream(source);         FileChannel fic = fi.getChannel();         MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());         fic.close();         fi.close();         fi = null;         if (!dest.exists()) {             String destPath = dest.getPath();             log.debug(""Destination path: {}"", destPath);             String destDir = destPath.substring(0, destPath.lastIndexOf(File.separatorChar));             log.debug(""Destination dir: {}"", destDir);             File dir = new File(destDir);             if (!dir.exists()) {                 if (dir.mkdirs()) {                     log.debug(""Directory created"");                 } else {                     log.warn(""Directory not created"");                 }             }             dir = null;         }         FileOutputStream fo = new FileOutputStream(dest);         FileChannel foc = fo.getChannel();         foc.write(mbuf);         foc.close();         fo.close();         fo = null;         mbuf.clear();         mbuf = null;     } ",446,"        p r i v a t e   s y n c h r o n i z e d   F r a m e   i n s e r t F r a m e ( i n t   i n d e x ,   F i l e   s o u r c e ,   I N S E R T _ T Y P E   t y p e )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( s o u r c e   = =   n u l l )   t h r o w   n e w   N u l l P o i n t e r E x c e p t i o n ( "" P a r a m e t e r   ' s o u r c e '   i s   n u l l "" ) ; 
                 i f   ( ! s o u r c e . e x i s t s ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e   d o e s   n o t   e x i s t :   ""   +   s o u r c e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( s o u r c e . l e n g t h ( )   < =   0 )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e   i s   e m p t y :   ""   +   s o u r c e . g e t A b s o l u t e P a t h ( ) ) ; 
                 i f   ( i n d e x   <   0 )   t h r o w   n e w   I n d e x O u t O f B o u n d s E x c e p t i o n ( "" i n d e x   <   0 "" ) ; 
                 i f   ( i n d e x   > =   f r a m e s _ . s i z e ( ) )   t h r o w   n e w   I n d e x O u t O f B o u n d s E x c e p t i o n ( "" i n d e x   > =   f r a m e s _ . s i z e ( ) "" ) ; 
                 F i l e   t m p   =   n e w   F i l e ( S e t t i n g s . g e t P r o p e r t y S t r i n g ( C o n s t a n t K e y s . p r o j e c t _ d i r ) ,   "" t m p . j p g "" ) ; 
                 s w i t c h ( t y p e )   { 
                         c a s e   M O V E : 
                                 i f   ( s o u r c e . g e t P a r e n t F i l e ( ) . c o m p a r e T o ( n e w   F i l e ( S e t t i n g s . g e t P r o p e r t y S t r i n g ( C o n s t a n t K e y s . p r o j e c t _ d i r ) ) )   = =   0   & &   s o u r c e . g e t N a m e ( ) . m a t c h e s ( "" i m g _ [ 0 - 9 ] { 5 } \ \ . j p g "" ) )   { 
                                         f o r   ( i n t   i   =   0 ;   i   <   f r a m e s _ . s i z e ( ) ;   i + + )   { 
                                                 F r a m e   f   =   f r a m e s _ . g e t ( i ) ; 
                                                 i f   ( f . g e t F i l e ( ) . c o m p a r e T o ( s o u r c e )   = =   0 )   { 
                                                         f r a m e s _ . r e m o v e ( i ) ; 
                                                         b r e a k ; 
                                                 } 
                                         } 
                                 } 
                                 s o u r c e . r e n a m e T o ( t m p ) ; 
                                 b r e a k ; 
                         c a s e   C O P Y : 
                                 F i l e C h a n n e l   i n C h a n n e l   =   n e w   F i l e I n p u t S t r e a m ( s o u r c e ) . g e t C h a n n e l ( ) ; 
                                 F i l e C h a n n e l   o u t C h a n n e l   =   n e w   F i l e O u t p u t S t r e a m ( t m p ) . g e t C h a n n e l ( ) ; 
                                 i n C h a n n e l . t r a n s f e r T o ( 0 ,   i n C h a n n e l . s i z e ( ) ,   o u t C h a n n e l ) ; 
                                 i f   ( i n C h a n n e l   ! =   n u l l )   i n C h a n n e l . c l o s e ( ) ; 
                                 i f   ( o u t C h a n n e l   ! =   n u l l )   o u t C h a n n e l . c l o s e ( ) ; 
                                 b r e a k ; 
                 } 
                 f o r   ( i n t   i   =   f r a m e s _ . s i z e ( )   -   1 ;   i   > =   i n d e x ;   i - - )   { 
                         F r a m e   n e w F r a m e   =   n e w   F r a m e ( n e w   F i l e ( S e t t i n g s . g e t P r o p e r t y S t r i n g ( C o n s t a n t K e y s . p r o j e c t _ d i r ) ,   f o r m a t F i l e N a m e ( i ) ) ) ; 
                         f r a m e s _ . g e t ( i ) . m o v e T o ( n e w F r a m e ) ; 
                         f r a m e s _ . s e t ( i ,   n e w F r a m e ) ; 
                 } 
                 F i l e   n e w L o c a t i o n   =   n e w   F i l e ( S e t t i n g s . g e t P r o p e r t y S t r i n g ( C o n s t a n t K e y s . p r o j e c t _ d i r ) ,   f o r m a t F i l e N a m e ( i n d e x ) ) ; 
                 t m p . r e n a m e T o ( n e w L o c a t i o n ) ; 
                 F r a m e   f   =   n e w   F r a m e ( n e w L o c a t i o n ) ; 
                 f . c r e a t e T h u m b N a i l ( ) ; 
                 f r a m e s _ . s e t ( i n d e x ,   f ) ; 
                 r e t u r n   f ; 
         } 
",1,1,1,-1,is,0.0,1,2,{'is': 'ys'},MHM,263,0.1600980242093404
460,"CODE1:     @Override     public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {         if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {             final HttpServletRequest httpServletRequest = (HttpServletRequest) request;             final HttpServletResponse httpServletResponse = (HttpServletResponse) response;             final String contextPath = httpServletRequest.getContextPath() + ""/"";             final String requestURI = httpServletRequest.getRequestURI();             if (requestURI.startsWith(contextPath)) {                 final String filterURI = requestURI.substring(contextPath.length());                 final String filterPath = getFilterPath();                 if (filterURI.startsWith(filterPath)) {                     final String targetURI = filterURI.substring(filterPath.length());                     for (final Entry<String, String> entry : mapping.entrySet()) {                         final String key = entry.getKey();                         final String value = entry.getValue();                         if (targetURI.startsWith(key) && (targetURI.length() > key.length())) {                             final String resourceName = value + targetURI.substring(key.length());                             InputStream is = null;                             try {                                 is = getClass().getResourceAsStream(""/"" + resourceName);                                 if (is != null) {                                     IOUtils.copy(is, httpServletResponse.getOutputStream());                                     httpServletResponse.flushBuffer();                                     break;                                 } else {                                     httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);                                     break;                                 }                             } catch (final IOException ioex) {                                 throw new ServletException(""Error serving resource ["" + resourceName + ""]."", ioex);                             } finally {                                 IOUtils.closeQuietly(is);                             }                         }                     }                 } else {                     chain.doFilter(request, response);                 }             } else {                 chain.doFilter(request, response);             }         } else {             chain.doFilter(request, response);         }     }  ||CODE2:     public void convert(File src, File dest) throws IOException {         InputStream in = new BufferedInputStream(new FileInputStream(src));         DcmParser p = pfact.newDcmParser(in);         Dataset ds = fact.newDataset();         p.setDcmHandler(ds.getDcmHandler());         try {             FileFormat format = p.detectFileFormat();             if (format != FileFormat.ACRNEMA_STREAM) {                 System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");                 return;             }             p.parseDcmFile(format, Tags.PixelData);             if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {                 System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");                 return;             }             boolean hasPixelData = p.getReadTag() == Tags.PixelData;             boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;             int pxlen = p.getReadLength();             if (hasPixelData) {                 if (inflate) {                     ds.putUS(Tags.BitsAllocated, 16);                     pxlen = pxlen * 4 / 3;                 }                 if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {                     System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");                     return;                 }             }             ds.putUI(Tags.StudyInstanceUID, uid(studyUID));             ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));             ds.putUI(Tags.SOPInstanceUID, uid(instUID));             ds.putUI(Tags.SOPClassUID, classUID);             if (!ds.contains(Tags.NumberOfSamples)) {                 ds.putUS(Tags.NumberOfSamples, 1);             }             if (!ds.contains(Tags.PhotometricInterpretation)) {                 ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");             }             if (fmi) {                 ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));             }             OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));             try {             } finally {                 ds.writeFile(out, encodeParam());                 if (hasPixelData) {                     if (!skipGroupLen) {                         out.write(PXDATA_GROUPLEN);                         int grlen = pxlen + 8;                         out.write((byte) grlen);                         out.write((byte) (grlen >> 8));                         out.write((byte) (grlen >> 16));                         out.write((byte) (grlen >> 24));                     }                     out.write(PXDATA_TAG);                     out.write((byte) pxlen);                     out.write((byte) (pxlen >> 8));                     out.write((byte) (pxlen >> 16));                     out.write((byte) (pxlen >> 24));                 }                 if (inflate) {                     int b2, b3;                     for (; pxlen > 0; pxlen -= 3) {                         out.write(in.read());                         b2 = in.read();                         b3 = in.read();                         out.write(b2 & 0x0f);                         out.write(b2 >> 4 | ((b3 & 0x0f) << 4));                         out.write(b3 >> 4);                     }                 } else {                     for (; pxlen > 0; --pxlen) {                         out.write(in.read());                     }                 }                 out.close();             }             System.out.print('.');         } finally {             in.close();         }     } ",356,"        @ O v e r r i d e 
         p u b l i c   v o i d   d o F i l t e r ( f i n a l   S e r v l e t R e q u e s t   r e q u e s t ,   f i n a l   S e r v l e t R e s p o n s e   r e s p o n s e ,   f i n a l   F i l t e r C h a i n   c h a i n )   t h r o w s   I O E x c e p t i o n ,   S e r v l e t E x c e p t i o n   { 
                 i f   ( r e q u e s t   i n s t a n c e o f   H t t p S e r v l e t R e q u e s t   & &   r e s p o n s e   i n s t a n c e o f   H t t p S e r v l e t R e s p o n s e )   { 
                         f i n a l   H t t p S e r v l e t R e q u e s t   h t t p S e r v l e t R e q u e s t   =   ( H t t p S e r v l e t R e q u e s t )   r e q u e s t ; 
                         f i n a l   H t t p S e r v l e t R e s p o n s e   h t t p S e r v l e t R e s p o n s e   =   ( H t t p S e r v l e t R e s p o n s e )   r e s p o n s e ; 
                         f i n a l   S t r i n g   c o n t e x t P a t h   =   h t t p S e r v l e t R e q u e s t . g e t C o n t e x t P a t h ( )   +   "" / "" ; 
                         f i n a l   S t r i n g   r e q u e s t U R I   =   h t t p S e r v l e t R e q u e s t . g e t R e q u e s t U R I ( ) ; 
                         i f   ( r e q u e s t U R I . s t a r t s W i t h ( c o n t e x t P a t h ) )   { 
                                 f i n a l   S t r i n g   f i l t e r U R I   =   r e q u e s t U R I . s u b s t r i n g ( c o n t e x t P a t h . l e n g t h ( ) ) ; 
                                 f i n a l   S t r i n g   f i l t e r P a t h   =   g e t F i l t e r P a t h ( ) ; 
                                 i f   ( f i l t e r U R I . s t a r t s W i t h ( f i l t e r P a t h ) )   { 
                                         f i n a l   S t r i n g   t a r g e t U R I   =   f i l t e r U R I . s u b s t r i n g ( f i l t e r P a t h . l e n g t h ( ) ) ; 
                                         f o r   ( f i n a l   E n t r y < S t r i n g ,   S t r i n g >   e n t r y   :   m a p p i n g . e n t r y S e t ( ) )   { 
                                                 f i n a l   S t r i n g   k e y   =   e n t r y . g e t K e y ( ) ; 
                                                 f i n a l   S t r i n g   v a l u e   =   e n t r y . g e t V a l u e ( ) ; 
                                                 i f   ( t a r g e t U R I . s t a r t s W i t h ( k e y )   & &   ( t a r g e t U R I . l e n g t h ( )   >   k e y . l e n g t h ( ) ) )   { 
                                                         f i n a l   S t r i n g   r e s o u r c e N a m e   =   v a l u e   +   t a r g e t U R I . s u b s t r i n g ( k e y . l e n g t h ( ) ) ; 
                                                         I n p u t S t r e a m   i s   =   n u l l ; 
                                                         t r y   { 
                                                                 i s   =   g e t C l a s s ( ) . g e t R e s o u r c e A s S t r e a m ( "" / ""   +   r e s o u r c e N a m e ) ; 
                                                                 i f   ( i s   ! =   n u l l )   { 
                                                                         I O U t i l s .     c o p y i n g ( i s ,   h t t p S e r v l e t R e s p o n s e . g e t O u t p u t S t r e a m ( ) ) ; 
                                                                         h t t p S e r v l e t R e s p o n s e . f l u s h B u f f e r ( ) ; 
                                                                         b r e a k ; 
                                                                 }   e l s e   { 
                                                                         h t t p S e r v l e t R e s p o n s e . s e n d E r r o r ( H t t p S e r v l e t R e s p o n s e . S C _ N O T _ F O U N D ) ; 
                                                                         b r e a k ; 
                                                                 } 
                                                         }   c a t c h   ( f i n a l   I O E x c e p t i o n   i o e x )   { 
                                                                 t h r o w   n e w   S e r v l e t E x c e p t i o n ( "" E r r o r   s e r v i n g   r e s o u r c e   [ ""   +   r e s o u r c e N a m e   +   "" ] . "" ,   i o e x ) ; 
                                                         }   f i n a l l y   { 
                                                                 I O U t i l s . c l o s e Q u i e t l y ( i s ) ; 
                                                         } 
                                                 } 
                                         } 
                                 }   e l s e   { 
                                         c h a i n . d o F i l t e r ( r e q u e s t ,   r e s p o n s e ) ; 
                                 } 
                         }   e l s e   { 
                                 c h a i n . d o F i l t e r ( r e q u e s t ,   r e s p o n s e ) ; 
                         } 
                 }   e l s e   { 
                         c h a i n . d o F i l t e r ( r e q u e s t ,   r e s p o n s e ) ; 
                 } 
         } 
",1,1,1,-1,copy,0.0,1,1,{'copy': 'clone'},MHM,273,0.1505449414253235
461,"CODE1:     private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {         try {             URL u = new URL(""http://mediaserver:8080/sagex"" + url);             log.debug(""Proxy Media: "" + u.toString());             URLConnection c = u.openConnection();             c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");             OutputStream os = resp.getOutputStream();             IOUtils.copy(c.getInputStream(), os);             os.flush();             resp.flushBuffer();         } catch (Throwable t) {             log.error(""Failed to get url: "" + url, t);             try {                 resp.sendError(500, t.getMessage());             } catch (IOException e) {             }         }     }  ||CODE2:     @Override     public void actionPerformed(ActionEvent e) {         if (feedbackView.getText().length() <= 0) return;         try {             TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {                  public java.security.cert.X509Certificate[] getAcceptedIssuers() {                     return null;                 }                  public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {                 }                  public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {                 }             } };             try {                 SSLContext sc = SSLContext.getInstance(""SSL"");                 sc.init(null, trustAllCerts, new java.security.SecureRandom());                 HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());             } catch (Exception e3) {                 e3.printStackTrace();             }             feedback = """";             addLine(""Type            : "" + feedbackView.getType());             addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());             addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));             addLine(""Client Version  : "" + HIRuntime.getClientVersion());             addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());             try {                 addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());             } catch (HIWebServiceException e1) {             }             addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");             addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");             if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {                 HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();                 addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");                 addLine("""");                 addLine(""Stack Trace"");                 addLine(""-----------"");                 ByteArrayOutputStream byteStream = new ByteArrayOutputStream();                 PrintWriter writer = new PrintWriter(byteStream);                 lastWSError.getCause().printStackTrace(writer);                 writer.close();                 addLine(new String(byteStream.toByteArray()));             }             addLine("""");             addLine(""Message"");             addLine(""-------"");             feedback = feedback + feedbackView.getText();             feedback = feedback + ""\n\n"";             feedback = URLEncoder.encode(feedback, ""UTF-8"");             URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");             HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();             connection.setRequestMethod(""POST"");             connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");             connection.setDoOutput(true);             PrintWriter writer = new PrintWriter(connection.getOutputStream());             writer.write(""raw_fb="" + feedback);             writer.close();             connection.connect();             String response = connection.getResponseMessage();             if (response.compareTo(""OK"") == 0) {                 HIRuntime.getGui().clearLastWSError();                 HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");             } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");             connection.disconnect();         } catch (MalformedURLException e1) {             e1.printStackTrace();             HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");         } catch (IOException e2) {             e2.printStackTrace();             HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");         }         HIRuntime.getGui().deregisterComponent(this, false);     } ",145,"        p r i v a t e   v o i d   p r o x y M e d i a S e r v l e t ( S t r i n g   d o w n l o a d ,   H t t p S e r v l e t R e q u e s t   r e q ,   H t t p S e r v l e t R e s p o n s e   r e s p )   { 
                 t r y   { 
                         U R L   u   =   n e w   U R L ( "" h t t p : / / m e d i a s e r v e r : 8 0 8 0 / s a g e x ""   +   d o w n l o a d ) ; 
                         l o g . d e b u g ( "" P r o x y   M e d i a :   ""   +   u . t o S t r i n g ( ) ) ; 
                         U R L C o n n e c t i o n   c   =   u . o p e n C o n n e c t i o n ( ) ; 
                         c . s e t R e q u e s t P r o p e r t y ( "" U s e r - A g e n t "" ,   "" M o z i l l a / 5 . 0   ( X 1 1 ;   U ;   L i n u x   i 6 8 6 ;   e n - U S ;   r v : 1 . 9 . 0 . 1 )   G e c k o / 2 0 0 8 0 7 2 8 2 0   F i r e f o x / 3 . 0 . 1 "" ) ; 
                         O u t p u t S t r e a m   o s   =   r e s p . g e t O u t p u t S t r e a m ( ) ; 
                         I O U t i l s . c o p y ( c . g e t I n p u t S t r e a m ( ) ,   o s ) ; 
                         o s . f l u s h ( ) ; 
                         r e s p . f l u s h B u f f e r ( ) ; 
                 }   c a t c h   ( T h r o w a b l e   t )   { 
                         l o g . e r r o r ( "" F a i l e d   t o   g e t   u r l :   ""   +   d o w n l o a d ,   t ) ; 
                         t r y   { 
                                 r e s p . s e n d E r r o r ( 5 0 0 ,   t . g e t M e s s a g e ( ) ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         } 
                 } 
         } 
",0,0,0,-1,url,0.0,1,3,{'url': 'download'},MHM,298,0.14737386703491212
466,"CODE1:     private static void process(String urlstring) {         try {             URL url = new URL(urlstring);             System.out.println(""Connecting to "" + url);             URLConnection connection = url.openConnection();             connection.connect();             BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));             for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {                 System.out.println(TAG.matcher(line).replaceAll(""""));             }             in.close();         } catch (IOException ioe) {             System.err.println("""" + ioe);         }     }  ||CODE2:     public static void main(String[] args) throws Exception {         File inputFile = new File(args[0]);         BufferedReader reader = new BufferedReader(new FileReader(inputFile));         StringBuffer stringBuffer = new StringBuffer();         String readed;         while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\r\n"");         readed = stringBuffer.toString();         reader.close();         File outputFile = new File(args[0] + "".output"");         BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));         readed = readed.replaceAll(""\\t+"", ""#"");         readed = readed.replaceAll(""\\s*#\\s*"", ""#"");         readed = readed.replaceAll(""Latitude,.*"", """");         readed = readed.replaceAll(""Flag of"", """");         readed = readed.replaceAll(""^\\s+$"", """");         writer.write(readed);         writer.close();     } ",141,"        p r i v a t e   s t a t i c   v o i d   p r o c e s s ( S t r i n g   u r l s t r i n g )   { 
                 t r y   { 
                         U R L   b a s e   =   n e w   U R L ( u r l s t r i n g ) ; 
                         S y s t e m . o u t . p r i n t l n ( "" C o n n e c t i n g   t o   ""   +   b a s e ) ; 
                         U R L C o n n e c t i o n   c o n n e c t i o n   =   b a s e . o p e n C o n n e c t i o n ( ) ; 
                         c o n n e c t i o n . c o n n e c t ( ) ; 
                         B u f f e r e d R e a d e r   s e r v   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( c o n n e c t i o n . g e t I n p u t S t r e a m ( ) ) ) ; 
                         f o r   ( S t r i n g   l i n e ;   ( l i n e   =   s e r v . r e a d L i n e ( ) )   ! =   n u l l ;   )   i f   ( l i n e . s t a r t s W i t h ( M A R K E R ) )   { 
                                 S y s t e m . o u t . p r i n t l n ( T A G . m a t c h e r ( l i n e ) . r e p l a c e A l l ( "" "" ) ) ; 
                         } 
                         s e r v . c l o s e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                         S y s t e m . e r r . p r i n t l n ( "" ""   +   i o e ) ; 
                 } 
         } 
",0,0,0,-1,in,-8.761883e-06,2,6,"{'in': 'serv', 'url': 'base'}",MHM,306,0.1400701920191447
469,"CODE1:     public static void doVersionCheck(View view) {         view.showWaitCursor();         try {             URL url = new URL(jEdit.getProperty(""version-check.url""));             InputStream in = url.openStream();             BufferedReader bin = new BufferedReader(new InputStreamReader(in));             String line;             String develBuild = null;             String stableBuild = null;             while ((line = bin.readLine()) != null) {                 if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();             }             bin.close();             if (develBuild != null && stableBuild != null) {                 doVersionCheck(view, stableBuild, develBuild);             }         } catch (IOException e) {             String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };             GUIUtilities.error(view, ""read-error"", args);         }         view.hideWaitCursor();     }  ||CODE2:         public void actionPerformed(ActionEvent e) {             String aboutText = ""Slug application."";             String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);             boolean canShowInPane = false;             if (aboutURL != null) {                 try {                     URL url = new URL(aboutURL);                     AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);                     canShowInPane = dlg.setURL(url);                     if (canShowInPane) {                         dlg.setSize(300, 200);                         dlg.setLocationRelativeTo(ShellSlacFrame.this);                         dlg.setVisible(true);                     } else {                         BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));                         String line = """";                         StringBuffer content = new StringBuffer();                         do {                             content.append(line);                             line = reader.readLine();                         } while (line != null);                         if (content.length() != 0) {                             aboutText = content.toString();                         }                     }                 } catch (Exception ex) {                     if (DEBUG) {                         ex.printStackTrace();                     }                 }             }             if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);         } ",210,"        p u b l i c   s t a t i c   v o i d   d o V e r s i o n C h e c k ( V i e w   v i e w )   { 
                 v i e w . s h o w W a i t C u r s o r ( ) ; 
                 t r y   { 
                         U R L   h t m l   =   n e w   U R L ( j E d i t . g e t P r o p e r t y ( "" v e r s i o n - c h e c k . u r l "" ) ) ; 
                         I n p u t S t r e a m   i n   =   h t m l . o p e n S t r e a m ( ) ; 
                         B u f f e r e d R e a d e r   b i n   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n ) ) ; 
                         S t r i n g   l i n e ; 
                         S t r i n g   d e v e l B u i l d   =   n u l l ; 
                         S t r i n g   s t a b l e B u i l d   =   n u l l ; 
                         w h i l e   ( ( l i n e   =   b i n . r e a d L i n e ( ) )   ! =   n u l l )   { 
                                 i f   ( l i n e . s t a r t s W i t h ( "" . b u i l d "" ) )   d e v e l B u i l d   =   l i n e . s u b s t r i n g ( 6 ) . t r i m ( ) ;   e l s e   i f   ( l i n e . s t a r t s W i t h ( "" . s t a b l e b u i l d "" ) )   s t a b l e B u i l d   =   l i n e . s u b s t r i n g ( 1 2 ) . t r i m ( ) ; 
                         } 
                         b i n . c l o s e ( ) ; 
                         i f   ( d e v e l B u i l d   ! =   n u l l   & &   s t a b l e B u i l d   ! =   n u l l )   { 
                                 d o V e r s i o n C h e c k ( v i e w ,   s t a b l e B u i l d ,   d e v e l B u i l d ) ; 
                         } 
                 }   c a t c h   ( I O E x c e p t i o n   e )   { 
                         S t r i n g [ ]   a r g s   =   {   j E d i t . g e t P r o p e r t y ( "" v e r s i o n - c h e c k . u r l "" ) ,   e . t o S t r i n g ( )   } ; 
                         G U I U t i l i t i e s . e r r o r ( v i e w ,   "" r e a d - e r r o r "" ,   a r g s ) ; 
                 } 
                 v i e w . h i d e W a i t C u r s o r ( ) ; 
         } 
",1,1,1,-1,url,0.0005031731,1,2,{'url': 'Url'},MHM,305,0.14871615568796795
471,"CODE1:     protected void copyFile(File from, File to) throws IOException {         new File(intSfPath).delete();         if (to.exists() && (from.length() == to.length()) && (from.lastModified() == to.lastModified())) return;         if (to.exists()) to.delete();         to.createNewFile();         FileChannel inFC = null;         FileChannel outFC = null;         try {             inFC = new FileInputStream(from).getChannel();             outFC = new FileOutputStream(to).getChannel();             long cnt = outFC.transferFrom(inFC, 0, inFC.size());             if (cnt < inFC.size()) throw new IOException(""File copy failed"");         } finally {             if (inFC != null) {                 try {                     inFC.close();                 } catch (IOException ex) {                 }             }             if (outFC != null) {                 try {                     outFC.close();                 } catch (IOException ex) {                 }             }             to.setLastModified(from.lastModified());         }     }  ||CODE2:         public void run() {             final String basename = FilenameUtils.removeExtension(file.getName());             final File compressed = new File(logDirectory, basename + "".gz"");             InputStream in = null;             OutputStream out = null;             try {                 in = new FileInputStream(file);                 out = new GZIPOutputStream(new FileOutputStream(compressed));                 IOUtils.copy(in, out);                 in.close();                 out.close();             } catch (IOException e) {                 reportError(""Error compressing olg log file after file rotation"", e, ErrorManager.GENERIC_FAILURE);             } finally {                 IOUtils.closeQuietly(in);                 IOUtils.closeQuietly(out);             }             Collections.replaceAll(files, file, compressed);         } ",218,"        p r o t e c t e d   v o i d   t r a n s f e r F i l e ( F i l e   f r o m ,   F i l e   t o )   t h r o w s   I O E x c e p t i o n   { 
                 n e w   F i l e ( i n t S f P a t h ) . d e l e t e ( ) ; 
                 i f   ( t o . e x i s t s ( )   & &   ( f r o m . l e n g t h ( )   = =   t o . l e n g t h ( ) )   & &   ( f r o m . l a s t M o d i f i e d ( )   = =   t o . l a s t M o d i f i e d ( ) ) )   r e t u r n ; 
                 i f   ( t o . e x i s t s ( ) )   t o . d e l e t e ( ) ; 
                 t o . c r e a t e N e w F i l e ( ) ; 
                 F i l e C h a n n e l   i n F C   =   n u l l ; 
                 F i l e C h a n n e l   o u t F C   =   n u l l ; 
                 t r y   { 
                         i n F C   =   n e w   F i l e I n p u t S t r e a m ( f r o m ) . g e t C h a n n e l ( ) ; 
                         o u t F C   =   n e w   F i l e O u t p u t S t r e a m ( t o ) . g e t C h a n n e l ( ) ; 
                         l o n g   c n t   =   o u t F C . t r a n s f e r F r o m ( i n F C ,   0 ,   i n F C . s i z e ( ) ) ; 
                         i f   ( c n t   <   i n F C . s i z e ( ) )   t h r o w   n e w   I O E x c e p t i o n ( "" F i l e   c o p y   f a i l e d "" ) ; 
                 }   f i n a l l y   { 
                         i f   ( i n F C   ! =   n u l l )   { 
                                 t r y   { 
                                         i n F C . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                                 } 
                         } 
                         i f   ( o u t F C   ! =   n u l l )   { 
                                 t r y   { 
                                         o u t F C . c l o s e ( ) ; 
                                 }   c a t c h   ( I O E x c e p t i o n   e x )   { 
                                 } 
                         } 
                         t o . s e t L a s t M o d i f i e d ( f r o m . l a s t M o d i f i e d ( ) ) ; 
                 } 
         } 
",1,1,1,-1,copyFile,-1.20926416e-08,1,1,{'copyFile': 'transferFile'},MHM,145,0.1090400218963623
475,"CODE1:     private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {         if (entry.isDirectory()) {             createDir(new File(outputDir, entry.getName()));             return;         }         File outputFile = new File(outputDir, entry.getName());         if (!outputFile.getParentFile().exists()) {             createDir(outputFile.getParentFile());         }         BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));         BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));         try {             IOUtils.copy(inputStream, outputStream);         } finally {             outputStream.close();             inputStream.close();         }     }  ||CODE2:     private static File copyFileTo(File file, File directory) throws IOException {         File newFile = new File(directory, file.getName());         FileInputStream fis = null;         FileOutputStream fos = null;         try {             fis = new FileInputStream(file);             fos = new FileOutputStream(newFile);             byte buff[] = new byte[1024];             int val;             while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);         } finally {             if (fis != null) fis.close();             if (fos != null) fos.close();         }         return newFile;     } ",138,"        p r i v a t e   s t a t i c   v o i d   u n z i p E n t r y ( Z i p F i l e   z i p f i l e ,   Z i p E n t r y   e n t r y ,   F i l e   o u t p u t D i r )   t h r o w s   I O E x c e p t i o n   { 
                 i f   ( e n t r y . i s D i r e c t o r y ( ) )   { 
                         c r e a t e D i r ( n e w   F i l e ( o u t p u t D i r ,   e n t r y . g e t N a m e ( ) ) ) ; 
                         r e t u r n ; 
                 } 
                 F i l e     o u t p u t S t r e a m   =   n e w   F i l e ( o u t p u t D i r ,   e n t r y . g e t N a m e ( ) ) ; 
                 i f   ( !   o u t p u t S t r e a m . g e t P a r e n t F i l e ( ) . e x i s t s ( ) )   { 
                         c r e a t e D i r (   o u t p u t S t r e a m . g e t P a r e n t F i l e ( ) ) ; 
                 } 
                 B u f f e r e d I n p u t S t r e a m   i n p u t S t r e a m   =   n e w   B u f f e r e d I n p u t S t r e a m ( z i p f i l e . g e t I n p u t S t r e a m ( e n t r y ) ) ; 
                 B u f f e r e d O u t p u t S t r e a m   o u t p u t S t r e a m   =   n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m (   o u t p u t S t r e a m ) ) ; 
                 t r y   { 
                         I O U t i l s . c o p y ( i n p u t S t r e a m ,   o u t p u t S t r e a m ) ; 
                 }   f i n a l l y   { 
                         o u t p u t S t r e a m . c l o s e ( ) ; 
                         i n p u t S t r e a m . c l o s e ( ) ; 
                 } 
         } 
",1,1,1,-1,outputFile,0.0,1,4,{'outputFile': 'OutputFile'},MHM,249,0.12420044342676799
477,"CODE1:     private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {         monitor.subTask(""download "" + url.toString());         InputStream in = null;         FileOutputStream out = null;         URLConnection conn = null;         try {             conn = url.openConnection();             Writer writer = null;             try {                 Date date = new Date(conn.getLastModified());                 writer = new FileWriter(timestamp);                 writer.write(this.FORMAT.format(date));             } catch (IOException e) {                 timestamp.delete();             } finally {                 IOUtils.closeQuietly(writer);             }             in = conn.getInputStream();             out = new FileOutputStream(archive);             IOUtils.copy(in, out);         } finally {             IOUtils.closeQuietly(in);             IOUtils.closeQuietly(out);         }     }  ||CODE2:     public static void doVersionCheck(View view) {         view.showWaitCursor();         try {             URL url = new URL(jEdit.getProperty(""version-check.url""));             InputStream in = url.openStream();             BufferedReader bin = new BufferedReader(new InputStreamReader(in));             String line;             String develBuild = null;             String stableBuild = null;             while ((line = bin.readLine()) != null) {                 if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();             }             bin.close();             if (develBuild != null && stableBuild != null) {                 doVersionCheck(view, stableBuild, develBuild);             }         } catch (IOException e) {             String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };             GUIUtilities.error(view, ""read-error"", args);         }         view.hideWaitCursor();     } ",169,"        p r i v a t e   v o i d   d o w n l o a d ( F i l e   a r c h i v e ,   F i l e   t i m e s t a m p ,   U R L   u r l ,   I P r o g r e s s M o n i t o r   m o n i t o r )   t h r o w s   I O E x c e p t i o n   { 
                 m o n i t o r . s u b T a s k ( "" d o w n l o a d   ""   +   u r l . t o S t r i n g ( ) ) ; 
                 I n p u t S t r e a m   t h i n   =   n u l l ; 
                 F i l e O u t p u t S t r e a m   o u t   =   n u l l ; 
                 U R L C o n n e c t i o n   c o n n   =   n u l l ; 
                 t r y   { 
                         c o n n   =   u r l . o p e n C o n n e c t i o n ( ) ; 
                         W r i t e r   w r i t e r   =   n u l l ; 
                         t r y   { 
                                 D a t e   d a t e   =   n e w   D a t e ( c o n n . g e t L a s t M o d i f i e d ( ) ) ; 
                                 w r i t e r   =   n e w   F i l e W r i t e r ( t i m e s t a m p ) ; 
                                 w r i t e r . w r i t e ( t h i s . F O R M A T . f o r m a t ( d a t e ) ) ; 
                         }   c a t c h   ( I O E x c e p t i o n   e )   { 
                                 t i m e s t a m p . d e l e t e ( ) ; 
                         }   f i n a l l y   { 
                                 I O U t i l s . c l o s e Q u i e t l y ( w r i t e r ) ; 
                         } 
                         t h i n   =   c o n n . g e t I n p u t S t r e a m ( ) ; 
                         o u t   =   n e w   F i l e O u t p u t S t r e a m ( a r c h i v e ) ; 
                         I O U t i l s . c o p y ( t h i n ,   o u t ) ; 
                 }   f i n a l l y   { 
                         I O U t i l s . c l o s e Q u i e t l y ( t h i n ) ; 
                         I O U t i l s . c l o s e Q u i e t l y ( o u t ) ; 
                 } 
         } 
",0,0,0,-1,in,-1.66893e-06,1,4,{'in': 'thin'},MHM,302,0.14003308216730753
483,"CODE1:     private void copy(File in, File out) {         log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());         try {             FileChannel ic = new FileInputStream(in).getChannel();             FileChannel oc = new FileOutputStream(out).getChannel();             ic.transferTo(0, ic.size(), oc);             ic.close();             oc.close();         } catch (IOException ioe) {             fail(""Failed testing while copying modified file: "" + ioe.getMessage());         }     }  ||CODE2:     private void copyFile(File src, File dst) throws IOException {         InputStream in = new FileInputStream(src);         OutputStream out = new FileOutputStream(dst);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) out.write(buf, 0, len);         in.close();         out.close();     } ",113,"        p r i v a t e   v o i d   c o p y ( F i l e   i m a g e ,   F i l e   o u t )   { 
                 l o g . i n f o ( "" C o p y i n g   y a m   f i l e   f r o m :   ""   +   i m a g e . g e t N a m e ( )   +   ""   t o :   ""   +   o u t . g e t N a m e ( ) ) ; 
                 t r y   { 
                         F i l e C h a n n e l   i c   =   n e w   F i l e I n p u t S t r e a m ( i m a g e ) . g e t C h a n n e l ( ) ; 
                         F i l e C h a n n e l   o c   =   n e w   F i l e O u t p u t S t r e a m ( o u t ) . g e t C h a n n e l ( ) ; 
                         i c . t r a n s f e r T o ( 0 ,   i c . s i z e ( ) ,   o c ) ; 
                         i c . c l o s e ( ) ; 
                         o c . c l o s e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   i o e )   { 
                         f a i l ( "" F a i l e d   t e s t i n g   w h i l e   c o p y i n g   m o d i f i e d   f i l e :   ""   +   i o e . g e t M e s s a g e ( ) ) ; 
                 } 
         } 
",1,1,1,-1,in,1.1769589e-07,1,3,{'in': 'image'},MHM,313,0.13658835490544638
484,"CODE1:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     }  ||CODE2:     private static File copyFileTo(File file, File directory) throws IOException {         File newFile = new File(directory, file.getName());         FileInputStream fis = null;         FileOutputStream fos = null;         try {             fis = new FileInputStream(file);             fos = new FileOutputStream(newFile);             byte buff[] = new byte[1024];             int val;             while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);         } finally {             if (fis != null) fis.close();             if (fos != null) fos.close();         }         return newFile;     } ",271,"        p r i v a t e   s t a t i c   v o i d   r e a d A n d R e w r i t e ( F i l e   i n F i l e ,   F i l e   o u t F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 I m a g e I n p u t S t r e a m   i i s   =   I m a g e I O . c r e a t e I m a g e I n p u t S t r e a m ( n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( i n F i l e ) ) ) ; 
                 D c m P a r s e r   d c m P a r s e r   =   D c m P a r s e r F a c t o r y . g e t I n s t a n c e ( ) . n e w D c m P a r s e r ( i i s ) ; 
                 D a t a s e t   d s   =   D c m O b j e c t F a c t o r y . g e t I n s t a n c e ( ) . n e w D a t a s e t ( ) ; 
                 d c m P a r s e r . s e t D c m H a n d l e r ( d s . g e t D c m H a n d l e r ( ) ) ; 
                 d c m P a r s e r . p a r s e D c m F i l e ( n u l l ,   T a g s . P i x e l D a t a ) ; 
                 P i x e l D a t a R e a d e r   p d R e a d e r   =   p d F a c t . n e w R e a d e r ( d s ,   i i s ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 S y s t e m . c o m m e n t . p r i n t l n ( "" r e a d i n g   ""   +   i n F i l e   +   "" . . . "" ) ; 
                 p d R e a d e r . r e a d P i x e l D a t a ( f a l s e ) ; 
                 I m a g e O u t p u t S t r e a m   c o m m e n t   =   I m a g e I O . c r e a t e I m a g e O u t p u t S t r e a m ( n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( o u t F i l e ) ) ) ; 
                 D c m E n c o d e P a r a m   d c m E n c P a r a m   =   D c m E n c o d e P a r a m . I V R _ L E ; 
                 d s . w r i t e D a t a s e t ( c o m m e n t ,   d c m E n c P a r a m ) ; 
                 d s . w r i t e H e a d e r ( c o m m e n t ,   d c m E n c P a r a m ,   T a g s . P i x e l D a t a ,   d c m P a r s e r . g e t R e a d V R ( ) ,   d c m P a r s e r . g e t R e a d L e n g t h ( ) ) ; 
                 S y s t e m . c o m m e n t . p r i n t l n ( "" w r i t i n g   ""   +   o u t F i l e   +   "" . . . "" ) ; 
                 P i x e l D a t a W r i t e r   p d W r i t e r   =   p d F a c t . n e w W r i t e r ( p d R e a d e r . g e t P i x e l D a t a A r r a y ( ) ,   f a l s e ,   d s ,   c o m m e n t ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 p d W r i t e r . w r i t e P i x e l D a t a ( ) ; 
                 c o m m e n t . f l u s h ( ) ; 
                 c o m m e n t . c l o s e ( ) ; 
                 S y s t e m . c o m m e n t . p r i n t l n ( "" d o n e ! "" ) ; 
         } 
",1,1,1,-1,out,1.3897079e-08,1,9,{'out': 'comment'},MHM,300,0.15075300137201944
485,"CODE1:     public String loadURL(URL url) {         String retVal = """";         try {             InputStream inputStream = url.openStream();             BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));             String line = bufferedReader.readLine();             retVal += line + ""\n"";             while (line != null) {                 System.out.println(line);                 line = bufferedReader.readLine();                 if (line != null) retVal += line + ""\n"";             }             bufferedReader.close();         } catch (MalformedURLException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (IOException e) {             e.printStackTrace();             retVal = e.getMessage();         } catch (Exception e) {             e.printStackTrace();             retVal = e.getMessage();         }         return retVal;     }  ||CODE2:     public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {         wabclient.Attributes prop = new wabclient.Attributes(attributes);         try {             if (tag.equals(""app"")) {                 if (prop == null) {                     System.err.println(""app without properties"");                     return;                 }                 String appname = prop.getValue(""name"", """");                 String lookandfeel = prop.getValue(""lookandfeel"", """");                 global.setAppName(appname);                 if (lookandfeel.length() > 0) {                     if (lookandfeel.equalsIgnoreCase(""Windows"")) lookandfeel = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Motif"")) lookandfeel = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Mac"")) lookandfeel = ""com.sun.java.swing.plaf.mac.MacLookAndFeel"";                     UIManager.setLookAndFeel(lookandfeel);                 }             } else if (tag.equals(""script"")) {                 WABClient c = (WABClient) global;                 c.beginScript();                 String url = prop.getValue(""src"");                 if (url.length() > 0) {                     try {                         BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));                         String buffer;                         while (true) {                             buffer = r.readLine();                             if (buffer == null) break;                             c.script += buffer + ""\n"";                         }                         r.close();                         c.endScript();                     } catch (IOException ioe) {                         System.err.println(""[IOError] "" + ioe.getMessage());                         System.exit(0);                     }                 }             }         } catch (Exception e) {             e.printStackTrace(System.err);         }     } ",168,"        p u b l i c   S t r i n g   l o a d U R L ( U R L   l i n k )   { 
                 S t r i n g   r e t V a l   =   "" "" ; 
                 t r y   { 
                         I n p u t S t r e a m   i n p u t S t r e a m   =   l i n k . o p e n S t r e a m ( ) ; 
                         B u f f e r e d R e a d e r   b u f f e r e d R e a d e r   =   n e w   B u f f e r e d R e a d e r ( n e w   I n p u t S t r e a m R e a d e r ( i n p u t S t r e a m ) ) ; 
                         S t r i n g   j e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                         r e t V a l   + =   j e   +   "" 
 "" ; 
                         w h i l e   ( j e   ! =   n u l l )   { 
                                 S y s t e m . o u t . p r i n t l n ( j e ) ; 
                                 j e   =   b u f f e r e d R e a d e r . r e a d L i n e ( ) ; 
                                 i f   ( j e   ! =   n u l l )   r e t V a l   + =   j e   +   "" 
 "" ; 
                         } 
                         b u f f e r e d R e a d e r . c l o s e ( ) ; 
                 }   c a t c h   ( M a l f o r m e d U R L E x c e p t i o n   j e )   { 
                         j e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   j e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( I O E x c e p t i o n   j e )   { 
                         j e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   j e . g e t M e s s a g e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   j e )   { 
                         j e . p r i n t S t a c k T r a c e ( ) ; 
                         r e t V a l   =   j e . g e t M e s s a g e ( ) ; 
                 } 
                 r e t u r n   r e t V a l ; 
         } 
",1,1,1,-1,e,-0.00042241067,2,11,"{'url': 'link', 'e': 'je'}",MHM,298,0.15065103769302368
487,"CODE1:     public static String getGoGl(final String urlPath, String key) {         log.debug(""getGoGl url "" + urlPath);         log.debug(""getGoGl key "" + key);         String shortUrl = null;         URL simpleURL = null;         HttpsURLConnection url = null;         BufferedInputStream bStream = null;         StringBuffer resultString = new StringBuffer("""");         String inputString = ""{\""longUrl\"":\"""" + urlPath + ""\""}"";         log.debug(""getGoGl inputString "" + inputString);         try {             simpleURL = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + key);             url = (HttpsURLConnection) simpleURL.openConnection();             url.setDoOutput(true);             url.setRequestProperty(""content-type"", ""application/json"");             PrintWriter pw = new PrintWriter(url.getOutputStream());             pw.print(inputString);             pw.close();         } catch (Exception ex) {             log.error(ex);             shortUrl = urlPath;         }         try {             bStream = new BufferedInputStream(url.getInputStream());             int i;             while ((i = bStream.read()) >= 0) {                 resultString.append((char) i);             }         } catch (Exception ex) {             SocialUtils.log.error(ex);             shortUrl = urlPath;         }         return shortUrl;     }  ||CODE2:     public I18N(JApplet applet) {         if (prop != null) return;         String lang = ""en"";         try {             Properties userProperties = new Properties();             if (applet != null) {                 URL url = new URL(applet.getCodeBase() + ""logicsim.cfg"");                 userProperties.load(url.openStream());             } else {                 userProperties.load(new FileInputStream(""logicsim.cfg""));             }             if (userProperties.containsKey(""language"")) lang = userProperties.getProperty(""language"");         } catch (Exception ex) {             ex.printStackTrace();         }         prop = new Properties();         try {             if (applet != null) {                 URL url = new URL(applet.getCodeBase() + ""languages/"" + lang + "".txt"");                 prop.load(url.openStream());             } else {                 prop.load(new FileInputStream(""languages/"" + lang + "".txt""));             }         } catch (Exception ex) {             ex.printStackTrace();             try {                 if (applet != null) {                     URL url = new URL(applet.getCodeBase() + ""languages/en.txt"");                     prop.load(url.openStream());                 } else {                     prop.load(new FileInputStream(""languages/en.txt""));                 }             } catch (Exception ex2) {                 JOptionPane.showMessageDialog(null, ""Language file languages/en.txt not found.\nPlease run the program from its directory."");                 System.exit(5);             }         }     } ",253,"        p u b l i c   s t a t i c   S t r i n g   g e t G o G l ( f i n a l   S t r i n g   u r l P a t h ,   S t r i n g   k e y )   { 
                 l o g . d e b u g ( "" g e t G o G l   u r l   ""   +   u r l P a t h ) ; 
                 l o g . d e b u g ( "" g e t G o G l   k e y   ""   +   k e y ) ; 
                 S t r i n g   s h o r t U r l   =   n u l l ; 
                 U R L   s i m p l e U R L   =   n u l l ; 
                 H t t p s U R L C o n n e c t i o n   f l   =   n u l l ; 
                 B u f f e r e d I n p u t S t r e a m   b S t r e a m   =   n u l l ; 
                 S t r i n g B u f f e r   r e s u l t S t r i n g   =   n e w   S t r i n g B u f f e r ( "" "" ) ; 
                 S t r i n g   i n p u t S t r i n g   =   "" { \ "" l o n g U r l \ "" : \ "" ""   +   u r l P a t h   +   "" \ "" } "" ; 
                 l o g . d e b u g ( "" g e t G o G l   i n p u t S t r i n g   ""   +   i n p u t S t r i n g ) ; 
                 t r y   { 
                         s i m p l e U R L   =   n e w   U R L ( "" h t t p s : / / w w w . g o o g l e a p i s . c o m / u r l s h o r t e n e r / v 1 / u r l ? k e y = ""   +   k e y ) ; 
                         f l   =   ( H t t p s U R L C o n n e c t i o n )   s i m p l e U R L . o p e n C o n n e c t i o n ( ) ; 
                         f l . s e t D o O u t p u t ( t r u e ) ; 
                         f l . s e t R e q u e s t P r o p e r t y ( "" c o n t e n t - t y p e "" ,   "" a p p l i c a t i o n / j s o n "" ) ; 
                         P r i n t W r i t e r   p w   =   n e w   P r i n t W r i t e r ( f l . g e t O u t p u t S t r e a m ( ) ) ; 
                         p w . p r i n t ( i n p u t S t r i n g ) ; 
                         p w . c l o s e ( ) ; 
                 }   c a t c h   ( E x c e p t i o n   e x )   { 
                         l o g . e r r o r ( e x ) ; 
                         s h o r t U r l   =   u r l P a t h ; 
                 } 
                 t r y   { 
                         b S t r e a m   =   n e w   B u f f e r e d I n p u t S t r e a m ( f l . g e t I n p u t S t r e a m ( ) ) ; 
                         i n t   t h i s ; 
                         w h i l e   ( ( t h i s   =   b S t r e a m . r e a d ( ) )   > =   0 )   { 
                                 r e s u l t S t r i n g . a p p e n d ( ( c h a r )   t h i s ) ; 
                         } 
                 }   c a t c h   ( E x c e p t i o n   e x )   { 
                         S o c i a l U t i l s . l o g . e r r o r ( e x ) ; 
                         s h o r t U r l   =   u r l P a t h ; 
                 } 
                 r e t u r n   s h o r t U r l ; 
         } 
",0,0,0,-1,i,1.1920929e-07,2,10,"{'url': 'fl', 'i': 'this'}",MHM,303,0.15925006866455077
494,"CODE1:     private static void readAndRewrite(File inFile, File outFile) throws IOException {         ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));         DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);         Dataset ds = DcmObjectFactory.getInstance().newDataset();         dcmParser.setDcmHandler(ds.getDcmHandler());         dcmParser.parseDcmFile(null, Tags.PixelData);         PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         System.out.println(""reading "" + inFile + ""..."");         pdReader.readPixelData(false);         ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));         DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;         ds.writeDataset(out, dcmEncParam);         ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());         System.out.println(""writing "" + outFile + ""..."");         PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());         pdWriter.writePixelData();         out.flush();         out.close();         System.out.println(""done!"");     }  ||CODE2:     public boolean execute_check() {         FTPClient ftp = new FTPClient();         File filename = null;         FileChannel channel;         InputStream is;         OutputStream os;         int reply;         if (super.verbose > 0) verbose = true;         ftp.setDefaultPort(port);         ftp.setDefaultTimeout(timeout);         if (verbose) {             System.out.println(""Using FTP Server: "" + hostname);             System.out.println(""Using FTP Port: "" + port);             System.out.println(""Using Timeout of: "" + timeout);         }         if (passive) {             ftp.enterLocalPassiveMode();             if (verbose) System.out.println(""Using Passive Mode"");         }         try {             filename = new File(file);             channel = new RandomAccessFile(filename, ""rw"").getChannel();             if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);             ftp.connect(hostname);             reply = ftp.getReplyCode();             if (!FTPReply.isPositiveCompletion(reply)) {                 if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");                 check_state = common_h.STATE_CRITICAL;                 check_message = ftp.getReplyString();                 filename.delete();                 ftp.disconnect();                 return true;             }             if (username != null && password != null) {                 if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);                 if (!ftp.login(username, password)) {                     if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);                     check_state = common_h.STATE_CRITICAL;                     check_message = ftp.getReplyString();                     ftp.disconnect();                     filename.delete();                     return true;                 }             }             if (verbose) System.out.println(""Attempting to change to required directory"");             if (!ftp.changeWorkingDirectory(directory)) {                 if (verbose) System.out.println(""Required directory cannot be found!"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Attempting to retrieve specified file!"");             is = ftp.retrieveFileStream(file);             if (is == null) {                 if (verbose) System.out.println(""Unable to locate required file."");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             os = Channels.newOutputStream(channel);             byte[] buf = new byte[4096];             if (verbose) System.out.println(""Beginning File transfer..."");             for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);             if (verbose) {                 System.out.println(""...transfer complete."");                 System.out.println(""Attempting to finalise Command"");             }             if (!ftp.completePendingCommand()) {                 if (verbose) System.out.println(""Unable to finalise command"");                 check_state = common_h.STATE_WARNING;                 check_message = ftp.getReplyString();                 ftp.disconnect();                 filename.delete();                 return true;             }             if (verbose) System.out.println(""Check Completed."");             check_state = common_h.STATE_OK;             check_message = ftp.getReplyString();             is.close();             os.close();             channel.close();             filename.delete();         } catch (IOException e) {             check_state = common_h.STATE_CRITICAL;             check_message = e.getMessage();             if (filename != null) filename.delete();         } finally {             if (ftp.isConnected()) {                 try {                     ftp.logout();                     ftp.disconnect();                 } catch (Exception e) {                 }             }         }         return true;     } ",271,"        p r i v a t e   s t a t i c   v o i d   r e a d A n d R e w r i t e ( F i l e   i n F i l e ,   F i l e   o u t F i l e )   t h r o w s   I O E x c e p t i o n   { 
                 I m a g e I n p u t S t r e a m   i i s   =   I m a g e I O . c r e a t e I m a g e I n p u t S t r e a m ( n e w   B u f f e r e d I n p u t S t r e a m ( n e w   F i l e I n p u t S t r e a m ( i n F i l e ) ) ) ; 
                 D c m P a r s e r   d c m P a r s e r   =   D c m P a r s e r F a c t o r y . g e t I n s t a n c e ( ) . n e w D c m P a r s e r ( i i s ) ; 
                 D a t a s e t   p o i n t s   =   D c m O b j e c t F a c t o r y . g e t I n s t a n c e ( ) . n e w D a t a s e t ( ) ; 
                 d c m P a r s e r . s e t D c m H a n d l e r ( p o i n t s . g e t D c m H a n d l e r ( ) ) ; 
                 d c m P a r s e r . p a r s e D c m F i l e ( n u l l ,   T a g s . P i x e l D a t a ) ; 
                 P i x e l D a t a R e a d e r   p d R e a d e r   =   p d F a c t . n e w R e a d e r ( p o i n t s ,   i i s ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 S y s t e m . p a r e n t . p r i n t l n ( "" r e a d i n g   ""   +   i n F i l e   +   "" . . . "" ) ; 
                 p d R e a d e r . r e a d P i x e l D a t a ( f a l s e ) ; 
                 I m a g e O u t p u t S t r e a m   p a r e n t   =   I m a g e I O . c r e a t e I m a g e O u t p u t S t r e a m ( n e w   B u f f e r e d O u t p u t S t r e a m ( n e w   F i l e O u t p u t S t r e a m ( o u t F i l e ) ) ) ; 
                 D c m E n c o d e P a r a m   d c m E n c P a r a m   =   D c m E n c o d e P a r a m . I V R _ L E ; 
                 p o i n t s . w r i t e D a t a s e t ( p a r e n t ,   d c m E n c P a r a m ) ; 
                 p o i n t s . w r i t e H e a d e r ( p a r e n t ,   d c m E n c P a r a m ,   T a g s . P i x e l D a t a ,   d c m P a r s e r . g e t R e a d V R ( ) ,   d c m P a r s e r . g e t R e a d L e n g t h ( ) ) ; 
                 S y s t e m . p a r e n t . p r i n t l n ( "" w r i t i n g   ""   +   o u t F i l e   +   "" . . . "" ) ; 
                 P i x e l D a t a W r i t e r   p d W r i t e r   =   p d F a c t . n e w W r i t e r ( p d R e a d e r . g e t P i x e l D a t a A r r a y ( ) ,   f a l s e ,   p o i n t s ,   p a r e n t ,   d c m P a r s e r . g e t D c m D e c o d e P a r a m ( ) . b y t e O r d e r ,   d c m P a r s e r . g e t R e a d V R ( ) ) ; 
                 p d W r i t e r . w r i t e P i x e l D a t a ( ) ; 
                 p a r e n t . f l u s h ( ) ; 
                 p a r e n t . c l o s e ( ) ; 
                 S y s t e m . p a r e n t . p r i n t l n ( "" d o n e ! "" ) ; 
         } 
",0,0,0,-1,out,-1.1920929e-07,2,15,"{'out': 'parent', 'ds': 'points'}",MHM,316,0.1565665562947591
