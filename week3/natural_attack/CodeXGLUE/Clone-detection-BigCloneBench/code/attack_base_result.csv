Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,No. Changed Names,No. Changed Tokens,Replaced Names,Attack Type,Query Times,Time Cost
0,"['19660893', '1332258', '    private String load(URL url) {\n        BufferedReader r = null;\n        try {\n            r = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buf = new StringBuffer();\n            while (r.ready()) {\n                buf.append(r.readLine()).append(\'\\n\');\n            }\n            r.close();\n            return buf.toString();\n        } catch (IOException e) {\n            logger.severe(""Could not load shader program: "" + e);\n            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);\n            return null;\n        }\n    }\n', '    public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(""Stream not closed"");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }\n']",128,"    private String load(URL config) {
        BufferedReader err = null;
        try {
            err = new BufferedReader(new InputStreamReader(config.openStream()));
            StringBuffer f = new StringBuffer();
            while (err.ready()) {
                f.append(err.readLine()).append('
');
            }
            err.close();
            return f.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0,0,0,-1,"url,r,buf","url:4.500150680541992e-05,r:2.9206275939941406e-05,buf:-1.1920928955078125e-05,",3,10,"url:config,r:err,buf:f,",Greedy,146,0.09411826133728027
1,"['678400', '691789', '    public void go() {\n        DataOutputStream outStream = null;\n        try {\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setRequestMethod(""POST"");\n            connection.setRequestProperty(""Content-Length"", new Integer(sendData.length()).toString());\n            connection.setRequestProperty(""Content-type"", ""text/html"");\n            connection.setRequestProperty(""User-Agent"", ""Pago HTTP cartridge"");\n            outStream = new DataOutputStream(connection.getOutputStream());\n            outStream.writeBytes(sendData);\n            System.out.println(1);\n            InputStream is = connection.getInputStream();\n            System.out.println(2);\n            inReader = new BufferedReader(new InputStreamReader(is));\n            String result;\n            System.out.println(3);\n            if ((result = inReader.readLine()) != null) {\n                System.out.println(result);\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n            System.exit(0);\n        } finally {\n            try {\n                if (outStream != null) outStream.close();\n                if (inReader != null) inReader.close();\n            } catch (IOException ioe) {\n                System.err.println(""Error closing Streams!"");\n                ioe.printStackTrace();\n            }\n            connection.disconnect();\n        }\n    }\n', '    public void bubbleSort(int[] arr) {\n        BasicProcessor.getInstance().getStartBlock();\n        BasicProcessor.getInstance().getVarDeclaration();\n        boolean swapped = true;\n        BasicProcessor.getInstance().getVarDeclaration();\n        int j = 0;\n        BasicProcessor.getInstance().getVarDeclaration();\n        int tmp;\n        {\n            BasicProcessor.getInstance().getWhileStatement();\n            while (swapped) {\n                BasicProcessor.getInstance().getStartBlock();\n                swapped = false;\n                j++;\n                {\n                    BasicProcessor.getInstance().getForStatement();\n                    for (int i = 0; i < arr.length - j; i++) {\n                        BasicProcessor.getInstance().getStartBlock();\n                        {\n                            BasicProcessor.getInstance().getIfStatement();\n                            if (arr[i] > arr[i + 1]) {\n                                BasicProcessor.getInstance().getStartBlock();\n                                tmp = arr[i];\n                                arr[i] = arr[i + 1];\n                                arr[i + 1] = tmp;\n                                swapped = true;\n                                BasicProcessor.getInstance().getEndBlock();\n                            }\n                        }\n                        BasicProcessor.getInstance().getEndBlock();\n                    }\n                }\n                BasicProcessor.getInstance().getEndBlock();\n            }\n        }\n        BasicProcessor.getInstance().getEndBlock();\n    }\n']",273,"    public void go() {
        DataOutputStream upstream = null;
        try {
            connect = (HttpURLConnection) url.openConnection();
            connect.setDoOutput(true);
            connect.setDoInput(true);
            connect.setRequestMethod(""POST"");
            connect.setRequestProperty(""Content-Length"", new Integer(sendData.length()).toString());
            connect.setRequestProperty(""Content-type"", ""text/html"");
            connect.setRequestProperty(""User-Agent"", ""Pago HTTP cartridge"");
            upstream = new DataOutputStream(connect.getOutputStream());
            upstream.writeBytes(sendData);
            System.out.println(1);
            InputStream api = connect.getInputStream();
            System.out.println(2);
             inStream = new BufferedReader(new InputStreamReader(api));
            String row;
            System.out.println(3);
            if ((row =  inStream.readLine()) != null) {
                System.out.println(row);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
            System.exit(0);
        } finally {
            try {
                if (upstream != null) upstream.close();
                if ( inStream != null)  inStream.close();
            } catch (IOException ioe) {
                System.err.println(""Error closing Streams!"");
                ioe.printStackTrace();
            }
            connect.disconnect();
        }
    }
",0,0,0,-1,"outStream,connection,is,inReader,result","outStream:0.0,connection:-2.2649765014648438e-06,is:8.165836334228516e-06,inReader:0.0,result:8.106231689453125e-06,",5,24,"is:api,result:row,outStream:upstream,inReader: inStream,connection:connect,",Greedy,269,0.12411615053812662
2,"['20004216', '21413102', '        public boolean check(Object credentials) {\n            String password = (credentials instanceof String) ? (String) credentials : credentials.toString();\n            try {\n                MessageDigest md = MessageDigest.getInstance(""MD5"");\n                byte[] ha1;\n                if (credentials instanceof Credential.MD5) {\n                    ha1 = ((Credential.MD5) credentials).getDigest();\n                } else {\n                    md.update(username.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(realm.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    ha1 = md.digest();\n                }\n                md.reset();\n                md.update(method.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(uri.getBytes(StringUtil.__ISO_8859_1));\n                byte[] ha2 = md.digest();\n                md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nc.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(qop.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));\n                byte[] digest = md.digest();\n                return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));\n            } catch (Exception e) {\n                log.warn(LogSupport.EXCEPTION, e);\n            }\n            return false;\n        }\n', '    private static byte[] getHashBytes(String data, String algorithm) {\n        MessageDigest md;\n        byte[] digest = null;\n        try {\n            md = MessageDigest.getInstance(algorithm);\n            md.update(data.getBytes(""UTF-8""), 0, data.length());\n            digest = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n        } catch (UnsupportedEncodingException e) {\n        }\n        return digest;\n    }\n']",399,"        public boolean check(Object carguration) {
            String ssh = (carguration instanceof String) ? (String) carguration : carguration.toString();
            try {
                MessageDigest kg = MessageDigest.getInstance(""MD5"");
                byte[] HAOne;
                if (carguration instanceof Credential.MD5) {
                    HAOne = ((Credential.MD5) carguration).getDigest();
                } else {
                    kg.update(username.getBytes(StringUtil.__ISO_8859_1));
                    kg.update((byte) ':');
                    kg.update(realm.getBytes(StringUtil.__ISO_8859_1));
                    kg.update((byte) ':');
                    kg.update(ssh.getBytes(StringUtil.__ISO_8859_1));
                    HAOne = kg. digester();
                }
                kg.reset();
                kg.update(method.getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(uri.getBytes(StringUtil.__ISO_8859_1));
                byte[] sha0 = kg. digester();
                kg.update(TypeUtil.toString(HAOne, 16).getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(nonce.getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(nc.getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(cnonce.getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(qop.getBytes(StringUtil.__ISO_8859_1));
                kg.update((byte) ':');
                kg.update(TypeUtil.toString(sha0, 16).getBytes(StringUtil.__ISO_8859_1));
                byte[]  digester = kg. digester();
                return (TypeUtil.toString( digester, 16).equalsIgnoreCase(response));
            } catch (Exception e) {
                log.warn(LogSupport.EXCEPTION, e);
            }
            return false;
        }
",1,1,1,-1,"credentials,password,md,ha1,ha2,digest","credentials:0.0,password:-0.03525233268737793,md:0.49634695053100586,ha1:4.76837158203125e-07,ha2:2.384185791015625e-07,digest:5.960464477539062e-07,",6,43,"md:kg,digest: digester,ha1:HAOne,ha2:sha0,credentials:carguration,password:ssh,",Greedy,340,0.15877360900243123
3,"['11719103', '12631774', '    public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""SHA-1"");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (final Exception e) {\n            return null;\n        }\n    }\n', '    public static String getMd5Hash(String plaintext) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(plaintext.getBytes());\n            byte[] digest = md5.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = ""0"" + hashtext;\n            }\n            return hashtext;\n        } catch (final NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return """";\n    }\n']",88,"    public static String hash(final String url) {
        try {
            MessageDigest ld;
            ld = MessageDigest.getInstance(""SHA-1"");
            byte[] shaonecache = new byte[40];
            ld.update(url.getBytes(""iso-8859-1""), 0, url.length());
            shaonecache = ld.digest();
            return Sha1.convertToHex(shaonecache);
        } catch (final Exception e) {
            return null;
        }
    }
",1,1,1,-1,"text,md,sha1hash","text:-1.7881393432617188e-06,md:1.33514404296875e-05,sha1hash:0.0,",3,10,"md:ld,sha1hash:shaonecache,text:url,",Greedy,156,0.06564635833104451
4,"['10195648', '3613198', '    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");\n            System.exit(1);\n        }\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream in = new FileInputStream(args[1]);\n            int len = 0;\n            byte buf[] = new byte[1024];\n            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);\n            in.close();\n            os.close();\n            byte[] data = null;\n            if (args[0].equals(""dec"")) data = decode(os.toString()); else {\n                String strData = encode(os.toByteArray());\n                data = strData.getBytes();\n            }\n            FileOutputStream fos = new FileOutputStream(args[2]);\n            fos.write(data);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",210,"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream ini = new FileInputStream(args[1]);
            int url = 0;
            byte buf[] = new byte[1024];
            while ((url = ini.read(buf)) > 0) os.write(buf, 0, url);
            ini.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"os,in,len,buf,data,strData,fos","os:0.13503462076187134,in:0.03902125358581543,len:-0.12287616729736328,buf:0.30763959884643555,data:0.006464064121246338,strData:0.0,fos:0.0,",2,6,"buf:buf,os:os,in:ini,data:data,strData:strData,fos:fos,len:url,",Greedy,335,0.1323313037554423
5,"['1218380', '6066145', '    public static void main(String[] args) {\n        try {\n            Object o = Naming.lookup(""Server"");\n            IServer serverStub = (IServer) o;\n            File srcDir = new File(args[0]);\n            File dstDir = new File(args[1]);\n            File[] srcFiles = srcDir.listFiles();\n            long position = 0;\n            for (File f : srcFiles) {\n                if (f.isDirectory()) continue;\n                try {\n                    FileChannel srcChannel = new FileInputStream(f).getChannel();\n                    String fileName = dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();\n                    FileChannel dstChannel = new FileOutputStream(fileName).getChannel();\n                    System.out.println(""Coping "" + fileName);\n                    ByteBuffer buffer = ByteBuffer.allocate(65536);\n                    int nr = 0;\n                    srcChannel.position(nr);\n                    nr = srcChannel.read(buffer);\n                    while (nr > -1) {\n                        buffer.flip();\n                        byte[] bytes = new byte[buffer.limit()];\n                        buffer.get(bytes);\n                        position = serverStub.write(bytes, position);\n                        buffer.clear();\n                        nr = srcChannel.read(buffer);\n                    }\n                    System.out.println(""Done "");\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void copy(String source, String target) throws IOException {\n        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();\n        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();\n        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n    }\n']",323,"    public static void main(String[] args) {
        try {
            Object or = Naming.lookup(""Server"");
            IServer serverstub = (IServer) or;
            File rcFolder = new File(args[0]);
            File destDir = new File(args[1]);
            File[] sourceDir = rcFolder.listFiles();
            long manager = 0;
            for (File fc : sourceDir) {
                if (fc.isDirectory()) continue;
                try {
                    FileChannel remoteClient = new FileInputStream(fc).getChannel();
                    String FileUrl = destDir.getAbsolutePath() + System.getProperty(""file.separator"") + fc.getName();
                    FileChannel ddestConnection = new FileOutputStream(FileUrl).getChannel();
                    System.out.println(""Coping "" + FileUrl);
                    ByteBuffer buffer = ByteBuffer.allocate(65536);
                    int counter = 0;
                    remoteClient.manager(counter);
                    counter = remoteClient.read(buffer);
                    while (counter > -1) {
                        buffer.flip();
                        byte[] bc = new byte[buffer.limit()];
                        buffer.get(bc);
                        manager = serverstub.write(bc, manager);
                        buffer.clear();
                        counter = remoteClient.read(buffer);
                    }
                    System.out.println(""Done "");
                    remoteClient.close();
                    ddestConnection.close();
                } catch (IOException e) {
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (NotBoundException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"o,serverStub,srcDir,dstDir,srcFiles,position,f,srcChannel,fileName,dstChannel,buffer,nr,bytes","o:9.417533874511719e-06,serverStub:0.0,srcDir:0.0,dstDir:0.0,srcFiles:0.0,position:1.3113021850585938e-06,f:3.1828880310058594e-05,srcChannel:0.0,fileName:0.0,dstChannel:0.0,buffer:4.76837158203125e-06,nr:3.5762786865234375e-07,bytes:9.417533874511719e-06,",12,36,"f:fc,o:or,bytes:bc,buffer:buffer,position:manager,nr:counter,serverStub:serverstub,srcDir:rcFolder,dstDir:destDir,srcFiles:sourceDir,srcChannel:remoteClient,fileName:FileUrl,dstChannel:ddestConnection,",Greedy,562,0.25257877111434934
6,"['22024581', '5707204', '    private static Collection<String> crossCheckFromOBOFile(String category) throws Exception {\n        Collection<String> miCol = new ArrayList<String>();\n        String revision = ""1.48"";\n        URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + ""?revision="" + revision);\n        log.debug(""url "" + url);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String inputLine;\n        int termCounter = 0;\n        int miCounter = 0;\n        int obsoleteCounter = 0;\n        int obsoleteCounterDef = 0;\n        int typedefCounter = 0;\n        int drugTerm = 0;\n        int psiTerm = 0;\n        String mi = null;\n        while ((inputLine = in.readLine()) != null) {\n            String temp;\n            temp = inputLine;\n            if (inputLine.startsWith(""[Term]"")) {\n                termCounter++;\n            } else if (inputLine.matches(""id:\\\\s+(MI:.*)"")) {\n                mi = temp.split(""\\\\s+"")[1];\n                miCounter++;\n            } else if (inputLine.contains(""is_obsolete: true"")) {\n                obsoleteCounter++;\n            } else if (inputLine.matches(""def:.*?OBSOLETE.*"")) {\n                obsoleteCounterDef++;\n            } else if (inputLine.startsWith(""[Typedef]"")) {\n                typedefCounter++;\n            } else if (inputLine.matches(""subset:\\\\s+PSI-MI\\\\s+slim"")) {\n                psiTerm++;\n                if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) miCol.add(mi);\n            } else if (inputLine.matches(""subset:\\\\s+Drugable"")) {\n                drugTerm++;\n                if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) miCol.add(mi);\n            }\n        }\n        Assert.assertEquals(948, termCounter);\n        Assert.assertEquals(948, miCounter);\n        Assert.assertEquals(53, obsoleteCounter);\n        Assert.assertEquals(53, obsoleteCounterDef);\n        Assert.assertEquals(1, typedefCounter);\n        Assert.assertEquals(844, psiTerm);\n        Assert.assertEquals(124, drugTerm);\n        in.close();\n        return miCol;\n    }\n', '    public void download(final String url, final long deleteRowId) {\n        new Thread(new Runnable() {\n\n            public void run() {\n                Log.d(LOG_TAG, ""Fetching "" + url);\n                WebDbAdapter dbHelper = new WebDbAdapter(mContext);\n                dbHelper.open();\n                boolean errorOccurred = true;\n                int notifyId = 0;\n                String host = AppUtils.getHostFromUrl(url);\n                try {\n                    if (host == null) {\n                        Log.d(LOG_TAG, ""Bad url "" + url);\n                        errorOccurred = true;\n                    } else {\n                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);\n                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));\n                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);\n                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);\n                        URI uri = new URI(url);\n                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);\n                        norm = norm.normalize();\n                        HttpUriRequest get = new HttpGet(norm);\n                        HttpResponse response = ahc.execute(get);\n                        if (response.getStatusLine().getStatusCode() == 200) {\n                            HttpEntity entity = response.getEntity();\n                            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                            entity.writeTo(baos);\n                            String data = baos.toString();\n                            for (int i = 0; i < undesirables.length; i++) {\n                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n                                data = data.replaceAll(p.pattern(), """");\n                            }\n                            long sysMillis = System.currentTimeMillis();\n                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));\n                            FileOutputStream strm = new FileOutputStream(newFileName);\n                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);\n                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);\n                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);\n                            strm.write(jsData.getBytes());\n                            strm.write(data.getBytes());\n                            strm.write(jsData.getBytes());\n                            strm.flush();\n                            strm.close();\n                            String entryName = getTitle(newFileName, url);\n                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);\n                            postToast(""Downloaded \\"""" + entryName + ""\\"""");\n                            errorOccurred = false;\n                            if (deleteRowId != 0) {\n                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);\n                                dbHelper.deleteEntry(deleteRowId);\n                                if (url == null) postToast(""Item Deleted"");\n                                mContext.startActivity(new Intent(mContext, RetainActivity.class));\n                            } else {\n                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);\n                            }\n                        } else {\n                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));\n                        }\n                    }\n                } catch (IOException ioe) {\n                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());\n                } catch (URISyntaxException u) {\n                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());\n                } catch (OutOfMemoryError oome) {\n                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());\n                } catch (Exception e) {\n                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());\n                }\n                hideNotification(notifyId);\n                if (errorOccurred && host != null) {\n                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);\n                    postToast(""Error fetching "" + host);\n                }\n                dbHelper.close();\n            }\n        }).start();\n    }\n']",396,"    private static Collection<String> crossCheckFromOBOFile(String directory) throws Exception {
        Collection<String> MICor = new ArrayList<String>();
        String revolution = ""1.48"";
        URL stream = new URL(OboUtils.PSI_MI_OBO_LOCATION + ""?revision="" + revolution);
        log.debug(""url "" + stream);
        BufferedReader in = new BufferedReader(new InputStreamReader(stream.openStream()));
        String loadline;
        int wordClock = 0;
        int mmTimer = 0;
        int obsoleteCounter = 0;
        int obsoleteCounterDef = 0;
        int typediffCounter = 0;
        int DrugTer = 0;
        int psiOffset = 0;
        String tc = null;
        while ((loadline = in.readLine()) != null) {
            String empty;
            empty = loadline;
            if (loadline.startsWith(""[Term]"")) {
                wordClock++;
            } else if (loadline.matches(""id:\\s+(MI:.*)"")) {
                tc = empty.split(""\\s+"")[1];
                mmTimer++;
            } else if (loadline.contains(""is_obsolete: true"")) {
                obsoleteCounter++;
            } else if (loadline.matches(""def:.*?OBSOLETE.*"")) {
                obsoleteCounterDef++;
            } else if (loadline.startsWith(""[Typedef]"")) {
                typediffCounter++;
            } else if (loadline.matches(""subset:\\s+PSI-MI\\s+slim"")) {
                psiOffset++;
                if (directory.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) MICor.add(tc);
            } else if (loadline.matches(""subset:\\s+Drugable"")) {
                DrugTer++;
                if (directory.equalsIgnoreCase(OboCategory.DRUGABLE)) MICor.add(tc);
            }
        }
        Assert.assertEquals(948, wordClock);
        Assert.assertEquals(948, mmTimer);
        Assert.assertEquals(53, obsoleteCounter);
        Assert.assertEquals(53, obsoleteCounterDef);
        Assert.assertEquals(1, typediffCounter);
        Assert.assertEquals(844, psiOffset);
        Assert.assertEquals(124, DrugTer);
        in.close();
        return MICor;
    }
",0,0,0,-1,"category,miCol,revision,url,in,inputLine,termCounter,miCounter,obsoleteCounter,obsoleteCounterDef,typedefCounter,drugTerm,psiTerm,mi,temp","category:-3.075599670410156e-05,miCol:0.0,revision:0.0,url:0.00013720989227294922,in:1.5139579772949219e-05,inputLine:0.0,termCounter:0.0,miCounter:0.0,obsoleteCounter:0.0,obsoleteCounterDef:0.0,typedefCounter:0.0,drugTerm:0.0,psiTerm:0.0,mi:6.556510925292969e-06,temp:-2.384185791015625e-07,",12,45,"url:stream,in:in,mi:tc,miCol:MICor,revision:revolution,inputLine:loadline,termCounter:wordClock,miCounter:mmTimer,obsoleteCounter:obsoleteCounter,obsoleteCounterDef:obsoleteCounterDef,typedefCounter:typediffCounter,drugTerm:DrugTer,psiTerm:psiOffset,temp:empty,category:directory,",Greedy,710,0.3307484785715739
7,"['13433285', '473797', '    public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash = new byte[FOUR_BYTES];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",74,"    public static String md5(final String string) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest mod = MessageDigest.getInstance(""MD5"");
        byte[] MD5Hash = new byte[FOUR_BYTES];
        mod.update(string.getBytes(""iso-8859-1""), 0, string.length());
        MD5Hash = mod.digest();
        return convertToHex(MD5Hash);
    }
",0,0,0,-1,"text,md,md5hash","text:5.9604644775390625e-06,md:0.000784754753112793,md5hash:0.0,",3,9,"md:mod,text:string,md5hash:MD5Hash,",Greedy,141,0.06565383672714234
8,"['9980609', '5936410', '    public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException {\n        if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) {\n            return;\n        }\n        final boolean filterSetsAvailable = (filters != null && filters.hasFilters());\n        final boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0);\n        if (filterSetsAvailable) {\n            BufferedReader in = null;\n            BufferedWriter out = null;\n            try {\n                InputStreamReader isr = null;\n                if (inputEncoding == null) {\n                    isr = new InputStreamReader(source.getInputStream());\n                } else {\n                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);\n                }\n                in = new BufferedReader(isr);\n                OutputStream os = getOutputStream(dest, append, project);\n                OutputStreamWriter osw;\n                if (outputEncoding == null) {\n                    osw = new OutputStreamWriter(os);\n                } else {\n                    osw = new OutputStreamWriter(os, outputEncoding);\n                }\n                out = new BufferedWriter(osw);\n                if (filterChainsAvailable) {\n                    ChainReaderHelper crh = new ChainReaderHelper();\n                    crh.setBufferSize(FileUtils.BUF_SIZE);\n                    crh.setPrimaryReader(in);\n                    crh.setFilterChains(filterChains);\n                    crh.setProject(project);\n                    Reader rdr = crh.getAssembledReader();\n                    in = new BufferedReader(rdr);\n                }\n                LineTokenizer lineTokenizer = new LineTokenizer();\n                lineTokenizer.setIncludeDelims(true);\n                String newline = null;\n                String line = lineTokenizer.getToken(in);\n                while (line != null) {\n                    if (line.length() == 0) {\n                        out.newLine();\n                    } else {\n                        newline = filters.replaceTokens(line);\n                        out.write(newline);\n                    }\n                    line = lineTokenizer.getToken(in);\n                }\n            } finally {\n                FileUtils.close(out);\n                FileUtils.close(in);\n            }\n        } else if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) {\n            BufferedReader in = null;\n            BufferedWriter out = null;\n            try {\n                InputStreamReader isr = null;\n                if (inputEncoding == null) {\n                    isr = new InputStreamReader(source.getInputStream());\n                } else {\n                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);\n                }\n                in = new BufferedReader(isr);\n                OutputStream os = getOutputStream(dest, append, project);\n                OutputStreamWriter osw;\n                if (outputEncoding == null) {\n                    osw = new OutputStreamWriter(os);\n                } else {\n                    osw = new OutputStreamWriter(os, outputEncoding);\n                }\n                out = new BufferedWriter(osw);\n                if (filterChainsAvailable) {\n                    ChainReaderHelper crh = new ChainReaderHelper();\n                    crh.setBufferSize(FileUtils.BUF_SIZE);\n                    crh.setPrimaryReader(in);\n                    crh.setFilterChains(filterChains);\n                    crh.setProject(project);\n                    Reader rdr = crh.getAssembledReader();\n                    in = new BufferedReader(rdr);\n                }\n                char[] buffer = new char[FileUtils.BUF_SIZE];\n                while (true) {\n                    int nRead = in.read(buffer, 0, buffer.length);\n                    if (nRead == -1) {\n                        break;\n                    }\n                    out.write(buffer, 0, nRead);\n                }\n            } finally {\n                FileUtils.close(out);\n                FileUtils.close(in);\n            }\n        } else if (source.as(FileProvider.class) != null && dest.as(FileProvider.class) != null) {\n            File sourceFile = ((FileProvider) source.as(FileProvider.class)).getFile();\n            File destFile = ((FileProvider) dest.as(FileProvider.class)).getFile();\n            File parent = destFile.getParentFile();\n            if (parent != null && !parent.isDirectory() && !destFile.getParentFile().mkdirs()) {\n                throw new IOException(""failed to create the parent directory"" + "" for "" + destFile);\n            }\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            FileChannel srcChannel = null;\n            FileChannel destChannel = null;\n            try {\n                in = new FileInputStream(sourceFile);\n                out = new FileOutputStream(destFile);\n                srcChannel = in.getChannel();\n                destChannel = out.getChannel();\n                long position = 0;\n                long count = srcChannel.size();\n                while (position < count) {\n                    position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel);\n                }\n            } finally {\n                FileUtils.close(srcChannel);\n                FileUtils.close(destChannel);\n                FileUtils.close(out);\n                FileUtils.close(in);\n            }\n        } else {\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = source.getInputStream();\n                out = getOutputStream(dest, append, project);\n                byte[] buffer = new byte[FileUtils.BUF_SIZE];\n                int count = 0;\n                do {\n                    out.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            } finally {\n                FileUtils.close(out);\n                FileUtils.close(in);\n            }\n        }\n        if (preserveLastModified) {\n            Touchable t = (Touchable) dest.as(Touchable.class);\n            if (t != null) {\n                setLastModified(t, source.getLastModified());\n            }\n        }\n    }\n', '    public void run() {\n        try {\n            String getter = null;\n            String str, targetHost = """", httpHeader = """";\n            int targetPort = 80;\n            while (true) {\n                str = fromBrowser.readLine();\n                if (str.startsWith(""GET"") || str.startsWith(""DESCRIBE"") || str.startsWith(""POST"") || str.startsWith(""HEAD"")) {\n                    getter = str;\n                }\n                if (str.startsWith(""Accept-Encoding: gzip"")) {\n                    str = ""Accept-Encoding: identity"";\n                }\n                httpHeader += str + ""\\r\\n"";\n                if (str.startsWith(""Host: "")) {\n                    targetHost = str.substring(6);\n                } else if (str.startsWith(""DESCRIBE"")) {\n                    targetPort = 554;\n                    targetHost = str.substring(str.indexOf(""//"") + 2);\n                    targetHost = targetHost.substring(0, targetHost.indexOf(""/""));\n                }\n                if (str.length() == 0) {\n                    break;\n                }\n            }\n            String target = targetHost;\n            if (targetHost.indexOf("":"") > -1) {\n                try {\n                    targetPort = Integer.parseInt(targetHost.substring(targetHost.indexOf("":"") + 1));\n                } catch (NumberFormatException nfe) {\n                }\n                target = targetHost.substring(0, targetHost.indexOf("":""));\n            }\n            logger.trace(""[PROXY] Connect to: "" + target + "" and port: "" + targetPort);\n            socketToWeb = new Socket(InetAddress.getByName(target), targetPort);\n            InputStream sockWebInputStream = socketToWeb.getInputStream();\n            toWeb = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socketToWeb.getOutputStream())), true);\n            toWeb.println(httpHeader);\n            toWeb.flush();\n            StringTokenizer st = new StringTokenizer(getter, "" "");\n            st.nextToken();\n            String askedResource = st.nextToken();\n            askedResource = askedResource.substring(askedResource.indexOf(targetHost) + targetHost.length());\n            logger.trace(""[PROXY] Asked resource: "" + askedResource);\n            String directoryResource = askedResource.substring(0, askedResource.lastIndexOf(""/""));\n            directoryResource = getWritableFileName(directoryResource);\n            String fileResource = askedResource.substring(askedResource.lastIndexOf(""/"") + 1);\n            fileResource = getWritableFileName(fileResource);\n            fileResource = fileResource + "".cached"";\n            String fileN = ""proxycache/"" + target + ""/"" + directoryResource;\n            File directoryResourceFile = new File(fileN);\n            if (writeCache) {\n                directoryResourceFile.mkdirs();\n            }\n            File cachedResource = new File(directoryResourceFile, fileResource);\n            byte[] buffer = new byte[8192];\n            boolean resourceExists = cachedResource.exists() || this.getClass().getResource(""/"" + fileN) != null;\n            boolean inMemory = writeCache && !resourceExists;\n            FileOutputStream fOUT = null;\n            if (resourceExists) {\n                logger.trace(""[PROXY] File is cached: "" + cachedResource.getAbsolutePath());\n                sockWebInputStream.close();\n                if (cachedResource.exists()) {\n                    sockWebInputStream = new FileInputStream(cachedResource);\n                } else {\n                    sockWebInputStream = this.getClass().getResourceAsStream(""/"" + fileN);\n                }\n            } else if (writeCache) {\n                logger.trace(""[PROXY] File is not cached / Writing in it: "" + cachedResource.getAbsolutePath());\n                fOUT = new FileOutputStream(cachedResource, false);\n            }\n            OutputStream baos = null;\n            if (inMemory) {\n                baos = new ByteArrayOutputStream();\n            } else {\n                baos = toBrowser;\n            }\n            long total_read = 0;\n            int bytes_read;\n            long CL = 10000000000L;\n            while (total_read < CL && (bytes_read = sockWebInputStream.read(buffer)) != -1) {\n                if (!resourceExists) {\n                    if (10000000000L == CL) {\n                        String s = new String(buffer, 0, bytes_read);\n                        int clPos = s.indexOf(""Content-Length: "");\n                        if (clPos > -1) {\n                            CL = Integer.parseInt(s.substring(clPos + 16, s.indexOf(""\\n"", clPos)).trim());\n                            logger.trace(""Found Content Length: "" + CL);\n                        }\n                    }\n                    if (bytes_read >= 7) {\n                        byte end[] = new byte[7];\n                        System.arraycopy(buffer, bytes_read - 7, end, 0, 7);\n                        if (new String(end).equals(""\\r\\n0\\r\\n\\r\\n"")) {\n                            System.out.println(""end of transfer chunked"");\n                            CL = -1;\n                        }\n                    }\n                    if (writeCache) {\n                        fOUT.write(buffer, 0, bytes_read);\n                    }\n                }\n                baos.write(buffer, 0, bytes_read);\n                total_read += bytes_read;\n            }\n            if (inMemory) {\n                baos.close();\n                toBrowser.write(((ByteArrayOutputStream) baos).toByteArray());\n            }\n            if (writeCache && fOUT != null) {\n                fOUT.close();\n            }\n            socketToWeb.close();\n            toBrowser.close();\n        } catch (IOException e) {\n        } finally {\n            try {\n                if (toWeb != null) {\n                    toWeb.close();\n                }\n                if (toBrowser != null) {\n                    toBrowser.close();\n                }\n                socket.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",1056,"    public static void copyResource(Resource source, Resource temp, FilterSetCollection filter, Vector sortChain, boolean  override, boolean preserveLastModified, boolean write, String inputEncoding, String inputChilling, Project document) throws IOException {
        if (!( override || SelectorUtils.isOutOfDate(source, temp, FileUtils.getFileUtils().getFileTimestampGranularity()))) {
            return;
        }
        final boolean filterShetsavailable = (filter != null && filter.hasFilters());
        final boolean filterChinesavailable = (sortChain != null && sortChain.size() > 0);
        if (filterShetsavailable) {
            BufferedReader url = null;
            BufferedWriter out = null;
            try {
                InputStreamReader asw = null;
                if (inputEncoding == null) {
                    asw = new InputStreamReader(source.getInputStream());
                } else {
                    asw = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                url = new BufferedReader(asw);
                OutputStream os = getOutputStream(temp, write, document);
                OutputStreamWriter osnw;
                if (inputChilling == null) {
                    osnw = new OutputStreamWriter(os);
                } else {
                    osnw = new OutputStreamWriter(os, inputChilling);
                }
                out = new BufferedWriter(osnw);
                if (filterChinesavailable) {
                    ChainReaderHelper cfhs = new ChainReaderHelper();
                    cfhs.setBufferSize(FileUtils.BUF_SIZE);
                    cfhs.setPrimaryReader(url);
                    cfhs.setFilterChains(sortChain);
                    cfhs.setProject(document);
                    Reader rdr = cfhs.getAssembledReader();
                    url = new BufferedReader(rdr);
                }
                LineTokenizer lineTokenizer = new LineTokenizer();
                lineTokenizer.setIncludeDelims(true);
                String newline = null;
                String url = lineTokenizer.getToken(url);
                while (url != null) {
                    if (url.length() == 0) {
                        out.newLine();
                    } else {
                        newline = filter.replaceTokens(url);
                        out.write(newline);
                    }
                    url = lineTokenizer.getToken(url);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(url);
            }
        } else if (filterChinesavailable || (inputEncoding != null && !inputEncoding.equals(inputChilling)) || (inputEncoding == null && inputChilling != null)) {
            BufferedReader url = null;
            BufferedWriter out = null;
            try {
                InputStreamReader asw = null;
                if (inputEncoding == null) {
                    asw = new InputStreamReader(source.getInputStream());
                } else {
                    asw = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                url = new BufferedReader(asw);
                OutputStream os = getOutputStream(temp, write, document);
                OutputStreamWriter osnw;
                if (inputChilling == null) {
                    osnw = new OutputStreamWriter(os);
                } else {
                    osnw = new OutputStreamWriter(os, inputChilling);
                }
                out = new BufferedWriter(osnw);
                if (filterChinesavailable) {
                    ChainReaderHelper cfhs = new ChainReaderHelper();
                    cfhs.setBufferSize(FileUtils.BUF_SIZE);
                    cfhs.setPrimaryReader(url);
                    cfhs.setFilterChains(sortChain);
                    cfhs.setProject(document);
                    Reader rdr = cfhs.getAssembledReader();
                    url = new BufferedReader(rdr);
                }
                char[] buffer = new char[FileUtils.BUF_SIZE];
                while (true) {
                    int nRead = url.read(buffer, 0, buffer.length);
                    if (nRead == -1) {
                        break;
                    }
                    out.write(buffer, 0, nRead);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(url);
            }
        } else if (source.as(FileProvider.class) != null && temp.as(FileProvider.class) != null) {
            File sourceFile = ((FileProvider) source.as(FileProvider.class)).getFile();
            File destFile = ((FileProvider) temp.as(FileProvider.class)).getFile();
            File parent = destFile.getParentFile();
            if (parent != null && !parent.isDirectory() && !destFile.getParentFile().mkdirs()) {
                throw new IOException(""failed to create the parent directory"" + "" for "" + destFile);
            }
            FileInputStream url = null;
            FileOutputStream out = null;
            FileChannel srcChannel = null;
            FileChannel destChannel = null;
            try {
                url = new FileInputStream(sourceFile);
                out = new FileOutputStream(destFile);
                srcChannel = url.getChannel();
                destChannel = out.getChannel();
                long position = 0;
                long count = srcChannel.size();
                while (position < count) {
                    position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel);
                }
            } finally {
                FileUtils.close(srcChannel);
                FileUtils.close(destChannel);
                FileUtils.close(out);
                FileUtils.close(url);
            }
        } else {
            InputStream url = null;
            OutputStream out = null;
            try {
                url = source.getInputStream();
                out = getOutputStream(temp, write, document);
                byte[] buffer = new byte[FileUtils.BUF_SIZE];
                int count = 0;
                do {
                    out.write(buffer, 0, count);
                    count = url.read(buffer, 0, buffer.length);
                } while (count != -1);
            } finally {
                FileUtils.close(out);
                FileUtils.close(url);
            }
        }
        if (preserveLastModified) {
            Touchable t = (Touchable) temp.as(Touchable.class);
            if (t != null) {
                setLastModified(t, source.getLastModified());
            }
        }
    }
",1,1,0,1,"source,dest,filters,filterChains,overwrite,preserveLastModified,append,inputEncoding,outputEncoding,project,filterSetsAvailable,filterChainsAvailable,in,out,isr,os,osw,crh,rdr,lineTokenizer,newline,line","source:-0.15134727954864502,dest:0.0474814772605896,filters:0.0,filterChains:0.0,overwrite:0.0,preserveLastModified:0.0,append:-0.015157580375671387,inputEncoding:0.0,outputEncoding:0.0,project:0.015644311904907227,filterSetsAvailable:0.0,filterChainsAvailable:0.0,in:-0.05383533239364624,out:-0.06739532947540283,isr:0.0,os:0.01749253273010254,osw:0.0,crh:0.0,rdr:0.0,lineTokenizer:0.0,newline:0.0,line:-0.02525925636291504,",14,96,"dest:temp,os:os,project:document,filters:filter,filterChains:sortChain,overwrite: override,preserveLastModified:preserveLastModified,inputEncoding:inputEncoding,outputEncoding:inputChilling,filterSetsAvailable:filterShetsavailable,filterChainsAvailable:filterChinesavailable,isr:asw,osw:osnw,crh:cfhs,rdr:rdr,lineTokenizer:lineTokenizer,newline:newline,append:write,line:url,in:url,",Greedy,1046,0.7066212455431621
9,"['21462052', '3167466', '    public int deleteRecord(String uuid) throws SQLException, CatalogIndexException {\n        Connection con = null;\n        boolean autoCommit = true;\n        PreparedStatement st = null;\n        ResultSet rs = null;\n        int nRows = 0;\n        boolean cancelTask = false;\n        StringSet fids = new StringSet();\n        if (cswRemoteRepository.isActive()) {\n            StringSet uuids = new StringSet();\n            uuids.add(uuid);\n            fids = queryFileIdentifiers(uuids);\n        }\n        try {\n            con = returnConnection().getJdbcConnection();\n            autoCommit = con.getAutoCommit();\n            con.setAutoCommit(false);\n            String sSql = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>\'\'"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            rs = st.executeQuery();\n            if (rs.next()) {\n                cancelTask = rs.getInt(1) > 0;\n            }\n            closeStatement(st);\n            sSql = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            nRows = st.executeUpdate();\n            closeStatement(st);\n            sSql = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            st.executeUpdate();\n            CollectionDao colDao = new CollectionDao(this.getRequestContext());\n            if (colDao.getUseCollections()) {\n                closeStatement(st);\n                sSql = ""DELETE FROM "" + colDao.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";\n                logExpression(sSql);\n                st = con.prepareStatement(sSql);\n                st.setString(1, uuid);\n                st.executeUpdate();\n            }\n            con.commit();\n        } catch (SQLException ex) {\n            if (con != null) {\n                con.rollback();\n            }\n            throw ex;\n        } finally {\n            closeResultSet(rs);\n            closeStatement(st);\n            if (con != null) {\n                con.setAutoCommit(autoCommit);\n            }\n        }\n        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();\n        if (indexAdapter != null) {\n            indexAdapter.deleteDocument(uuid);\n            if (cswRemoteRepository.isActive()) {\n                if (fids.size() > 0) cswRemoteRepository.onRecordsDeleted(fids);\n            }\n        }\n        if (cancelTask && getRequestContext() != null) {\n            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), uuid);\n        }\n        return nRows;\n    }\n', '    public void alterarCliente(ClienteBean cliente, String cpf) {\n        PreparedStatement pstmt = null;\n        String sql = ""UPDATE cliente SET nome = ?,"" + ""cpf = ?,"" + ""telefone = ?,"" + ""cursoCargo = ?,"" + ""bloqueado = ?,"" + ""ativo = ?,"" + ""tipo = ? WHERE cpf = ?"";\n        try {\n            pstmt = connection.prepareStatement(sql);\n            pstmt.setString(1, cliente.getNome());\n            pstmt.setString(2, cliente.getCPF());\n            pstmt.setString(3, cliente.getTelefone());\n            pstmt.setString(4, cliente.getCursoCargo());\n            pstmt.setString(5, cliente.getBloqueado());\n            pstmt.setString(6, cliente.getAtivo());\n            pstmt.setString(7, cliente.getTipo());\n            pstmt.setString(8, cpf);\n            pstmt.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (SQLException ex1) {\n                throw new RuntimeException(""Erro ao atualizar cliente."", ex1);\n            }\n            throw new RuntimeException(""Erro ao atualizar cliente."", ex);\n        } finally {\n            try {\n                if (pstmt != null) pstmt.close();\n            } catch (SQLException ex) {\n                throw new RuntimeException(""Ocorreu um erro no banco de dados."", ex);\n            }\n        }\n    }\n']",492,"    public int deleteRecord(String luids) throws SQLException, CatalogIndexException {
        Connection ren = null;
        boolean autoQuits = true;
        PreparedStatement ST = null;
        ResultSet ws = null;
        int nRsOWS = 0;
        boolean canceltask = false;
        StringSet uIDs = new StringSet();
        if (cswRemoteRepository.isActive()) {
            StringSet euIDs = new StringSet();
            euIDs.add(luids);
            uIDs = queryFileIdentifiers(euIDs);
        }
        try {
            ren = returnConnection().getJdbcConnection();
            autoQuits = ren.getAutoCommit();
            ren.setAutoCommit(false);
            String oEsQL = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>''"";
            logExpression(oEsQL);
            ST = ren.prepareStatement(oEsQL);
            ST.setString(1, luids);
            ws = ST.executeQuery();
            if (ws.next()) {
                canceltask = ws.getInt(1) > 0;
            }
            closeStatement(ST);
            oEsQL = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";
            logExpression(oEsQL);
            ST = ren.prepareStatement(oEsQL);
            ST.setString(1, luids);
            nRsOWS = ST.executeUpdate();
            closeStatement(ST);
            oEsQL = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";
            logExpression(oEsQL);
            ST = ren.prepareStatement(oEsQL);
            ST.setString(1, luids);
            ST.executeUpdate();
            CollectionDao ColDongo = new CollectionDao(this.getRequestContext());
            if (ColDongo.getUseCollections()) {
                closeStatement(ST);
                oEsQL = ""DELETE FROM "" + ColDongo.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";
                logExpression(oEsQL);
                ST = ren.prepareStatement(oEsQL);
                ST.setString(1, luids);
                ST.executeUpdate();
            }
            ren.commit();
        } catch (SQLException ex) {
            if (ren != null) {
                ren.rollback();
            }
            throw ex;
        } finally {
            closeResultSet(ws);
            closeStatement(ST);
            if (ren != null) {
                ren.setAutoCommit(autoQuits);
            }
        }
        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();
        if (indexAdapter != null) {
            indexAdapter.deleteDocument(luids);
            if (cswRemoteRepository.isActive()) {
                if (uIDs.size() > 0) cswRemoteRepository.onRecordsDeleted(uIDs);
            }
        }
        if (canceltask && getRequestContext() != null) {
            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), luids);
        }
        return nRsOWS;
    }
",1,1,1,-1,"uuid,con,st,rs,nRows,fids,uuids,autoCommit,sSql,cancelTask,colDao","uuid:0.0,con:0.00025600194931030273,st:9.846687316894531e-05,rs:7.212162017822266e-05,nRows:0.0,fids:0.0,uuids:0.0,autoCommit:0.0,sSql:0.0,cancelTask:0.0,colDao:0.0,",11,74,"con:ren,st:ST,rs:ws,uuid:luids,nRows:nRsOWS,fids:uIDs,uuids:euIDs,autoCommit:autoQuits,sSql:oEsQL,cancelTask:canceltask,colDao:ColDongo,",Greedy,699,0.3165664275487264
10,"['10195648', '15416858', '    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");\n            System.exit(1);\n        }\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream in = new FileInputStream(args[1]);\n            int len = 0;\n            byte buf[] = new byte[1024];\n            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);\n            in.close();\n            os.close();\n            byte[] data = null;\n            if (args[0].equals(""dec"")) data = decode(os.toString()); else {\n                String strData = encode(os.toByteArray());\n                data = strData.getBytes();\n            }\n            FileOutputStream fos = new FileOutputStream(args[2]);\n            fos.write(data);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {\n        monitor.subTask(""download "" + url.toString());\n        InputStream in = null;\n        FileOutputStream out = null;\n        URLConnection conn = null;\n        try {\n            conn = url.openConnection();\n            Writer writer = null;\n            try {\n                Date date = new Date(conn.getLastModified());\n                writer = new FileWriter(timestamp);\n                writer.write(this.FORMAT.format(date));\n            } catch (IOException e) {\n                timestamp.delete();\n            } finally {\n                IOUtils.closeQuietly(writer);\n            }\n            in = conn.getInputStream();\n            out = new FileOutputStream(archive);\n            IOUtils.copy(in, out);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n']",210,"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream oss = new ByteArrayOutputStream();
            InputStream io = new FileInputStream(args[1]);
            int url = 0;
            byte buf[] = new byte[1024];
            while ((url = io.read(buf)) > 0) oss.write(buf, 0, url);
            io.close();
            oss.close();
            byte[] description = null;
            if (args[0].equals(""dec"")) description = decode(oss.toString()); else {
                String  strString = encode(oss.toByteArray());
                description =  strString.getBytes();
            }
            FileOutputStream sfros = new FileOutputStream(args[2]);
            sfros.write(description);
            sfros.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"os,in,len,buf,data,strData,fos","os:0.00017470121383666992,in:-6.192922592163086e-05,len:0.0005150437355041504,buf:-0.00015503168106079102,data:2.3603439331054688e-05,strData:0.0,fos:0.0,",6,20,"len:url,os:oss,data:description,strData: strString,fos:sfros,in:io,",Greedy,286,0.13337318499883016
11,"['18157910', '1766801', '    private static ArrayList<String> YahooSearch(String query) {\n        ArrayList<String> yahooSearchResults = new ArrayList<String>();\n        try {\n            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";\n            URL url = new URL(request);\n            System.out.println(""Host : "" + url.getHost());\n            url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            String finalContents = """";\n            while ((inputLine = reader.readLine()) != null) {\n                finalContents += ""\\n"" + inputLine;\n            }\n            Document doc = Jsoup.parse(finalContents);\n            Elements eles = doc.getElementsByTag(""url"");\n            for (Element ele : eles) {\n                yahooSearchResults.add(ele.text());\n                System.out.println(""YahooResult: "" + ele.text());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return yahooSearchResults;\n    }\n', '    public void update() {\n        Authenticator.setDefault(new MyAuthenticator());\n        URL url = null;\n        try {\n            url = new URL(""http://trade.gigabass.de/update/update.php"");\n        } catch (MalformedURLException e) {\n            handleException(e);\n            return;\n        }\n        URLConnection conn;\n        try {\n            conn = url.openConnection();\n        } catch (IOException e) {\n            handleException(e);\n            return;\n        }\n        conn.setDoOutput(true);\n        OutputStreamWriter wr = null;\n        try {\n            wr = new OutputStreamWriter(conn.getOutputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        try {\n            wr.write(""sql="" + URLEncoder.encode(sql, ""UTF-8"") + ""\\n"");\n            wr.flush();\n        } catch (IOException e) {\n            handleException(e);\n        }\n        BufferedReader rd = null;\n        try {\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n            }\n        } catch (IOException e) {\n            handleException(e);\n        }\n        try {\n            wr.close();\n        } catch (IOException e) {\n            handleException(e);\n        }\n        try {\n            rd.close();\n        } catch (IOException e) {\n            handleException(e);\n        }\n    }\n']",217,,0,1,,-4,"query,yahooSearchResults,request,url,reader,inputLine,finalContents,doc,eles,ele",,,,,Greedy,1,0.0079422394434611
12,"['8446069', '22728537', '    public static String test(String server, String baseDir, String user, String password) throws Exception {\n        FTPClient ftpClient = new FTPClient();\n        try {\n            String file = baseDir;\n            ftpClient.connect(server);\n            ftpClient.login(user, password);\n            int reply = ftpClient.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftpClient.disconnect();\n                System.err.println(""FTP server refused connection."");\n                return null;\n            }\n            ftpClient.setFileType(FTP.IMAGE_FILE_TYPE);\n            ftpClient.enterLocalPassiveMode();\n            boolean isDir = isDir(ftpClient, file);\n            if (isDir) {\n                FTPFile[] files = ftpClient.listFiles(file);\n                for (int i = 0; i < files.length; i++) {\n                }\n            } else {\n                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                if (ftpClient.retrieveFile(file, bos)) {\n                } else {\n                    throw new IOException(""Unable to retrieve file:"" + file);\n                }\n            }\n            return """";\n        } finally {\n            closeConnection(ftpClient);\n        }\n    }\n', '                public void actionPerformed(java.awt.event.ActionEvent e) {\n                    JFileChooser fc = new JFileChooser();\n                    fc.addChoosableFileFilter(new SoundFilter());\n                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));\n                    if (returnVal == JFileChooser.APPROVE_OPTION) {\n                        File file = fc.getSelectedFile();\n                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();\n                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();\n                        try {\n                            FileInputStream fis = new FileInputStream(file);\n                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n                            FileChannel canalFuente = fis.getChannel();\n                            FileChannel canalDestino = fos.getChannel();\n                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n                            fis.close();\n                            fos.close();\n                            imagen.setSonidoURL(rutaRelativa);\n                            System.out.println(rutaGlobal + "" "" + rutaRelativa);\n                            buttonSonido.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n']",205,"    public static String test(String test, String  basePath, String uid, String ass) throws Exception {
        FTPClient ftbaseConnection = new FTPClient();
        try {
            String function =  basePath;
            ftbaseConnection.connect(test);
            ftbaseConnection.login(uid, ass);
            int py = ftbaseConnection.getReplyCode();
            if (!FTPReply.isPositiveCompletion(py)) {
                ftbaseConnection.disconnect();
                System.err.println(""FTP server refused connection."");
                return null;
            }
            ftbaseConnection.setFileType(FTP.IMAGE_FILE_TYPE);
            ftbaseConnection.enterLocalPassiveMode();
            boolean getdir = getdir(ftbaseConnection, function);
            if (getdir) {
                FTPFile[] ids = ftbaseConnection.listFiles(function);
                for (int mi = 0; mi < ids.length; mi++) {
                }
            } else {
                ByteArrayOutputStream bin = new ByteArrayOutputStream();
                if (ftbaseConnection.retrieveFile(function, bin)) {
                } else {
                    throw new IOException(""Unable to retrieve file:"" + function);
                }
            }
            return """";
        } finally {
            closeConnection(ftbaseConnection);
        }
    }
",0,0,0,-1,"server,baseDir,user,password,ftpClient,file,reply,isDir,files,i,bos","server:7.140636444091797e-05,baseDir:0.0,user:3.4809112548828125e-05,password:8.881092071533203e-05,ftpClient:0.0,file:1.1920928955078125e-07,reply:-5.4836273193359375e-06,isDir:0.0,files:9.918212890625e-05,i:-3.552436828613281e-05,bos:-3.6597251892089844e-05,",11,37,"files:ids,password:ass,server:test,user:uid,file:function,baseDir: basePath,ftpClient:ftbaseConnection,isDir:getdir,reply:py,i:mi,bos:bin,",Greedy,599,0.24167949755986531
13,"['7199548', '14113380', '    protected GVTFontFamily getFontFamily(BridgeContext ctx, ParsedURL purl) {\n        String purlStr = purl.toString();\n        Element e = getBaseElement(ctx);\n        SVGDocument svgDoc = (SVGDocument) e.getOwnerDocument();\n        String docURL = svgDoc.getURL();\n        ParsedURL pDocURL = null;\n        if (docURL != null) pDocURL = new ParsedURL(docURL);\n        String baseURI = XMLBaseSupport.getCascadedXMLBase(e);\n        purl = new ParsedURL(baseURI, purlStr);\n        UserAgent userAgent = ctx.getUserAgent();\n        try {\n            userAgent.checkLoadExternalResource(purl, pDocURL);\n        } catch (SecurityException ex) {\n            userAgent.displayError(ex);\n            return null;\n        }\n        if (purl.getRef() != null) {\n            Element ref = ctx.getReferencedElement(e, purlStr);\n            if (!ref.getNamespaceURI().equals(SVG_NAMESPACE_URI) || !ref.getLocalName().equals(SVG_FONT_TAG)) {\n                return null;\n            }\n            SVGDocument doc = (SVGDocument) e.getOwnerDocument();\n            SVGDocument rdoc = (SVGDocument) ref.getOwnerDocument();\n            Element fontElt = ref;\n            if (doc != rdoc) {\n                fontElt = (Element) doc.importNode(ref, true);\n                String base = XMLBaseSupport.getCascadedXMLBase(ref);\n                Element g = doc.createElementNS(SVG_NAMESPACE_URI, SVG_G_TAG);\n                g.appendChild(fontElt);\n                g.setAttributeNS(XMLBaseSupport.XML_NAMESPACE_URI, ""xml:base"", base);\n                CSSUtilities.computeStyleAndURIs(ref, fontElt, purlStr);\n            }\n            Element fontFaceElt = null;\n            for (Node n = fontElt.getFirstChild(); n != null; n = n.getNextSibling()) {\n                if ((n.getNodeType() == Node.ELEMENT_NODE) && n.getNamespaceURI().equals(SVG_NAMESPACE_URI) && n.getLocalName().equals(SVG_FONT_FACE_TAG)) {\n                    fontFaceElt = (Element) n;\n                    break;\n                }\n            }\n            SVGFontFaceElementBridge fontFaceBridge;\n            fontFaceBridge = (SVGFontFaceElementBridge) ctx.getBridge(SVG_NAMESPACE_URI, SVG_FONT_FACE_TAG);\n            GVTFontFace gff = fontFaceBridge.createFontFace(ctx, fontFaceElt);\n            return new SVGFontFamily(gff, fontElt, ctx);\n        }\n        try {\n            Font font = Font.createFont(Font.TRUETYPE_FONT, purl.openStream());\n            return new AWTFontFamily(this, font);\n        } catch (Exception ex) {\n        }\n        return null;\n    }\n', '    @SuppressWarnings(""unchecked"")\n    public void execute() throws MojoExecutionException {\n        List<Dependency> dependencies = project.getDependencies();\n        File file = new File(this.localRepository.getBasedir());\n        File dojoArtifact = null;\n        for (Dependency dependency : dependencies) {\n            if (!dependency.getGroupId().equals(""org.dojotoolkit"") && !dependency.getArtifactId().equals(""dojo"")) continue;\n            File file2 = new File(file, dependency.getGroupId().replace(\'.\', File.separatorChar));\n            file2 = new File(file2, dependency.getArtifactId());\n            file2 = new File(file2, dependency.getVersion());\n            file2 = new File(file2, dependency.getArtifactId() + \'-\' + dependency.getVersion() + \'.\' + dependency.getType());\n            if (!file2.exists()) throw new MojoExecutionException(""No artifact found in base repository "" + file2);\n            dojoArtifact = file2;\n        }\n        if (dojoArtifact == null) throw new MojoExecutionException(""No dojo dependencies found"");\n        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get(""org.apache.maven.plugins:maven-war-plugin"");\n        if (plugin == null) return;\n        String webappDirectory = null;\n        Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration();\n        if (dom != null) webappDirectory = dom.getChild(""webappDirectory"").getValue();\n        if (webappDirectory == null) webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + \'-\' + project.getVersion();\n        try {\n            File webAppDojoDir = new File(webappDirectory, this.dojoDir);\n            if (!webAppDojoDir.exists()) webAppDojoDir.mkdirs();\n            ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact));\n            ZipEntry zipentry = inputStream.getNextEntry();\n            byte[] buf = new byte[1024];\n            while (zipentry != null) {\n                File entry = new File(webAppDojoDir, zipentry.getName());\n                if (zipentry.isDirectory()) {\n                    entry.mkdirs();\n                } else {\n                    int n;\n                    FileOutputStream fileoutputstream;\n                    if (entry.getParent() != null) {\n                        entry.getParentFile().mkdirs();\n                    }\n                    fileoutputstream = new FileOutputStream(entry);\n                    while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                    fileoutputstream.close();\n                    inputStream.closeEntry();\n                }\n                zipentry = inputStream.getNextEntry();\n            }\n            inputStream.close();\n        } catch (Exception e) {\n            throw new MojoExecutionException(""Error to extract the dojo artifact "", e);\n        }\n    }\n']",445,"    protected GVTFontFamily getFontFamily(BridgeContext cb, ParsedURL pref) {
        String PUrlUrl = pref.toString();
        Element er = getBaseElement(cb);
        SVGDocument  svgFile = (SVGDocument) er.getOwnerDocument();
        String baseSSL =  svgFile.getURL();
        ParsedURL pContentURL = null;
        if (baseSSL != null) pContentURL = new ParsedURL(baseSSL);
        String BaseURI = XMLBaseSupport.getCascadedXMLBase(er);
        pref = new ParsedURL(BaseURI, PUrlUrl);
        UserAgent useAgent = cb.getUserAgent();
        try {
            useAgent.checkLoadExternalResource(pref, pContentURL);
        } catch (SecurityException ex) {
            useAgent.displayError(ex);
            return null;
        }
        if (pref.getRef() != null) {
            Element element = cb.getReferencedElement(er, PUrlUrl);
            if (!element.getNamespaceURI().equals(SVG_NAMESPACE_URI) || !element.getLocalName().equals(SVG_FONT_TAG)) {
                return null;
            }
            SVGDocument git = (SVGDocument) er.getOwnerDocument();
            SVGDocument rboc = (SVGDocument) element.getOwnerDocument();
            Element fontOls = element;
            if (git != rboc) {
                fontOls = (Element) git.importNode(element, true);
                String base = XMLBaseSupport.getCascadedXMLBase(element);
                Element pg = git.createElementNS(SVG_NAMESPACE_URI, SVG_G_TAG);
                pg.appendChild(fontOls);
                pg.setAttributeNS(XMLBaseSupport.XML_NAMESPACE_URI, ""xml:base"", base);
                CSSUtilities.computeStyleAndURIs(element, fontOls, PUrlUrl);
            }
            Element fontFaceEld = null;
            for (Node conn = fontOls.getFirstChild(); conn != null; conn = conn.getNextSibling()) {
                if ((conn.getNodeType() == Node.ELEMENT_NODE) && conn.getNamespaceURI().equals(SVG_NAMESPACE_URI) && conn.getLocalName().equals(SVG_FONT_FACE_TAG)) {
                    fontFaceEld = (Element) conn;
                    break;
                }
            }
            SVGFontFaceElementBridge fontFaceBridge;
            fontFaceBridge = (SVGFontFaceElementBridge) cb.getBridge(SVG_NAMESPACE_URI, SVG_FONT_FACE_TAG);
            GVTFontFace gff = fontFaceBridge.createFontFace(cb, fontFaceEld);
            return new SVGFontFamily(gff, fontOls, cb);
        }
        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, pref.openStream());
            return new AWTFontFamily(this, font);
        } catch (Exception ex) {
        }
        return null;
    }
",0,0,0,-1,"ctx,purl,purlStr,e,svgDoc,docURL,pDocURL,baseURI,userAgent,ref,doc,rdoc,fontElt,base,g,fontFaceElt,n","ctx:-8.58306884765625e-06,purl:0.0,purlStr:0.0,e:-1.5497207641601562e-06,svgDoc:0.0,docURL:0.0,pDocURL:0.0,baseURI:0.0,userAgent:0.0,ref:-9.894371032714844e-06,doc:-4.410743713378906e-06,rdoc:0.0,fontElt:0.0,base:-7.152557373046875e-07,g:-3.5762786865234375e-07,fontFaceElt:0.0,n:1.9550323486328125e-05,",16,69,"n:conn,purl:pref,purlStr:PUrlUrl,svgDoc: svgFile,docURL:baseSSL,pDocURL:pContentURL,baseURI:BaseURI,userAgent:useAgent,rdoc:rboc,fontElt:fontOls,fontFaceElt:fontFaceEld,g:pg,base:base,e:er,doc:git,ctx:cb,ref:element,",Greedy,856,0.4490571538607279
14,"['21164147', '11959071', '    public String requestPOST(String baseUrl, Map<String, String> params) throws Exception {\n        String result = """";\n        HttpPost request = new HttpPost(baseUrl);\n        HttpEntity entity = null;\n        if (params != null && !params.isEmpty()) {\n            List<NameValuePair> postParams = new ArrayList<NameValuePair>();\n            List<String> keys = new ArrayList<String>(params.keySet());\n            for (String key : keys) {\n                postParams.add(new BasicNameValuePair(key, params.get(key)));\n            }\n            entity = new UrlEncodedFormEntity(postParams, ""utf-8"");\n            request.setEntity(entity);\n        }\n        HttpResponse res = client.execute(request);\n        if (res.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            entity = res.getEntity();\n            BufferedReader in = new BufferedReader(new InputStreamReader(entity.getContent()));\n            StringBuffer content = new StringBuffer();\n            String read = """";\n            while ((read = in.readLine()) != null) {\n                content.append(read);\n            }\n            in.close();\n            JSONObject rObj = new JSONObject(content.toString());\n            result = rObj.getString(""msg"");\n        } else result = ""请求失败了"";\n        entity.consumeContent();\n        client.getConnectionManager().shutdown();\n        request = null;\n        return result;\n    }\n', '        private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {\n            URLConnection conn = new URL(url).openConnection();\n            progress.setMaximum(Math.max(0, conn.getContentLength()));\n            String path = MiscUtilities.constructPath(installDirectory, fileName);\n            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;\n            if (archive_zip) {\n                Enumeration entries;\n                ZipFile zipFile;\n                try {\n                    File tempFile = new File(path);\n                    zipFile = new ZipFile(tempFile);\n                    entries = zipFile.entries();\n                    while (entries.hasMoreElements()) {\n                        ZipEntry entry = (ZipEntry) entries.nextElement();\n                        if (entry.isDirectory()) {\n                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());\n                            (new File(dpath)).mkdir();\n                            continue;\n                        }\n                        progress.setMaximum((int) entry.getSize());\n                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());\n                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);\n                    }\n                    zipFile.close();\n                    tempFile.delete();\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            } else if (archive_gzip) {\n                File srce = new File(path);\n                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));\n                File temp = File.createTempFile(""macro"", ""mgr"");\n                progress.setMaximum((int) srce.length());\n                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);\n                TarArchive tarc = new TarArchive(new FileInputStream(temp));\n                tarc.extractContents(new File(installDirectory));\n                tarc.closeArchive();\n                (new File(path)).delete();\n            }\n            return path;\n        }\n']",283,"    public String requestPOST(String basePath, Map<String, String> resources) throws Exception {
        String function = """";
        HttpPost event = new HttpPost(basePath);
        HttpEntity message = null;
        if (resources != null && !resources.isEmpty()) {
            List<NameValuePair> postVariam = new ArrayList<NameValuePair>();
            List<String> files = new ArrayList<String>(resources.keySet());
            for (String label : files) {
                postVariam.add(new BasicNameValuePair(label, resources.get(label)));
            }
            message = new UrlEncodedFormEntity(postVariam, ""utf-8"");
            event.setEntity(message);
        }
        HttpResponse re = client.execute(event);
        if (re.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            message = re.getEntity();
            BufferedReader r = new BufferedReader(new InputStreamReader(message.getContent()));
            StringBuffer output = new StringBuffer();
            String read = """";
            while ((read = r.readLine()) != null) {
                output.append(read);
            }
            r.close();
            JSONObject RObj = new JSONObject(output.toString());
            function = RObj.getString(""msg"");
        } else function = ""请求失败了"";
        message.consumeContent();
        client.getConnectionManager().shutdown();
        event = null;
        return function;
    }
",0,0,0,-1,"baseUrl,params,request,entity,postParams,keys,key,res,in,content,read,rObj,result","baseUrl:0.0,params:-3.808736801147461e-05,request:0.0005872249603271484,entity:6.604194641113281e-05,postParams:0.0,keys:-2.586841583251953e-05,key:-6.735324859619141e-06,res:1.6927719116210938e-05,in:-2.2470951080322266e-05,content:5.030632019042969e-05,read:-4.655122756958008e-05,rObj:0.0,result:-3.30805778503418e-05,",12,40,"request:event,entity:message,content:output,res:re,baseUrl:basePath,postParams:postVariam,rObj:RObj,key:label,in:r,keys:files,result:function,params:resources,read:read,",Greedy,631,0.277519428730011
15,"['2972950', '3108499', '    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {\n        try {\n            URL u = new URL(""http://mediaserver:8080/sagex"" + url);\n            log.debug(""Proxy Media: "" + u.toString());\n            URLConnection c = u.openConnection();\n            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");\n            OutputStream os = resp.getOutputStream();\n            IOUtils.copy(c.getInputStream(), os);\n            os.flush();\n            resp.flushBuffer();\n        } catch (Throwable t) {\n            log.error(""Failed to get url: "" + url, t);\n            try {\n                resp.sendError(500, t.getMessage());\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n']",145,"    private void proxyMediaServlet(String url, HttpServletRequest query, HttpServletResponse conn) {
        try {
            URL ur = new URL(""http://mediaserver:8080/sagex"" + url);
            log.debug(""Proxy Media: "" + ur.toString());
            URLConnection cl = ur.openConnection();
            cl.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");
            OutputStream nos = conn.getOutputStream();
            IOUtils.copy(cl.getInputStream(), nos);
            nos.flush();
            conn.flushBuffer();
        } catch (Throwable t) {
            log.error(""Failed to get url: "" + url, t);
            try {
                conn.sendError(500, t.getMessage());
            } catch (IOException e) {
            }
        }
    }
",1,1,1,-1,"url,req,resp,u,c,os","url:7.867813110351562e-06,req:-4.76837158203125e-07,resp:-5.960464477539062e-07,u:4.76837158203125e-07,c:-2.384185791015625e-07,os:1.430511474609375e-06,",5,14,"url:url,os:nos,u:ur,c:cl,req:query,resp:conn,",Greedy,270,0.11940372784932454
16,"['12764800', '11513043', '    public static void extractZipFile(String filename) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(filename));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public String hash(String password) {\n        MessageDigest sha1Digest;\n        try {\n            sha1Digest = MessageDigest.getInstance(""SHA-1"");\n        } catch (NoSuchAlgorithmException e) {\n            throw NestedException.wrap(e);\n        }\n        sha1Digest.update(password.getBytes());\n        StringBuilder retval = new StringBuilder(""sha1:"");\n        retval.append(new String(Base64.encodeBase64(sha1Digest.digest())));\n        return retval.toString();\n    }\n']",189,"    public static void extractZipFile(String File) {
        try {
            byte[] la = new byte[1024];
            ZipInputStream fileoutputchannel = null;
            ZipEntry cereader;
            fileoutputchannel = new ZipInputStream(new FileInputStream(File));
            cereader = fileoutputchannel.getNextEntry();
            while (cereader != null) {
                String elementAlias = cereader.getName();
                int out;
                FileOutputStream fileOutputStream;
                File newFile = new File(elementAlias);
                String database = newFile.getParent();
                if (database == null) {
                    if (newFile.isDirectory()) break;
                }
                fileOutputStream = new FileOutputStream(elementAlias);
                while ((out = fileoutputchannel.read(la, 0, 1024)) > -1) fileOutputStream.write(la, 0, out);
                fileOutputStream.close();
                fileoutputchannel.closeEntry();
                cereader = fileoutputchannel.getNextEntry();
            }
            fileoutputchannel.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"filename,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,directory","filename:-5.960464477539062e-07,buf:-4.76837158203125e-06,zipinputstream:0.0,zipentry:0.0,entryName:0.0,n:1.430511474609375e-06,fileoutputstream:0.0,newFile:0.0,directory:0.0,",8,29,"n:out,zipinputstream:fileoutputchannel,zipentry:cereader,entryName:elementAlias,fileoutputstream:fileOutputStream,newFile:newFile,directory:database,filename:File,buf:la,",Greedy,469,0.1944690783818563
17,"['8561726', '17526811', '    public boolean actualizarDivisionActual(division div) {\n        int intResult = 0;\n        String sql = ""UPDATE divisionxTorneo "" + "" SET tipoTorneo_idTipoTorneo = "" + div.getidTipoTorneo() + "" , nombreDivision = \'"" + div.getnombreDivision() + ""\', "" + "" descripcion = \'"" + div.getDescripcion() + ""\', tipoDesempate = "" + div.getDesempate() + "", "" + "" numFechas = "" + div.getnumFechas() + "" , ptosxbye = "" + div.getPtosxBye() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n', '    private String getDocumentAsString(URL url) throws IOException {\n        StringBuffer result = new StringBuffer();\n        InputStream in = url.openStream();\n        int c;\n        while ((c = in.read()) != -1) result.append((char) c);\n        return result.toString();\n    }\n']",199,"    public boolean actualizarDivisionActual(division draw) {
        int ntScore = 0;
        String QL = ""UPDATE divisionxTorneo "" + "" SET tipoTorneo_idTipoTorneo = "" + draw.getidTipoTorneo() + "" , nombreDivision = '"" + draw.getnombreDivision() + ""', "" + "" descripcion = '"" + draw.getDescripcion() + ""', tipoDesempate = "" + draw.getDesempate() + "", "" + "" numFechas = "" + draw.getnumFechas() + "" , ptosxbye = "" + draw.getPtosxBye() + "" WHERE idDivisionxTorneo = "" + draw.getidDivision();
        try {
            close = conexionBD.getConnection();
            close.setAutoCommit(false);
            qs = close.prepareStatement(QL);
            ntScore = qs.executeUpdate();
            close.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                close.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(qs);
            conexionBD.close(close);
        }
        return (ntScore > 0);
    }
",0,0,0,-1,"div,intResult,sql,connection,ps","div:-1.3113021850585938e-06,intResult:0.0,sql:4.410743713378906e-06,connection:2.4557113647460938e-05,ps:8.344650268554688e-07,",5,22,"connection:close,sql:QL,ps:qs,intResult:ntScore,div:draw,",Greedy,268,0.11477507750193278
18,"['15385608', '115129', '    public boolean setFavBoard(List<BoardObject> list) throws NetworkException, ContentException {\n        HttpClient client = HttpConfig.newInstance();\n        HttpPost post = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);\n        List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n        for (BoardObject board : list) nvps.add(new BasicNameValuePair(board.getId(), ""on""));\n        try {\n            post.setEntity(new UrlEncodedFormEntity(nvps, BBSBodyParseHelper.BBS_CHARSET));\n            HttpResponse response = client.execute(post);\n            HttpEntity entity = response.getEntity();\n            if (HTTPUtil.isHttp200(response) && HTTPUtil.isXmlContentType(response)) {\n                HTTPUtil.consume(response.getEntity());\n                return true;\n            } else {\n                String msg = BBSBodyParseHelper.parseFailMsg(entity);\n                throw new ContentException(msg);\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n', '    public static void bubbleSort(String[] a) {\n        Collator myCollator = Collator.getInstance();\n        boolean switched = true;\n        for (int pass = 0; pass < a.length - 1 && switched; pass++) {\n            switched = false;\n            for (int i = 0; i < a.length - pass - 1; i++) {\n                if (myCollator.compare(a[i], a[i + 1]) > 0) {\n                    switched = true;\n                    String temp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = temp;\n                }\n            }\n        }\n    }\n']",211,"    public boolean setFavBoard(List<BoardObject> gallery) throws NetworkException, ContentException {
        HttpClient cli = HttpConfig.newInstance();
        HttpPost wp = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);
        List<NameValuePair> nnPS = new ArrayList<NameValuePair>();
        for (BoardObject row : gallery) nnPS.add(new BasicNameValuePair(row.getId(), ""on""));
        try {
            wp.setEntity(new UrlEncodedFormEntity(nnPS, BBSBodyParseHelper.BBS_CHARSET));
            HttpResponse output = cli.execute(wp);
            HttpEntity output = output.getEntity();
            if (HTTPUtil.isHttp200(output) && HTTPUtil.isXmlContentType(output)) {
                HTTPUtil.consume(output.getEntity());
                return true;
            } else {
                String ma = BBSBodyParseHelper.parseFailMsg(output);
                throw new ContentException(ma);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0,0,0,-1,"list,client,post,nvps,board,response,entity,msg","list:3.987550735473633e-05,client:0.0007163286209106445,post:0.0012959837913513184,nvps:0.0,board:-9.08970832824707e-05,response:0.00048404932022094727,entity:3.892183303833008e-05,msg:8.64267349243164e-06,",8,21,"post:wp,client:cli,response:output,list:gallery,entity:output,msg:ma,nvps:nnPS,board:row,",Greedy,360,0.16869078874588012
19,"['19999376', '1551466', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n', '    public static void test2() throws Exception {\n        int keySize = 1024;\n        int dBlockSize = keySize / 8;\n        int eBlockSize = dBlockSize - 8 - 3;\n        CertAndKeyGen certAndKeyGen = new CertAndKeyGen(""RSA"", ""MD5WithRSA"");\n        certAndKeyGen.generate(keySize);\n        PublicKey publicKey = certAndKeyGen.getPublicKey();\n        PrivateKey privateKey = certAndKeyGen.getPrivateKey();\n        Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\n        cipher1.init(Cipher.ENCRYPT_MODE, publicKey);\n        String fileA = ""C:/temp/a.txt"";\n        String fileB = ""C:/temp/b.txt"";\n        String fileC = ""C:/temp/c.txt"";\n        FileInputStream fis = new FileInputStream(fileA);\n        FileOutputStream fos = new FileOutputStream(fileB, false);\n        CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize);\n        byte[] b = new byte[128];\n        int i = fis.read(b);\n        while (i != -1) {\n            eos.write(b, 0, i);\n            i = fis.read(b);\n        }\n        eos.flush();\n        eos.close();\n        fos.close();\n        Cipher cipher2 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\n        cipher2.init(Cipher.DECRYPT_MODE, privateKey);\n        fis = new FileInputStream(fileB);\n        CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize);\n        FileOutputStream decodedFile = new FileOutputStream(fileC, false);\n        int read = -1;\n        while ((read = cis.read()) > -1) {\n            decodedFile.write(read);\n        }\n        decodedFile.close();\n        fis.close();\n    }\n']",138,"    private static void unzipEntry(ZipFile zipfile, ZipEntry data, File outFile) throws IOException {
        if (data.isDirectory()) {
            createDir(new File(outFile, data.getName()));
            return;
        }
        File outputFile = new File(outFile, data.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(data));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",1,1,1,-1,"zipfile,entry,outputDir,outputFile,inputStream,outputStream","zipfile:0.0,entry:-8.20159912109375e-05,outputDir:0.0,outputFile:0.0,inputStream:0.0,outputStream:0.0,",2,8,"zipfile:zipfile,outputDir:outFile,outputFile:outputFile,inputStream:inputStream,outputStream:outputStream,entry:data,",Greedy,216,0.10863470236460368
20,"['3838437', '18609247', '    public static boolean copyFile(final File inFile, final File outFile) {\n        try {\n            FileChannel ic = new FileInputStream(inFile).getChannel();\n            FileChannel oc = new FileOutputStream(outFile).getChannel();\n            ic.transferTo(0, ic.size(), oc);\n            ic.close();\n            oc.close();\n            return true;\n        } catch (IOException e) {\n            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);\n            return false;\n        }\n    }\n', '        private void compileJarFile() {\n            String javaFileName = jarFileName + "".java"";\n            try {\n                File pluginWorkDirectory = new File(CastadivaModel.PLUGIN_WORKFOLDER);\n                pluginWorkDirectory.mkdirs();\n                File pluginsDir = new File(pluginWorkDirectory.getPath() + ""/castadiva/Plugins"");\n                pluginsDir.mkdirs();\n                BufferedWriter bout = new BufferedWriter(new FileWriter(pluginWorkDirectory.getPath() + ""/castadiva/Plugins/"" + javaFileName));\n                bout.write(""package castadiva.Plugins;\\n"");\n                bout.write(""import java.io.*;\\n"");\n                bout.write(""import java.util.zip.ZipEntry;\\n"");\n                bout.write(""import java.util.jar.JarFile;\\n"");\n                bout.write(""import lib.IPluginCastadiva;\\n"");\n                bout.write(""public class "" + jarFileName + "" implements IPluginCastadiva {\\n"");\n                bout.write(""    public String getBin() {\\n"");\n                bout.write(""        return \\"""" + binaryFilePath + ""\\""; \\n    }\\n"");\n                bout.write(""    public String getFlags() {\\n"");\n                bout.write(""        return \\"""" + protocolFlags + ""\\""; \\n    }\\n"");\n                bout.write(""    public String getPathConf() {\\n"");\n                bout.write(""        return \\"""" + configurationFilePath + ""\\""; \\n    }\\n"");\n                bout.write(""    public String getConfContent(){\\n"");\n                bout.write(""        BufferedReader confFileReader;\\n"");\n                bout.write(""        try {\\n"");\n                bout.write(""            JarFile jar = new JarFile(\\"""" + CastadivaModel.PLUGIN_JAR_FOLDER + ""/"" + jarFileName + "".jar\\"");\\n"");\n                bout.write(""            ZipEntry entry = jar.getEntry(\\"""" + configurationFilename[configurationFilename.length - 1] + ""\\"");\\n"");\n                bout.write(""            confFileReader = new BufferedReader(new InputStreamReader(jar.getInputStream(entry)));\\n"");\n                bout.write(""            String confFile = \\""\\"";\\n"");\n                bout.write(""            String confFileLine;\\n"");\n                bout.write(""            while((confFileLine = confFileReader.readLine()) != null){\\n"");\n                bout.write(""                 confFile+=\\""\\\\n\\""+confFileLine;\\n"");\n                bout.write(""            }\\n"");\n                bout.write(""            return(confFile);\\n"");\n                bout.write(""        } catch (Exception ex) {\\n"");\n                bout.write(""            System.out.println(ex);\\n"");\n                bout.write(""        }\\n"");\n                bout.write(""        return(null);\\n"");\n                bout.write(""    }\\n"");\n                bout.write(""    public String getConf(){\\n"");\n                bout.write(""        return(\\"""" + configurationFilename[configurationFilename.length - 1] + ""\\"");\\n"");\n                bout.write(""    }\\n"");\n                bout.write(""    public String getKillInstruction() {\\n"");\n                bout.write(""        return  \\""killall "" + binFileName[binFileName.length - 1] + "" 2>/dev/null\\"""" + "";\\n    }\\n}"");\n                bout.close();\n                BufferedWriter confFileWriter = new BufferedWriter(new FileWriter(CastadivaModel.PLUGIN_WORKFOLDER + ""/"" + configurationFilename[configurationFilename.length - 1]));\n                confFileWriter.write(protocolConfiguration);\n                confFileWriter.close();\n            } catch (IOException ex) {\n                Logger.getLogger(ProtocolsGUI.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n']",117,"    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel xc = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            xc.transferTo(0, xc.size(), oc);
            xc.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
",1,1,1,-1,"inFile,outFile,ic,oc","inFile:0.0,outFile:0.0,ic:0.0005285143852233887,oc:0.0011104941368103027,",1,4,"oc:oc,ic:xc,inFile:inFile,outFile:outFile,",Greedy,184,0.0868356982866923
21,"['12844597', '7131421', '        private String findTitle(URL url) {\n            HTMLEditorKit.ParserCallback callback;\n            try {\n                URLConnection conn = url.openConnection();\n                Reader rd = new InputStreamReader(conn.getInputStream());\n                ParserDelegator parser = new ParserDelegator();\n                callback = new Callback();\n                parser.parse(rd, callback, true);\n            } catch (Exception exp) {\n                System.err.println(exp);\n            }\n            return title;\n        }\n', '    private void getEventHeapsFromWeb() {\n        try {\n            URL url = getServersURL();\n            InputStream in = url.openStream();\n            Document doc = factory.newDocumentBuilder().parse(in);\n            readFromDocument(doc);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n']",84,"        private String findTitle(URL file) {
            HTMLEditorKit.ParserCallback bb;
            try {
                URLConnection fp = file.openConnection();
                Reader rss = new InputStreamReader(fp.getInputStream());
                ParserDelegator parser = new ParserDelegator();
                bb = new Callback();
                parser.parse(rss, bb, true);
            } catch (Exception exp) {
                System.err.println(exp);
            }
            return title;
        }
",0,0,0,-1,"url,callback,conn,rd,parser","url:1.1920928955078125e-07,callback:3.5762786865234375e-07,conn:7.152557373046875e-07,rd:4.76837158203125e-07,parser:-3.5762786865234375e-07,",4,9,"conn:fp,rd:rss,callback:bb,url:file,parser:parser,",Greedy,215,0.09425295988718668
22,"['14518760', '8943482', '    public void connect(final URLConnectAdapter urlAdapter) {\n        if (this.connectSettings == null) {\n            throw new IllegalStateException(""Invalid Connect Settings (is null)"");\n        }\n        final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();\n        BufferedReader in;\n        try {\n            in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));\n            final StringBuilder buf = new StringBuilder(200);\n            String str;\n            while ((str = in.readLine()) != null) {\n                buf.append(str);\n                buf.append(\'\\n\');\n            }\n            final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());\n            final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();\n            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {\n                final String key = entry.getKey();\n                final List<String> val = entry.getValue();\n                if ((val != null) && (val.size() > 1)) {\n                    System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());\n                }\n                if (key != null) {\n                    result.addHeader(key, val.get(0), val);\n                } else {\n                    result.addHeader(""Status"", val.get(0), val);\n                }\n            }\n            this.lastResult = result;\n        } catch (IOException e) {\n            throw new ConnectException(e);\n        }\n    }\n', '    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {\n        String urlStr = """";\n        if (size == Size.SQUARE) {\n            urlStr = photo.getSmallSquareUrl();\n        } else if (size == Size.THUMB) {\n            urlStr = photo.getThumbnailUrl();\n        } else if (size == Size.SMALL) {\n            urlStr = photo.getSmallUrl();\n        } else if (size == Size.MEDIUM) {\n            urlStr = photo.getMediumUrl();\n        } else if (size == Size.LARGE) {\n            urlStr = photo.getLargeUrl();\n        } else if (size == Size.ORIGINAL) {\n            urlStr = photo.getOriginalUrl();\n        } else {\n            throw new FlickrException(""0"", ""Unknown Photo-size"");\n        }\n        URL url = new URL(urlStr);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        if (transport instanceof REST) {\n            if (((REST) transport).isProxyAuth()) {\n                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());\n            }\n        }\n        conn.connect();\n        return conn.getInputStream();\n    }\n']",301,"    public void connect(final URLConnectAdapter urlAdapter) {
        if (this.connectSettings == null) {
            throw new IllegalStateException(""Invalid Connect Settings (is null)"");
        }
        final HttpURLConnection  httpconn = (HttpURLConnection) urlAdapter.openConnection();
        BufferedReader ini;
        try {
            ini = new BufferedReader(new InputStreamReader( httpconn.getInputStream()));
            final StringBuilder auc = new StringBuilder(200);
            String line;
            while ((line = ini.readLine()) != null) {
                auc.append(line);
                auc.append('
');
            }
            final ConnectResult function = new ConnectResult( httpconn.getResponseCode(), auc.toString());
            final Map<String, List<String>> headerColumnes =  httpconn.getHeaderFields();
            for (Map.Entry<String, List<String>> ence : headerColumnes.entrySet()) {
                final String word = ence.getKey();
                final List<String> il = ence.getValue();
                if ((il != null) && (il.size() > 1)) {
                    System.out.println(""WARN: Invalid header value : "" + word + "" url="" + this.connectSettings.getUrl());
                }
                if (word != null) {
                    function.addHeader(word, il.get(0), il);
                } else {
                    function.addHeader(""Status"", il.get(0), il);
                }
            }
            this.lastResult = function;
        } catch (IOException e) {
            throw new ConnectException(e);
        }
    }
",0,0,0,-1,"urlAdapter,httpConnection,in,buf,str,result,headerFields,entry,key,val,lastResult","urlAdapter:0.0,httpConnection:0.0,in:2.5033950805664062e-06,buf:-1.1920928955078125e-07,str:2.0623207092285156e-05,result:6.318092346191406e-06,headerFields:0.0,entry:-6.318092346191406e-06,key:6.198883056640625e-06,val:1.1920928955078125e-05,lastResult:0.0,",9,34,"str:line,val:il,result:function,key:word,in:ini,urlAdapter:urlAdapter,httpConnection: httpconn,headerFields:headerColumnes,lastResult:lastResult,buf:auc,entry:ence,",Greedy,513,0.23915868997573853
23,"['9353182', '13339653', '    String test() throws ServerException, RtmApiException, IOException {\n        HttpClient httpclient = new DefaultHttpClient();\n        URI uri;\n        try {\n            uri = new URI(this.request.getUrl());\n            HttpPost httppost = new HttpPost(uri);\n            HttpResponse response = httpclient.execute(httppost);\n            InputStream is = response.getEntity().getContent();\n            StringBuilder sb = new StringBuilder();\n            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));\n            for (String line = r.readLine(); line != null; line = r.readLine()) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (URISyntaxException e) {\n            throw new RtmApiException(e.getMessage());\n        } catch (ClientProtocolException e) {\n            throw new RtmApiException(e.getMessage());\n        }\n    }\n', '    public void write(String resource, String destinationPath) throws IOException, CoreException {\n        OutputStream output = null;\n        InputStream contentStream = null;\n        try {\n            contentStream = new BufferedInputStream(new FileInputStream(resource));\n            output = new BufferedOutputStream(new FileOutputStream(destinationPath));\n            int available = contentStream.available();\n            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;\n            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);\n            byte[] readBuffer = new byte[chunkSize];\n            int n = contentStream.read(readBuffer);\n            while (n > 0) {\n                output.write(readBuffer, 0, n);\n                n = contentStream.read(readBuffer);\n            }\n        } finally {\n            if (contentStream != null) {\n                try {\n                    contentStream.close();\n                } catch (IOException e) {\n                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);\n                }\n            }\n            if (output != null) {\n                output.close();\n            }\n        }\n    }\n']",172,"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI url;
        try {
            url = new URI(this.request.getUrl());
            HttpPost httponse = new HttpPost(url);
            HttpResponse Response = httpclient.execute(httponse);
            InputStream os = Response.getEntity().getContent();
            StringBuilder lab = new StringBuilder();
            BufferedReader ir = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(os)));
            for (String lines = ir.readLine(); lines != null; lines = ir.readLine()) {
                lab.append(lines);
            }
            return lab.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
",0,0,0,-1,"httpclient,uri,httppost,response,is,sb,r,line","httpclient:0.0,uri:7.301568984985352e-05,httppost:0.0,response:6.592273712158203e-05,is:-7.11679458618164e-05,sb:0.00012606382369995117,r:1.1622905731201172e-05,line:-4.9948692321777344e-05,",7,19,"sb:lab,uri:url,response:Response,r:ir,httpclient:httpclient,httppost:httponse,line:lines,is:os,",Greedy,357,0.15551620324452717
24,"['3177725', '322658', '    public DBAccess(String pathToDb) {\n        if (instance != null) {\n            throw new IllegalStateException();\n        }\n        System.setProperty(""derby.system.home"", pathToDb);\n        try {\n            boolean exists = new File(pathToDb).exists();\n            new EmbeddedDriver();\n            Properties props = new Properties();\n            if (exists) {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);\n                connection.setAutoCommit(true);\n                Statement statement = connection.createStatement();\n                try {\n                } finally {\n                    statement.close();\n                }\n            } else {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);\n                connection.setAutoCommit(true);\n                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                StringBuilder query = new StringBuilder();\n                for (String s = reader.readLine(); s != null; s = reader.readLine()) {\n                    if (query.length() > 0) {\n                        query.append(\'\\n\');\n                    }\n                    query.append(s);\n                }\n                reader.close();\n                Statement statement = connection.createStatement();\n                try {\n                    String[] statements = query.toString().split("";(\\\\s)*"");\n                    for (String s : statements) {\n                        statement.execute(s);\n                    }\n                } finally {\n                    statement.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        instance = this;\n    }\n', '    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(""line.separator"");\n        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));\n        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());\n        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());\n        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());\n        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());\n        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());\n        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + "".meta"").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());\n                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());\n                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());\n                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());\n                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + "".extra"").exists()) {\n                fos.write(new String(""The author says:"" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n']",313,"    public DBAccess(String path2Database) {
        if (instance != null) {
            throw new IllegalStateException();
        }
        System.setProperty(""derby.system.home"", path2Database);
        try {
            boolean existence = new File(path2Database).existence();
            new EmbeddedDriver();
            Properties Properties = new Properties();
            if (existence) {
                condition = DriverManager.getConnection(protocol + ""rmpDB;"", Properties);
                condition.setAutoCommit(true);
                Statement journal = condition.createStatement();
                try {
                } finally {
                    journal.close();
                }
            } else {
                condition = DriverManager.getConnection(protocol + ""rmpDB;create=true"", Properties);
                condition.setAutoCommit(true);
                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");
                BufferedReader layer = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuilder request = new StringBuilder();
                for (String request = layer.readLine(); request != null; request = layer.readLine()) {
                    if (request.length() > 0) {
                        request.append('
');
                    }
                    request.append(request);
                }
                layer.close();
                Statement journal = condition.createStatement();
                try {
                    String[] Statements = request.toString().split("";(\\s)*"");
                    for (String request : Statements) {
                        journal.execute(request);
                    }
                } finally {
                    journal.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        instance = this;
    }
",0,0,0,-1,"pathToDb,exists,props,connection,statement,url,reader,query,s,statements","pathToDb:0.0,exists:0.0,props:0.0,connection:1.0728836059570312e-06,statement:-7.3909759521484375e-06,url:6.663799285888672e-05,reader:-9.5367431640625e-07,query:1.0251998901367188e-05,s:2.5033950805664062e-06,statements:0.0,",9,37,"url:url,query:request,s:request,connection:condition,pathToDb:path2Database,exists:existence,props:Properties,statements:Statements,reader:layer,statement:journal,",Greedy,499,0.23996797800064087
25,"['7003929', '4265804', '    public URLConnection openConnection(String string) throws ParserException {\n        final String prefix = ""file://localhost"";\n        String resource;\n        URL url;\n        StringBuffer buffer;\n        URLConnection ret;\n        try {\n            url = new URL(fixSpaces(string));\n            ret = openConnection(url);\n        } catch (MalformedURLException murle) {\n            try {\n                File file = new File(string);\n                resource = file.getCanonicalPath();\n                buffer = new StringBuffer(prefix.length() + resource.length());\n                buffer.append(prefix);\n                if (!resource.startsWith(""/"")) buffer.append(""/"");\n                buffer.append(resource);\n                url = new URL(fixSpaces(buffer.toString()));\n                ret = openConnection(url);\n            } catch (MalformedURLException murle2) {\n                String msg = ""Error in opening a connection to "" + string;\n                ParserException ex = new ParserException(msg, murle2);\n                throw ex;\n            } catch (IOException ioe) {\n                String msg = ""Error in opening a connection to "" + string;\n                ParserException ex = new ParserException(msg, ioe);\n                throw ex;\n            }\n        }\n        return (ret);\n    }\n', '    private static ArrayList<String> YahooSearch(String query) {\n        ArrayList<String> yahooSearchResults = new ArrayList<String>();\n        try {\n            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";\n            URL url = new URL(request);\n            System.out.println(""Host : "" + url.getHost());\n            url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            String finalContents = """";\n            while ((inputLine = reader.readLine()) != null) {\n                finalContents += ""\\n"" + inputLine;\n            }\n            Document doc = Jsoup.parse(finalContents);\n            Elements eles = doc.getElementsByTag(""url"");\n            for (Element ele : eles) {\n                yahooSearchResults.add(ele.text());\n                System.out.println(""YahooResult: "" + ele.text());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return yahooSearchResults;\n    }\n']",219,"    public URLConnection openConnection(String s) throws ParserException {
        final String header = ""file://localhost"";
        String remote;
        URL page;
        StringBuffer bb;
        URLConnection db;
        try {
            page = new URL(fixSpaces(s));
            db = openConnection(page);
        } catch (MalformedURLException murle) {
            try {
                File il = new File(s);
                remote = il.getCanonicalPath();
                bb = new StringBuffer(header.length() + remote.length());
                bb.append(header);
                if (!remote.startsWith(""/"")) bb.append(""/"");
                bb.append(remote);
                page = new URL(fixSpaces(bb.toString()));
                db = openConnection(page);
            } catch (MalformedURLException murle2) {
                String mode = ""Error in opening a connection to "" + s;
                ParserException Exc = new ParserException(mode, murle2);
                throw Exc;
            } catch (IOException ioe) {
                String mode = ""Error in opening a connection to "" + s;
                ParserException Exc = new ParserException(mode, ioe);
                throw Exc;
            }
        }
        return (db);
    }
",0,0,0,-1,"string,prefix,resource,url,buffer,ret,file,msg,ex","string:-2.0265579223632812e-05,prefix:1.1920928955078125e-06,resource:7.62939453125e-06,url:5.1021575927734375e-05,buffer:6.9141387939453125e-06,ret:6.556510925292969e-06,file:-1.2755393981933594e-05,msg:1.7881393432617188e-06,ex:-3.0994415283203125e-06,",9,38,"url:page,resource:remote,buffer:bb,ret:db,msg:mode,prefix:header,ex:Exc,file:il,string:s,",Greedy,463,0.20656954050064086
26,"['11548511', '19752873', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {\n        setHeader(resp);\n        try {\n            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());\n            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");\n            OutputStream fos = new FileOutputStream(tempFile);\n            syncServer.getServerModifications(command.getSession(), fos);\n            InputStream fis = new FileInputStream(tempFile);\n            resp.setContentLength(fis.available());\n            while (fis.available() > 0) {\n                resp.getOutputStream().write(fis.read());\n            }\n            resp.getOutputStream().flush();\n            resp.flushBuffer();\n        } catch (IOException ioe) {\n            logger.error(ioe.getMessage());\n        } catch (ImogSerializationException ex) {\n            logger.error(ex.getMessage());\n        }\n    }\n']",193,"    public static boolean decodeFileToFile(String inputfile, String outfile) {
        boolean open = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inputfile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int copy = -1;
            while ((copy = in.copy(url)) >= 0) {
                out.write(url, 0, copy);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",1,1,0,1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:-0.35264506936073303,out:0.7124504745006561,buffer:0.4963397681713104,read:0.23862147331237793,success:0.01612183451652527,",4,12,"out:out,buffer:url,read:copy,success:open,infile:inputfile,",Greedy,264,0.1147331436475118
27,"['16389677', '16301512', ""    public void extract(CabFolder cabfolder, File outputFolder) throws IOException {\n        InputStream in = null;\n        OutputStream out = null;\n        File file;\n        byte[] buffer = new byte[2048];\n        int read, remain, maxread = buffer.length;\n        in = new CabFileInputStream(cabfolder);\n        CabEntry[] cabentries = this.getEntries();\n        for (int i = 0; i < cabentries.length; i++) {\n            if (cabentries[i].getCabFolder() == cabfolder) {\n                file = new File(outputFolder, cabentries[i].getName().replace('\\\\', '/'));\n                FileUtils.createParents(file);\n                out = new FileOutputStream(file);\n                remain = cabentries[i].getInflatedSize();\n                while (remain != 0 && (read = in.read(buffer, 0, maxread)) != -1) {\n                    out.write(buffer, 0, read);\n                    remain -= read;\n                    if (buffer.length > remain) maxread = remain; else maxread = buffer.length;\n                }\n                in.close();\n                out.close();\n            }\n        }\n    }\n"", '    public static void copy(File src, File dst) throws IOException {\n        FileChannel inChannel;\n        FileChannel outChannel;\n        inChannel = new FileInputStream(src).getChannel();\n        outChannel = new FileOutputStream(dst).getChannel();\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        inChannel.close();\n        outChannel.close();\n    }\n']",223,"    public void extract(CabFolder cabfolder, File outputFolder) throws IOException {
        InputStream url = null;
        OutputStream obj = null;
        File ile;
        byte[] buffer = new byte[2048];
        int read, remain, maxread = buffer.length;
        url = new CabFileInputStream(cabfolder);
        CabEntry[] cabentries = this.getEntries();
        for (int i = 0; i < cabentries.length; i++) {
            if (cabentries[i].getCabFolder() == cabfolder) {
                ile = new File(outputFolder, cabentries[i].getName().replace('\\', '/'));
                FileUtils.createParents(ile);
                obj = new FileOutputStream(ile);
                remain = cabentries[i].getInflatedSize();
                while (remain != 0 && (read = url.read(buffer, 0, maxread)) != -1) {
                    obj.write(buffer, 0, read);
                    remain -= read;
                    if (buffer.length > remain) maxread = remain; else maxread = buffer.length;
                }
                url.close();
                obj.close();
            }
        }
    }
",1,1,0,1,"cabfolder,outputFolder,in,out,file,buffer,read,remain,maxread,cabentries,i","cabfolder:0.0,outputFolder:0.0,in:0.0019642114639282227,out:0.008216381072998047,file:0.006858348846435547,buffer:0.0006667971611022949,read:0.0012910962104797363,remain:0.0,maxread:0.0,cabentries:0.0,i:-0.003107607364654541,",3,12,"out:obj,file:ile,in:url,",Greedy,204,0.08198158740997315
28,"['4938184', '4494367', '    public void testParts() throws Exception {\n        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");\n        InputSource source = new InputSource(url.openStream());\n        source.setSystemId(url.toString());\n        IncludePartsInfo info = IncludePartsInfoParser.parse(source);\n        Map<String, IncludePartInfo> parts = info.getParts();\n        assertEquals(3, parts.size());\n        assertTrue(parts.containsKey(""aaa""));\n        assertTrue(parts.containsKey(""bbb""));\n        assertFalse(parts.containsKey(""ccc""));\n        assertTrue(parts.containsKey(""ddd""));\n    }\n', '    @Override\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String id = request.getParameter(""Id"");\n        String libid = request.getParameter(""LibId"");\n        System.out.println(""********************************printing starts here***************************"");\n        Enumeration enumx = request.getAttributeNames();\n        while (enumx.hasMoreElements()) {\n            String namex = enumx.nextElement().toString();\n            System.out.println(""REQ ATTR"" + namex + ""------"" + request.getAttribute(namex));\n        }\n        enumx = request.getSession().getAttributeNames();\n        while (enumx.hasMoreElements()) {\n            String namex = enumx.nextElement().toString();\n            System.out.println(""SESS ATTR"" + namex + ""------"" + request.getSession().getAttribute(namex));\n        }\n        enumx = request.getParameterNames();\n        while (enumx.hasMoreElements()) {\n            String namex = enumx.nextElement().toString();\n            System.out.println(""REQ PARAM"" + namex + ""------"" + request.getParameter(namex));\n        }\n        System.out.println(""********************************printing ends here***************************"");\n        String limitsSet = """";\n        try {\n            if (request.getSession().getAttribute(""searchLimits"") != null) {\n                System.out.println(""searchLimits set"");\n                limitsSet = ""SET"";\n                java.util.Hashtable htLimits = new java.util.Hashtable();\n                htLimits = (java.util.Hashtable) request.getSession().getAttribute(""searchLimits"");\n            } else {\n                limitsSet = ""UNSET"";\n                System.out.println(""searchLimits not set"");\n            }\n            java.util.Properties prop = System.getProperties();\n            prop.load(new FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + ""SystemFiles"" + java.io.File.separator + ""ENV_VAR.txt""));\n            System.out.println(""SEARCH MODE IS "" + searchmode + "" FILE PATH "" + ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + ""SystemFiles"" + java.io.File.separator + ""ENV_VAR.txt"");\n        } catch (Exception e) {\n        }\n        javax.servlet.http.HttpSession session = request.getSession();\n        session.setAttribute(""totalPages"", ""1"");\n        session.setAttribute(""formOfRec"", """");\n        String forward = ""singleRecordView"";\n        int link = 0, singleLink = 0;\n        java.util.Vector vecThisPage = new java.util.Vector();\n        aportal.form.cataloguing.SingleRecordForm svF = (aportal.form.cataloguing.SingleRecordForm) form;\n        opacHm = (ejb.bprocess.opac.xcql.OPACUtilitiesHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""OPACUtilities"");\n        ejb.bprocess.opac.xcql.OPACUtilities opacUt = opacHm.create();\n        System.out.println(""CLASS NO "" + request.getParameter(""ClassNo"") + "" ClassNoForwarded "" + session.getAttribute(""ClassNoForwarded""));\n        if (svF.getExportRec() == null || !(svF.getExportRec().equals(""export""))) {\n            System.out.println(""*************************************************************************** 1"");\n            if (id != null && libid != null && request.getParameter(""relation"") != null && !(session.getAttribute(""HostItemDisplay"") != null && session.getAttribute(""HostItemDisplay"").toString().equals(""false""))) {\n                System.out.println(""*************************************************************************** 2"");\n                home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""SearchSRUWCatalogue"");\n                ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();\n                String catId1 = id;\n                String ownId1 = libid;\n                System.out.println(""*********************CatId1: "" + catId1);\n                svF.setCatalogueRecordId(catId1);\n                svF.setOwnerLibraryId(ownId1);\n                String rel = request.getParameter(""relation"");\n                java.util.Vector vecL = searchCat.getRelatedCatalogueRecords(null, catId1, ownId1, rel);\n                request.setAttribute(""LuceneVector"", vecL);\n                session.setAttribute(""searchVec"", vecL);\n                singleLink = 1;\n                session.setAttribute(""HostItemDisplay"", ""false"");\n                link = 1;\n                forward = ""searchRes"";\n                vecThisPage.addElement(catId1);\n                vecThisPage.addElement(ownId1);\n            } else if (link == 0 || singleLink == 1) {\n                System.out.println(""*************************************************************************** 3"");\n                System.out.println(""LINK AND SINGLE LINK "" + link + "" single "" + singleLink);\n                if ((request.getParameter(""ClassNo"") != null) && session.getAttribute(""ClassNoForwarded"") == null) {\n                    System.out.println(""*************************************************************************** 4"");\n                    System.out.println(""action called for class no."");\n                    String classificNo = request.getParameter(""ClassNo"");\n                    System.out.println(""TITLE WORDS "");\n                    home = (ejb.bprocess.opac.xcql.SearchSRUWCatalogueHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""SearchSRUWCatalogue"");\n                    ejb.bprocess.opac.xcql.SearchSRUWCatalogue searchCat = home.create();\n                    String rawSearchText = (new beans.miscellaneous.RequestStringProcessor()).processString(""*"" + classificNo + ""*"");\n                    System.out.println(""raw search Text"" + rawSearchText);\n                    String searchText = ""classificationNumber="" + rawSearchText;\n                    System.out.println(""search text is "" + searchText);\n                    String xmlRes = (new org.z3950.zing.cql.CQLParser()).parse(searchText).toXCQL(0);\n                    java.util.Hashtable hs = new java.util.Hashtable();\n                    java.util.Vector v1 = new java.util.Vector();\n                    if (session.getAttribute(""searchLimits"") != null) {\n                        System.out.println(""*************************************************************************** 5"");\n                        hs = (java.util.Hashtable) session.getAttribute(""searchLimits"");\n                    }\n                    Vector vec = new Vector();\n                    String solrQuery = Utility.getInstance().simplifiedSolrQuery(classificNo, ""classificationNumber"");\n                    if (limitsSet.equalsIgnoreCase(""SET"")) {\n                        System.out.println(""*************************************************************************** 6"");\n                        String limitsQuery = limitsSolrQuery(hs);\n                        solrQuery += limitsQuery;\n                    }\n                    solrQuery += "" & "";\n                    Vector newRetvec = searchCat.processSolrQuery(1, 25, solrQuery, ""245_Tag"", ""asc"");\n                    Hashtable ht = (Hashtable) newRetvec.get(0);\n                    String totrec = (String) ht.get(""HITS"");\n                    session.setAttribute(""TOTALREC"", Integer.parseInt(totrec));\n                    v1 = (Vector) ht.get(""RESULTS"");\n                    hs.put(""Query"", solrQuery);\n                    if (v1.size() > 0) {\n                        System.out.println(""*************************************************************************** 7"");\n                        hs.put(""searchText"", rawSearchText);\n                        hs.put(""noOfRecords"", 25);\n                        hs.put(""browseType"", ""Classification Number"");\n                        session.setAttribute(""searchEntry"", hs);\n                        session.setAttribute(""searchVec"", v1);\n                        forward = ""searchRes"";\n                    } else {\n                        System.out.println(""*************************************************************************** 8"");\n                        forward = ""home"";\n                    }\n                } else {\n                    System.out.println(""*************************************************************************** 9"");\n                    System.out.println(""ELSE CALLED "");\n                    String record = request.getParameter(""record"");\n                    String recNo = request.getParameter(""recNo"");\n                    int catId = 0, ownerId = 0;\n                    String title = """";\n                    if (id != null && libid != null) {\n                        System.out.println(""*************************************************************************** 10"");\n                        catId = new Integer(id).intValue();\n                        ownerId = new Integer(libid).intValue();\n                        title = ""title"";\n                        svF.setCatalogueRecordId(id);\n                        svF.setOwnerLibraryId(libid);\n                    }\n                    session.setAttribute(""SingleViewExport"", vecThisPage);\n                    if (session.getAttribute(""OnlySingleRec"") != null && session.getAttribute(""OnlySingleRec"").toString().equals(""true"")) {\n                        System.out.println(""*************************************************************************** 11"");\n                        java.util.Vector v1 = new java.util.Vector();\n                        System.out.println(""SEARCH MODE "" + searchmode);\n                        if (searchmode.equalsIgnoreCase(""a"")) {\n                            System.out.println(""*************************************************************************** 12"");\n                            System.out.println(""SEARCHMODE IN SEARCH VIEW ACTION (IF) "" + searchmode);\n                            v1 = (java.util.Vector) request.getAttribute(""LuceneVector"");\n                            System.out.println(""VECTOR V1 "" + v1);\n                        } else {\n                            System.out.println(""*************************************************************************** 13"");\n                            System.out.println(""SEARCHMODE IN SEARCH VIEW ACTION (ELSE)"" + searchmode);\n                            v1 = (java.util.Vector) session.getAttribute(""searchVec"");\n                        }\n                        Object[] obj = (Object[]) v1.elementAt(0);\n                        String str[] = (String[]) obj[0];\n                        java.util.Hashtable h = new java.util.Hashtable();\n                        String tit = """";\n                        h = (java.util.Hashtable) obj[1];\n                        System.out.println(""HASH TABLE in view action "" + h);\n                        catId = new Integer(str[0]).intValue();\n                        ownerId = new Integer(str[1]).intValue();\n                        title = h.get(""TITLE"").toString();\n                        svF.setAttachmentsAndUrl("""");\n                        if ((h.get(""URL"").toString() != null && h.get(""URL"").toString().equals(""AVAILABLE"")) || (h.get(""ATTACHMENTS"") != null && h.get(""ATTACHMENTS"").equals(""AVAILABLE""))) {\n                            System.out.println(""*************************************************************************** 14"");\n                            svF.setAttachmentsAndUrl(""available"");\n                        }\n                        record = ""full"";\n                        recNo = ""1"";\n                        session.removeAttribute(""OnlySingleRec"");\n                    }\n                    if (session.getAttribute(""HostItemDisplay"") != null && session.getAttribute(""HostItemDisplay"").equals(""false"")) {\n                        System.out.println(""*************************************************************************** 15"");\n                        session.removeAttribute(""HostItemDisplay"");\n                    }\n                    session.setAttribute(""Title"", title);\n                    System.out.println(""Title..........................................."" + title);\n                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(catId, ownerId);\n                    System.out.println(""hash1 ................................"" + hash1);\n                    vecThisPage.addElement(String.valueOf(catId));\n                    vecThisPage.addElement(String.valueOf(ownerId));\n                    svF.setAttachmentsAndUrl("""");\n                    if (hash1.get(""URL"") != null && hash1.get(""ATTACHMENTS"") != null && (hash1.get(""URL"").toString().equals(""AVAILABLE"") || hash1.get(""ATTACHMENTS"").toString().equals(""AVAILABLE""))) {\n                        System.out.println(""*************************************************************************** 16"");\n                        svF.setAttachmentsAndUrl(""available"");\n                    }\n                    svF.setRecordNo(recNo);\n                    session.setAttribute(""record"", record);\n                    java.util.Vector vecCO = (java.util.Vector) session.getAttribute(""CatAndOwner"");\n                    svF.setCatCur(catId);\n                    svF.setOwnerCur(ownerId);\n                    svF.setPrevExists(""no"");\n                    svF.setNextExists(""no"");\n                    if (vecCO != null) {\n                        System.out.println(""*************************************************************************** 17"");\n                        for (int j = 0; j < vecCO.size(); j = j + 4) {\n                            int c = new Integer(vecCO.elementAt(j).toString()).intValue();\n                            int o = new Integer(vecCO.elementAt(j + 1).toString()).intValue();\n                            if (c == catId && o == ownerId) {\n                                System.out.println(""*************************************************************************** 18"");\n                                if (j != 0) {\n                                    System.out.println(""*************************************************************************** 19"");\n                                    int catPrev = new Integer(vecCO.elementAt(j - 4).toString()).intValue();\n                                    int ownerPrev = new Integer(vecCO.elementAt(j - 3).toString()).intValue();\n                                    svF.setCatPrev(catPrev);\n                                    svF.setOwnerPrev(ownerPrev);\n                                    svF.setTitlePrev(vecCO.elementAt(j - 2).toString());\n                                    svF.setRecPrev(vecCO.elementAt(j - 1).toString());\n                                    svF.setPrevExists(""yes"");\n                                }\n                                if (j < vecCO.size() - 4) {\n                                    System.out.println(""*************************************************************************** 20"");\n                                    int catNext = new Integer(vecCO.elementAt(j + 4).toString()).intValue();\n                                    int ownerNext = new Integer(vecCO.elementAt(j + 5).toString()).intValue();\n                                    svF.setCatNext(catNext);\n                                    svF.setOwnerNext(ownerNext);\n                                    svF.setTitleNext(vecCO.elementAt(j + 6).toString());\n                                    svF.setRecNext(vecCO.elementAt(j + 7).toString());\n                                    svF.setNextExists(""yes"");\n                                }\n                            }\n                        }\n                    }\n                    String str[] = (String[]) hash1.get(""Biblo_Mat"");\n                    int bib_id = new Integer(str[0]).intValue();\n                    int mat_id = new Integer(str[1]).intValue();\n                    aportal.view.RecordView rv = new aportal.view.DesignFactory().getCorView(bib_id, mat_id, ""full"");\n                    String type = """";\n                    if (bib_id == 3 && mat_id == 1) {\n                        type = ""Book"";\n                    } else if (bib_id == 4 && mat_id == 1) {\n                        type = ""Serial"";\n                    } else if (bib_id == 1 && mat_id == 1) {\n                        type = ""Book Chapter"";\n                    } else if (bib_id == 2 && mat_id == 1) {\n                        type = ""Serial Article"";\n                    } else {\n                        type = ejb.bprocess.util.TypeDefinition.getInstance().getTypeDefinition(String.valueOf(bib_id), String.valueOf(mat_id));\n                    }\n                    java.util.Hashtable hMono = (java.util.Hashtable) hash1.get(""MonoGraphRecords"");\n                    java.util.Hashtable h4 = rv.getView(hash1);\n                    h4.put(""Type"", type);\n                    try {\n                        String sessionid = request.getSession().getId();\n                        ejb.bprocess.holdings.HoldingsStatement holdingsStatement = ((ejb.bprocess.holdings.HoldingsStatementHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""HoldingsStatement"")).create();\n                        java.util.Vector vecLib = new java.util.Vector();\n                        vecLib.addElement(""1"");\n                        if (session.getAttribute(""Libraries"") != null) {\n                            System.out.println(""*************************************************************************** 21"");\n                            vecLib = (java.util.Vector) session.getAttribute(""Libraries"");\n                        }\n                        String libIds = libid;\n                        request.setAttribute(""catRecId"", String.valueOf(catId));\n                        request.setAttribute(""ownLibId"", String.valueOf(ownerId));\n                        request.setAttribute(""libIds"", String.valueOf(libIds));\n                        svF.setHashSing(h4);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        } else if (svF.getExportRec() != null && svF.getExportRec().equals(""export"")) {\n            System.out.println(""*************************************************************************** 22"");\n            svF.setExportRec(null);\n            vecThisPage = (java.util.Vector) session.getAttribute(""SingleViewExport"");\n            String format = svF.getSf();\n            if (format.equals(""marc"")) {\n                String marc = opacUt.getDetailsForMultiRecordViewMARC(vecThisPage);\n                svF.setDisplayFormat(marc);\n                session.setAttribute(""RecordDisplay"", marc);\n                forward = ""RecordFormat"";\n            } else if (format.equals(""marcXml"")) {\n                String marcXML = opacUt.getDetailsForMultiRecordViewMARCXML(vecThisPage);\n                svF.setDisplayFormat(marcXML);\n                response.setContentType(""text/xml"");\n                session.setAttribute(""RecordDisplay"", marcXML);\n                forward = ""RecordFormat"";\n            } else if (format.equals(""mods"")) {\n                String mods = opacUt.getDetailsForMultiRecordViewMODS(vecThisPage);\n                svF.setDisplayFormat(mods);\n                session.setAttribute(""RecordDisplay"", mods);\n                forward = ""RecordFormat"";\n            } else if (format.equals(""dc"")) {\n                String dc = opacUt.getDetailsForMultiRecordViewDublinCore(vecThisPage);\n                svF.setDisplayFormat(dc);\n                session.setAttribute(""RecordDisplay"", dc);\n                forward = ""RecordFormat"";\n            } else if (format.equals(""agris"")) {\n                String agr = opacUt.getDetailsForMultiRecordViewAgris(vecThisPage);\n                svF.setDisplayFormat(agr);\n                session.setAttribute(""RecordDisplay"", agr);\n                forward = ""RecordFormat"";\n            } else if (format.equals(""text"")) {\n                java.util.Vector vecTextDis = new java.util.Vector();\n                for (int i2 = 0; i2 < vecThisPage.size(); i2 = i2 + 2) {\n                    java.util.Hashtable hash1 = opacUt.getDetailsForSingleCatalogueRecord(new Integer(vecThisPage.elementAt(i2).toString()).intValue(), new Integer(vecThisPage.elementAt(i2 + 1).toString()).intValue());\n                    aportal.view.ISBDView fullView = new aportal.view.ISBDView();\n                    java.util.Hashtable hashCit = fullView.getView(hash1);\n                    vecTextDis.addElement(hashCit);\n                    forward = ""RecordFormatText"";\n                }\n                session.setAttribute(""RecordTextDisplay"", vecTextDis);\n                if (svF.getPs() != null && svF.getPs().equals(""email"")) {\n                    boolean flag = false;\n                    if (svF.getEmail() != null && !(svF.getEmail().equals(""""))) {\n                        String emailId = svF.getEmail();\n                        try {\n                            String sessionid = request.getSession().getId();\n                            java.net.URL url = new java.net.URL(""http://localhost:"" + request.getServerPort() + ""/newgenlibctxt/jsp/aportal/cataloguing/RecordDisplayText.jsp;jsessionid="" + sessionid);\n                            java.net.URLConnection urlCon = url.openConnection();\n                            java.io.InputStream is = urlCon.getInputStream();\n                            String htmlContent = """";\n                            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(is));\n                            String line = """";\n                            while ((line = br.readLine()) != null) {\n                                htmlContent = htmlContent + line;\n                            }\n                            flag = ((ejb.bprocess.util.DispatchEmailHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""DispatchEmail"")).create().dispatchEmail(null, emailId, ""OPAC results"", htmlContent);\n                        } catch (Exception exp) {\n                            exp.printStackTrace();\n                        }\n                    }\n                    String mailMessage = ""The selected records have been successfully mailed to "" + svF.getEmail();\n                    if (flag == false) {\n                        mailMessage = ""<h4><p>The selected records could not be mailed to "" + svF.getEmail() + ""&nbsp; These might be the possible reasons.</p></h4>"" + ""<h5><ol> <li>The email id entered is not a valid one</font></li>"" + ""<li>The email id domain might not be in the list of allowed  recipient&nbsp; hosts</li>"" + ""<li>There might a error in connectivity to the mail server</li></ol></h5>"" + ""<h4><p>Please contact the  Network Administrator </p></h4>"";\n                    }\n                    session.setAttribute(""MailStatus"", mailMessage);\n                    forward = ""SendEmail"";\n                }\n            }\n        }\n        String version = ejb.bprocess.util.StaticValues.getInstance().getVersion();\n        if (version != null && !version.equals("""")) {\n            svF.setVersion(version);\n        }\n        if (session.getAttribute(""ClassNoForwarded"") != null) {\n            session.removeAttribute(""ClassNoForwarded"");\n        }\n        System.out.println(""final forward is ......................... "" + forward);\n        return mapping.findForward(forward);\n    }\n']",134,"    public void testParts() throws Exception {
        URL file = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(file.openStream());
        source.setSystemId(file.toString());
        IncludePartsInfo file = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> lines = file.getParts();
        assertEquals(3, lines.size());
        assertTrue(lines.containsKey(""aaa""));
        assertTrue(lines.containsKey(""bbb""));
        assertFalse(lines.containsKey(""ccc""));
        assertTrue(lines.containsKey(""ddd""));
    }
",0,0,1,1,"url,source,info,parts","url:1.1920928955078125e-07,source:-1.5139579772949219e-05,info:1.2040138244628906e-05,parts:1.800060272216797e-05,",3,11,"parts:lines,info:file,url:file,",Greedy,163,0.08174961010615031
29,"['12264242', '16324555', '    public static String generateSHA1(final String data) {\n        final StringBuilder hash = new StringBuilder(40);\n        try {\n            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");\n            sha1.update(data.getBytes());\n            final byte[] digest = sha1.digest();\n            for (byte aDigest : digest) {\n                String hex = Integer.toHexString(aDigest);\n                if (hex.length() == 1) {\n                    hex = ""0"" + hex;\n                }\n                hex = hex.substring(hex.length() - 2);\n                hash.append(hex);\n            }\n        } catch (NoSuchAlgorithmException e) {\n        }\n        return hash.toString();\n    }\n', '    public static String gerarDigest(String mensagem) {\n        String mensagemCriptografada = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA"");\n            System.out.println(""Mensagem original: "" + mensagem);\n            md.update(mensagem.getBytes());\n            byte[] digest = md.digest();\n            mensagemCriptografada = converterBytesEmHexa(digest);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return mensagemCriptografada;\n    }\n']",135,"    public static String generateSHA1(final String DATA) {
        final StringBuilder url = new StringBuilder(40);
        try {
            final MessageDigest haone = MessageDigest.getInstance(""haone"");
            haone.update(DATA.getBytes());
            final byte[] generit = haone.generit();
            for (byte aDesting : generit) {
                String hack = Integer.toHexString(aDesting);
                if (hack.length() == 1) {
                    hack = ""0"" + hack;
                }
                hack = hack.substring(hack.length() - 2);
                url.append(hack);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return url.toString();
    }
",1,1,1,-1,"data,hash,sha1,digest,aDigest,hex","data:0.00027364492416381836,hash:0.002297639846801758,sha1:0.0,digest:0.0,aDigest:0.0,hex:0.0035483837127685547,",6,22,"hex:hack,hash:url,data:DATA,sha1:haone,digest:generit,aDigest:aDesting,",Greedy,290,0.11898884375890097
30,"['22197335', '12759328', '    private void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    final void importSelectedEntity() {\n        TreePath path = projectsTree.getSelectionPath();\n        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();\n        Object userObject = selectedNode.getUserObject();\n        if (userObject instanceof ProjectSet) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setMultiSelectionEnabled(false);\n            fileChooser.setFileFilter(new FileNameExtensionFilter(""JFPSM Projects"", ""jfpsm.zip""));\n            int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());\n            if (result == JFileChooser.APPROVE_OPTION) {\n                String fullname = fileChooser.getSelectedFile().getName();\n                String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());\n                ProjectSet workspace = (ProjectSet) userObject;\n                boolean confirmLoad = true;\n                if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {\n                    confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), ""Overwrite project \\"""" + projectName + ""\\"""" + ""?"", ""Overwrite project"", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;\n                    if (confirmLoad) {\n                        final int count = selectedNode.getChildCount();\n                        DefaultMutableTreeNode projectNode = null;\n                        for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {\n                            projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);\n                            break;\n                        }\n                        Project project = (Project) projectNode.getUserObject();\n                        for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);\n                        for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);\n                        workspace.removeProject(project);\n                        ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);\n                    }\n                }\n                if (confirmLoad) {\n                    File projectFile = new File(workspace.createProjectPath(projectName));\n                    boolean success = true;\n                    try {\n                        success = projectFile.createNewFile();\n                        if (success) {\n                            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));\n                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));\n                            byte[] buf = new byte[1024];\n                            int len;\n                            while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);\n                            bis.close();\n                            bos.close();\n                        }\n                    } catch (Throwable throwable) {\n                        displayErrorMessage(throwable, false);\n                        success = false;\n                    }\n                    if (success) addProject(projectName);\n                }\n            }\n        } else if (userObject instanceof Map) {\n            Map map = (Map) userObject;\n            Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();\n            importImageForSelectedMap(floor, map);\n        }\n    }\n']",84,"    private void copyFile(File url, File dst) throws IOException {
        InputStream id = new FileInputStream(url);
        OutputStream output = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = id.read(buf)) > 0) output.write(buf, 0, len);
        id.close();
        output.close();
    }
",1,1,0,1,"src,dst,in,out,buf,len","src:0.00398939847946167,dst:0.0,in:0.0012470483779907227,out:0.004721224308013916,buf:0.0005016326904296875,len:0.0009421706199645996,",3,8,"out:output,src:url,in:id,",Greedy,144,0.06898297071456909
31,"['698010', '5795551', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public static void main(String[] args) throws Exception {\n        System.setProperty(""debug"", ""debug"");\n        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");\n        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");\n        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");\n        HttpURLConnection request = (HttpURLConnection) url.openConnection();\n        request.setDoOutput(true);\n        request.setRequestMethod(""POST"");\n        HttpParameters para = new HttpParameters();\n        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\\\+"", ""%20""));\n        consumer.setAdditionalParameters(para);\n        consumer.sign(request);\n        OutputStream ot = request.getOutputStream();\n        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\\\+"", ""%20"").getBytes());\n        ot.flush();\n        ot.close();\n        System.out.println(""Sending request..."");\n        request.connect();\n        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n        String b = null;\n        while ((b = reader.readLine()) != null) {\n            System.out.println(b);\n        }\n    }\n']",249,,1,0,,-4,"view,url,in,bin,line,version,build",,,,,Greedy,1,0.00655666987101237
32,"['15766371', '5221377', '    public static String encodeMD5(String s) throws NoSuchAlgorithmException {\n        MessageDigest m = null;\n        String result = null;\n        m = MessageDigest.getInstance(""MD5"");\n        m.update(s.getBytes(), 0, s.length());\n        result = new BigInteger(1, m.digest()).toString(16);\n        if (result.length() == 31) {\n            result = ""0"" + result;\n        }\n        return result;\n    }\n', '    public File unpackResource(String resourceName) throws IOException {\n        File file = null;\n        URL url = getURL(""/"" + resourceName);\n        URLConnection urlConn = url.openConnection();\n        if (urlConn instanceof JarURLConnection) {\n            file = handleJarFile((JarURLConnection) urlConn, resourceName);\n        } else if (urlConn instanceof BundleURLConnection) {\n            file = handleBundleFile((BundleURLConnection) urlConn);\n        } else {\n            file = handleClassicFile(resourceName);\n        }\n        return file;\n    }\n']",94,"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest hm = null;
        String string = null;
        hm = MessageDigest.getInstance(""MD5"");
        hm.update(s.getBytes(), 0, s.length());
        string = new BigInteger(1, hm.digest()).toString(16);
        if (string.length() == 31) {
            string = ""0"" + string;
        }
        return string;
    }
",0,0,0,-1,"s,m,result","s:-0.00026363134384155273,m:-1.3113021850585938e-05,result:-8.511543273925781e-05,",2,10,"m:hm,result:string,s:s,",Greedy,176,0.07389381726582846
33,"['20026764', '20254498', '    @Override\n    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum lang) throws IOException {\n        File tempFile = File.createTempFile(""oss"", "".pptx"");\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(tempFile);\n            IOUtils.copy(streamLimiter.getNewInputStream(), fos);\n            fos.close();\n        } catch (IOException e) {\n            if (fos != null) IOUtils.closeQuietly(fos);\n            throw e;\n        }\n        try {\n            XSLFSlideShow pptSlideShow = new XSLFSlideShow(tempFile.getAbsolutePath());\n            XSLFPowerPointExtractor poiExtractor = new XSLFPowerPointExtractor(pptSlideShow);\n            CoreProperties info = poiExtractor.getCoreProperties();\n            if (info != null) {\n                addField(ParserFieldEnum.title, info.getTitle());\n                addField(ParserFieldEnum.creator, info.getCreator());\n                addField(ParserFieldEnum.subject, info.getSubject());\n                addField(ParserFieldEnum.description, info.getDescription());\n                addField(ParserFieldEnum.keywords, info.getKeywords());\n            }\n            String content = poiExtractor.getText(true, true);\n            addField(ParserFieldEnum.content, StringUtils.replaceConsecutiveSpaces(content, "" ""));\n            langDetection(10000, ParserFieldEnum.content);\n        } catch (OpenXML4JException e) {\n            throw new IOException(e);\n        } catch (XmlException e) {\n            throw new IOException(e);\n        }\n    }\n', '    public static void main(String[] args) throws IOException {\n        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));\n        String[] files = new File(Constants.INDEX_PATH).list();\n        for (int i = 0; i < files.length; i++) {\n            String f = files[i];\n            if (f.equals(""deletable"") || f.startsWith(""."")) continue;\n            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));\n            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));\n            byte[] buf = new byte[16384];\n            int n;\n            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n            in.close();\n            out.close();\n            filesTxt.println(f);\n        }\n        filesTxt.close();\n    }\n']",264,"    @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum lang) throws IOException {
        File tempFile = File.createTempFile(""oss"", "".pptx"");
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(tempFile);
            IOUtils.copy(streamLimiter.getNewInputStream(), fos);
            fos.close();
        } catch (IOException e) {
            if (fos != null) IOUtils.closeQuietly(fos);
            throw e;
        }
        try {
            XSLFSlideShow pptSlideShow = new XSLFSlideShow(tempFile.getAbsolutePath());
            XSLFPowerPointExtractor poiExtractor = new XSLFPowerPointExtractor(pptSlideShow);
            CoreProperties info = poiExtractor.getCoreProperties();
            if (info != null) {
                addField(ParserFieldEnum.title, info.getTitle());
                addField(ParserFieldEnum.creator, info.getCreator());
                addField(ParserFieldEnum.subject, info.getSubject());
                addField(ParserFieldEnum.description, info.getDescription());
                addField(ParserFieldEnum.keywords, info.getKeywords());
            }
            String source = poiExtractor.getText(true, true);
            addField(ParserFieldEnum.source, StringUtils.replaceConsecutiveSpaces(source, "" ""));
            langDetection(10000, ParserFieldEnum.source);
        } catch (OpenXML4JException e) {
            throw new IOException(e);
        } catch (XmlException e) {
            throw new IOException(e);
        }
    }
",1,1,1,-1,"streamLimiter,lang,tempFile,fos,pptSlideShow,poiExtractor,info,content","streamLimiter:0.0,lang:-0.0385134220123291,tempFile:0.0,fos:0.0,pptSlideShow:0.0,poiExtractor:0.0,info:0.055444300174713135,content:0.25553518533706665,",1,4,"content:source,info:info,streamLimiter:streamLimiter,tempFile:tempFile,fos:fos,pptSlideShow:pptSlideShow,poiExtractor:poiExtractor,lang:lang,",Greedy,381,0.16953561703364053
34,"['19434892', '18778239', '            public void handle() {\n                if (requestCounter == 0) {\n                    requestCounter++;\n                    return;\n                }\n                requestCounter++;\n                Iterator it = loggerTimeouts.keySet().iterator();\n                while (it.hasNext()) {\n                    String host = (String) it.next();\n                    String timeout = (String) loggerTimeouts.get(host);\n                    int timeoutVal = Integer.parseInt(timeout);\n                    if (timeoutVal > 0) {\n                        timeoutVal /= 10;\n                    }\n                    int timeoutMod = (requestCounter % timeoutVal);\n                    if (timeoutMod == 0) {\n                        Object loggerFile = loggerFiles.get(host);\n                        Object loggerFilenameObject = loggerFilenames.get(host);\n                        Object loggerDestObject = loggerDests.get(host);\n                        Object loggerCompressObject = loggerCompresses.get(host);\n                        Object loggerDayObject = loggerDays.get(host);\n                        Object loggerArchiveObject = loggerArchives.get(host);\n                        Object loggerDeleteObject = loggerDeletes.get(host);\n                        boolean rotateCompress = false;\n                        boolean rotateDelete = false;\n                        String rotateDest = null;\n                        String logFile = null;\n                        String rotateArchive = null;\n                        int rotateDays = 0;\n                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {\n                            rotateCompress = true;\n                        }\n                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {\n                            rotateDelete = true;\n                        }\n                        if (loggerDestObject != null) {\n                            rotateDest = (String) loggerDestObject;\n                        }\n                        if (loggerFilenameObject != null) {\n                            logFile = (String) loggerFilenameObject;\n                        }\n                        if (loggerArchiveObject != null) {\n                            rotateArchive = (String) loggerArchiveObject;\n                        }\n                        if (loggerDayObject != null) {\n                            rotateDays = Integer.parseInt((String) loggerDayObject);\n                        }\n                        FileChannel srcChannel, destChannel;\n                        String destOutFile = logFile + ""."" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(""/"") != -1) {\n                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(""/"") != -1) {\n                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte buf[] = new byte[1024];\n                                int len;\n                                while ((len = in.read(buf)) > 0) {\n                                    out.write(buf, 0, len);\n                                }\n                                in.close();\n                                out.finish();\n                                out.close();\n                                Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFileCompressed + ""\'"");\n                                buf = null;\n                                out = null;\n                                in = null;\n                            } catch (Exception e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\': "" + e);\n                            }\n                        } else {\n                            try {\n                                srcChannel = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to read log file \'"" + logFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                destChannel.close();\n                                destChannel = null;\n                                srcChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to copy data from file \'"" + logFile + ""\' to \'"" + destOutFile + ""\' for file rotation: "" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\'"");\n                        }\n                        if (rotateDelete) {\n                            try {\n                                ((PrintStream) loggerFile).close();\n                            } catch (Exception e) {\n                            }\n                            (new File(logFile)).delete();\n                            loggerFiles.remove(host);\n                            addLogger(host, logFile);\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + "".zip"";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + ""/"" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + ""/"" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            fileList = null;\n                            format1 = null;\n                            archive = null;\n                        }\n                    }\n                }\n                it = null;\n            }\n', '    public void init() {\n        File[] configsDirectories = { XPontusConstantsIF.XPONTUS_PLUGINS_DATA_DIR, XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, XPontusConstantsIF.XPONTUS_DATABASE_CONFIG_DIR, XPontusConstantsIF.XPONTUS_PLUGINS_DIR, XPontusConstantsIF.XPONTUS_CACHE_DIR };\n        for (int i = 0; i < configsDirectories.length; i++) {\n            if (!configsDirectories[i].exists()) {\n                configsDirectories[i].mkdirs();\n            }\n        }\n        String[] locations = { ""/net/sf/xpontus/configuration/editorPanel.properties"", ""/net/sf/xpontus/configuration/general.properties"", ""/net/sf/xpontus/configuration/mimetypes.properties"" };\n        try {\n            for (String loc : locations) {\n                String outName = FilenameUtils.getName(loc);\n                File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName);\n                if (!output.exists()) {\n                    if (loc.equals(locations[0])) {\n                        Properties hackProps = new Properties();\n                        InputStream is = getClass().getResourceAsStream(loc);\n                        hackProps.load(is);\n                        Font hackFont = UIManager.getFont(""EditorPane.font"");\n                        StrBuilder strFont = new StrBuilder();\n                        strFont.append(hackFont.getFamily() + "","" + hackFont.getStyle() + "","" + hackFont.getSize());\n                        hackProps.put(""EditorPane.Font"", strFont.toString());\n                        OutputStream out = new FileOutputStream(output);\n                        hackProps.store(out, null);\n                        out.close();\n                        is.close();\n                    } else {\n                        InputStream is = getClass().getResourceAsStream(loc);\n                        OutputStream out = new FileOutputStream(output);\n                        IOUtils.copy(is, out);\n                        out.close();\n                        is.close();\n                    }\n                }\n                if (!outName.equals(""mimetypes.properties"")) {\n                    Properties m_properties = PropertiesConfigurationLoader.load(output);\n                    Iterator it = m_properties.keySet().iterator();\n                    while (it.hasNext()) {\n                        Object m_key = it.next();\n                        Object m_value = m_properties.get(m_key);\n                        XPontusConfig.put(m_key, m_value);\n                    }\n                }\n            }\n        } catch (Exception err) {\n            err.printStackTrace();\n        }\n        Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE);\n        String[] f = m_props.get(""EditorPane.Font"").toString().split("","");\n        String family = f[0].trim();\n        String style1 = f[1].trim();\n        int style = Integer.parseInt(style1);\n        int size = Integer.parseInt(f[2].trim());\n        Font m_font = new Font(family, style, size);\n        XPontusConfig.put(""EditorPane.Font"", m_font);\n        Map map = new HashMap();\n        map.put(ROLE, this);\n        PropertiesHolder.registerProperty(XPontusSettings.KEY, map);\n        DockableContainerFactory.setFactory(new XPontusDockableContainerFactory());\n        FileHistoryList.init();\n        initDefaultSettings();\n    }\n']",1144,"            public void handle() {
                if ( requestClock == 0) {
                     requestClock++;
                    return;
                }
                 requestClock++;
                Iterator ind = loggerTimeouts.keySet().iterator();
                while (ind.hasNext()) {
                    String url = (String) ind.next();
                    String connection = (String) loggerTimeouts.get(url);
                    int timeoutLen = Integer.parseInt(connection);
                    if (timeoutLen > 0) {
                        timeoutLen /= 10;
                    }
                    int timeoutNum = ( requestClock % timeoutLen);
                    if (timeoutNum == 0) {
                        Object loggerFiles = loggerFiles.get(url);
                        Object loggerDirectoryObject = loggerFilenames.get(url);
                        Object loggerDestPool = loggerDests.get(url);
                        Object loggercompressFile = loggerCompresses.get(url);
                        Object loggerDaysobject = loggerDays.get(url);
                        Object loggerArchiveObject = loggerArchives.get(url);
                        Object logerDeleteobject = loggerDeletes.get(url);
                        boolean rotateExpress = false;
                        boolean rotateDelete = false;
                        String polgateRoute = null;
                        String LogRoute = null;
                        String rotateARCHIVE = null;
                        int rotateFiles = 0;
                        if (loggercompressFile != null && ((String) loggercompressFile).equalsIgnoreCase(""true"")) {
                            rotateExpress = true;
                        }
                        if (logerDeleteobject != null && ((String) logerDeleteobject).equalsIgnoreCase(""true"")) {
                            rotateDelete = true;
                        }
                        if (loggerDestPool != null) {
                            polgateRoute = (String) loggerDestPool;
                        }
                        if (loggerDirectoryObject != null) {
                            LogRoute = (String) loggerDirectoryObject;
                        }
                        if (loggerArchiveObject != null) {
                            rotateARCHIVE = (String) loggerArchiveObject;
                        }
                        if (loggerDaysobject != null) {
                            rotateFiles = Integer.parseInt((String) loggerDaysobject);
                        }
                        FileChannel insFile,  destChan;
                        String srcOutPath = LogRoute + ""."" + System.currentTimeMillis();
                        String destOutFileRepressed = LogRoute + ""."" + System.currentTimeMillis() + "".gz"";
                        if (polgateRoute != null) {
                            (new File(polgateRoute)).mkdirs();
                            if (srcOutPath.indexOf(""/"") != -1) {
                                srcOutPath = polgateRoute + ""/"" + srcOutPath.substring(srcOutPath.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileRepressed.indexOf(""/"") != -1) {
                                destOutFileRepressed = polgateRoute + ""/"" + destOutFileRepressed.substring(destOutFileRepressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateExpress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileRepressed));
                                FileInputStream in = new FileInputStream(LogRoute);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                Debug.debug(""Rotated log file '"" + LogRoute + ""' to '"" + destOutFileRepressed + ""'"");
                                buf = null;
                                out = null;
                                in = null;
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + LogRoute + ""': "" + e);
                            }
                        } else {
                            try {
                                insFile = new FileInputStream(LogRoute).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + LogRoute + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                 destChan = new FileOutputStream(srcOutPath).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file '"" + LogRoute + ""' to '"" + srcOutPath + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                 destChan.transferFrom(insFile, 0, insFile.size());
                                insFile.close();
                                 destChan.close();
                                 destChan = null;
                                insFile = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data from file '"" + LogRoute + ""' to '"" + srcOutPath + ""' for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + LogRoute + ""' to '"" + srcOutPath + ""'"");
                        }
                        if (rotateDelete) {
                            try {
                                ((PrintStream) loggerFiles).close();
                            } catch (Exception e) {
                            }
                            (new File(LogRoute)).delete();
                            loggerFiles.remove(url);
                            addLogger(url, LogRoute);
                        }
                        if (polgateRoute != null) {
                            long comparisonTime = rotateFiles * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(polgateRoute)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateARCHIVE != null) {
                                archiveFile = rotateARCHIVE + ""/"" + archiveFile;
                                (new File(rotateARCHIVE)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateExpress && currentFilename.endsWith("".gz"")) || (!rotateExpress && currentFilename.indexOf(LogRoute + ""."") != -1)) {
                                    if (polgateRoute != null) {
                                        currentFilename = polgateRoute + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            fileList = null;
                            format1 = null;
                            archive = null;
                        }
                    }
                }
                ind = null;
            }
",1,1,0,1,"requestCounter,it,host,timeout,timeoutVal,timeoutMod,loggerFile,loggerFilenameObject,loggerDestObject,loggerCompressObject,loggerDayObject,loggerArchiveObject,loggerDeleteObject,rotateDest,logFile,rotateArchive,rotateDays,srcChannel,destChannel,destOutFile,destOutFileCompressed,rotateCompress,rotateDelete","requestCounter:0.0,it:-2.4199485778808594e-05,host:0.00018024444580078125,timeout:-0.00019496679306030273,timeoutVal:0.0,timeoutMod:0.0,loggerFile:0.0,loggerFilenameObject:0.0,loggerDestObject:0.0,loggerCompressObject:0.0,loggerDayObject:0.0,loggerArchiveObject:0.0,loggerDeleteObject:0.0,rotateDest:0.0,logFile:0.0,rotateArchive:0.0,rotateDays:0.0,srcChannel:0.0,destChannel:0.0,destOutFile:0.0,destOutFileCompressed:0.0,rotateCompress:0.0,rotateDelete:0.0,",21,109,"host:url,requestCounter: requestClock,timeoutVal:timeoutLen,timeoutMod:timeoutNum,loggerFile:loggerFiles,loggerFilenameObject:loggerDirectoryObject,loggerDestObject:loggerDestPool,loggerCompressObject:loggercompressFile,loggerDayObject:loggerDaysobject,loggerArchiveObject:loggerArchiveObject,loggerDeleteObject:logerDeleteobject,rotateDest:polgateRoute,logFile:LogRoute,rotateArchive:rotateARCHIVE,rotateDays:rotateFiles,srcChannel:insFile,destChannel: destChan,destOutFile:srcOutPath,destOutFileCompressed:destOutFileRepressed,rotateCompress:rotateExpress,rotateDelete:rotateDelete,it:ind,timeout:connection,",Greedy,993,0.7352707187334696
35,"['18288470', '8481623', '    public static void unzip(String zipfile, String outputDirectory) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(zipfile));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                System.out.println(""entryname "" + entryName);\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(outputDirectory + entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        from_file = checkFile(from_file);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",207,"    public static void unzip(String archivefiles, String inputFolder) {
        try {
            byte[] fp = new byte[1024];
            ZipInputStream zipfilestream = null;
            ZipEntry zipEntry;
            zipfilestream = new ZipInputStream(new FileInputStream(archivefiles));
            zipEntry = zipfilestream.getNextEntry();
            while (zipEntry != null) {
                String entryType = zipEntry.getName();
                System.out.println(""entryname "" + entryType);
                int pos;
                FileOutputStream resourceinputpath;
                File addDir = new File(entryType);
                String url = addDir.getParent();
                if (url == null) {
                    if (addDir.isDirectory()) break;
                }
                resourceinputpath = new FileOutputStream(inputFolder + entryType);
                while ((pos = zipfilestream.read(fp, 0, 1024)) > -1) resourceinputpath.write(fp, 0, pos);
                resourceinputpath.close();
                zipfilestream.closeEntry();
                zipEntry = zipfilestream.getNextEntry();
            }
            zipfilestream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"zipfile,outputDirectory,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,directory","zipfile:0.0,outputDirectory:0.0,buf:0.0014677643775939941,zipinputstream:0.0,zipentry:0.0,entryName:0.0,n:0.0002232193946838379,fileoutputstream:0.0,newFile:0.0,directory:-0.0003020763397216797,",10,35,"buf:fp,n:pos,zipfile:archivefiles,outputDirectory:inputFolder,zipinputstream:zipfilestream,zipentry:zipEntry,entryName:entryType,fileoutputstream:resourceinputpath,newFile:addDir,directory:url,",Greedy,475,0.2096603512763977
36,"['228212', '19746605', '    public void CopyFile(File source, File destination) throws Exception {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {\n        if (source == null) throw new NullPointerException(""Parameter \'source\' is null"");\n        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());\n        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());\n        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");\n        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");\n        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");\n        switch(type) {\n            case MOVE:\n                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\\\.jpg"")) {\n                    for (int i = 0; i < frames_.size(); i++) {\n                        Frame f = frames_.get(i);\n                        if (f.getFile().compareTo(source) == 0) {\n                            frames_.remove(i);\n                            break;\n                        }\n                    }\n                }\n                source.renameTo(tmp);\n                break;\n            case COPY:\n                FileChannel inChannel = new FileInputStream(source).getChannel();\n                FileChannel outChannel = new FileOutputStream(tmp).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n                break;\n        }\n        for (int i = frames_.size() - 1; i >= index; i--) {\n            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));\n            frames_.get(i).moveTo(newFrame);\n            frames_.set(i, newFrame);\n        }\n        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));\n        tmp.renameTo(newLocation);\n        Frame f = new Frame(newLocation);\n        f.createThumbNail();\n        frames_.set(index, f);\n        return f;\n    }\n']",146,"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] url = new byte[4096];
            int get;
            while ((get = fis.get(url)) != -1) {
                fos.write(url, 0, get);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,0,1,"source,destination,fis,fos,buffer,read","source:0.004455685615539551,destination:0.0,fis:0.0,fos:0.0,buffer:0.0008628368377685547,read:0.0007417201995849609,",2,7,"source:source,buffer:url,read:get,",Greedy,172,0.07809553941090902
37,"['10460548', '15903468', '    public void parse() {\n        InputSource urlInputStream = null;\n        SAXParserFactory spf = null;\n        SAXParser sp = null;\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(this.urlString);\n            _setProxy();\n            conn = (HttpURLConnection) url.openConnection();\n            urlInputStream = new InputSource(StreamUtils.inputStreamToReader(conn.getInputStream()));\n            spf = SAXParserFactory.newInstance();\n            if (spf != null) {\n                sp = spf.newSAXParser();\n                sp.parse(urlInputStream, this);\n            }\n        } catch (Exception e) {\n            if (conn != null) {\n                if (conn.getHeaderField(""X-RateLimit-Limit"") != null) {\n                    String rateLimit = conn.getHeaderField(""X-RateLimit-Limit"");\n                    String rateRemaining = conn.getHeaderField(""X-RateLimit-Remaining"");\n                    long rateReset = Long.valueOf(conn.getHeaderField(""X-RateLimit-Reset"")) * 1000;\n                    LOG.warn(""Possible rate limits?  LIMIT:"" + rateLimit + ""  REMAINING:"" + rateRemaining + ""  RESET:"" + new Date(rateReset));\n                }\n            }\n            e.printStackTrace();\n            LOG.warn(""error parsing rss feed"", e);\n        } finally {\n        }\n    }\n', '    private String[] getHersheyFontNames() {\n        String[] fontNames = null;\n        URL url = HersheyFont.class.getResource(""futural.jhf"");\n        String protocol = url.getProtocol();\n        if (protocol.equals(""file"")) {\n            File f = new File(url.getFile());\n            f = f.getParentFile();\n            FilenameFilter filter = new FilenameFilter() {\n\n                public boolean accept(File dir, String name) {\n                    return name.endsWith("".jhf"");\n                }\n            };\n            String[] children = f.list(filter);\n            if (children == null) {\n                return null;\n            }\n            fontNames = new String[children.length];\n            for (int i = 0; i < children.length; i++) {\n                fontNames[i] = children[i].substring(0, children[i].length() - 4);\n            }\n        } else if (protocol.equals(""jar"")) {\n            try {\n                JarURLConnection jarURL = (JarURLConnection) url.openConnection();\n                ZipFile zf = new ZipFile(jarURL.getJarFile().getName());\n                Enumeration e = zf.entries();\n                Vector namesVector = new Vector();\n                while (e.hasMoreElements()) {\n                    ZipEntry ze = (ZipEntry) e.nextElement();\n                    String name = ze.getName();\n                    if (name.startsWith(""visad/util/"") && name.endsWith("".jhf"")) {\n                        namesVector.add(name.substring(11));\n                    }\n                }\n                zf.close();\n                if (namesVector.size() == 0) {\n                    return null;\n                }\n                fontNames = new String[namesVector.size()];\n                for (int i = 0; i < fontNames.length; i++) {\n                    String name = (String) namesVector.elementAt(i);\n                    fontNames[i] = name.substring(0, name.length() - 4);\n                }\n            } catch (Exception e) {\n                System.out.println(e);\n            }\n        } else {\n            System.out.println(""Cannot locate the HersheyFonts."");\n        }\n        return fontNames;\n    }\n']",226,"    public void parse() {
        InputSource urlContentReader = null;
        SAXParserFactory spfi = null;
        SAXParser sf = null;
        HttpURLConnection open = null;
        try {
            URL page = new URL(this.urlString);
            _setProxy();
            open = (HttpURLConnection) page.openConnection();
            urlContentReader = new InputSource(StreamUtils.inputStreamToReader(open.getInputStream()));
            spfi = SAXParserFactory.newInstance();
            if (spfi != null) {
                sf = spfi.newSAXParser();
                sf.parse(urlContentReader, this);
            }
        } catch (Exception e) {
            if (open != null) {
                if (open.getHeaderField(""X-RateLimit-Limit"") != null) {
                    String ratingLim = open.getHeaderField(""X-RateLimit-Limit"");
                    String rateremain = open.getHeaderField(""X-RateLimit-Remaining"");
                    long rateExait = Long.valueOf(open.getHeaderField(""X-RateLimit-Reset"")) * 1000;
                    LOG.warn(""Possible rate limits?  LIMIT:"" + ratingLim + ""  REMAINING:"" + rateremain + ""  RESET:"" + new Date(rateExait));
                }
            }
            e.printStackTrace();
            LOG.warn(""error parsing rss feed"", e);
        } finally {
        }
    }
",0,0,0,-1,"urlInputStream,spf,sp,conn,url,rateLimit,rateRemaining,rateReset","urlInputStream:0.0,spf:0.0,sp:-2.9802322387695312e-06,conn:1.0609626770019531e-05,url:8.475780487060547e-05,rateLimit:0.0,rateRemaining:0.0,rateReset:0.0,",8,26,"url:page,conn:open,urlInputStream:urlContentReader,spf:spfi,rateLimit:ratingLim,rateRemaining:rateremain,rateReset:rateExait,sp:sf,",Greedy,369,0.18158060709635418
38,"['7317602', '7309170', '    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '    private void zip(File input, File output) {\n        OutputStream os = null;\n        InputStream is = null;\n        try {\n            os = new GZIPOutputStream(new FileOutputStream(output));\n            is = new FileInputStream(input);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n']",75,"    public static String SHA1(String string) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest mod;
        mod = MessageDigest.getInstance(""SHA-1"");
        byte[] sha2h = new byte[40];
        mod.update(string.getBytes(""iso-8859-1""), 0, string.length());
        sha2h = mod.digest();
        return convertToHex(sha2h);
    }
",0,0,0,-1,"text,md,sha1hash","text:-1.0609626770019531e-05,md:0.0010252594947814941,sha1hash:0.0,",3,10,"md:mod,sha1hash:sha2h,text:string,",Greedy,166,0.07057257890701293
39,"['18208567', '2102737', '    public void createPdf(final String eventURI) throws IOException, DocumentException {\n        createSections(eventURI);\n        even = false;\n        final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX));\n        final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));\n        writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);\n        writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX));\n        writer.setBoxSize(""trim"", Dimensions.getDimension(even, Dimension.TRIMBOX));\n        writer.setBoxSize(""bleed"", Dimensions.getDimension(even, Dimension.BLEEDBOX));\n        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();\n        writer.setPageEvent(event);\n        document.open();\n        final PdfContentByte content = writer.getDirectContent();\n        event.setTabs(Index.INFO.getTab());\n        importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());\n        importPages(document, content, MyProperties.getBefore(), event);\n        addAdPage(document, content);\n        PdfReader reader = new PdfReader(Presentations.INFO.getOutput());\n        String[] titles = { """", """" };\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            titles = index.getSubtitle(titles, i);\n            event.setTabs(titles[0].toLowerCase());\n            addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE);\n            addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        addAdPage(document, content);\n        importPages(document, content, MyProperties.getAfter(), event);\n        int total = writer.getPageNumber() - 1;\n        event.setNoMorePageNumbers();\n        event.setTabs(Schedules.INFO.getTab());\n        reader = new PdfReader(Schedules.INFO.getOutput());\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        document.close();\n        final File file = new File(MyProperties.getOutput());\n        final byte[] original = new byte[(int) file.length()];\n        final FileInputStream f = new FileInputStream(file);\n        f.read(original);\n        reader = new PdfReader(original);\n        final List<Integer> ranges = new ArrayList<Integer>();\n        for (int i = 1; i <= total; i++) {\n            ranges.add(i);\n            if (i == total / 2) {\n                for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {\n                    ranges.add(j);\n                }\n            }\n        }\n        reader.selectPages(ranges);\n        final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));\n        stamper.close();\n    }\n', '    private String getContents(Server server, String uri) throws TechnicalException {\n        try {\n            URL url = new URL(""http://localhost:"" + PORT + uri);\n            return StreamUtils.getStreamContent(url.openStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new TechnicalException(e);\n        }\n    }\n']",699,"    public void createPdf(final String eventURI) throws IOException, DocumentException {
        createSections(eventURI);
        only = false;
        final Document request = new Document(Dimensions.getDimension(only, Dimension.MEDIABOX));
        final PdfWriter output = PdfWriter.getInstance(request, new FileOutputStream(MyProperties.getOutput()));
        output.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);
        output.setCropBoxSize(Dimensions.getDimension(only, Dimension.CROPBOX));
        output.setBoxSize(""trim"", Dimensions.getDimension(only, Dimension.TRIMBOX));
        output.setBoxSize(""bleed"", Dimensions.getDimension(only, Dimension.BLEEDBOX));
        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();
        output.setPageEvent(event);
        request.open();
        final PdfContentByte content = output.getDirectContent();
        event.setTabs(Index.INFO.getTab());
        importPages(request, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());
        importPages(request, content, MyProperties.getBefore(), event);
        addAdPage(request, content);
        PdfReader reader = new PdfReader(Presentations.INFO.getOutput());
        String[] inttitle = { """", """" };
        for (int input = 1; input <= reader.getNumberOfPages(); input++) {
            inttitle = index.getSubtitle(inttitle, input);
            event.setTabs(inttitle[0].toLowerCase());
            addTitleLeft(content, Dimensions.getTitleArea(only), inttitle[0], MyFonts.TITLE);
            addTitleRight(content, Dimensions.getTitleArea(only), inttitle[1], MyFonts.DATE);
            content.addTemplate(output.getImportedPage(reader, input), Dimensions.getOffsetX(only), Dimensions.getOffsetY(only));
            request.newPage();
            only = !only;
        }
        addAdPage(request, content);
        importPages(request, content, MyProperties.getAfter(), event);
        int total = output.getPageNumber() - 1;
        event.setNoMorePageNumbers();
        event.setTabs(Schedules.INFO.getTab());
        reader = new PdfReader(Schedules.INFO.getOutput());
        for (int input = 1; input <= reader.getNumberOfPages(); input++) {
            addTitleLeft(content, Dimensions.getTitleArea(only), Schedules.INFO.getTitle(), MyFonts.TITLE);
            content.addTemplate(output.getImportedPage(reader, input), Dimensions.getOffsetX(only), Dimensions.getOffsetY(only));
            request.newPage();
            only = !only;
        }
        request.close();
        final File file = new File(MyProperties.getOutput());
        final byte[] original = new byte[(int) file.length()];
        final FileInputStream f = new FileInputStream(file);
        f.read(original);
        reader = new PdfReader(original);
        final List<Integer> ranges = new ArrayList<Integer>();
        for (int input = 1; input <= total; input++) {
            ranges.add(input);
            if (input == total / 2) {
                for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {
                    ranges.add(j);
                }
            }
        }
        reader.selectPages(ranges);
        final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));
        stamper.close();
    }
",0,0,0,-1,"eventURI,document,even,writer,event,content,reader,i,titles","eventURI:0.0,document:-7.295608520507812e-05,even:5.4001808166503906e-05,writer:5.7697296142578125e-05,event:-1.633167266845703e-05,content:-1.811981201171875e-05,reader:-2.384185791015625e-07,i:9.5367431640625e-07,titles:0.0,",5,57,"writer:output,even:only,i:input,eventURI:eventURI,titles:inttitle,reader:reader,event:event,content:content,document:request,",Greedy,601,0.3205474694569906
40,"['8670774', '4608665', '    public String getHtmlPage(URL url) {\n        String html = null;\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));\n            StringBuffer sb = new StringBuffer();\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line).append(""\\n"");\n            }\n            br.close();\n            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return html;\n    }\n', '    private static void loadUnits(URL url) throws Exception {\n        try {\n            SYSTEM = new UnitSystem();\n            XMLReader reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();\n            reader.setFeature(""http://xml.org/sax/features/namespaces"", true);\n            reader.setFeature(""http://xml.org/sax/features/namespace-prefixes"", false);\n            reader.setContentHandler(SYSTEM);\n            reader.parse(new InputSource(url.openStream()));\n        } catch (Throwable ex) {\n            throw new Exception(url.toString() + "": "" + ex.getMessage(), ex);\n        }\n    }\n']",131,"    public String getHtmlPage(URL string) {
        String format = null;
        try {
            BufferedReader body = new BufferedReader(new InputStreamReader(string.openConnection().getInputStream()));
            StringBuffer db = new StringBuffer();
            String db;
            while ((db = body.readLine()) != null) {
                db.append(db).append(""
"");
            }
            body.close();
            format = db.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return format;
    }
",0,0,0,-1,"url,html,br,sb,line","url:-5.245208740234375e-06,html:1.430511474609375e-06,br:-2.205371856689453e-05,sb:-8.344650268554688e-06,line:-2.3126602172851562e-05,",5,14,"html:format,url:string,sb:db,br:body,line:db,",Greedy,253,0.11012939214706421
41,"['2774850', '3108499', '    protected Scanner loadSource(String country) {\n        if (httpProxy != null && httpProxy.isEnabled()) {\n            System.setProperty(""proxySet"", ""true"");\n            System.setProperty(""http.proxyHost"", httpProxy.getUrl());\n            System.setProperty(""http.proxyPort"", Integer.toString(httpProxy.getPort()));\n        }\n        try {\n            URL url = new URL(this.url + country);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(""GET"");\n            connection.setUseCaches(false);\n            return new Scanner(connection.getInputStream());\n        } catch (MalformedURLException e) {\n            return null;\n        } catch (ProtocolException e) {\n            return null;\n        } catch (IOException e) {\n            return null;\n        }\n    }\n', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n']",156,"    protected Scanner loadSource(String company) {
        if (httpProxy != null && httpProxy.isEnabled()) {
            System.setProperty(""proxySet"", ""true"");
            System.setProperty(""http.proxyHost"", httpProxy.getUrl());
            System.setProperty(""http.proxyPort"", Integer.toString(httpProxy.getPort()));
        }
        try {
            URL url = new URL(this.url + company);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            request.setRequestMethod(""GET"");
            request.setUseCaches(false);
            return new Scanner(request.getInputStream());
        } catch (MalformedURLException e) {
            return null;
        } catch (ProtocolException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
    }
",0,0,0,-1,"country,url,connection","country:0.0,url:3.5762786865234375e-07,connection:0.0,",2,6,"url:url,country:company,connection:request,",Greedy,150,0.07121813694636027
42,"['698010', '11444436', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public void run() {\n        try {\n            FTPClient c = new FTPClient();\n            c.configure(ftpConfig);\n            logger.debug(""Trying to connect"");\n            c.connect(""127.0.0.1"", 21211);\n            logger.debug(""Connected"");\n            c.setSoTimeout(5000);\n            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {\n                logger.debug(""Houston, we have a problem. D/C"");\n                c.disconnect();\n                throw new Exception();\n            }\n            if (c.login(""drftpd"", ""drftpd"")) {\n                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");\n                _sc.addSuccess();\n                Thread.sleep(5000);\n                c.disconnect();\n            } else {\n                logger.debug(""Login failed, D/C!"");\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            logger.debug(e, e);\n            _sc.addFailure();\n        }\n        logger.debug(""exiting"");\n    }\n']",249,"    public static void doVersionCheck(View show) {
        show.showWaitCursor();
        try {
            URL file = new URL(jEdit.getProperty(""version-check.url""));
            InputStream out = file.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(out));
            String line;
            String update = null;
            String show = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) update = line.substring(8).trim(); else if (line.startsWith("".build"")) show = line.substring(6).trim();
            }
            bin.close();
            if (update != null && show != null) {
                if (jEdit.getBuild().compareTo(show) < 0) newVersionAvailable(show, update, file); else {
                    GUIUtilities.message(show, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(show, ""read-error"", args);
        }
        show.hideWaitCursor();
    }
",0,0,0,-1,"view,url,in,bin,line,version,build","view:-9.66191291809082e-05,url:0.000385284423828125,in:1.9788742065429688e-05,bin:-0.00016289949417114258,line:-0.0001837611198425293,version:1.2695789337158203e-05,build:1.3113021850585938e-05,",5,19,"url:file,in:out,build:show,version:update,view:show,bin:bin,line:line,",Greedy,388,0.16225130160649617
43,"['7252230', '19434890', '    private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {\n        String returnedValue = null;\n        HttpURLConnection urlConnection = null;\n        BufferedReader urlConnectionReader = null;\n        try {\n            urlConnection = (HttpURLConnection) theURL.openConnection();\n            urlConnection.connect();\n            urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            String line = null;\n            StringBuffer serverResponse = new StringBuffer();\n            while ((line = urlConnectionReader.readLine()) != null) {\n                serverResponse.append(line);\n            }\n            returnedValue = serverResponse.toString();\n            if (returnedValue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {\n                throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());\n            }\n            InputSource is = new InputSource(new StringReader(serverResponse.toString()));\n            XPath xpath = XPathFactory.newInstance().newXPath();\n            String error = xpath.evaluate(""/errors/error"", is);\n            if (!"""".equals(error)) {\n                if (""User not authenticated yet, or session timed out."".equals(error)) {\n                    throw new BambooTicketNeedToBeRenewedError();\n                } else {\n                    boolean isErrorOptionsRelated = false;\n                    URI uriForNonOptionsRelatedErrors = getMainPageURI();\n                    if (""Invalid username or password."".equals(error)) {\n                        isErrorOptionsRelated = true;\n                    }\n                    if (""The remote API has been disabled."".equals(error)) {\n                        error += "" Double click here to enable it."";\n                        try {\n                            synchronized (this.bambooProperties) {\n                                uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");\n                            }\n                        } catch (URISyntaxException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                    throw new MonitoringException(""Error reported by the Bamboo server: "" + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);\n                }\n            }\n        } catch (ClassCastException e) {\n            throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);\n        } catch (UnknownHostException e) {\n            throw new MonitoringException(""Problem: cannot find host "" + theURL.getHost() + "" on the network."", true, null);\n        } catch (ConnectException e) {\n            throw new MonitoringException(""Problem: cannot connect to port "" + theURL.getPort() + "" on host "" + theURL.getHost() + ""."", true, null);\n        } catch (FileNotFoundException e) {\n            throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);\n        } catch (SocketException e) {\n            throw new MonitoringException(""Problem: network error, connection lost."", null);\n        } catch (XPathExpressionException e) {\n            throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnedValue, null);\n        } catch (MonitoringException e) {\n            throw e;\n        } catch (Throwable t) {\n            throw new MonitoringException(t, null);\n        } finally {\n            if (urlConnectionReader != null) {\n                try {\n                    urlConnectionReader.close();\n                } catch (IOException e) {\n                }\n            }\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n        return returnedValue;\n    }\n', '    public RequestLogger() {\n        Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {\n\n            public int getScheduleRate() {\n                return 0;\n            }\n\n            public void handle() {\n                if (requestCounter == 0) {\n                    requestCounter++;\n                    return;\n                }\n                requestCounter++;\n                Iterator it = loggerTimeouts.keySet().iterator();\n                while (it.hasNext()) {\n                    String host = (String) it.next();\n                    String timeout = (String) loggerTimeouts.get(host);\n                    int timeoutVal = Integer.parseInt(timeout);\n                    if (timeoutVal > 0) {\n                        timeoutVal /= 10;\n                    }\n                    int timeoutMod = (requestCounter % timeoutVal);\n                    if (timeoutMod == 0) {\n                        Object loggerFile = loggerFiles.get(host);\n                        Object loggerFilenameObject = loggerFilenames.get(host);\n                        Object loggerDestObject = loggerDests.get(host);\n                        Object loggerCompressObject = loggerCompresses.get(host);\n                        Object loggerDayObject = loggerDays.get(host);\n                        Object loggerArchiveObject = loggerArchives.get(host);\n                        Object loggerDeleteObject = loggerDeletes.get(host);\n                        boolean rotateCompress = false;\n                        boolean rotateDelete = false;\n                        String rotateDest = null;\n                        String logFile = null;\n                        String rotateArchive = null;\n                        int rotateDays = 0;\n                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {\n                            rotateCompress = true;\n                        }\n                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {\n                            rotateDelete = true;\n                        }\n                        if (loggerDestObject != null) {\n                            rotateDest = (String) loggerDestObject;\n                        }\n                        if (loggerFilenameObject != null) {\n                            logFile = (String) loggerFilenameObject;\n                        }\n                        if (loggerArchiveObject != null) {\n                            rotateArchive = (String) loggerArchiveObject;\n                        }\n                        if (loggerDayObject != null) {\n                            rotateDays = Integer.parseInt((String) loggerDayObject);\n                        }\n                        FileChannel srcChannel, destChannel;\n                        String destOutFile = logFile + ""."" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(""/"") != -1) {\n                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(""/"") != -1) {\n                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte buf[] = new byte[1024];\n                                int len;\n                                while ((len = in.read(buf)) > 0) {\n                                    out.write(buf, 0, len);\n                                }\n                                in.close();\n                                out.finish();\n                                out.close();\n                                Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFileCompressed + ""\'"");\n                                buf = null;\n                                out = null;\n                                in = null;\n                            } catch (Exception e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\': "" + e);\n                            }\n                        } else {\n                            try {\n                                srcChannel = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to read log file \'"" + logFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                destChannel.close();\n                                destChannel = null;\n                                srcChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to copy data from file \'"" + logFile + ""\' to \'"" + destOutFile + ""\' for file rotation: "" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\'"");\n                        }\n                        if (rotateDelete) {\n                            try {\n                                ((PrintStream) loggerFile).close();\n                            } catch (Exception e) {\n                            }\n                            (new File(logFile)).delete();\n                            loggerFiles.remove(host);\n                            addLogger(host, logFile);\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + "".zip"";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + ""/"" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + ""/"" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            fileList = null;\n                            format1 = null;\n                            archive = null;\n                        }\n                    }\n                }\n                it = null;\n            }\n\n            public String identString() {\n                return ""Request Log Rotator"";\n            }\n        });\n    }\n']",537,"    private String callBambooApi(URL theUrl) throws MonitoringException, BambooTicketNeedToBeRenewedError {
        String returnuatedContent = null;
        HttpURLConnection serverChannel = null;
        BufferedReader URLResponseReader = null;
        try {
            serverChannel = (HttpURLConnection) theUrl.openConnection();
            serverChannel.connect();
            URLResponseReader = new BufferedReader(new InputStreamReader(serverChannel.getInputStream()));
            String file = null;
            StringBuffer ServerResponse = new StringBuffer();
            while ((file = URLResponseReader.readLine()) != null) {
                ServerResponse.append(file);
            }
            returnuatedContent = ServerResponse.toString();
            if (returnuatedContent.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {
                throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());
            }
            InputSource in = new InputSource(new StringReader(ServerResponse.toString()));
            XPath rexmap = XPathFactory.newInstance().newXPath();
            String style = rexmap.evaluate(""/errors/error"", in);
            if (!"""".equals(style)) {
                if (""User not authenticated yet, or session timed out."".equals(style)) {
                    throw new BambooTicketNeedToBeRenewedError();
                } else {
                    boolean isUserErrorified = false;
                    URI uriForNonOptionsRelatedErerrors = getMainPageURI();
                    if (""Invalid username or password."".equals(style)) {
                        isUserErrorified = true;
                    }
                    if (""The remote API has been disabled."".equals(style)) {
                        style += "" Double click here to enable it."";
                        try {
                            synchronized (this.bambooProperties) {
                                uriForNonOptionsRelatedErerrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");
                            }
                        } catch (URISyntaxException e) {
                            throw new RuntimeException(e);
                        }
                    }
                    throw new MonitoringException(""Error reported by the Bamboo server: "" + style, isUserErrorified, uriForNonOptionsRelatedErerrors);
                }
            }
        } catch (ClassCastException e) {
            throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);
        } catch (UnknownHostException e) {
            throw new MonitoringException(""Problem: cannot find host "" + theUrl.getHost() + "" on the network."", true, null);
        } catch (ConnectException e) {
            throw new MonitoringException(""Problem: cannot connect to port "" + theUrl.getPort() + "" on host "" + theUrl.getHost() + ""."", true, null);
        } catch (FileNotFoundException e) {
            throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);
        } catch (SocketException e) {
            throw new MonitoringException(""Problem: network error, connection lost."", null);
        } catch (XPathExpressionException e) {
            throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnuatedContent, null);
        } catch (MonitoringException e) {
            throw e;
        } catch (Throwable t) {
            throw new MonitoringException(t, null);
        } finally {
            if (URLResponseReader != null) {
                try {
                    URLResponseReader.close();
                } catch (IOException e) {
                }
            }
            if (serverChannel != null) {
                serverChannel.disconnect();
            }
        }
        return returnuatedContent;
    }
",0,0,0,-1,"theURL,returnedValue,urlConnection,urlConnectionReader,line,serverResponse,is,xpath,error,uriForNonOptionsRelatedErrors,isErrorOptionsRelated","theURL:0.0,returnedValue:0.0,urlConnection:0.0,urlConnectionReader:0.0,line:-2.1457672119140625e-06,serverResponse:0.0,is:-9.5367431640625e-07,xpath:0.0,error:5.960464477539062e-07,uriForNonOptionsRelatedErrors:0.0,isErrorOptionsRelated:0.0,",11,48,"error:style,theURL:theUrl,returnedValue:returnuatedContent,urlConnection:serverChannel,urlConnectionReader:URLResponseReader,serverResponse:ServerResponse,xpath:rexmap,uriForNonOptionsRelatedErrors:uriForNonOptionsRelatedErerrors,isErrorOptionsRelated:isUserErrorified,is:in,line:file,",Greedy,546,0.2910355011622111
44,"['3024988', '411630', '    @Test\n    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n        try {\n            IOUtils.copy((Reader) null, out, ""UTF16"");\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",62,"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream Bain = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(Bain, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
",1,1,1,-1,"baout,out","baout:0.0,out:-0.00011616945266723633,",1,2,"baout:Bain,out:out,",Greedy,65,0.04131424427032471
45,"['2252572', '15607448', '    public static void main(String argv[]) {\n        String cp = System.getProperty(""java.class.path"");\n        String sep = System.getProperty(""file.separator"");\n        String dirpath = cp.substring(0, cp.lastIndexOf(sep));\n        String jarpath = dirpath + ""/WiiRemoteJ.jar"";\n        if (!new File(jarpath).exists()) {\n            try {\n                System.out.println(""getting WiiRemoteJ file from remote source..."");\n                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");\n                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());\n                String temploc = copyInputStreamToTmpFile(input, "".zip"");\n                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));\n                ZipEntry i = null;\n                while ((i = zipIn.getNextEntry()) != null) {\n                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {\n                        File outjar = new File(jarpath);\n                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));\n                        int bufferSize = 8192;\n                        byte[] buffer = new byte[bufferSize];\n                        int readSize = 0;\n                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {\n                            fs.write(buffer, 0, readSize);\n                        }\n                        fs.close();\n                    }\n                }\n                System.out.println(""unpacked into classpath."");\n            } catch (MalformedURLException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        Boogiepants.main(argv);\n    }\n', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n']",304,"    public static void main(String argv[]) {
        String cp = System.getProperty(""java.class.path"");
        String sep = System.getProperty(""file.separator"");
        String dirpath = cp.substring(0, cp.lastIndexOf(sep));
        String jarpath = dirpath + ""/WiiRemoteJ.jar"";
        if (!new File(jarpath).exists()) {
            try {
                System.out.println(""getting WiiRemoteJ file from remote source..."");
                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");
                GZIPInputStream url = new GZIPInputStream(wiiRemLoc.openStream());
                String temploc = copyInputStreamToTmpFile(url, "".zip"");
                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));
                ZipEntry i = null;
                while ((i = zipIn.getNextEntry()) != null) {
                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {
                        File outjar = new File(jarpath);
                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));
                        int bufferSize = 8192;
                        byte[] buffer = new byte[bufferSize];
                        int readSize = 0;
                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {
                            fs.write(buffer, 0, readSize);
                        }
                        fs.close();
                    }
                }
                System.out.println(""unpacked into classpath."");
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Boogiepants.main(argv);
    }
",1,1,0,1,"argv,cp,sep,dirpath,jarpath,wiiRemLoc,input,temploc,zipIn,i,outjar,fs,bufferSize,buffer,readSize","argv:0.0,cp:-0.0001246929168701172,sep:0.0,dirpath:0.0,jarpath:0.0,wiiRemLoc:0.0,input:0.0002263784408569336,temploc:0.0,zipIn:0.0,i:-8.606910705566406e-05,outjar:0.0,fs:0.00021636486053466797,bufferSize:0.0,buffer:-0.00024068355560302734,readSize:0.0,",1,2,"input:url,",Greedy,82,0.041805418332417806
46,"['7252230', '10277959', '    private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {\n        String returnedValue = null;\n        HttpURLConnection urlConnection = null;\n        BufferedReader urlConnectionReader = null;\n        try {\n            urlConnection = (HttpURLConnection) theURL.openConnection();\n            urlConnection.connect();\n            urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            String line = null;\n            StringBuffer serverResponse = new StringBuffer();\n            while ((line = urlConnectionReader.readLine()) != null) {\n                serverResponse.append(line);\n            }\n            returnedValue = serverResponse.toString();\n            if (returnedValue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {\n                throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());\n            }\n            InputSource is = new InputSource(new StringReader(serverResponse.toString()));\n            XPath xpath = XPathFactory.newInstance().newXPath();\n            String error = xpath.evaluate(""/errors/error"", is);\n            if (!"""".equals(error)) {\n                if (""User not authenticated yet, or session timed out."".equals(error)) {\n                    throw new BambooTicketNeedToBeRenewedError();\n                } else {\n                    boolean isErrorOptionsRelated = false;\n                    URI uriForNonOptionsRelatedErrors = getMainPageURI();\n                    if (""Invalid username or password."".equals(error)) {\n                        isErrorOptionsRelated = true;\n                    }\n                    if (""The remote API has been disabled."".equals(error)) {\n                        error += "" Double click here to enable it."";\n                        try {\n                            synchronized (this.bambooProperties) {\n                                uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");\n                            }\n                        } catch (URISyntaxException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                    throw new MonitoringException(""Error reported by the Bamboo server: "" + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);\n                }\n            }\n        } catch (ClassCastException e) {\n            throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);\n        } catch (UnknownHostException e) {\n            throw new MonitoringException(""Problem: cannot find host "" + theURL.getHost() + "" on the network."", true, null);\n        } catch (ConnectException e) {\n            throw new MonitoringException(""Problem: cannot connect to port "" + theURL.getPort() + "" on host "" + theURL.getHost() + ""."", true, null);\n        } catch (FileNotFoundException e) {\n            throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);\n        } catch (SocketException e) {\n            throw new MonitoringException(""Problem: network error, connection lost."", null);\n        } catch (XPathExpressionException e) {\n            throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnedValue, null);\n        } catch (MonitoringException e) {\n            throw e;\n        } catch (Throwable t) {\n            throw new MonitoringException(t, null);\n        } finally {\n            if (urlConnectionReader != null) {\n                try {\n                    urlConnectionReader.close();\n                } catch (IOException e) {\n                }\n            }\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n        return returnedValue;\n    }\n', '    private static String scramble(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA-1"");\n            md.update(text.getBytes(""UTF-8""));\n            StringBuffer sb = new StringBuffer();\n            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\n            return sb.toString();\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n']",537,"    private String callBambooApi(URL theUrl) throws MonitoringException, BambooTicketNeedToBeRenewedError {
        String returnendedvalue = null;
        HttpURLConnection httpChannel = null;
        BufferedReader httpConnectionReader = null;
        try {
            httpChannel = (HttpURLConnection) theUrl.openConnection();
            httpChannel.connect();
            httpConnectionReader = new BufferedReader(new InputStreamReader(httpChannel.getInputStream()));
            String line = null;
            StringBuffer  serverLine = new StringBuffer();
            while ((line = httpConnectionReader.readLine()) != null) {
                 serverLine.append(line);
            }
            returnendedvalue =  serverLine.toString();
            if (returnendedvalue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {
                throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());
            }
            InputSource in = new InputSource(new StringReader( serverLine.toString()));
            XPath  xPath = XPathFactory.newInstance().newXPath();
            String bug =  xPath.evaluate(""/errors/error"", in);
            if (!"""".equals(bug)) {
                if (""User not authenticated yet, or session timed out."".equals(bug)) {
                    throw new BambooTicketNeedToBeRenewedError();
                } else {
                    boolean isUserOptionsified = false;
                    URI uriForNonOptionsRelatedMirrs = getMainPageURI();
                    if (""Invalid username or password."".equals(bug)) {
                        isUserOptionsified = true;
                    }
                    if (""The remote API has been disabled."".equals(bug)) {
                        bug += "" Double click here to enable it."";
                        try {
                            synchronized (this.bambooProperties) {
                                uriForNonOptionsRelatedMirrs = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");
                            }
                        } catch (URISyntaxException e) {
                            throw new RuntimeException(e);
                        }
                    }
                    throw new MonitoringException(""Error reported by the Bamboo server: "" + bug, isUserOptionsified, uriForNonOptionsRelatedMirrs);
                }
            }
        } catch (ClassCastException e) {
            throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);
        } catch (UnknownHostException e) {
            throw new MonitoringException(""Problem: cannot find host "" + theUrl.getHost() + "" on the network."", true, null);
        } catch (ConnectException e) {
            throw new MonitoringException(""Problem: cannot connect to port "" + theUrl.getPort() + "" on host "" + theUrl.getHost() + ""."", true, null);
        } catch (FileNotFoundException e) {
            throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);
        } catch (SocketException e) {
            throw new MonitoringException(""Problem: network error, connection lost."", null);
        } catch (XPathExpressionException e) {
            throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnendedvalue, null);
        } catch (MonitoringException e) {
            throw e;
        } catch (Throwable t) {
            throw new MonitoringException(t, null);
        } finally {
            if (httpConnectionReader != null) {
                try {
                    httpConnectionReader.close();
                } catch (IOException e) {
                }
            }
            if (httpChannel != null) {
                httpChannel.disconnect();
            }
        }
        return returnendedvalue;
    }
",0,0,0,-1,"theURL,returnedValue,urlConnection,urlConnectionReader,line,serverResponse,is,xpath,error,uriForNonOptionsRelatedErrors,isErrorOptionsRelated","theURL:0.0,returnedValue:0.0,urlConnection:0.0,urlConnectionReader:0.0,line:0.0,serverResponse:0.0,is:0.0,xpath:0.0,error:0.0,uriForNonOptionsRelatedErrors:0.0,isErrorOptionsRelated:0.0,",10,45,"theURL:theUrl,returnedValue:returnendedvalue,urlConnection:httpChannel,urlConnectionReader:httpConnectionReader,line:line,serverResponse: serverLine,is:in,xpath: xPath,error:bug,uriForNonOptionsRelatedErrors:uriForNonOptionsRelatedMirrs,isErrorOptionsRelated:isUserOptionsified,",Greedy,546,0.2884757121404012
47,"['10784622', '14232817', '    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {\n        InputStream in = null;\n        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;\n        try {\n            URL url = new URL(propertyFileURLStr);\n            in = url.openStream();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(errmsg);\n        }\n        return (in);\n    }\n', '    protected void lookupForParsedElementAnnotations(JClassType t) {\n        List<JMethod> methods = getParsableElementMethods(t);\n        if (methods != null) {\n            for (JMethod method : methods) {\n                ParsedElement elementAnnotation = method.getAnnotation(ParsedElement.class);\n                if (elementAnnotation.type() == ParsedElement.Types.SYNC) {\n                    try {\n                        String contents = """";\n                        URL url = getClass().getClassLoader().getResource(elementAnnotation.file());\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            contents += line;\n                        }\n                        reader.close();\n                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), contents.replaceAll(""\\"""", ""\'""), elementAnnotation.type());\n                        this.parsedElementList.add(elementDescriptor);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), elementAnnotation.file(), elementAnnotation.type());\n                    this.parsedElementList.add(elementDescriptor);\n                }\n            }\n        }\n    }\n']",63,"    public static InputStream getPropertyFileInputStream(String propertyFileFileString) {
        InputStream i = null;
        String errMsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileFileString;
        try {
            URL file = new URL(propertyFileFileString);
            i = file.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errMsg);
        }
        return (i);
    }
",0,0,0,-1,"propertyFileURLStr,in,errmsg,url","propertyFileURLStr:0.0,in:5.7220458984375e-06,errmsg:0.0,url:1.823902130126953e-05,",4,10,"url:file,in:i,propertyFileURLStr:propertyFileFileString,errmsg:errMsg,",Greedy,165,0.07838877836863199
48,"['22932987', '15424571', '    protected String readContent(URL url, int width) {\n        StringBuffer content = new StringBuffer("""");\n        String line = """";\n        try {\n            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((line = f.readLine()) != null) content.append(line + ""\\n"");\n            f.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        if (width >= 0) {\n            String width_old = ""width=\\""xxx\\"""";\n            String width_new = ""width=\\"""" + width + ""\\"""";\n            int v0 = content.indexOf(width_old);\n            int v1 = v0 + width_old.length();\n            content.replace(v0, v1, width_new);\n        }\n        return content.toString();\n    }\n', '    private File copyFile(File source, File destiny) {\n        try {\n            FileInputStream fileinputstream = new FileInputStream(source);\n            FileOutputStream fileoutputstream = new FileOutputStream(destiny);\n            byte abyte0[] = new byte[4096];\n            int i;\n            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);\n            fileinputstream.close();\n            fileoutputstream.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        } catch (IOException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        }\n        return destiny;\n    }\n']",163,"    protected String readContent(URL file, int write) {
        StringBuffer css = new StringBuffer("""");
        String label = """";
        try {
            BufferedReader fw = new BufferedReader(new InputStreamReader(file.openStream()));
            while ((label = fw.readLine()) != null) css.append(label + ""
"");
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (write >= 0) {
            String weight_older = ""width=\""xxx\"""";
            String weight_1 = ""width=\"""" + write + ""\"""";
            int p1 = css.indexOf(weight_older);
            int p1 = p1 + weight_older.length();
            css.replace(p1, p1, weight_1);
        }
        return css.toString();
    }
",0,0,0,-1,"url,width,content,f,line,width_old,width_new,v0,v1","url:-5.0067901611328125e-06,width:-4.5299530029296875e-06,content:-3.2186508178710938e-06,f:-8.463859558105469e-06,line:-1.1920928955078125e-06,width_old:0.0,width_new:0.0,v0:0.0,v1:0.0,",9,26,"width_old:weight_older,width_new:weight_1,v0:p1,v1:p1,line:label,content:css,width:write,url:file,f:fw,",Greedy,342,0.15939080317815144
49,"['22948678', '20086435', '    public void load() throws ResourceInstantiationException, InvalidFormatException {\n        if (null == url) {\n            throw new ResourceInstantiationException(""URL not set (null)."");\n        }\n        try {\n            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);\n            String line;\n            MappingNode node;\n            while (null != (line = mapReader.readLine())) {\n                if (0 != line.trim().length()) {\n                    node = new MappingNode(line);\n                    this.add(node);\n                }\n            }\n            mapReader.close();\n        } catch (InvalidFormatException ife) {\n            throw new InvalidFormatException(url, ""on load"");\n        } catch (IOException ioe) {\n            throw new ResourceInstantiationException(ioe);\n        }\n    }\n', '    private InputStream createInputStream(String url) throws MalformedURLException, IOException {\n        if (url.startsWith(""classpath://"")) {\n            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));\n            if (is == null) throw new IOException(""Couldn\'t open stream to ["" + url + ""]"");\n            return is;\n        } else {\n            return new URL(url).openStream();\n        }\n    }\n']",139,"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader resourceReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode array;
            while (null != (line = resourceReader.readLine())) {
                if (0 != line.trim().length()) {
                    array = new MappingNode(line);
                    this.add(array);
                }
            }
            resourceReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
",0,0,0,-1,"mapReader,line,node","mapReader:0.0,line:-7.152557373046875e-07,node:5.960464477539062e-07,",2,6,"node:array,mapReader:resourceReader,line:line,",Greedy,155,0.07139775355656942
50,"['3542936', '17268049', '    public boolean deleteByQuery(String query, int coreId) {\n        try {\n            URL url = new URL(solrUrl + ""/core"" + coreId + ""/update"");\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            conn.setRequestProperty(""Content-type"", ""text/xml"");\n            conn.setRequestProperty(""charset"", ""utf-8"");\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            System.out.println(""******************"" + query);\n            wr.write(""<delete><query>"" + query + ""</query></delete>"");\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n            conn = url.openConnection();\n            conn.setDoOutput(true);\n            conn.setRequestProperty(""Content-type"", ""text/xml"");\n            conn.setRequestProperty(""charset"", ""utf-8"");\n            wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(""<commit/>"");\n            wr.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = rd.readLine()) != null) {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n', '    public DProblem loadProblem(String urlString) throws DataStoreException {\n        try {\n            URL url = new URL(urlString);\n            IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer data = new StringBuffer();\n            String line;\n            int i = 0;\n            while ((line = in.readLine()) != null) {\n                data.append(line + ""\\n"");\n                i++;\n            }\n            DProblem prob = DProblemXMLParser.load(data.toString());\n            if (prob != null) {\n                prob.setUsername(""Local"");\n                prob.setFilename(urlString);\n                prob.setAccessMode(DProblemManager.HTTP);\n            }\n            return prob;\n        } catch (MalformedURLException e) {\n            throw new DataStoreException(e);\n        } catch (IOException e) {\n            IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());\n            e.printStackTrace();\n            throw new DataStoreException(e);\n        } catch (XMLParserException e) {\n            throw new DataStoreException(e);\n        }\n    }\n']",320,"    public boolean deleteByQuery(String style, int customId) {
        try {
            URL URL = new URL(solrUrl + ""/core"" + customId + ""/update"");
            URLConnection con = URL.openConnection();
            con.setDoOutput(true);
            con.setRequestProperty(""Content-type"", ""text/xml"");
            con.setRequestProperty(""charset"", ""utf-8"");
            OutputStreamWriter Writer = new OutputStreamWriter(con.getOutputStream());
            System.out.println(""******************"" + style);
            Writer.write(""<delete><query>"" + style + ""</query></delete>"");
            Writer.flush();
            BufferedReader rs = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String sel;
            while ((sel = rs.readLine()) != null) {
                System.out.println(sel);
            }
            Writer.close();
            rs.close();
            con = URL.openConnection();
            con.setDoOutput(true);
            con.setRequestProperty(""Content-type"", ""text/xml"");
            con.setRequestProperty(""charset"", ""utf-8"");
            Writer = new OutputStreamWriter(con.getOutputStream());
            Writer.write(""<commit/>"");
            Writer.flush();
            rs = new BufferedReader(new InputStreamReader(con.getInputStream()));
            while ((sel = rs.readLine()) != null) {
                System.out.println(sel);
            }
            Writer.close();
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",1,1,0,1,"query,coreId,url,conn,wr,rd,line","query:3.9696693420410156e-05,coreId:0.0,url:7.49826431274414e-05,conn:8.58306884765625e-06,wr:4.0531158447265625e-06,rd:2.384185791015625e-06,line:-2.7894973754882812e-05,",7,39,"url:URL,query:style,conn:con,wr:Writer,rd:rs,coreId:customId,line:sel,",Greedy,438,0.1896185517311096
51,"['5467907', '5600261', '    public static boolean copyFile(final File src, final File dst) {\n        boolean result = false;\n        FileChannel inChannel = null;\n        FileChannel outChannel = null;\n        synchronized (FileUtil.DATA_LOCK) {\n            try {\n                inChannel = new FileInputStream(src).getChannel();\n                outChannel = new FileOutputStream(dst).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                result = true;\n            } catch (IOException e) {\n            } finally {\n                if (inChannel != null && inChannel.isOpen()) {\n                    try {\n                        inChannel.close();\n                    } catch (IOException e) {\n                    }\n                }\n                if (outChannel != null && outChannel.isOpen()) {\n                    try {\n                        outChannel.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n        }\n        return result;\n    }\n', '    private String calculateMD5(String value) {\n        String finalString = new String("""");\n        try {\n            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");\n            md5Alg.reset();\n            md5Alg.update(value.getBytes());\n            byte messageDigest[] = md5Alg.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                String hex = Integer.toHexString(0xFF & messageDigest[i]);\n                if (hex.length() == 1) {\n                    hexString.append(\'0\');\n                }\n                hexString.append(hex);\n            }\n            finalString = hexString.toString();\n        } catch (NoSuchAlgorithmException exc) {\n            throw new RuntimeException(""Hashing error happened:"", exc);\n        }\n        return finalString;\n    }\n']",157,"    public static boolean copyFile(final File in, final File dst) {
        boolean continue = false;
        FileChannel INChannel = null;
        FileChannel outChannel = null;
        synchronized (FileUtil.DATA_LOCK) {
            try {
                INChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(dst).getChannel();
                INChannel.transferTo(0, INChannel.size(), outChannel);
                continue = true;
            } catch (IOException e) {
            } finally {
                if (INChannel != null && INChannel.isOpen()) {
                    try {
                        INChannel.close();
                    } catch (IOException e) {
                    }
                }
                if (outChannel != null && outChannel.isOpen()) {
                    try {
                        outChannel.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
        return continue;
    }
",0,0,0,-1,"src,dst,inChannel,outChannel,result","src:0.0004743337631225586,dst:0.0,inChannel:0.0,outChannel:0.0,result:0.00015425682067871094,",3,12,"src:in,result:continue,dst:dst,inChannel:INChannel,outChannel:outChannel,",Greedy,241,0.10514170328776042
52,"['7550876', '1611515', '    public void test(TestHarness harness) {\n        harness.checkPoint(""TestOfMD4"");\n        try {\n            Security.addProvider(new JarsyncProvider());\n            algorithm = MessageDigest.getInstance(""MD4"", ""JARSYNC"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n            throw new Error(x);\n        }\n        try {\n            for (int i = 0; i < 64; i++) algorithm.update((byte) \'a\');\n            byte[] md = algorithm.digest();\n            String exp = ""52f5076fabd22680234a3fa9f9dc5732"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testSixtyFourA"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n        }\n        try {\n            harness.verbose(""NOTE: This test may take a while."");\n            for (int i = 0; i < 536870913; i++) algorithm.update((byte) \'a\');\n            byte[] md = algorithm.digest();\n            String exp = ""47d01fa6657f903280232d30b98da482"";\n            harness.check(exp.equals(Util.toHexString(md)), ""test536870913A"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n        }\n        try {\n            byte[] md = algorithm.digest(""a"".getBytes());\n            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testA"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testA"");\n        }\n        try {\n            byte[] md = algorithm.digest(""abc"".getBytes());\n            String exp = ""a448017aaf21d8525fc10ae87aa6729d"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testABC"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testABC"");\n        }\n        try {\n            byte[] md = algorithm.digest(""message digest"".getBytes());\n            String exp = ""d9130a8164549fe818874806e1c7014b"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testMessageDigest"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testMessageDigest"");\n        }\n        try {\n            byte[] md = algorithm.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());\n            String exp = ""d79e1c308aa5bbcdeea8ed63df412da9"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testAlphabet"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testAlphabet"");\n        }\n        try {\n            byte[] md = algorithm.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());\n            String exp = ""043f8582f241db351ce627e153e7f0e4"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testAsciiSubset"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testAsciiSubset"");\n        }\n        try {\n            byte[] md = algorithm.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());\n            String exp = ""e33b4ddc9c38f2199c3e7b164fcc0536"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testEightyNumerics"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testEightyNumerics"");\n        }\n        try {\n            algorithm.update(""a"".getBytes(), 0, 1);\n            clone = (MessageDigest) algorithm.clone();\n            byte[] md = algorithm.digest();\n            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #1"");\n            clone.update(""bc"".getBytes(), 0, 2);\n            md = clone.digest();\n            exp = ""a448017aaf21d8525fc10ae87aa6729d"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #2"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testCloning"");\n        }\n    }\n', '    public static Image getPluginImage(Object plugin, String name) {\n        try {\n            try {\n                URL url = getPluginImageURL(plugin, name);\n                if (mURLImageMap.containsKey(url)) {\n                    return mURLImageMap.get(url);\n                }\n                InputStream is = url.openStream();\n                Image image;\n                try {\n                    image = getImage(is);\n                    mURLImageMap.put(url, image);\n                } finally {\n                    is.close();\n                }\n                return image;\n            } catch (Throwable e) {\n                LOG.debug(""Ignore any exceptions"");\n            }\n        } catch (Throwable e) {\n            LOG.debug(""Ignore any exceptions"");\n        }\n        return null;\n    }\n']",840,"    public void test(TestHarness earning) {
        earning.checkPoint(""TestOfMD4"");
        try {
            Security.addProvider(new JarsyncProvider());
            Algo = MessageDigest.getInstance(""MD4"", ""JARSYNC"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.provider"");
            throw new Error(x);
        }
        try {
            for (int ai = 0; ai < 64; ai++) Algo.update((byte) 'a');
            byte[] hd = Algo.digest();
            String style = ""52f5076fabd22680234a3fa9f9dc5732"";
            earning.check(style.equals(Util.toHexString(hd)), ""testSixtyFourA"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.provider"");
        }
        try {
            earning.verbose(""NOTE: This test may take a while."");
            for (int ai = 0; ai < 536870913; ai++) Algo.update((byte) 'a');
            byte[] hd = Algo.digest();
            String style = ""47d01fa6657f903280232d30b98da482"";
            earning.check(style.equals(Util.toHexString(hd)), ""test536870913A"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.provider"");
        }
        try {
            byte[] hd = Algo.digest(""a"".getBytes());
            String style = ""bde52cb31de33e46245e05fbdbd6fb24"";
            earning.check(style.equals(Util.toHexString(hd)), ""testA"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testA"");
        }
        try {
            byte[] hd = Algo.digest(""abc"".getBytes());
            String style = ""a448017aaf21d8525fc10ae87aa6729d"";
            earning.check(style.equals(Util.toHexString(hd)), ""testABC"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testABC"");
        }
        try {
            byte[] hd = Algo.digest(""message digest"".getBytes());
            String style = ""d9130a8164549fe818874806e1c7014b"";
            earning.check(style.equals(Util.toHexString(hd)), ""testMessageDigest"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testMessageDigest"");
        }
        try {
            byte[] hd = Algo.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());
            String style = ""d79e1c308aa5bbcdeea8ed63df412da9"";
            earning.check(style.equals(Util.toHexString(hd)), ""testAlphabet"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testAlphabet"");
        }
        try {
            byte[] hd = Algo.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());
            String style = ""043f8582f241db351ce627e153e7f0e4"";
            earning.check(style.equals(Util.toHexString(hd)), ""testAsciiSubset"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testAsciiSubset"");
        }
        try {
            byte[] hd = Algo.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());
            String style = ""e33b4ddc9c38f2199c3e7b164fcc0536"";
            earning.check(style.equals(Util.toHexString(hd)), ""testEightyNumerics"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testEightyNumerics"");
        }
        try {
            Algo.update(""a"".getBytes(), 0, 1);
            clone = (MessageDigest) Algo.clone();
            byte[] hd = Algo.digest();
            String style = ""bde52cb31de33e46245e05fbdbd6fb24"";
            earning.check(style.equals(Util.toHexString(hd)), ""testCloning #1"");
            clone.update(""bc"".getBytes(), 0, 2);
            hd = clone.digest();
            style = ""a448017aaf21d8525fc10ae87aa6729d"";
            earning.check(style.equals(Util.toHexString(hd)), ""testCloning #2"");
        } catch (Exception x) {
            earning.debug(x);
            earning.fail(""TestOfMD4.testCloning"");
        }
    }
",0,0,0,-1,"harness,algorithm,i,md,exp","harness:0.0,algorithm:0.0,i:1.430511474609375e-06,md:3.4570693969726562e-06,exp:9.5367431640625e-07,",5,93,"md:hd,i:ai,exp:style,harness:earning,algorithm:Algo,",Greedy,495,0.24724867741266887
53,"['10717656', '19687459', '    public void run() {\n        StringBuffer xml;\n        String tabName;\n        Element guiElement;\n        setBold(monitor.getReading());\n        setBold(monitor.getReadingStatus());\n        monitor.getReadingStatus().setText(""      Working"");\n        HttpMethod method = null;\n        xml = new StringBuffer();\n        File tempfile = new File(url);\n        if (tempfile.exists()) {\n            try {\n                InputStream in = new FileInputStream(tempfile);\n                int temp;\n                while ((temp = in.read()) != -1) {\n                    xml.append((char) temp);\n                }\n                in.close();\n            } catch (IOException e) {\n                System.out.println(""Loading Monitor Failed, error while reading XML file from local file"");\n                e.printStackTrace(System.err);\n                return;\n            }\n        } else {\n            try {\n                HttpClient client = new HttpClient();\n                method = new GetMethod(url);\n                int response = client.executeMethod(method);\n                if (response == 200) {\n                    InputStream in = method.getResponseBodyAsStream();\n                    int temp;\n                    while ((temp = in.read()) != -1) {\n                        xml.append((char) temp);\n                    }\n                    in.close();\n                } else {\n                    if (method != null) {\n                        method.releaseConnection();\n                    }\n                    System.out.println(""Loading Monitor Failed. Incorrect response from HTTP Server "" + response);\n                    return;\n                }\n            } catch (IOException e) {\n                if (method != null) {\n                    method.releaseConnection();\n                }\n                System.out.println(""Loading Monitor Failed, error while reading XML file from HTTP Server"");\n                e.printStackTrace(System.err);\n                return;\n            }\n        }\n        setPlain(monitor.getReading());\n        setPlain(monitor.getReadingStatus());\n        monitor.getReadingStatus().setText(""      Done"");\n        setBold(monitor.getValidating());\n        setBold(monitor.getValidatingStatus());\n        monitor.getValidatingStatus().setText(""      Working"");\n        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();\n        try {\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));\n            if (method != null) {\n                method.releaseConnection();\n            }\n            Element root = document.getDocumentElement();\n            NodeList temp = root.getElementsByTagName(""resource"");\n            for (int j = 0; j < temp.getLength(); j++) {\n                Element resource = (Element) temp.item(j);\n                resources.add(new URL(resource.getAttribute(""url"")));\n            }\n            NodeList connections = root.getElementsByTagName(""jmxserver"");\n            for (int j = 0; j < connections.getLength(); j++) {\n                Element connection = (Element) connections.item(j);\n                String name = connection.getAttribute(""name"");\n                String tempUrl = connection.getAttribute(""url"");\n                if (tempUrl.indexOf(""${host}"") != -1) {\n                    HostDialog dialog = new HostDialog(Config.getHosts());\n                    String host = dialog.showDialog();\n                    if (host == null) {\n                        System.out.println(""Host can not be null, unable to create panel."");\n                        return;\n                    }\n                    tempUrl = tempUrl.replaceAll(""\\\\$\\\\{host\\\\}"", host);\n                    Config.addHost(host);\n                }\n                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);\n                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));\n                servers.put(name, server);\n                NodeList listeners = connection.getElementsByTagName(""listener"");\n                for (int i = 0; i < listeners.getLength(); i++) {\n                    Element attribute = (Element) listeners.item(i);\n                    String taskname = attribute.getAttribute(""taskname"");\n                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);\n                    String filtertype = attribute.getAttribute(""filterType"");\n                    TaskNotificationListener listener = new TaskNotificationListener();\n                    NotificationFilterSupport filter = new NotificationFilterSupport();\n                    if (filtertype == null || """".equals(filtertype)) {\n                        filter = null;\n                    } else {\n                        filter.enableType(filtertype);\n                    }\n                    Task task = new Task(-1, Task.LISTEN, server);\n                    task.setMbean(mbean);\n                    task.setListener(listener);\n                    task.setFilter(filter);\n                    server.getWorker().addTask(task);\n                    if (tasks.get(taskname) != null) {\n                        System.out.println(""Task "" + taskname + "" already exists."");\n                        return;\n                    }\n                    List<Task> hashTempList = new ArrayList<Task>();\n                    hashTempList.add(task);\n                    tasks.put(taskname, hashTempList);\n                }\n                NodeList attributes = connection.getElementsByTagName(""attribute"");\n                for (int i = 0; i < attributes.getLength(); i++) {\n                    Element attribute = (Element) attributes.item(i);\n                    String taskname = attribute.getAttribute(""taskname"");\n                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);\n                    String attributename = attribute.getAttribute(""attributename"");\n                    String frequency = attribute.getAttribute(""frequency"");\n                    String onEvent = attribute.getAttribute(""onEvent"");\n                    if (frequency.equalsIgnoreCase(""onchange"")) {\n                        TaskNotificationListener listener = new TaskNotificationListener();\n                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();\n                        filter.enableAttribute(attributename);\n                        Task task = new Task(-1, Task.LISTEN, server);\n                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);\n                        task.setAttribute(att);\n                        task.setMbean(mbean);\n                        task.setListener(listener);\n                        task.setFilter(filter);\n                        server.getWorker().addTask(task);\n                        if (tasks.get(taskname) != null) {\n                            System.out.println(""Task "" + taskname + "" already exists."");\n                            return;\n                        }\n                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);\n                        task2.setAttribute(att);\n                        task2.setMbean(mbean);\n                        server.getWorker().addTask(task2);\n                        List<Task> hashTempList = new ArrayList<Task>();\n                        hashTempList.add(task);\n                        hashTempList.add(task2);\n                        tasks.put(taskname, hashTempList);\n                    } else {\n                        int frequency2 = Integer.parseInt(frequency);\n                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);\n                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);\n                        task.setAttribute(att);\n                        task.setMbean(mbean);\n                        if (tasks.get(taskname) != null) {\n                            System.out.println(""Task "" + taskname + "" already exists."");\n                            return;\n                        }\n                        List<Task> hashTempList = new ArrayList<Task>();\n                        hashTempList.add(task);\n                        tasks.put(taskname, hashTempList);\n                        TaskNotificationListener listener = null;\n                        if (onEvent != null && !"""".equals(onEvent)) {\n                            Task tempTask = tasks.get(onEvent).get(0);\n                            if (tempTask == null) {\n                                System.out.println(onEvent + "" was not found."");\n                                return;\n                            } else {\n                                listener = (TaskNotificationListener) tempTask.getListener();\n                            }\n                        }\n                        if (listener == null) {\n                            server.getWorker().addTask(task);\n                        } else {\n                            listener.addTask(task);\n                        }\n                    }\n                }\n            }\n            NodeList guiTemp = root.getElementsByTagName(""gui"");\n            guiElement = (Element) guiTemp.item(0);\n            tabName = guiElement.getAttribute(""name"");\n            if (MonitorServer.contains(tabName)) {\n                JOptionPane.showMessageDialog(null, ""This panel is already open, stoping creating of panel."", ""Panel already exists"", JOptionPane.ERROR_MESSAGE);\n                return;\n            }\n            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {\n                if (monitor.getTab().getComponent(i).equals(monitor)) {\n                    monitor.getTab().setTitleAt(i, tabName);\n                    break;\n                }\n            }\n            NodeList tempBindings = root.getElementsByTagName(""binding"");\n            for (int i = 0; i < tempBindings.getLength(); i++) {\n                Element binding = (Element) tempBindings.item(i);\n                String guiname = binding.getAttribute(""guiname"");\n                String tmethod = binding.getAttribute(""method"");\n                String taskname = binding.getAttribute(""taskname"");\n                String formater = binding.getAttribute(""formater"");\n                BindingContainer tempBinding;\n                if (formater == null || (formater != null && formater.equals(""""))) {\n                    tempBinding = new BindingContainer(guiname, tmethod, taskname);\n                } else {\n                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);\n                }\n                bindings.add(tempBinding);\n            }\n        } catch (Exception e) {\n            System.err.println(""Exception message: "" + e.getMessage());\n            System.out.println(""Loading Monitor Failed, couldnt parse XML file."");\n            e.printStackTrace(System.err);\n            return;\n        }\n        setPlain(monitor.getValidating());\n        setPlain(monitor.getValidatingStatus());\n        monitor.getValidatingStatus().setText(""      Done"");\n        setBold(monitor.getDownload());\n        setBold(monitor.getDownloadStatus());\n        monitor.getDownloadStatus().setText(""      Working"");\n        List<File> jarFiles = new ArrayList<File>();\n        File cacheDir = new File(Config.getCacheDir());\n        if (!cacheDir.exists()) {\n            cacheDir.mkdir();\n        }\n        for (URL resUrl : resources) {\n            try {\n                HttpClient client = new HttpClient();\n                HttpMethod methodRes = new GetMethod(resUrl.toString());\n                int response = client.executeMethod(methodRes);\n                if (response == 200) {\n                    int index = resUrl.toString().lastIndexOf(""/"") + 1;\n                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));\n                    FileOutputStream out = new FileOutputStream(file);\n                    InputStream in = methodRes.getResponseBodyAsStream();\n                    int readTemp = 0;\n                    while ((readTemp = in.read()) != -1) {\n                        out.write(readTemp);\n                    }\n                    System.out.println(file.getName() + "" downloaded."");\n                    methodRes.releaseConnection();\n                    if (file.getName().endsWith("".jar"")) {\n                        jarFiles.add(file);\n                    }\n                } else {\n                    methodRes.releaseConnection();\n                    System.out.println(""Loading Monitor Failed. Unable to get resource "" + url);\n                    return;\n                }\n            } catch (IOException e) {\n                System.out.println(""Loading Monitor Failed, error while reading resource file from HTTP Server"");\n                e.printStackTrace(System.err);\n                return;\n            }\n        }\n        URL[] urls = new URL[jarFiles.size()];\n        try {\n            for (int i = 0; i < jarFiles.size(); i++) {\n                File file = jarFiles.get(i);\n                File newFile = new File(Config.getCacheDir() + ""/"" + System.currentTimeMillis() + file.getName());\n                FileInputStream in = new FileInputStream(file);\n                FileOutputStream out = new FileOutputStream(newFile);\n                int n = 0;\n                byte[] buf = new byte[1024];\n                while ((n = in.read(buf, 0, 1024)) > -1) {\n                    out.write(buf, 0, n);\n                }\n                out.close();\n                out.close();\n                in.close();\n                urls[i] = new URL(""file:"" + newFile.getAbsolutePath());\n            }\n        } catch (Exception e1) {\n            System.out.println(""Unable to load jar files."");\n            e1.printStackTrace();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n        engine.setClassLoader(loader);\n        setPlain(monitor.getDownload());\n        setPlain(monitor.getDownloadStatus());\n        monitor.getDownloadStatus().setText(""      Done"");\n        setBold(monitor.getGui());\n        setBold(monitor.getGuiStatus());\n        monitor.getGuiStatus().setText(""      Working"");\n        Container container;\n        try {\n            String tempXml = xml.toString();\n            int start = tempXml.indexOf(""<gui"");\n            start = tempXml.indexOf(\'>\', start) + 1;\n            int end = tempXml.indexOf(""</gui>"");\n            container = engine.render(new StringReader(tempXml.substring(start, end)));\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n            System.err.println(""Exception msg: "" + e.getMessage());\n            System.out.println(""Loading Monitor Failed, error creating gui."");\n            return;\n        }\n        for (BindingContainer bcon : bindings) {\n            for (Task task : tasks.get(bcon.getTask())) {\n                if (task != null) {\n                    Object comp = engine.find(bcon.getComponent());\n                    if (comp != null) {\n                        if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {\n                            TaskNotificationListener listener = (TaskNotificationListener) task.getListener();\n                            if (bcon.getFormater() == null) {\n                                listener.addResultListener(new Binding(comp, bcon.getMethod()));\n                            } else {\n                                listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));\n                            }\n                        } else {\n                            if (bcon.getFormater() == null) {\n                                task.addResultListener(new Binding(comp, bcon.getMethod()));\n                            } else {\n                                task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));\n                            }\n                        }\n                    } else {\n                        System.out.println(""Refering to gui name, "" + bcon.getComponent() + "", that doesnt exist. Unable to create monitor."");\n                        return;\n                    }\n                } else {\n                    System.out.println(""Refering to task name, "" + bcon.getTask() + "", that doesnt exist. Unable to create monitor."");\n                    return;\n                }\n            }\n        }\n        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {\n            if (monitor.getTab().getComponent(i).equals(monitor)) {\n                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));\n                break;\n            }\n        }\n        System.out.println(""Connecting to server(s)."");\n        Enumeration<JmxServerGraph> e = servers.elements();\n        List<JmxWorker> list = new ArrayList<JmxWorker>();\n        while (e.hasMoreElements()) {\n            JmxWorker worker = e.nextElement().getWorker();\n            worker.setRunning(true);\n            worker.start();\n            list.add(worker);\n        }\n        MonitorServer.add(tabName, list);\n        Config.addUrl(url);\n    }\n', '    @SuppressWarnings(""deprecation"")\n    public void testMemberIterator() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));\n        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember0 = iter.next();\n        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());\n        assertEquals(""wrong 1k member count"", 1024, count0);\n        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());\n        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember1 = iter.next();\n        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());\n        assertEquals(""wrong 32k member count"", (32 * 1024), count1);\n        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());\n        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember2 = iter.next();\n        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());\n        assertEquals(""wrong 1-byte member count"", 1, count2);\n        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());\n        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember3 = iter.next();\n        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());\n        assertEquals(""wrong 5-byte member count"", 5, count3);\n        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());\n        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());\n        assertFalse(iter.hasNext());\n    }\n']",2971,"    public void run() {
        StringBuffer xml;
        String tabName;
        Element guiElement;
        setBold(monitor.getReading());
        setBold(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Working"");
        HttpMethod method = null;
        xml = new StringBuffer();
        File tempfile = new File(url);
        if (tempfile.exists()) {
            try {
                InputStream url = new FileInputStream(tempfile);
                int temp;
                while ((temp = url.read()) != -1) {
                    xml.append((char) temp);
                }
                url.close();
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading XML file from local file"");
                e.printStackTrace(System.err);
                return;
            }
        } else {
            try {
                HttpClient client = new HttpClient();
                method = new GetMethod(url);
                int response = client.executeMethod(method);
                if (response == 200) {
                    InputStream url = method.getResponseBodyAsStream();
                    int temp;
                    while ((temp = url.read()) != -1) {
                        xml.append((char) temp);
                    }
                    url.close();
                } else {
                    if (method != null) {
                        method.releaseConnection();
                    }
                    System.out.println(""Loading Monitor Failed. Incorrect response from HTTP Server "" + response);
                    return;
                }
            } catch (IOException e) {
                if (method != null) {
                    method.releaseConnection();
                }
                System.out.println(""Loading Monitor Failed, error while reading XML file from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        setPlain(monitor.getReading());
        setPlain(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Done"");
        setBold(monitor.getValidating());
        setBold(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Working"");
        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();
        try {
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));
            if (method != null) {
                method.releaseConnection();
            }
            Element root = document.getDocumentElement();
            NodeList temp = root.getElementsByTagName(""resource"");
            for (int j = 0; j < temp.getLength(); j++) {
                Element resource = (Element) temp.item(j);
                resources.add(new URL(resource.getAttribute(""url"")));
            }
            NodeList connections = root.getElementsByTagName(""jmxserver"");
            for (int j = 0; j < connections.getLength(); j++) {
                Element connection = (Element) connections.item(j);
                String name = connection.getAttribute(""name"");
                String tempUrl = connection.getAttribute(""url"");
                if (tempUrl.indexOf(""${host}"") != -1) {
                    HostDialog dialog = new HostDialog(Config.getHosts());
                    String host = dialog.showDialog();
                    if (host == null) {
                        System.out.println(""Host can not be null, unable to create panel."");
                        return;
                    }
                    tempUrl = tempUrl.replaceAll(""\\$\\{host\\}"", host);
                    Config.addHost(host);
                }
                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);
                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));
                servers.put(name, server);
                NodeList listeners = connection.getElementsByTagName(""listener"");
                for (int i = 0; i < listeners.getLength(); i++) {
                    Element attribute = (Element) listeners.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String filtertype = attribute.getAttribute(""filterType"");
                    TaskNotificationListener listener = new TaskNotificationListener();
                    NotificationFilterSupport filter = new NotificationFilterSupport();
                    if (filtertype == null || """".equals(filtertype)) {
                        filter = null;
                    } else {
                        filter.enableType(filtertype);
                    }
                    Task task = new Task(-1, Task.LISTEN, server);
                    task.setMbean(mbean);
                    task.setListener(listener);
                    task.setFilter(filter);
                    server.getWorker().addTask(task);
                    if (tasks.get(taskname) != null) {
                        System.out.println(""Task "" + taskname + "" already exists."");
                        return;
                    }
                    List<Task> hashTempList = new ArrayList<Task>();
                    hashTempList.add(task);
                    tasks.put(taskname, hashTempList);
                }
                NodeList attributes = connection.getElementsByTagName(""attribute"");
                for (int i = 0; i < attributes.getLength(); i++) {
                    Element attribute = (Element) attributes.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String attributename = attribute.getAttribute(""attributename"");
                    String frequency = attribute.getAttribute(""frequency"");
                    String onEvent = attribute.getAttribute(""onEvent"");
                    if (frequency.equalsIgnoreCase(""onchange"")) {
                        TaskNotificationListener listener = new TaskNotificationListener();
                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
                        filter.enableAttribute(attributename);
                        Task task = new Task(-1, Task.LISTEN, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        task.setListener(listener);
                        task.setFilter(filter);
                        server.getWorker().addTask(task);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);
                        task2.setAttribute(att);
                        task2.setMbean(mbean);
                        server.getWorker().addTask(task2);
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        hashTempList.add(task2);
                        tasks.put(taskname, hashTempList);
                    } else {
                        int frequency2 = Integer.parseInt(frequency);
                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        tasks.put(taskname, hashTempList);
                        TaskNotificationListener listener = null;
                        if (onEvent != null && !"""".equals(onEvent)) {
                            Task tempTask = tasks.get(onEvent).get(0);
                            if (tempTask == null) {
                                System.out.println(onEvent + "" was not found."");
                                return;
                            } else {
                                listener = (TaskNotificationListener) tempTask.getListener();
                            }
                        }
                        if (listener == null) {
                            server.getWorker().addTask(task);
                        } else {
                            listener.addTask(task);
                        }
                    }
                }
            }
            NodeList guiTemp = root.getElementsByTagName(""gui"");
            guiElement = (Element) guiTemp.item(0);
            tabName = guiElement.getAttribute(""name"");
            if (MonitorServer.contains(tabName)) {
                JOptionPane.showMessageDialog(null, ""This panel is already open, stoping creating of panel."", ""Panel already exists"", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
                if (monitor.getTab().getComponent(i).equals(monitor)) {
                    monitor.getTab().setTitleAt(i, tabName);
                    break;
                }
            }
            NodeList tempBindings = root.getElementsByTagName(""binding"");
            for (int i = 0; i < tempBindings.getLength(); i++) {
                Element binding = (Element) tempBindings.item(i);
                String guiname = binding.getAttribute(""guiname"");
                String tmethod = binding.getAttribute(""method"");
                String taskname = binding.getAttribute(""taskname"");
                String formater = binding.getAttribute(""formater"");
                BindingContainer tempBinding;
                if (formater == null || (formater != null && formater.equals(""""))) {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname);
                } else {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);
                }
                bindings.add(tempBinding);
            }
        } catch (Exception e) {
            System.err.println(""Exception message: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, couldnt parse XML file."");
            e.printStackTrace(System.err);
            return;
        }
        setPlain(monitor.getValidating());
        setPlain(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Done"");
        setBold(monitor.getDownload());
        setBold(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Working"");
        List<File> jarFiles = new ArrayList<File>();
        File cacheDir = new File(Config.getCacheDir());
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        for (URL resUrl : resources) {
            try {
                HttpClient client = new HttpClient();
                HttpMethod methodRes = new GetMethod(resUrl.toString());
                int response = client.executeMethod(methodRes);
                if (response == 200) {
                    int index = resUrl.toString().lastIndexOf(""/"") + 1;
                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));
                    FileOutputStream out = new FileOutputStream(file);
                    InputStream url = methodRes.getResponseBodyAsStream();
                    int readTemp = 0;
                    while ((readTemp = url.read()) != -1) {
                        out.write(readTemp);
                    }
                    System.out.println(file.getName() + "" downloaded."");
                    methodRes.releaseConnection();
                    if (file.getName().endsWith("".jar"")) {
                        jarFiles.add(file);
                    }
                } else {
                    methodRes.releaseConnection();
                    System.out.println(""Loading Monitor Failed. Unable to get resource "" + url);
                    return;
                }
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading resource file from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        URL[] urls = new URL[jarFiles.size()];
        try {
            for (int i = 0; i < jarFiles.size(); i++) {
                File file = jarFiles.get(i);
                File newFile = new File(Config.getCacheDir() + ""/"" + System.currentTimeMillis() + file.getName());
                FileInputStream url = new FileInputStream(file);
                FileOutputStream out = new FileOutputStream(newFile);
                int n = 0;
                byte[] buf = new byte[1024];
                while ((n = url.read(buf, 0, 1024)) > -1) {
                    out.write(buf, 0, n);
                }
                out.close();
                out.close();
                url.close();
                urls[i] = new URL(""file:"" + newFile.getAbsolutePath());
            }
        } catch (Exception e1) {
            System.out.println(""Unable to load jar files."");
            e1.printStackTrace();
        }
        URLClassLoader loader = new URLClassLoader(urls);
        engine.setClassLoader(loader);
        setPlain(monitor.getDownload());
        setPlain(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Done"");
        setBold(monitor.getGui());
        setBold(monitor.getGuiStatus());
        monitor.getGuiStatus().setText(""      Working"");
        Container container;
        try {
            String tempXml = xml.toString();
            int start = tempXml.indexOf(""<gui"");
            start = tempXml.indexOf('>', start) + 1;
            int end = tempXml.indexOf(""</gui>"");
            container = engine.render(new StringReader(tempXml.substring(start, end)));
        } catch (Exception e) {
            e.printStackTrace(System.err);
            System.err.println(""Exception msg: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, error creating gui."");
            return;
        }
        for (BindingContainer bcon : bindings) {
            for (Task task : tasks.get(bcon.getTask())) {
                if (task != null) {
                    Object comp = engine.find(bcon.getComponent());
                    if (comp != null) {
                        if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {
                            TaskNotificationListener listener = (TaskNotificationListener) task.getListener();
                            if (bcon.getFormater() == null) {
                                listener.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        } else {
                            if (bcon.getFormater() == null) {
                                task.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        }
                    } else {
                        System.out.println(""Refering to gui name, "" + bcon.getComponent() + "", that doesnt exist. Unable to create monitor."");
                        return;
                    }
                } else {
                    System.out.println(""Refering to task name, "" + bcon.getTask() + "", that doesnt exist. Unable to create monitor."");
                    return;
                }
            }
        }
        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
            if (monitor.getTab().getComponent(i).equals(monitor)) {
                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));
                break;
            }
        }
        System.out.println(""Connecting to server(s)."");
        Enumeration<JmxServerGraph> e = servers.elements();
        List<JmxWorker> list = new ArrayList<JmxWorker>();
        while (e.hasMoreElements()) {
            JmxWorker worker = e.nextElement().getWorker();
            worker.setRunning(true);
            worker.start();
            list.add(worker);
        }
        MonitorServer.add(tabName, list);
        Config.addUrl(url);
    }
",1,1,0,1,"xml,tabName,guiElement,method,tempfile,in,temp,client,response,factory,parser,file,out,e","xml:-3.5762786865234375e-06,tabName:0.0,guiElement:0.0,method:-1.2993812561035156e-05,tempfile:0.0,in:5.960464477539062e-07,temp:-4.887580871582031e-06,client:-2.384185791015625e-06,response:4.0531158447265625e-06,factory:0.0,parser:-2.384185791015625e-07,file:-8.344650268554688e-06,out:-2.1457672119140625e-06,e:1.1920928955078125e-07,",1,11,"response:response,in:url,",Greedy,216,0.1627707084019979
54,"['9769234', '302513', '    void downloadImage(String filename, File imageFile) throws Exception {\n        String URL = Constants.IMAGE_URL + ""/"" + filename;\n        SiteResponse response = stratSite.getResponse(URL);\n        InputStream inputStream = response.getInputStream();\n        OutputStream outputStream = new FileOutputStream(imageFile);\n        IOUtils.copy(inputStream, outputStream);\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",63,"    void downloadImage(String filename, File imageFile) throws Exception {
        String URL = Constants.IMAGE_URL + ""/"" + filename;
        SiteResponse response = stratSite.getResponse(URL);
        InputStream inputStream = response.getInputStream();
        OutputStream outputStream = new FileOutputStream(imageFile);
        IOUtils.copy(inputStream, outputStream);
    }
",1,1,1,-1,"filename,imageFile,URL,response,inputStream,outputStream","filename:5.960464477539062e-07,imageFile:0.0,URL:0.00016313791275024414,response:1.1563301086425781e-05,inputStream:0.0,outputStream:0.0,",0,0,"URL:URL,response:response,filename:filename,imageFile:imageFile,inputStream:inputStream,outputStream:outputStream,",Greedy,193,0.10491604407628377
55,"['2499054', '6795580', '    public String encryptToSHA(String info) {\n        byte[] digesta = null;\n        try {\n            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");\n            alga.update(info.getBytes());\n            digesta = alga.digest();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        String rs = byte2hex(digesta);\n        return rs;\n    }\n', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n']",74,"    public String encryptToSHA(String auto) {
        byte[] digesta = null;
        try {
            MessageDigest arqa = MessageDigest.getInstance(""SHA-1"");
            arqa.update(auto.getBytes());
            digesta = arqa.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String Rs = byte2hex(digesta);
        return Rs;
    }
",1,1,1,-1,"info,digesta,alga,rs","info:-0.04720562696456909,digesta:0.0,alga:0.0,rs:-0.03172200918197632,",3,7,"digesta:digesta,alga:arqa,rs:Rs,info:auto,",Greedy,165,0.07735934257507324
56,"['1274215', '19295911', '    public static void main(String[] args) {\n        try {\n            if (args.length < 2) {\n                System.err.println(""usage: test [src] [dest]"");\n                return;\n            }\n            FileInputStream in = new FileInputStream(args[0]);\n            FileOutputStream out = new FileOutputStream(args[1]);\n            FileChannel src = in.getChannel();\n            FileChannel channel = out.getChannel();\n            long pos = 0, len = src.size(), ret;\n            while (len > 0) {\n                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;\n                len -= ret;\n                pos += ret;\n            }\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void setTableEmbossage(String te, boolean sys) {\n        fiConf.setProperty(OptNames.pr_emboss_table, te);\n        fiConf.setProperty(OptNames.fi_is_sys_emboss_table, Boolean.toString(sys));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            String fichTable;\n            if (!(te.endsWith("".ent""))) {\n                te = te + "".ent"";\n            }\n            if (sys) {\n                fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + te;\n            } else {\n                fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + te;\n            }\n            in = new FileInputStream(fichTable).getChannel();\n            out = new FileOutputStream(ConfigNat.getUserEmbossTableFolder() + ""/Embtab.ent"").getChannel();\n            in.transferTo(0, in.size(), out);\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",157,"    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream ou = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel queue = ou.getChannel();
            long pos = 0, url = src.size(), ret;
            while (url > 0) {
                if ((ret = queue.transferFrom(src, pos, url)) < 0) break;
                url -= ret;
                pos += ret;
            }
            ou.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"in,out,src,channel,pos,len,ret","in:-0.00039589405059814453,out:0.015291154384613037,src:-0.002128422260284424,channel:0.00410616397857666,pos:0.010002076625823975,len:0.0013298988342285156,ret:-0.002764582633972168,",3,9,"out:ou,pos:pos,channel:queue,len:url,",Greedy,187,0.08871936400731405
57,"['3908311', '7273182', '    public byte[] uniqueID(String name, String topic) {\n        String key;\n        byte[] id;\n        synchronized (cache_) {\n            key = name + ""|"" + topic;\n            id = (byte[]) cache_.get(key);\n            if (id == null) {\n                MessageDigest md;\n                try {\n                    md = MessageDigest.getInstance(""SHA"");\n                    md.update(name.getBytes());\n                    md.update(topic.getBytes());\n                    id = md.digest();\n                    cache_.put(key, id);\n                    if (debug_) {\n                        System.out.println(""Cached "" + key + "" ["" + id[0] + "","" + id[1] + "",...]"");\n                    }\n                } catch (NoSuchAlgorithmException e) {\n                    throw new Error(""SHA not available!"");\n                }\n            }\n        }\n        return id;\n    }\n', '    public synchronized String encrypt(String text) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        md.update(text.getBytes());\n        byte raw[] = md.digest();\n        String hash = """";\n        for (int i = 0; i < raw.length; i++) {\n            byte temp = raw[i];\n            String s = Integer.toHexString(new Byte(temp));\n            while (s.length() < 2) {\n                s = ""0"" + s;\n            }\n            s = s.substring(s.length() - 2);\n            hash += s;\n        }\n        return hash;\n    }\n']",176,"    public byte[] uniqueID(String path, String top) {
        String ry;
        byte[] url;
        synchronized (cache_) {
            ry = path + ""|"" + top;
            url = (byte[]) cache_.get(ry);
            if (url == null) {
                MessageDigest Cmd;
                try {
                    Cmd = MessageDigest.getInstance(""SHA"");
                    Cmd.update(path.getBytes());
                    Cmd.update(top.getBytes());
                    url = Cmd.digest();
                    cache_.put(ry, url);
                    if (debug_) {
                        System.out.println(""Cached "" + ry + "" ["" + url[0] + "","" + url[1] + "",...]"");
                    }
                } catch (NoSuchAlgorithmException e) {
                    throw new Error(""SHA not available!"");
                }
            }
        }
        return url;
    }
",1,1,1,-1,"name,topic,key,id,md","name:-0.001302480697631836,topic:-0.0001881718635559082,key:-0.0007417798042297363,id:-0.0006272792816162109,md:0.0020200014114379883,",5,24,"md:Cmd,topic:top,id:url,key:ry,name:path,",Greedy,304,0.11820578177769979
58,"['6413929', '302513', '    public HogsCustomizer() {\n        m_filename = PathFinder.getCustsFile();\n        m_currenttaunts = new String[10];\n        m_textfields = new JTextField[10];\n        m_color = new Color(255, 255, 255);\n        boolean exists = (new File(m_filename)).exists();\n        m_inverted = false;\n        m_chooser = new JColorChooser();\n        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();\n        m_chooser.removeChooserPanel(panels[0]);\n        m_chooser.removeChooserPanel(panels[2]);\n        m_chooser.setPreviewPanel(new JPanel());\n        Reader reader = null;\n        if (exists) {\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        } else {\n            Object[] options = { ""Yes"", ""No, Thanks"" };\n            int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);\n            if (n == 0) {\n                try {\n                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.exit(0);\n                }\n            } else {\n                System.exit(0);\n            }\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e1) {\n                e1.printStackTrace();\n                System.exit(0);\n            }\n        }\n        try {\n            readFromFile(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n        Box mainpanel = Box.createVerticalBox();\n        mainpanel.add(buildTauntsPanel());\n        mainpanel.add(buildMouseStylePanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildColorPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildButtonsPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setContentPane(mainpanel);\n        this.pack();\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));\n        this.setTitle(""Hogs Customizer"");\n        this.setVisible(true);\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",526,"    public HogsCustomizer() {
        m_url = PathFinder.getCustsFile();
        m_currenttaunts = new String[10];
        m_textboxes = new JTextField[10];
        M__bg = new Color(255, 255, 255);
        boolean  exits = (new File(m_url)). exits();
        m_inverted = false;
        m_joosed = new JColorChooser();
        AbstractColorChooserPanel[] choes = m_joosed.getChooserPanels();
        m_joosed.removeChooserPanel(choes[0]);
        m_joosed.removeChooserPanel(choes[2]);
        m_joosed.setPreviewPanel(new JPanel());
        Reader player = null;
        if ( exits) {
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            Object[] opens = { ""Yes"", ""No, Thanks"" };
            int dn = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.
                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opens, opens[1]);
            if (dn == 0) {
                try {
                    FileChannel destConnection = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();
                    FileChannel dostchannel = new FileOutputStream(m_url).getChannel();
                    dostchannel.transferFrom(destConnection, 0, destConnection.size());
                    destConnection.close();
                    dostchannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
                System.exit(0);
            }
        }
        try {
            readFromFile(player);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        Box mainpanel = Box.createVerticalBox();
        mainpanel.add(buildTauntsPanel());
        mainpanel.add(buildMouseStylePanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildColorPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildButtonsPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainpanel);
        this.pack();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));
        this.setTitle(""Hogs Customizer"");
        this.setVisible(true);
    }
",1,1,1,-1,"m_filename,m_currenttaunts,m_textfields,m_color,exists,m_chooser,panels,reader,options,n,srcChannel,dstChannel","m_filename:0.0,m_currenttaunts:0.0,m_textfields:0.0,m_color:0.0,exists:0.0,m_chooser:0.0,panels:0.0,reader:0.003387153148651123,options:0.0009648799896240234,n:-6.914138793945312e-05,srcChannel:0.0,dstChannel:0.0,",11,34,"reader:player,options:opens,m_filename:m_url,m_currenttaunts:m_currenttaunts,m_textfields:m_textboxes,m_color:M__bg,exists: exits,m_chooser:m_joosed,panels:choes,srcChannel:destConnection,dstChannel:dostchannel,n:dn,",Greedy,523,0.2844724933306376
59,"['4204663', '14120602', '    @org.junit.Test\n    public void testReadWrite() throws Exception {\n        final byte[] testBytes = ""testString"".getBytes();\n        final InputStream istream = new ByteArrayInputStream(testBytes);\n        final ByteArrayOutputStream destination = new ByteArrayOutputStream();\n        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);\n        IOUtils.copy(teeStream, new NullOutputStream());\n        teeStream.close();\n        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());\n    }\n', '    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {\n        wabclient.Attributes prop = new wabclient.Attributes(attributes);\n        try {\n            if (tag.equals(""app"")) {\n                if (prop == null) {\n                    System.err.println(""app without properties"");\n                    return;\n                }\n                String appname = prop.getValue(""name"", """");\n                String lookandfeel = prop.getValue(""lookandfeel"", """");\n                global.setAppName(appname);\n                if (lookandfeel.length() > 0) {\n                    if (lookandfeel.equalsIgnoreCase(""Windows"")) lookandfeel = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Motif"")) lookandfeel = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Mac"")) lookandfeel = ""com.sun.java.swing.plaf.mac.MacLookAndFeel"";\n                    UIManager.setLookAndFeel(lookandfeel);\n                }\n            } else if (tag.equals(""script"")) {\n                WABClient c = (WABClient) global;\n                c.beginScript();\n                String url = prop.getValue(""src"");\n                if (url.length() > 0) {\n                    try {\n                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n                        String buffer;\n                        while (true) {\n                            buffer = r.readLine();\n                            if (buffer == null) break;\n                            c.script += buffer + ""\\n"";\n                        }\n                        r.close();\n                        c.endScript();\n                    } catch (IOException ioe) {\n                        System.err.println(""[IOError] "" + ioe.getMessage());\n                        System.exit(0);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n        }\n    }\n']",93,"    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testByte = ""testString"".getBytes();
        final InputStream ismeed = new ByteArrayInputStream(testByte);
        final ByteArrayOutputStream Destinated = new ByteArrayOutputStream();
        final InputStream teesSem = new TeeInputStreamOutputStream(ismeed, Destinated);
        IOUtils.copy(teesSem, new NullOutputStream());
        teesSem.close();
        assertArrayEquals(""array are equals"", testByte, Destinated.toByteArray());
    }
",0,0,0,-1,"testBytes,istream,destination,teeStream","testBytes:0.0,istream:0.0,destination:0.0,teeStream:0.0,",4,11,"testBytes:testByte,istream:ismeed,destination:Destinated,teeStream:teesSem,",Greedy,158,0.08080729643503824
60,"['7561955', '22026286', '    public static final String hash(String data) {\n        if (digest == null) {\n            synchronized (StringUtils.class) {\n                if (digest == null) {\n                    try {\n                        digest = MessageDigest.getInstance(""MD5"");\n                    } catch (NoSuchAlgorithmException nsae) {\n                    }\n                }\n            }\n        }\n        digest.update(data.getBytes());\n        return toHex(digest.digest());\n    }\n', '    public static void main(String args[]) {\n        int i, j, l;\n        short NUMNUMBERS = 100;\n        short numbers[] = new short[NUMNUMBERS];\n        printIntro();\n        int time = (int) System.currentTimeMillis();\n        for (i = 0; i < NUMNUMBERS; i++) {\n            numbers[i] = (short) (NUMNUMBERS - 1 - i);\n        }\n        for (i = 0; i < NUMNUMBERS; i++) {\n            for (j = 0; j < NUMNUMBERS - i - 1; j++) {\n                if (numbers[j] > numbers[j + 1]) {\n                    short temp = numbers[j];\n                    numbers[j] = numbers[j + 1];\n                    numbers[j + 1] = temp;\n                }\n            }\n            if (WANT_PROGRESS) {\n                printProgress();\n            }\n        }\n        time = (int) System.currentTimeMillis() - time;\n        System.out.print(time);\n        System.out.print(""End\\n"");\n    }\n']",77,"    public static final String hash(String hex) {
        if (generests == null) {
            synchronized (StringUtils.class) {
                if (generests == null) {
                    try {
                        generests = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        generests.update(hex.getBytes());
        return toHex(generests.generests());
    }
",0,0,0,-1,"data,digest","data:5.459785461425781e-05,digest:0.0,",2,8,"data:hex,digest:generests,",Greedy,96,0.0449674129486084
61,"['22991420', '18036460', '    public void notifyIterationEnds(final IterationEndsEvent event) {\n        log.info(""moving files..."");\n        File source = new File(""deqsim.log"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");\n            }\n        }\n        int parallelCnt = 0;\n        source = new File(""deqsim.log."" + parallelCnt);\n        while (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");\n            }\n            parallelCnt++;\n            source = new File(""deqsim.log."" + parallelCnt);\n        }\n        source = new File(""loads_out.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));\n            try {\n                IOUtils.copyFile(source, destination);\n            } catch (FileNotFoundException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            } catch (IOException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            }\n            destination = new File(""loads_in.txt"");\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");\n            }\n        }\n        source = new File(""linkprocs.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");\n            }\n        }\n    }\n', '    public File getFile() throws IOException {\n        if (file == null) {\n            if (position > 0) {\n                throw new IOException(""Stream is already being read"");\n            } else {\n                file = tmp.createTemporaryFile();\n                OutputStream out = new FileOutputStream(file);\n                try {\n                    IOUtils.copy(in, out);\n                } finally {\n                    out.close();\n                }\n                FileInputStream newStream = new FileInputStream(file);\n                tmp.addResource(newStream);\n                final InputStream oldStream = in;\n                in = new BufferedInputStream(newStream) {\n\n                    @Override\n                    public void close() throws IOException {\n                        oldStream.close();\n                    }\n                };\n                length = file.length();\n            }\n        }\n        return file;\n    }\n']",340,"    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info(""moving files..."");
        File SOURCE = new File(""deqsim.log"");
        if (SOURCE.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log""));
            if (!IOUtils.renameFile(SOURCE, destination)) {
                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");
            }
        }
        int parallelCnt = 0;
        SOURCE = new File(""deqsim.log."" + parallelCnt);
        while (SOURCE.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));
            if (!IOUtils.renameFile(SOURCE, destination)) {
                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");
            }
            parallelCnt++;
            SOURCE = new File(""deqsim.log."" + parallelCnt);
        }
        SOURCE = new File(""loads_out.txt"");
        if (SOURCE.exists()) {
            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));
            try {
                IOUtils.copyFile(SOURCE, destination);
            } catch (FileNotFoundException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            } catch (IOException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            }
            destination = new File(""loads_in.txt"");
            if (!IOUtils.renameFile(SOURCE, destination)) {
                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");
            }
        }
        SOURCE = new File(""linkprocs.txt"");
        if (SOURCE.exists()) {
            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));
            if (!IOUtils.renameFile(SOURCE, destination)) {
                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");
            }
        }
    }
",1,1,1,-1,"event,source,destination,parallelCnt","event:8.344650268554688e-07,source:3.4809112548828125e-05,destination:0.0,parallelCnt:0.0,",1,14,"source:SOURCE,event:event,destination:destination,parallelCnt:parallelCnt,",Greedy,333,0.138731050491333
62,"['9413061', '20050668', '    @Override\n    public void run() {\n        try {\n            FileChannel out = new FileOutputStream(outputfile).getChannel();\n            long pos = 0;\n            status.setText(""Slučovač: Proces slučování spuštěn.. Prosím čekejte.."");\n            for (int i = 1; i <= noofparts; i++) {\n                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + String.format(""%03d"", i)).getChannel();\n                status.setText(""Slučovač: Slučuji část "" + i + "".."");\n                this.splitsize = in.size();\n                out.transferFrom(in, pos, splitsize);\n                pos += splitsize;\n                in.close();\n                if (deleteOnFinish) new File(originalfilename + String.format("".%03d"", i)).delete();\n                pb.setValue(100 * i / noofparts);\n            }\n            out.close();\n            status.setText(""Slučovač: Hotovo.."");\n            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);\n        } catch (Exception e) {\n        }\n    }\n', '    public static boolean insert(final PedidoSituacao pedidoSituacao) {\n        int result = 0;\n        final Connection c = DBConnection.getConnection();\n        PreparedStatement pst = null;\n        if (c == null) {\n            return false;\n        }\n        try {\n            c.setAutoCommit(false);\n            final String sql = ""insert into pedido_situacao (id_pedido, id_situacao, em, observacao, id_funcionario) "" + ""values (?, ? , now(), ?, ?) "";\n            pst = c.prepareStatement(sql);\n            pst.setInt(1, pedidoSituacao.getPedido().getCodigo());\n            pst.setInt(2, pedidoSituacao.getSituacao().getCodigo());\n            pst.setString(3, pedidoSituacao.getObservacao());\n            pst.setInt(4, pedidoSituacao.getFuncionario().getCodigo());\n            result = pst.executeUpdate();\n            c.commit();\n        } catch (final SQLException e) {\n            try {\n                c.rollback();\n            } catch (final SQLException e1) {\n                e1.printStackTrace();\n            }\n            System.out.println(""[PedidoSituacaoDAO.insert] Erro ao inserir -> "" + e.getMessage());\n        } finally {\n            DBConnection.closePreparedStatement(pst);\n            DBConnection.closeConnection(c);\n        }\n        if (result > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n']",210,"    @Override
    public void run() {
        try {
            FileChannel writer = new FileOutputStream(outputfile).getChannel();
            long pos = 0;
            status.setText(""Slučovač: Proces slučování spuštěn.. Prosím čekejte.."");
            for (int i = 1; i <= noofparts; i++) {
                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + String.format(""%03d"", i)).getChannel();
                status.setText(""Slučovač: Slučuji část "" + i + "".."");
                this.splitsize = in.size();
                writer.transferFrom(in, pos, splitsize);
                pos += splitsize;
                in.close();
                if (deleteOnFinish) new File(originalfilename + String.format("".%03d"", i)).delete();
                pb.setValue(100 * i / noofparts);
            }
            writer.close();
            status.setText(""Slučovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        }
    }
",0,0,0,-1,"out,pos,i,in,splitsize","out:2.1457672119140625e-06,pos:-4.76837158203125e-07,i:0.0,in:-2.384185791015625e-07,splitsize:0.0,",1,3,"out:writer,i:i,splitsize:splitsize,in:in,pos:pos,",Greedy,284,0.11718331972757975
63,"['17551461', '649595', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",98,"    public static void copyFromFileToFileUsingNIO(File imageChannel, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(imageChannel).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",1,1,1,-1,"inputFile,outputFile,inputChannel,outputChannel","inputFile:0.0,outputFile:0.0,inputChannel:0.0,outputChannel:0.0,",1,2,"inputFile:imageChannel,outputFile:outputFile,inputChannel:inputChannel,outputChannel:outputChannel,",Greedy,115,0.06824020942052206
64,"['2654261', '15861394', '    public char check(String password) {\n        if (captchaRandom.equals(""null"")) {\n            return \'s\';\n        }\n        if (captchaRandom.equals(""used"")) {\n            return \'m\';\n        }\n        String encryptionBase = secret + captchaRandom;\n        if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {\n            encryptionBase += "":"" + alphabet + "":"" + letters;\n        }\n        MessageDigest md5;\n        byte[] digest = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(encryptionBase.getBytes());\n            digest = md5.digest();\n        } catch (NoSuchAlgorithmException e) {\n        }\n        String correctPassword = """";\n        int index;\n        for (int i = 0; i < letters; i++) {\n            index = (digest[i] + 256) % 256 % alphabet.length();\n            correctPassword += alphabet.substring(index, index + 1);\n        }\n        if (!password.equals(correctPassword)) {\n            return \'w\';\n        } else {\n            captchaRandom = ""used"";\n            return \'t\';\n        }\n    }\n', '    public static String md5(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        byte[] md5hash = new byte[32];\n        try {\n            md.update(string.getBytes(""iso-8859-1""), 0, string.length());\n        } catch (UnsupportedEncodingException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n']",244,"    public char check(String config) {
        if (captchaRandom.equals(""null"")) {
            return 's';
        }
        if (captchaRandom.equals(""used"")) {
            return 'm';
        }
        String encgorithmbase = secret + captchaRandom;
        if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {
            encgorithmbase += "":"" + alphabet + "":"" + letters;
        }
        MessageDigest dig6;
        byte[] dedense = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        try {
            dig6 = MessageDigest.getInstance(""MD5"");
            dig6.update(encgorithmbase.getBytes());
            dedense = dig6.dedense();
        } catch (NoSuchAlgorithmException e) {
        }
        String completeSecret = """";
        int update;
        for (int multi = 0; multi < letters; multi++) {
            update = (dedense[multi] + 256) % 256 % alphabet.length();
            completeSecret += alphabet.substring(update, update + 1);
        }
        if (!config.equals(completeSecret)) {
            return 'w';
        } else {
            captchaRandom = ""used"";
            return 't';
        }
    }
",1,1,1,-1,"password,encryptionBase,md5,digest,index,i,correctPassword,captchaRandom","password:0.005247890949249268,encryptionBase:0.0,md5:0.0,digest:0.0,index:-0.00018036365509033203,i:0.011452257633209229,correctPassword:0.0,captchaRandom:0.0,",7,24,"i:multi,password:config,encryptionBase:encgorithmbase,md5:dig6,digest:dedense,correctPassword:completeSecret,captchaRandom:captchaRandom,index:update,",Greedy,395,0.16729904413223268
65,"['10195648', '19002156', '    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");\n            System.exit(1);\n        }\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream in = new FileInputStream(args[1]);\n            int len = 0;\n            byte buf[] = new byte[1024];\n            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);\n            in.close();\n            os.close();\n            byte[] data = null;\n            if (args[0].equals(""dec"")) data = decode(os.toString()); else {\n                String strData = encode(os.toByteArray());\n                data = strData.getBytes();\n            }\n            FileOutputStream fos = new FileOutputStream(args[2]);\n            fos.write(data);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {\n        File home = new File(System.getProperty(""user.home""));\n        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);\n        FileOutputStream fos = new FileOutputStream(jar_file);\n        JarOutputStream jos = new JarOutputStream(fos);\n        ZipEntry ze = new ZipEntry(""Exception"");\n        jos.putNextEntry(ze);\n        PrintStream ps = new PrintStream(jos);\n        throwable.printStackTrace(ps);\n        for (File file : files) if ((file != null) && file.exists()) {\n            ze = new ZipEntry(file.getName());\n            jos.putNextEntry(ze);\n            byte[] buffer = new byte[65536];\n            FileInputStream fis = new FileInputStream(file);\n            int len;\n            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);\n            fis.close();\n        }\n        jos.close();\n        return jar_file.getPath();\n    }\n']",210,"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int url = 0;
            byte buf[] = new byte[1024];
            while ((url = in.read(buf)) > 0) os.write(buf, 0, url);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"os,in,len,buf,data,strData,fos","os:0.14197474718093872,in:0.03944748640060425,len:-0.13213622570037842,buf:0.3141639232635498,data:0.006686806678771973,strData:0.0,fos:0.0,",1,3,"buf:buf,os:os,in:in,data:data,strData:strData,fos:fos,len:url,",Greedy,335,0.14191830555597942
66,"['2490462', '16706867', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n', '    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        log.println(""\\nCalculating digest ...\\n"");\n        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");\n        md5.update(dataArea.getText().getBytes(""UTF8""));\n        byte[] digest = md5.digest();\n        log.println(""digest:\\n"" + formatAsHexString(digest));\n        log.println(""Done."");\n        setEncodedDigest(encodeFromBytes(digest));\n    }\n']",266,"    private void getRandomGUID(boolean active) {
        MessageDigest mp64 = null;
        StringBuffer sbValueBeforeMC512 = new StringBuffer();
        try {
            mp64 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long id = System.currentTimeMillis();
            long rar = 0;
            if (active) {
                rar = mySecureRand.nextLong();
            } else {
                rar = myRand.nextLong();
            }
            sbValueBeforeMC512.append(s_id);
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(id));
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(rar));
            valueBeforeMC3 = sbValueBeforeMC512.toString();
            mp64.update(valueBeforeMC3.getBytes());
            byte[] image = mp64.digest();
            StringBuffer bj = new StringBuffer();
            for (int dy = 0; dy < image.length; ++dy) {
                int mb = image[dy] & 0xFF;
                if (mb < 0x10) bj.append('0');
                bj.append(Integer.toHexString(mb));
            }
            valueAfterAMD5 = bj.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1,1,1,-1,"secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","secure:0.00017076730728149414,md5:0.0,sbValueBeforeMD5:0.0,time:0.00010085105895996094,rand:0.0004076361656188965,valueBeforeMD5:0.0,array:-2.980232238769531e-07,sb:0.0006834268569946289,j:-0.0009017586708068848,b:0.0007690191268920898,valueAfterMD5:0.0,",11,36,"b:mb,sb:bj,rand:rar,secure:active,time:id,md5:mp64,sbValueBeforeMD5:sbValueBeforeMC512,valueBeforeMD5:valueBeforeMC3,valueAfterMD5:valueAfterAMD5,array:image,j:dy,",Greedy,548,0.22789074579874674
67,"['9970377', '19746605', '    public void doWrite() {\n        System.out.print(""\\nSerializing..."");\n        try {\n            IFile ifile = null;\n            File file = null;\n            if (null != method.getResource()) {\n                ifile = method.getJavaProject().getResource().getProject().getFile(Statics.CFG_DIR + Statics.SEPARATOR + path.substring(path.lastIndexOf(Statics.SEPARATOR)));\n            }\n            file = new File(path);\n            if (file.exists()) {\n                boolean ans = MessageDialog.openQuestion(wb.getSite().getShell(), ""Flow Plug-in"", ""File already exists. Do you want to overwrite it?"");\n                if (ans) {\n                    file.delete();\n                }\n            }\n            if (!file.exists()) {\n                FileOutputStream fos = new FileOutputStream(path);\n                ObjectOutputStream oos = new ObjectOutputStream(fos);\n                BufferedOutputStream bo = new BufferedOutputStream(oos);\n                oos.writeObject(anode);\n                oos.flush();\n                oos.close();\n                InputStream is = new FileInputStream(path);\n                if (null != ifile) {\n                    if (ifile.exists()) ifile.delete(true, null);\n                    ifile.create(is, IResource.NONE, null);\n                }\n                Path fullpath = new Path(path);\n                IDE.openEditorOnFileStore(wb.getSite().getPage(), EFS.getLocalFileSystem().getStore(fullpath));\n                method.getResource().refreshLocal(10, null);\n                System.out.println(""Serializing ...Done!"");\n            }\n        } catch (PartInitException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (CoreException e) {\n            e.printStackTrace();\n        }\n    }\n', '    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {\n        if (source == null) throw new NullPointerException(""Parameter \'source\' is null"");\n        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());\n        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());\n        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");\n        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");\n        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");\n        switch(type) {\n            case MOVE:\n                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\\\.jpg"")) {\n                    for (int i = 0; i < frames_.size(); i++) {\n                        Frame f = frames_.get(i);\n                        if (f.getFile().compareTo(source) == 0) {\n                            frames_.remove(i);\n                            break;\n                        }\n                    }\n                }\n                source.renameTo(tmp);\n                break;\n            case COPY:\n                FileChannel inChannel = new FileInputStream(source).getChannel();\n                FileChannel outChannel = new FileOutputStream(tmp).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n                break;\n        }\n        for (int i = frames_.size() - 1; i >= index; i--) {\n            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));\n            frames_.get(i).moveTo(newFrame);\n            frames_.set(i, newFrame);\n        }\n        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));\n        tmp.renameTo(newLocation);\n        Frame f = new Frame(newLocation);\n        f.createThumbNail();\n        frames_.set(index, f);\n        return f;\n    }\n']",342,"    public void doWrite() {
        System.out.print(""
Serializing..."");
        try {
            IFile ifile = null;
            File url = null;
            if (null != method.getResource()) {
                ifile = method.getJavaProject().getResource().getProject().getFile(Statics.CFG_DIR + Statics.SEPARATOR + path.substring(path.lastIndexOf(Statics.SEPARATOR)));
            }
            url = new File(path);
            if (url.exists()) {
                boolean ans = MessageDialog.openQuestion(wb.getSite().getShell(), ""Flow Plug-in"", ""File already exists. Do you want to overwrite it?"");
                if (ans) {
                    url.delete();
                }
            }
            if (!url.exists()) {
                FileOutputStream fos = new FileOutputStream(path);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                BufferedOutputStream bo = new BufferedOutputStream(oos);
                oos.writeObject(anode);
                oos.flush();
                oos.close();
                InputStream is = new FileInputStream(path);
                if (null != ifile) {
                    if (ifile.exists()) ifile.delete(true, null);
                    ifile.create(is, IResource.NONE, null);
                }
                Path fullpath = new Path(path);
                IDE.openEditorOnFileStore(wb.getSite().getPage(), EFS.getLocalFileSystem().getStore(fullpath));
                method.getResource().refreshLocal(10, null);
                System.out.println(""Serializing ...Done!"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (CoreException e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"ifile,file,ans,fos,oos,bo,is,fullpath","ifile:0.0,file:0.0009668469429016113,ans:0.0002522468566894531,fos:0.0,oos:7.194280624389648e-05,bo:-2.288818359375e-05,is:-9.834766387939453e-06,fullpath:0.0,",1,5,"file:url,",Greedy,91,0.045971163113911945
68,"['23598855', '3109015', '    public void requestConfirm() throws Exception {\n        if (!this._c.checkProperty(""directory.request"", ""request"")) {\n            throw new Exception(""product has no active request"");\n        }\n        if (!new File(WBSAgnitioConfiguration.getHARequestFile()).canWrite()) {\n            throw new Exception(""cannot remove request from system"");\n        }\n        HashMap<String, String> values = getValues(WBSAgnitioConfiguration.getHARequestFile());\n        if (!values.containsKey(""address.virtual"")) {\n            throw new Exception(""failed to determine the virtual address"");\n        }\n        if (!values.containsKey(""address.real"")) {\n            throw new Exception(""failed to determine the remote address"");\n        }\n        HTTPClient _hc = new HTTPClient(values.get(""address.real""));\n        if (TomcatConfiguration.checkHTTPS()) {\n            _hc.setSecure(true);\n        }\n        _hc.load(""/admin/Comm?type="" + CommResponse.TYPE_HA + ""&command="" + CommResponse.COMMAND_REQUEST_CONFIRM + ""&virtual="" + values.get(""address.virtual""));\n        String _reply = new String(_hc.getContent());\n        if (_reply.isEmpty()) {\n            throw new Exception(""remote product has not sent any reply"");\n        } else if (_reply.indexOf(""done"") == -1) {\n            throw new Exception(_reply);\n        }\n        HAConfiguration.setSlave(values.get(""address.virtual""), values.get(""address.real""));\n        File _f = new File(WBSAgnitioConfiguration.getOptionalSchemaRequestFile());\n        if (_f.exists()) {\n            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getOptionalSchemaFile());\n            FileInputStream _fis = new FileInputStream(_f);\n            while (_fis.available() > 0) {\n                _fos.write(_fis.read());\n            }\n            _fis.close();\n            _fos.close();\n            _f.delete();\n        }\n        _f = new File(WBSAgnitioConfiguration.getSchemaObjectRequestFile());\n        if (_f.exists()) {\n            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getSchemaObjectFile());\n            FileInputStream _fis = new FileInputStream(_f);\n            while (_fis.available() > 0) {\n                _fos.write(_fis.read());\n            }\n            _fis.close();\n            _fos.close();\n            _f.delete();\n        }\n        new File(WBSAgnitioConfiguration.getHARequestFile()).delete();\n        this._c.removeProperty(""directory.request"");\n        this._c.setProperty(""directory.virtual"", values.get(""address.virtual""));\n        this._c.setProperty(""directory.status"", ""slave"");\n        this._c.store();\n    }\n', '    private void copy(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n']",514,"    public void requestConfirm() throws Exception {
        if (!this._c.checkProperty(""directory.request"", ""request"")) {
            throw new Exception(""product has no active request"");
        }
        if (!new File(WBSAgnitioConfiguration.getHARequestFile()).canWrite()) {
            throw new Exception(""cannot remove request from system"");
        }
        HashMap<String, String> groups = getValues(WBSAgnitioConfiguration.getHARequestFile());
        if (!groups.containsKey(""address.virtual"")) {
            throw new Exception(""failed to determine the virtual address"");
        }
        if (!groups.containsKey(""address.real"")) {
            throw new Exception(""failed to determine the remote address"");
        }
        HTTPClient _htc = new HTTPClient(groups.get(""address.real""));
        if (TomcatConfiguration.checkHTTPS()) {
            _htc.setSecure(true);
        }
        _htc.load(""/admin/Comm?type="" + CommResponse.TYPE_HA + ""&command="" + CommResponse.COMMAND_REQUEST_CONFIRM + ""&virtual="" + groups.get(""address.virtual""));
        String _response = new String(_htc.getContent());
        if (_response.isEmpty()) {
            throw new Exception(""remote product has not sent any reply"");
        } else if (_response.indexOf(""done"") == -1) {
            throw new Exception(_response);
        }
        HAConfiguration.setSlave(groups.get(""address.virtual""), groups.get(""address.real""));
        File  _fe = new File(WBSAgnitioConfiguration.getOptionalSchemaRequestFile());
        if ( _fe.exists()) {
            FileOutputStream _pos = new FileOutputStream(WBSAgnitioConfiguration.getOptionalSchemaFile());
            FileInputStream _fs
 = new FileInputStream( _fe);
            while (_fs
.available() > 0) {
                _pos.write(_fs
.read());
            }
            _fs
.close();
            _pos.close();
             _fe.delete();
        }
         _fe = new File(WBSAgnitioConfiguration.getSchemaObjectRequestFile());
        if ( _fe.exists()) {
            FileOutputStream _pos = new FileOutputStream(WBSAgnitioConfiguration.getSchemaObjectFile());
            FileInputStream _fs
 = new FileInputStream( _fe);
            while (_fs
.available() > 0) {
                _pos.write(_fs
.read());
            }
            _fs
.close();
            _pos.close();
             _fe.delete();
        }
        new File(WBSAgnitioConfiguration.getHARequestFile()).delete();
        this._c.removeProperty(""directory.request"");
        this._c.setProperty(""directory.virtual"", groups.get(""address.virtual""));
        this._c.setProperty(""directory.status"", ""slave"");
        this._c.store();
    }
",1,1,1,-1,"values,_hc,_reply,_f,_fos,_fis","values:0.00030744075775146484,_hc:0.0,_reply:0.0,_f:0.0,_fos:0.0,_fis:0.0,",6,38,"values:groups,_hc:_htc,_reply:_response,_f: _fe,_fos:_pos,_fis:_fs
,",Greedy,283,0.15757556358973185
69,"['14974844', '6413929', '    public boolean backupFile(File oldFile, File newFile) {\n        boolean isBkupFileOK = false;\n        FileChannel sourceChannel = null;\n        FileChannel targetChannel = null;\n        try {\n            sourceChannel = new FileInputStream(oldFile).getChannel();\n            targetChannel = new FileOutputStream(newFile).getChannel();\n            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);\n        } finally {\n            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {\n                isBkupFileOK = true;\n            }\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n                if (targetChannel != null) {\n                    targetChannel.close();\n                }\n            } catch (IOException e) {\n                logger.log(Level.INFO, ""closing channels failed"");\n            }\n        }\n        return isBkupFileOK;\n    }\n', '    public HogsCustomizer() {\n        m_filename = PathFinder.getCustsFile();\n        m_currenttaunts = new String[10];\n        m_textfields = new JTextField[10];\n        m_color = new Color(255, 255, 255);\n        boolean exists = (new File(m_filename)).exists();\n        m_inverted = false;\n        m_chooser = new JColorChooser();\n        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();\n        m_chooser.removeChooserPanel(panels[0]);\n        m_chooser.removeChooserPanel(panels[2]);\n        m_chooser.setPreviewPanel(new JPanel());\n        Reader reader = null;\n        if (exists) {\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        } else {\n            Object[] options = { ""Yes"", ""No, Thanks"" };\n            int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);\n            if (n == 0) {\n                try {\n                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.exit(0);\n                }\n            } else {\n                System.exit(0);\n            }\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e1) {\n                e1.printStackTrace();\n                System.exit(0);\n            }\n        }\n        try {\n            readFromFile(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n        Box mainpanel = Box.createVerticalBox();\n        mainpanel.add(buildTauntsPanel());\n        mainpanel.add(buildMouseStylePanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildColorPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildButtonsPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setContentPane(mainpanel);\n        this.pack();\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));\n        this.setTitle(""Hogs Customizer"");\n        this.setVisible(true);\n    }\n']",180,"    public boolean backupFile(File oldFile, File newFile) {
        boolean isBkupDirectoryok = false;
        FileChannel sourceChannel = null;
        FileChannel argetConnection = null;
        try {
            sourceChannel = new FileInputStream(oldFile).getChannel();
            argetConnection = new FileOutputStream(newFile).getChannel();
            argetConnection.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);
        } finally {
            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {
                isBkupDirectoryok = true;
            }
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
                if (argetConnection != null) {
                    argetConnection.close();
                }
            } catch (IOException e) {
                logger.log(Level.INFO, ""closing channels failed"");
            }
        }
        return isBkupDirectoryok;
    }
",1,1,1,-1,"oldFile,newFile,sourceChannel,targetChannel,isBkupFileOK","oldFile:0.0,newFile:0.0,sourceChannel:0.0,targetChannel:0.0,isBkupFileOK:0.0,",2,8,"oldFile:oldFile,newFile:newFile,sourceChannel:sourceChannel,targetChannel:argetConnection,isBkupFileOK:isBkupDirectoryok,",Greedy,201,0.10259076754252115
70,"['5055545', '19746605', '    public static void copy(File fromFile, File toFile) throws IOException {\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFile.getAbsolutePath());\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        String parent = toFile.getParent();\n        if (parent == null) parent = System.getProperty(""user.dir"");\n        File dir = new File(parent);\n        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {\n        if (source == null) throw new NullPointerException(""Parameter \'source\' is null"");\n        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());\n        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());\n        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");\n        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");\n        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");\n        switch(type) {\n            case MOVE:\n                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\\\.jpg"")) {\n                    for (int i = 0; i < frames_.size(); i++) {\n                        Frame f = frames_.get(i);\n                        if (f.getFile().compareTo(source) == 0) {\n                            frames_.remove(i);\n                            break;\n                        }\n                    }\n                }\n                source.renameTo(tmp);\n                break;\n            case COPY:\n                FileChannel inChannel = new FileInputStream(source).getChannel();\n                FileChannel outChannel = new FileOutputStream(tmp).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n                break;\n        }\n        for (int i = frames_.size() - 1; i >= index; i--) {\n            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));\n            frames_.get(i).moveTo(newFrame);\n            frames_.set(i, newFrame);\n        }\n        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));\n        tmp.renameTo(newLocation);\n        Frame f = new Frame(newLocation);\n        f.createThumbNail();\n        frames_.set(index, f);\n        return f;\n    }\n']",344,"    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        String parent = toFile.getParent();
        if (parent == null) parent = System.getProperty(""user.dir"");
        File dir = new File(parent);
        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        FileInputStream from = null;
        FileOutputStream url = null;
        try {
            from = new FileInputStream(fromFile);
            url = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) url.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (url != null) try {
                url.close();
            } catch (IOException e) {
            }
        }
    }
",1,1,0,1,"fromFile,toFile,parent,dir,from,to,buffer,bytesRead","fromFile:0.0,toFile:0.0,parent:4.470348358154297e-05,dir:-0.0001061558723449707,from:2.6106834411621094e-05,to:0.00018578767776489258,buffer:1.0788440704345703e-05,bytesRead:0.0,",1,5,"to:url,",Greedy,103,0.04851037263870239
71,"['14518760', '20125816', '    public void connect(final URLConnectAdapter urlAdapter) {\n        if (this.connectSettings == null) {\n            throw new IllegalStateException(""Invalid Connect Settings (is null)"");\n        }\n        final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();\n        BufferedReader in;\n        try {\n            in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));\n            final StringBuilder buf = new StringBuilder(200);\n            String str;\n            while ((str = in.readLine()) != null) {\n                buf.append(str);\n                buf.append(\'\\n\');\n            }\n            final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());\n            final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();\n            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {\n                final String key = entry.getKey();\n                final List<String> val = entry.getValue();\n                if ((val != null) && (val.size() > 1)) {\n                    System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());\n                }\n                if (key != null) {\n                    result.addHeader(key, val.get(0), val);\n                } else {\n                    result.addHeader(""Status"", val.get(0), val);\n                }\n            }\n            this.lastResult = result;\n        } catch (IOException e) {\n            throw new ConnectException(e);\n        }\n    }\n', '    public static String getHash(String password) {\n        if (password == null || password.length() == 0) {\n            return null;\n        }\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA"");\n            password = saltPassword(password);\n            digest.update(password.getBytes());\n            String result = getHexString(digest.digest());\n            return result;\n        } catch (NoSuchAlgorithmException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n']",301,"    public void connect(final URLConnectAdapter urlAdapter) {
        if (this.connectSettings == null) {
            throw new IllegalStateException(""Invalid Connect Settings (is null)"");
        }
        final HttpURLConnection  httpconn = (HttpURLConnection) urlAdapter.openConnection();
        BufferedReader ini;
        try {
            ini = new BufferedReader(new InputStreamReader( httpconn.getInputStream()));
            final StringBuilder auc = new StringBuilder(200);
            String line;
            while ((line = ini.readLine()) != null) {
                auc.append(line);
                auc.append('
');
            }
            final ConnectResult function = new ConnectResult( httpconn.getResponseCode(), auc.toString());
            final Map<String, List<String>> headerForms =  httpconn.getHeaderFields();
            for (Map.Entry<String, List<String>> record : headerForms.entrySet()) {
                final String section = record.getKey();
                final List<String> elt = record.getValue();
                if ((elt != null) && (elt.size() > 1)) {
                    System.out.println(""WARN: Invalid header value : "" + section + "" url="" + this.connectSettings.getUrl());
                }
                if (section != null) {
                    function.addHeader(section, elt.get(0), elt);
                } else {
                    function.addHeader(""Status"", elt.get(0), elt);
                }
            }
            this.lastResult = function;
        } catch (IOException e) {
            throw new ConnectException(e);
        }
    }
",0,0,0,-1,"urlAdapter,httpConnection,in,buf,str,result,headerFields,entry,key,val,lastResult","urlAdapter:0.0,httpConnection:0.0,in:3.2186508178710938e-06,buf:5.960464477539062e-07,str:3.2186508178710938e-06,result:5.960464477539062e-07,headerFields:0.0,entry:-7.152557373046875e-07,key:2.384185791015625e-07,val:7.152557373046875e-07,lastResult:0.0,",9,34,"in:ini,str:line,val:elt,buf:auc,result:function,key:section,urlAdapter:urlAdapter,httpConnection: httpconn,headerFields:headerForms,lastResult:lastResult,entry:record,",Greedy,513,0.22770978212356568
72,"['19044532', '7170603', '    public boolean exists(String fileToCheck) throws IOException {\n        FTPClient ftp = new FTPClient();\n        boolean found = false;\n        try {\n            int reply = 0;\n            ftp.connect(this.endpointURL, Config.getFtpPort());\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                throw new IOException(""Ftp exists server refused connection."");\n            }\n            if (!ftp.login(""anonymous"", """")) {\n                ftp.logout();\n                throw new IOException(""FTP: server wrong passwd"");\n            }\n            ftp.enterLocalPassiveMode();\n            if (ftp.listNames(fileToCheck) != null) {\n                found = true;\n            }\n            ftp.logout();\n        } catch (Exception e) {\n            throw new IOException(e.getMessage());\n        }\n        return found;\n    }\n', '    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {\n        File milestoneDefFile = new File(milestoneDefFileName);\n        if (!milestoneDefFile.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");\n        }\n        if (!milestoneDefFile.isFile()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");\n        }\n        if (!milestoneDefFile.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");\n        }\n        File sqlDirectory = new File(sqlDirectoryName);\n        if (!sqlDirectory.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");\n        }\n        if (!sqlDirectory.isDirectory()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");\n        }\n        if (!sqlDirectory.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");\n        }\n        File destFile = new File(destFileName);\n        if (destFile.exists()) {\n            throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");\n        }\n        destFile.createNewFile();\n        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();\n        FileInputStream milestoneDefFIS = null;\n        try {\n            milestoneDefFIS = new FileInputStream(milestoneDefFile);\n            parser.parse(milestoneDefFIS);\n        } catch (XMLParseException e) {\n            printXmlError(e, milestoneDefFileName);\n        } finally {\n            try {\n                if (milestoneDefFIS != null) milestoneDefFIS.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing inputstream "", e);\n            }\n        }\n        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);\n        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);\n        if (fromMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (toMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (fromMilestoneIdx == toMilestoneIdx) {\n            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");\n        }\n        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(destFile);\n            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n        } catch (Exception e) {\n            fos.close();\n            destFile.delete();\n            throw e;\n        } finally {\n            try {\n                if (fos != null) fos.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing outputstream "", e);\n            }\n        }\n        System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");\n    }\n']",164,"    public boolean exists(String file2Che) throws IOException {
        FTPClient cffp = new FTPClient();
        boolean read = false;
        try {
            int write = 0;
            cffp.connect(this.endpointURL, Config.getFtpPort());
            write = cffp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(write)) {
                cffp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!cffp.login(""anonymous"", """")) {
                cffp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            cffp.enterLocalPassiveMode();
            if (cffp.listNames(file2Che) != null) {
                read = true;
            }
            cffp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return read;
    }
",0,0,0,-1,"fileToCheck,ftp,reply,found","fileToCheck:0.0,ftp:0.0,reply:-3.5762786865234375e-07,found:-4.291534423828125e-06,",4,17,"fileToCheck:file2Che,ftp:cffp,reply:write,found:read,",Greedy,261,0.10377521514892578
73,"['18340402', '15424571', '    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {\n        URL url = null;\n        File tempUnit = null;\n        BufferedOutputStream bos = null;\n        try {\n            url = new URL(urlStr);\n        } catch (MalformedURLException e1) {\n            logger.error(String.format(""The url [%s] is illegal."", urlStr), e1);\n            throw new UnitTransportException(String.format(""The url [%s] is illegal."", urlStr), e1);\n        }\n        URLConnection con = null;\n        BufferedInputStream in = null;\n        try {\n            con = url.openConnection();\n            in = new BufferedInputStream(con.getInputStream());\n        } catch (IOException e) {\n            logger.error(String.format(""Can\'t open url [%s]."", urlStr));\n            throw new UnitTransportException(String.format(""Can\'t open url [%s]."", urlStr), e);\n        } catch (Exception e) {\n            logger.error(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);\n            throw new UnitTransportException(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);\n        }\n        String unitName = urlStr.substring(urlStr.lastIndexOf(\'/\') + 1);\n        try {\n            if (!StringUtils.isEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = new File(CommonUtil.createTempFile());\n        } catch (DeployToolException e) {\n            logger.error(String.format(""Can\'t get temp file [%s]."", tempUnit));\n            throw new UnitTransportException(String.format(""Can\'t get temp file [%s]."", tempUnit), e);\n        }\n        try {\n            bos = new BufferedOutputStream(new FileOutputStream(tempUnit));\n            logger.info(String.format(""Use [%s] for ftp unit [%s]."", tempUnit, urlStr));\n        } catch (FileNotFoundException e) {\n            logger.error(String.format(""File [%s] don\'t exist."", tempUnit));\n            throw new UnitTransportException(String.format(""File [%s] don\'t exist."", tempUnit), e);\n        }\n        try {\n            IOUtils.copy(in, bos);\n            bos.flush();\n        } catch (IOException e) {\n            logger.error(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);\n            throw new UnitTransportException(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);\n        } finally {\n            IOUtils.closeQuietly(bos);\n            IOUtils.closeQuietly(in);\n        }\n        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));\n        return tempUnit.getAbsolutePath();\n    }\n', '    private File copyFile(File source, File destiny) {\n        try {\n            FileInputStream fileinputstream = new FileInputStream(source);\n            FileOutputStream fileoutputstream = new FileOutputStream(destiny);\n            byte abyte0[] = new byte[4096];\n            int i;\n            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);\n            fileinputstream.close();\n            fileoutputstream.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        } catch (IOException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        }\n        return destiny;\n    }\n']",478,"    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {
        URL rl = null;
        File tempUnit = null;
        BufferedOutputStream bos = null;
        try {
            rl = new URL(urlStr);
        } catch (MalformedURLException e1) {
            logger.error(String.format(""The url [%s] is illegal."", urlStr), e1);
            throw new UnitTransportException(String.format(""The url [%s] is illegal."", urlStr), e1);
        }
        URLConnection uc = null;
        BufferedInputStream in = null;
        try {
            uc = rl.openConnection();
            in = new BufferedInputStream(uc.getInputStream());
        } catch (IOException e) {
            logger.error(String.format(""Can't open url [%s]."", urlStr));
            throw new UnitTransportException(String.format(""Can't open url [%s]."", urlStr), e);
        } catch (Exception e) {
            logger.error(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);
            throw new UnitTransportException(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);
        }
        String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1);
        try {
            if (!StringUtils.isEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = new File(CommonUtil.createTempFile());
        } catch (DeployToolException e) {
            logger.error(String.format(""Can't get temp file [%s]."", tempUnit));
            throw new UnitTransportException(String.format(""Can't get temp file [%s]."", tempUnit), e);
        }
        try {
            bos = new BufferedOutputStream(new FileOutputStream(tempUnit));
            logger.info(String.format(""Use [%s] for ftp unit [%s]."", tempUnit, urlStr));
        } catch (FileNotFoundException e) {
            logger.error(String.format(""File [%s] don't exist."", tempUnit));
            throw new UnitTransportException(String.format(""File [%s] don't exist."", tempUnit), e);
        }
        try {
            IOUtils.copy(in, bos);
            bos.flush();
        } catch (IOException e) {
            logger.error(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);
            throw new UnitTransportException(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);
        } finally {
            IOUtils.closeQuietly(bos);
            IOUtils.closeQuietly(in);
        }
        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));
        return tempUnit.getAbsolutePath();
    }
",1,1,0,1,"urlStr,url,tempUnit,bos,con,in,unitName","urlStr:0.0,url:3.814697265625e-06,tempUnit:0.0,bos:-2.384185791015625e-07,con:5.960464477539062e-07,in:-5.960464477539062e-07,unitName:0.0,",2,12,"url:rl,con:uc,",Greedy,181,0.0753195325533549
74,"['8364554', '386316', '    @Override\n    public void executeInterruptible() {\n        EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;\n        File encoderFile = null;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            if (Platform.isWindows()) {\n                encoderFile = new File(""."", ""lame.exe"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");\n            } else if (Platform.isLinux()) {\n                encoderFile = new File(""."", ""lame"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");\n            } else {\n                MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));\n                return;\n            }\n            os = new FileOutputStream(encoderFile);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            LOG.error(""Cannot extract encoder executable"", e);\n            MainWindowInterface.showError(e);\n            return;\n        } finally {\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(os);\n        }\n        encoderFile.setExecutable(true, true);\n        try {\n            long totalSize = 0l;\n            for (int i = 0, l = filesModel.getSize(); i < l; i++) {\n                if (isInterrupted()) return;\n                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);\n                File origFile = element.getFile();\n                totalSize += origFile.length();\n            }\n            rangeModel = dialog.getProgressBar().getModel();\n            rangeModel.setMinimum(0);\n            rangeModel.setMaximum((int) totalSize);\n            int parallelProcesses = dialog.getParallelProcesses();\n            List<Thread> encodingThreads = new ArrayList<Thread>();\n            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);\n            for (int i = 0; i < parallelProcesses; i++) {\n                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);\n                Thread thread = new Thread(encoderLauncherRunnable);\n                encodingRunnables.add(encoderLauncherRunnable);\n                encodingThreads.add(thread);\n                thread.start();\n            }\n            for (Thread thread : encodingThreads) {\n                thread.join();\n            }\n            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));\n        } catch (Exception e) {\n            LOG.error(""Cannot encode files"", e);\n            MainWindowInterface.showError(e);\n        } finally {\n            if (encoderFile != null) encoderFile.delete();\n            dialog.setVisible(false);\n        }\n    }\n', '    private static File copyFileTo(File file, File directory) throws IOException {\n        File newFile = new File(directory, file.getName());\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(file);\n            fos = new FileOutputStream(newFile);\n            byte buff[] = new byte[1024];\n            int val;\n            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);\n        } finally {\n            if (fis != null) fis.close();\n            if (fos != null) fos.close();\n        }\n        return newFile;\n    }\n']",516,"    @Override
    public void executeInterruptible() {
        EncodeFilesDialog diffug = (EncodeFilesDialog) this.diffug;
        File encoderFile = null;
        InputStream is = null;
        OutputStream oses = null;
        try {
            if (Platform.isWindows()) {
                encoderFile = new File(""."", ""lame.exe"");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");
            } else if (Platform.isLinux()) {
                encoderFile = new File(""."", ""lame"");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");
            } else {
                MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));
                return;
            }
            oses = new FileOutputStream(encoderFile);
            IOUtils.copy(is, oses);
        } catch (Exception e) {
            LOG.error(""Cannot extract encoder executable"", e);
            MainWindowInterface.showError(e);
            return;
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(oses);
        }
        encoderFile.setExecutable(true, true);
        try {
            long totalSize = 0l;
            for (int i = 0, l = filesModel.getSize(); i < l; i++) {
                if (isInterrupted()) return;
                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);
                File origFile = element.getFile();
                totalSize += origFile.length();
            }
            rangeModel = diffug.getProgressBar().getModel();
            rangeModel.setMinimum(0);
            rangeModel.setMaximum((int) totalSize);
            int parallelProcesses = diffug.getParallelProcesses();
            List<Thread> encodingThreads = new ArrayList<Thread>();
            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);
            for (int i = 0; i < parallelProcesses; i++) {
                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, diffug, encoderFile);
                Thread thread = new Thread(encoderLauncherRunnable);
                encodingRunnables.add(encoderLauncherRunnable);
                encodingThreads.add(thread);
                thread.start();
            }
            for (Thread thread : encodingThreads) {
                thread.join();
            }
            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));
        } catch (Exception e) {
            LOG.error(""Cannot encode files"", e);
            MainWindowInterface.showError(e);
        } finally {
            if (encoderFile != null) encoderFile.delete();
            diffug.setVisible(false);
        }
    }
",1,1,1,-1,"dialog,encoderFile,is,os,totalSize,i,l,element,origFile,rangeModel,parallelProcesses,encodingThreads,encodingRunnables","dialog:0.0,encoderFile:0.0,is:-0.001286923885345459,os:-0.0006293058395385742,totalSize:0.0,i:-0.0011791586875915527,l:-4.369020462036133e-05,element:0.0007926225662231445,origFile:0.0,rangeModel:0.0,parallelProcesses:0.0,encodingThreads:0.0,encodingRunnables:0.0,",2,10,"element:element,dialog:diffug,encoderFile:encoderFile,totalSize:totalSize,origFile:origFile,rangeModel:rangeModel,parallelProcesses:parallelProcesses,encodingThreads:encodingThreads,encodingRunnables:encodingRunnables,l:l,os:oses,i:i,is:is,",Greedy,578,0.28704493840535483
75,"['7902699', '19332849', '    public static List<String> getLevelIndex(URL fetchUrl) {\n        List<String> levelNames = new ArrayList<String>();\n        BufferedReader bufferedreader;\n        try {\n            URLConnection urlconnection = fetchUrl.openConnection();\n            urlconnection.setConnectTimeout(30000);\n            if (urlconnection.getContentEncoding() != null) {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));\n            } else {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));\n            }\n        } catch (IOException _ex) {\n            System.err.println(""HexTD::readFile:: Can\'t read from "" + fetchUrl);\n            return levelNames;\n        }\n        String sLine1;\n        try {\n            while ((sLine1 = bufferedreader.readLine()) != null) {\n                if (sLine1.trim().length() != 0) {\n                    levelNames.add(sLine1);\n                }\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return levelNames;\n    }\n', '    public String getResponse(String URLstring) {\n        String str = """";\n        try {\n            URL url = new URL(URLstring);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String st = """";\n            while ((st = in.readLine()) != null) {\n                str += ""\\n"" + st;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return str;\n    }\n']",208,"    public static List<String> getLevelIndex(URL betchUrl) {
        List<String> lognames = new ArrayList<String>();
        BufferedReader  buffererauthor;
        try {
            URLConnection URLConnection = betchUrl.openConnection();
            URLConnection.setConnectTimeout(30000);
            if (URLConnection.getContentEncoding() != null) {
                 buffererauthor = new BufferedReader(new InputStreamReader(URLConnection.getInputStream(), URLConnection.getContentEncoding()));
            } else {
                 buffererauthor = new BufferedReader(new InputStreamReader(URLConnection.getInputStream(), ""utf-8""));
            }
        } catch (IOException _ex) {
            System.err.println(""HexTD::readFile:: Can't read from "" + betchUrl);
            return lognames;
        }
        String sLine6;
        try {
            while ((sLine6 =  buffererauthor.readLine()) != null) {
                if (sLine6.trim().length() != 0) {
                    lognames.add(sLine6);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lognames;
    }
",1,1,1,-1,"fetchUrl,levelNames,bufferedreader,urlconnection,sLine1","fetchUrl:0.0,levelNames:0.0,bufferedreader:0.0,urlconnection:0.0,sLine1:0.0,",5,21,"fetchUrl:betchUrl,levelNames:lognames,bufferedreader: buffererauthor,urlconnection:URLConnection,sLine1:sLine6,",Greedy,291,0.11494514544804892
76,"['20409303', '5810755', '    private String md5(String input) {\n        MessageDigest md5Digest;\n        try {\n            md5Digest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new UserException(""could not get a md5 message digest"", e);\n        }\n        md5Digest.update(input.getBytes());\n        return new String(md5Digest.digest());\n    }\n', '    @Override\n    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {\n        String path;\n        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();\n        try {\n            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);\n            URLConnection urlConnection = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            String data = """";\n            while ((inputLine = in.readLine()) != null) data += inputLine;\n            Response remoteData = new Response(new String(data));\n            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));\n            in.close();\n            return remoteData;\n        } catch (MalformedURLException e) {\n            logger.error(""Illegal URL. Cannot connect to this remote object"", e);\n            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);\n        } catch (IOException e) {\n            logger.error(""Cannot read from source. Please check remote object address"", e);\n            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);\n        }\n    }\n']",66,"    private String md5(String client) {
        MessageDigest md5Digeter;
        try {
            md5Digeter = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new UserException(""could not get a md5 message digest"", e);
        }
        md5Digeter.update(client.getBytes());
        return new String(md5Digeter.digest());
    }
",0,0,0,-1,"input,md5Digest","input:-5.9664249420166016e-05,md5Digest:0.0,",2,6,"md5Digest:md5Digeter,input:client,",Greedy,123,0.056709782282511396
77,"['12269678', '19246986', '    private void copyResource(String relResourceName) {\n        String projectName = layout.getRootDir().getName();\n        String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;\n        InputStream source = getClass().getResourceAsStream(resourceName);\n        if (source == null) {\n            throw new RuntimeException(""couldn\'t find resource "" + resourceName);\n        }\n        File dest = new File(layout.getRootDir(), relResourceName);\n        dest.getParentFile().mkdirs();\n        dest.createNewFile();\n        InputStreamReader in = new InputStreamReader(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                IOUtils.closeQuietly(out);\n            }\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }\n', '    private List<String> readDescriptor(URL url) {\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            List<String> lines = new ArrayList<String>();\n            String line = reader.readLine();\n            while (line != null) {\n                line = line.trim();\n                if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);\n                line = reader.readLine();\n            }\n            return lines;\n        } catch (IOException e) {\n            throw new ExtensionException(""Failed to read extension descriptor \'%s\'"", e).withArgs(url);\n        } finally {\n            IoUtil.closeQuietly(reader);\n        }\n    }\n']",152,"    private void copyResource(String relativeFileCode) {
        String resourcePath = layout.getRootDir().getName();
        String filePath = ""/protoj/"" + resourcePath + ""/"" + relativeFileCode;
        InputStream plus = getClass().getResourceAsStream(filePath);
        if (plus == null) {
            throw new RuntimeException(""couldn't find resource "" + filePath);
        }
        File toc = new File(layout.getRootDir(), relativeFileCode);
        toc.getParentFile().mkdirs();
        toc.createNewFile();
        InputStreamReader inc = new InputStreamReader(plus);
        try {
            FileOutputStream data = new FileOutputStream(toc);
            try {
                IOUtils.copy(inc, data);
            } finally {
                IOUtils.closeQuietly(data);
            }
        } finally {
            IOUtils.closeQuietly(inc);
        }
    }
",0,0,0,-1,"relResourceName,projectName,resourceName,source,dest,in,out","relResourceName:0.0,projectName:0.0,resourceName:0.0,source:1.1920928955078125e-07,dest:-2.5033950805664062e-06,in:-1.1920928955078125e-06,out:2.384185791015625e-07,",7,21,"out:data,source:plus,relResourceName:relativeFileCode,projectName:resourcePath,resourceName:filePath,in:inc,dest:toc,",Greedy,320,0.14430944522221884
78,"['15861394', '9793984', '    public static String md5(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        byte[] md5hash = new byte[32];\n        try {\n            md.update(string.getBytes(""iso-8859-1""), 0, string.length());\n        } catch (UnsupportedEncodingException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n', '    public void setChecksum() {\n        try {\n            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");\n            String fqn = this.path + this.name;\n            md5.update(fqn.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & BYTE_CLEANER_FF;\n                if (b < BYTE_CLEANER_10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            this.checksum = sb.toString();\n        } catch (java.security.NoSuchAlgorithmException nsae) {\n            this.checksum = this.path + this.name;\n        }\n    }\n']",115,"    public static String md5(String address) {
        MessageDigest grad = null;
        try {
            grad = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException exception) {
            LOGGER.warn(exception.getMessage());
        }
        byte[] md005sum = new byte[32];
        try {
            grad.update(address.getBytes(""iso-8859-1""), 0, address.length());
        } catch (UnsupportedEncodingException exception) {
            LOGGER.warn(exception.getMessage());
        }
        md005sum = grad.digest();
        return convertToHex(md005sum);
    }
",1,1,1,-1,"string,md,md5hash","string:-2.086162567138672e-05,md:0.12480306625366211,md5hash:0.0,",3,10,"md:grad,md5hash:md005sum,string:address,",Greedy,162,0.07231600681940714
79,"['7993946', '8496070', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n', '    private void removeSessionId(InputStream inputStream, Output output) throws IOException {\n        String jsessionid = RewriteUtils.getSessionId(target);\n        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));\n        if (jsessionid == null || !textContentType) {\n            IOUtils.copy(inputStream, output.getOutputStream());\n        } else {\n            String charset = httpClientResponse.getContentCharset();\n            if (charset == null) {\n                charset = ""ISO-8859-1"";\n            }\n            String content = IOUtils.toString(inputStream, charset);\n            content = removeSessionId(jsessionid, content);\n            if (output.getHeader(""Content-length"") != null) {\n                output.setHeader(""Content-length"", Integer.toString(content.length()));\n            }\n            OutputStream outputStream = output.getOutputStream();\n            IOUtils.write(content, outputStream, charset);\n        }\n        inputStream.close();\n    }\n']",113,"    public void unsplit(String newFilename, File[] files) throws Exception {
        FileOutputStream http = new FileOutputStream(new File(newFilename));
        for (int i = 0; i < files.length; i++) {
            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());
            DataInputStream su = new DataInputStream(fin);
            while (su.available() > 0) {
                http.write(su.read());
            }
            su.close();
            fin.close();
        }
        http.close();
    }
",1,1,0,1,"newFilename,files,stream,i,fin,din","newFilename:0.0,files:-0.00010573863983154297,stream:0.0009451508522033691,i:-0.0004985332489013672,fin:3.039836883544922e-06,din:0.0007527470588684082,",2,7,"stream:http,din:su,",Greedy,116,0.05375012556711833
80,"['1789990', '20389366', '    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        final MessageDigest digest = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash;\n        digest.update(password.getBytes(""utf-8""), 0, password.length());\n        md5hash = digest.digest();\n        return convertToHex(md5hash);\n    }\n', '    public static String getMD5EncodedString(String strIn) {\n        try {\n            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(strIn.getBytes());\n            byte[] digest = md5.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (byte aDigest : digest) {\n                hexString.append(Integer.toHexString(0xFF & aDigest));\n            }\n            return hexString.toString();\n        } catch (java.security.NoSuchAlgorithmException n) {\n            return """";\n        }\n    }\n']",68,"    public String getHash(final String path) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest generEST = MessageDigest.getInstance(""MD5"");
        byte[] MD6array;
        generEST.update(path.getBytes(""utf-8""), 0, path.length());
        MD6array = generEST.generEST();
        return convertToHex(MD6array);
    }
",1,1,1,-1,"password,digest,md5hash","password:0.12981897592544556,digest:0.0,md5hash:0.0,",3,10,"password:path,digest:generEST,md5hash:MD6array,",Greedy,129,0.06139161984125773
81,"['2897046', '2021569', '    public boolean execute_check() {\n        FTPClient ftp = new FTPClient();\n        File filename = null;\n        FileChannel channel;\n        InputStream is;\n        OutputStream os;\n        int reply;\n        if (super.verbose > 0) verbose = true;\n        ftp.setDefaultPort(port);\n        ftp.setDefaultTimeout(timeout);\n        if (verbose) {\n            System.out.println(""Using FTP Server: "" + hostname);\n            System.out.println(""Using FTP Port: "" + port);\n            System.out.println(""Using Timeout of: "" + timeout);\n        }\n        if (passive) {\n            ftp.enterLocalPassiveMode();\n            if (verbose) System.out.println(""Using Passive Mode"");\n        }\n        try {\n            filename = new File(file);\n            channel = new RandomAccessFile(filename, ""rw"").getChannel();\n            if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);\n            ftp.connect(hostname);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");\n                check_state = common_h.STATE_CRITICAL;\n                check_message = ftp.getReplyString();\n                filename.delete();\n                ftp.disconnect();\n                return true;\n            }\n            if (username != null && password != null) {\n                if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);\n                if (!ftp.login(username, password)) {\n                    if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);\n                    check_state = common_h.STATE_CRITICAL;\n                    check_message = ftp.getReplyString();\n                    ftp.disconnect();\n                    filename.delete();\n                    return true;\n                }\n            }\n            if (verbose) System.out.println(""Attempting to change to required directory"");\n            if (!ftp.changeWorkingDirectory(directory)) {\n                if (verbose) System.out.println(""Required directory cannot be found!"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Attempting to retrieve specified file!"");\n            is = ftp.retrieveFileStream(file);\n            if (is == null) {\n                if (verbose) System.out.println(""Unable to locate required file."");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            os = Channels.newOutputStream(channel);\n            byte[] buf = new byte[4096];\n            if (verbose) System.out.println(""Beginning File transfer..."");\n            for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);\n            if (verbose) {\n                System.out.println(""...transfer complete."");\n                System.out.println(""Attempting to finalise Command"");\n            }\n            if (!ftp.completePendingCommand()) {\n                if (verbose) System.out.println(""Unable to finalise command"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Check Completed."");\n            check_state = common_h.STATE_OK;\n            check_message = ftp.getReplyString();\n            is.close();\n            os.close();\n            channel.close();\n            filename.delete();\n        } catch (IOException e) {\n            check_state = common_h.STATE_CRITICAL;\n            check_message = e.getMessage();\n            if (filename != null) filename.delete();\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.logout();\n                    ftp.disconnect();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return true;\n    }\n', '    public boolean getFile(String local, String remote) throws IOException {\n        boolean result = false;\n        GridFTP ftp = new GridFTP();\n        ftp.setDefaultPort(port);\n        System.out.println(this + "".getFile "" + remote);\n        try {\n            ftp.connect(host);\n            ftp.login(username, password);\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                System.err.println(""FTP server refused connection."");\n                return false;\n            }\n            ftp.get(local, remote);\n            ftp.logout();\n            result = true;\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        System.out.println(this + "".getFile return "" + result);\n        return result;\n    }\n']",763,"    public boolean execute_check() {
        FTPClient fdport = new FTPClient();
        File url = null;
        FileChannel connection;
        InputStream is;
        OutputStream or;
        int query;
        if (super.quosed > 0) quosed = true;
        fdport.setDefaultPort(port);
        fdport.setDefaultTimeout(timeout);
        if (quosed) {
            System.out.println(""Using FTP Server: "" + hostname);
            System.out.println(""Using FTP Port: "" + port);
            System.out.println(""Using Timeout of: "" + timeout);
        }
        if (passive) {
            fdport.enterLocalPassiveMode();
            if (quosed) System.out.println(""Using Passive Mode"");
        }
        try {
            url = new File(file);
            connection = new RandomAccessFile(url, ""rw"").getChannel();
            if (quosed) System.out.println(""Attempting FTP Connection to "" + hostname);
            fdport.connect(hostname);
            query = fdport.getReplyCode();
            if (!FTPReply.isPositiveCompletion(query)) {
                if (quosed) System.out.println(""FTP Connection to "" + hostname + "" failed"");
                checkpremanager = common_h.STATE_CRITICAL;
                block___output = fdport.getReplyString();
                url.delete();
                fdport.disconnect();
                return true;
            }
            if (username != null && password != null) {
                if (quosed) System.out.println(""Attempting to log in into FTP Server "" + hostname);
                if (!fdport.login(username, password)) {
                    if (quosed) System.out.println(""Unable to log in to FTP Server "" + hostname);
                    checkpremanager = common_h.STATE_CRITICAL;
                    block___output = fdport.getReplyString();
                    fdport.disconnect();
                    url.delete();
                    return true;
                }
            }
            if (quosed) System.out.println(""Attempting to change to required directory"");
            if (!fdport.changeWorkingDirectory(directory)) {
                if (quosed) System.out.println(""Required directory cannot be found!"");
                checkpremanager = common_h.STATE_WARNING;
                block___output = fdport.getReplyString();
                fdport.disconnect();
                url.delete();
                return true;
            }
            if (quosed) System.out.println(""Attempting to retrieve specified file!"");
            is = fdport.retrieveFileStream(file);
            if (is == null) {
                if (quosed) System.out.println(""Unable to locate required file."");
                checkpremanager = common_h.STATE_WARNING;
                block___output = fdport.getReplyString();
                fdport.disconnect();
                url.delete();
                return true;
            }
            or = Channels.newOutputStream(connection);
            byte[] buf = new byte[4096];
            if (quosed) System.out.println(""Beginning File transfer..."");
            for (int len = -1; (len = is.read(buf)) != -1; ) or.write(buf, 0, len);
            if (quosed) {
                System.out.println(""...transfer complete."");
                System.out.println(""Attempting to finalise Command"");
            }
            if (!fdport.completePendingCommand()) {
                if (quosed) System.out.println(""Unable to finalise command"");
                checkpremanager = common_h.STATE_WARNING;
                block___output = fdport.getReplyString();
                fdport.disconnect();
                url.delete();
                return true;
            }
            if (quosed) System.out.println(""Check Completed."");
            checkpremanager = common_h.STATE_OK;
            block___output = fdport.getReplyString();
            is.close();
            or.close();
            connection.close();
            url.delete();
        } catch (IOException e) {
            checkpremanager = common_h.STATE_CRITICAL;
            block___output = e.getMessage();
            if (url != null) url.delete();
        } finally {
            if (fdport.isConnected()) {
                try {
                    fdport.logout();
                    fdport.disconnect();
                } catch (Exception e) {
                }
            }
        }
        return true;
    }
",1,1,1,-1,"ftp,filename,channel,is,os,reply,verbose,check_state,check_message","ftp:0.0,filename:-3.5762786865234375e-07,channel:8.344650268554688e-07,is:-5.960464477539062e-07,os:-1.1920928955078125e-07,reply:-4.76837158203125e-07,verbose:0.0,check_state:0.0,check_message:0.0,",8,76,"channel:connection,ftp:fdport,verbose:quosed,check_state:checkpremanager,check_message:block___output,os:or,filename:url,reply:query,is:is,",Greedy,563,0.2989231506983439
82,"['8731413', '14067271', '    public ImportFromFile() {\n        JFrame jf = new JFrame();\n        JFileChooser fc = new JFileChooser(KTH.data._path);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fc.showOpenDialog(jf);\n        File file = null;\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            file = fc.getSelectedFile();\n            KTH.data._path = file.getParent();\n            System.out.println(file.getAbsolutePath() + ""\\n"");\n        } else {\n        }\n        if (file != null) {\n            File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);\n            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));\n            if (f.exists() && !IOUtils.isNewerContent(file, f)) {\n            } else {\n                try {\n                    IOUtils.copyFile(file, f, true);\n                } catch (Exception e) {\n                    KTH.out.err(e);\n                }\n            }\n            KTH.dc2.removeDc(""Import"");\n        } else {\n        }\n    }\n', '    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {\n        File[] files = folder.listFiles();\n        for (File file : files) {\n            if (file.isDirectory()) {\n                addFolderToZip(file, zip, baseName);\n            } else {\n                String name = file.getAbsolutePath().substring(baseName.length());\n                ZipEntry zipEntry = new ZipEntry(name);\n                zip.putNextEntry(zipEntry);\n                IOUtils.copy(new FileInputStream(file), zip);\n                zip.closeEntry();\n            }\n        }\n    }\n']",227,"    public ImportFromFile() {
        JFrame jf = new JFrame();
        JFileChooser fc = new JFileChooser(KTH.config._path);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(jf);
        File url = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            url = fc.getSelectedFile();
            KTH.config._path = url.getParent();
            System.out.println(url.getAbsolutePath() + ""
"");
        } else {
        }
        if (url != null) {
            File f = new File(KTH.config.getHomeDir() + File.separator + KTH.config.katalogName);
            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));
            if (f.exists() && !IOUtils.isNewerContent(url, f)) {
            } else {
                try {
                    IOUtils.copyFile(url, f, true);
                } catch (Exception e) {
                    KTH.out.err(e);
                }
            }
            KTH.dc2.removeDc(""Import"");
        } else {
        }
    }
",1,1,1,-1,"jf,fc,returnVal,file,KTH,data,_path,f","jf:0.0,fc:-0.0003203153610229492,returnVal:0.0,file:-0.00037914514541625977,KTH:0.0,data:0.00043511390686035156,_path:0.0,f:-0.0001379847526550293,",2,11,"data:config,jf:jf,returnVal:returnVal,KTH:KTH,_path:_path,f:f,fc:fc,file:url,",Greedy,382,0.15813289880752562
83,"['12764800', '272355', '    public static void extractZipFile(String filename) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(filename));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",189,"    public static void extractZipFile(String url) {
        try {
            byte[] loc = new byte[1024];
            ZipInputStream zipinputstream = null;
            ZipEntry zipentry;
            zipinputstream = new ZipInputStream(new FileInputStream(url));
            zipentry = zipinputstream.getNextEntry();
            while (zipentry != null) {
                String entryName = zipentry.getName();
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(entryName);
                String directory = newFile.getParent();
                if (directory == null) {
                    if (newFile.isDirectory()) break;
                }
                fileoutputstream = new FileOutputStream(entryName);
                while ((n = zipinputstream.read(loc, 0, 1024)) > -1) fileoutputstream.write(loc, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
                zipentry = zipinputstream.getNextEntry();
            }
            zipinputstream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"filename,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,directory","filename:0.00011610984802246094,buf:0.0006966590881347656,zipinputstream:0.0,zipentry:0.0,entryName:0.0,n:-0.00015282630920410156,fileoutputstream:0.0,newFile:0.0,directory:-9.697675704956055e-05,",2,5,"buf:loc,filename:url,",Greedy,125,0.05848495562871297
84,"['3377427', '9088422', '    public void execute() throws BuildException {\n        Enumeration list = getIndividualTests();\n        String srcRptFile = """";\n        String destRptFile = """";\n        while (list.hasMoreElements()) {\n            J3DPerfUnitTest test = (J3DPerfUnitTest) list.nextElement();\n            if (test.shouldRun(getProject())) {\n                try {\n                    execute(test);\n                    try {\n                        srcRptFile = getProject().resolveFile(""."").getAbsolutePath() + ""\\\\"" + test.getName() + "".txt"";\n                        destRptFile = getProject().resolveFile(test.getName() + "".txt"", new File(test.getTodir())).getAbsolutePath();\n                        FileChannel srcChannel = new FileInputStream(srcRptFile).getChannel();\n                        FileChannel dstChannel = new FileOutputStream(destRptFile).getChannel();\n                        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                        srcChannel.close();\n                        dstChannel.close();\n                        if (!srcRptFile.equals(destRptFile)) {\n                            new File(srcRptFile).delete();\n                        }\n                    } catch (IOException e) {\n                    }\n                } catch (BuildException e) {\n                    e.printStackTrace();\n                } catch (CloneNotSupportedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",246,"    public void execute() throws BuildException {
        Enumeration lp = getIndividualTests();
        String srcRptLine = """";
        String destRPTPath = """";
        while (lp.hasMoreElements()) {
            J3DPerfUnitTest ester = (J3DPerfUnitTest) lp.nextElement();
            if (ester.shouldRun(getProject())) {
                try {
                    execute(ester);
                    try {
                        srcRptLine = getProject().resolveFile(""."").getAbsolutePath() + ""\\"" + ester.getName() + "".txt"";
                        destRPTPath = getProject().resolveFile(ester.getName() + "".txt"", new File(ester.getTodir())).getAbsolutePath();
                        FileChannel destPage = new FileInputStream(srcRptLine).getChannel();
                        FileChannel destStream = new FileOutputStream(destRPTPath).getChannel();
                        destStream.transferFrom(destPage, 0, destPage.size());
                        destPage.close();
                        destStream.close();
                        if (!srcRptLine.equals(destRPTPath)) {
                            new File(srcRptLine).delete();
                        }
                    } catch (IOException e) {
                    }
                } catch (BuildException e) {
                    e.printStackTrace();
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",1,1,1,-1,"list,test,srcRptFile,destRptFile,srcChannel,dstChannel","list:0.027258634567260742,test:0.007223069667816162,srcRptFile:0.0,destRptFile:0.0,srcChannel:0.0,dstChannel:0.0,",6,25,"list:lp,test:ester,srcRptFile:srcRptLine,destRptFile:destRPTPath,srcChannel:destPage,dstChannel:destStream,",Greedy,394,0.15929185152053832
85,"['9857413', '11426721', '    @Override\n    public byte[] readData(byte[] options, boolean transferMetaData) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        long transferredBytesNum = 0;\n        long elapsedTime = 0;\n        Properties opts = PropertiesUtils.deserializeProperties(options);\n        String server = opts.getProperty(TRANSFER_OPTION_SERVER);\n        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);\n        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);\n        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);\n        if (transferMetaData) {\n            int idx = filePath.lastIndexOf(PATH_SEPARATOR);\n            if (idx != -1) {\n                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;\n                filePath = filePath.substring(0, idx);\n                filePath = filePath + PATH_SEPARATOR + fileName;\n            } else {\n                filePath += META_DATA_FILE_SUFIX;\n            }\n        }\n        if (!server.contains(PORT_SEPARATOR)) {\n            server += PORT_SEPARATOR + DEFAULT_PORT;\n        }\n        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");\n        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));\n        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        ByteArrayOutputStream baos = null;\n        try {\n            InputStream is = urlc.getInputStream();\n            baos = new ByteArrayOutputStream();\n            byte[] buffer = new byte[1024];\n            int br;\n            while ((br = is.read(buffer)) > 0) {\n                baos.write(buffer, 0, br);\n                if (!transferMetaData) {\n                    transferredBytesNum += br;\n                    elapsedTime = System.currentTimeMillis() - startTime;\n                    fireOnProgressEvent(transferredBytesNum, elapsedTime);\n                }\n            }\n            baos.close();\n            is.close();\n        } catch (FileNotFoundException fnfe) {\n        }\n        return baos != null ? baos.toByteArray() : null;\n    }\n', '    public boolean uploadToUrl(URL url, Map postData) {\n        boolean success = false;\n        OutputStream oStream;\n        HttpURLConnection urlConn = null;\n        try {\n            urlConn = (HttpURLConnection) url.openConnection();\n            urlConn.setDoOutput(true);\n            urlConn.setDoInput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setAllowUserInteraction(false);\n            String parametersAsString = """";\n            Iterator itParams = postData.entrySet().iterator();\n            while (itParams.hasNext()) {\n                Map.Entry param = (Map.Entry) itParams.next();\n                parametersAsString += (String) param.getKey() + ""="" + URLEncoder.encode((String) param.getValue(), ""UTF-8"") + ""&"";\n            }\n            byte[] parameterAsBytes = parametersAsString.getBytes();\n            urlConn.setRequestProperty(""Content=length"", String.valueOf(parameterAsBytes.length));\n            oStream = urlConn.getOutputStream();\n            oStream.write(parameterAsBytes);\n            oStream.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.err.println(""Response: "" + line);\n            }\n            oStream.close();\n            rd.close();\n            success = true;\n        } catch (MalformedURLException ex) {\n            System.err.println(ex + "" (uploadToUrl)"");\n            success = false;\n        } catch (java.io.IOException iox) {\n            System.out.println(iox + "" (uploadToUrl)"");\n            success = false;\n        } catch (Exception generic) {\n            System.out.println(generic.toString() + "" (uploadToUrl)"");\n            success = false;\n        } finally {\n            success = false;\n        }\n        return success;\n    }\n']",376,"    @Override
    public byte[] readData(byte[] timeout, boolean writeMetaFlow) throws Throwable {
        long middleTIME = System.currentTimeMillis();
        long transfixedBytesSum = 0;
        long eladjustedStream = 0;
        Properties  optts = PropertiesUtils.deserializeProperties(timeout);
        String localhost =  optts.getProperty(TRANSFER_OPTION_SERVER);
        String login =  optts.getProperty(TRANSFER_OPTION_USERNAME);
        String api =  optts.getProperty(TRANSFER_OPTION_PASSWORD);
        String ileLog =  optts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (writeMetaFlow) {
            int idy = ileLog.lastIndexOf(PATH_SEPARATOR);
            if (idy != -1) {
                String FilePath = ileLog.substring(idy + 1) + META_DATA_FILE_SUFIX;
                ileLog = ileLog.substring(0, idy);
                ileLog = ileLog + PATH_SEPARATOR + FilePath;
            } else {
                ileLog += META_DATA_FILE_SUFIX;
            }
        }
        if (!localhost.contains(PORT_SEPARATOR)) {
            localhost += PORT_SEPARATOR + DEFAULT_PORT;
        }
        URL io = new URL(PROTOCOL_PREFIX + login + "":"" + api + ""@"" + localhost + ileLog + "";type=i"");
        URLConnection urlp = io.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlp.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlp.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        ByteArrayOutputStream boos = null;
        try {
            InputStream is = urlp.getInputStream();
            boos = new ByteArrayOutputStream();
            byte[] input = new byte[1024];
            int line;
            while ((line = is.read(input)) > 0) {
                boos.write(input, 0, line);
                if (!writeMetaFlow) {
                    transfixedBytesSum += line;
                    eladjustedStream = System.currentTimeMillis() - middleTIME;
                    fireOnProgressEvent(transfixedBytesSum, eladjustedStream);
                }
            }
            boos.close();
            is.close();
        } catch (FileNotFoundException fnfe) {
        }
        return boos != null ? boos.toByteArray() : null;
    }
",0,0,1,1,"options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,baos,is,buffer,br","options:1.430511474609375e-06,transferMetaData:0.0,startTime:0.0,transferredBytesNum:0.0,elapsedTime:0.0,opts:0.0,server:0.0,username:-4.410743713378906e-06,password:-3.6954879760742188e-06,filePath:0.0,idx:0.0,fileName:0.0,url:0.0001195669174194336,urlc:0.0,baos:0.0,is:-1.5139579772949219e-05,buffer:-7.987022399902344e-06,br:3.0994415283203125e-06,",17,60,"url:io,br:line,options:timeout,transferMetaData:writeMetaFlow,startTime:middleTIME,transferredBytesNum:transfixedBytesSum,elapsedTime:eladjustedStream,opts: optts,server:localhost,filePath:ileLog,idx:idy,fileName:FilePath,urlc:urlp,baos:boos,password:api,username:login,buffer:input,",Greedy,742,0.3706244866053263
86,"['13555475', '6893385', '    public boolean testConnection(FTPSite site) throws IOException {\n        FTPClient testclient = new FTPClient();\n        testclient.connect(site.getHost(), site.getPort());\n        boolean check = testclient.login(site.getUser(), site.getPassword());\n        testclient.disconnect();\n        return check;\n    }\n', '    @Override\n    public void end() {\n        m_zipFormatter.end();\n        IOUtils.closeQuietly(m_outputStream);\n        final FTPClient ftp = new FTPClient();\n        FileInputStream fis = null;\n        try {\n            if (m_url.getPort() == -1 || m_url.getPort() == 0 || m_url.getPort() == m_url.getDefaultPort()) {\n                ftp.connect(m_url.getHost());\n            } else {\n                ftp.connect(m_url.getHost(), m_url.getPort());\n            }\n            if (m_url.getUserInfo() != null && m_url.getUserInfo().length() > 0) {\n                final String[] userInfo = m_url.getUserInfo().split("":"", 2);\n                ftp.login(userInfo[0], userInfo[1]);\n            } else {\n                ftp.login(""anonymous"", ""opennmsftp@"");\n            }\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                LogUtils.errorf(this, ""FTP server refused connection."");\n                return;\n            }\n            String path = m_url.getPath();\n            if (path.endsWith(""/"")) {\n                LogUtils.errorf(this, ""Your FTP URL must specify a filename."");\n                return;\n            }\n            File f = new File(path);\n            path = f.getParent();\n            if (!ftp.changeWorkingDirectory(path)) {\n                LogUtils.infof(this, ""unable to change working directory to %s"", path);\n                return;\n            }\n            LogUtils.infof(this, ""uploading %s to %s"", f.getName(), path);\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            fis = new FileInputStream(m_zipFile);\n            if (!ftp.storeFile(f.getName(), fis)) {\n                LogUtils.infof(this, ""unable to store file"");\n                return;\n            }\n            LogUtils.infof(this, ""finished uploading"");\n        } catch (final Exception e) {\n            LogUtils.errorf(this, e, ""Unable to FTP file to %s"", m_url);\n        } finally {\n            IOUtils.closeQuietly(fis);\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n']",65,"    public boolean testConnection(FTPSite set) throws IOException {
        FTPClient newapi = new FTPClient();
        newapi.connect(set.getHost(), set.getPort());
        boolean get = newapi.login(set.getUser(), set.getPassword());
        newapi.disconnect();
        return get;
    }
",1,1,1,-1,"site,testclient,check","site:-0.0006924271583557129,testclient:0.0,check:0.000209808349609375,",3,11,"check:get,testclient:newapi,site:set,",Greedy,154,0.06909461418787638
87,"['22366636', '8561732', '    public int create(BusinessObject o) throws DAOException {\n        int insert = 0;\n        int id = 0;\n        Project project = (Project) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));\n            pst.setString(1, project.getName());\n            pst.setString(2, project.getDescription());\n            pst.setInt(3, project.getIdAccount());\n            pst.setInt(4, project.getIdContact());\n            insert = pst.executeUpdate();\n            if (insert <= 0) {\n                connection.rollback();\n                throw new DAOException(""Number of rows <= 0"");\n            } else if (insert > 1) {\n                connection.rollback();\n                throw new DAOException(""Number of rows > 1"");\n            }\n            Statement st = connection.createStatement();\n            ResultSet rs = st.executeQuery(""select max(id_project) from project"");\n            rs.next();\n            id = rs.getInt(1);\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(""A SQLException has occured"");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(""Connection null"");\n        }\n        return id;\n    }\n', '    public boolean actualizarRondaActual(division div) {\n        int intResult = 0;\n        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n']",255,"    public int create(BusinessObject connection) throws DAOException {
        int position = 0;
        int url = 0;
        Project database = (Project) connection;
        try {
            PreparedStatement Pft = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));
            Pft.setString(1, database.getName());
            Pft.setString(2, database.getDescription());
            Pft.setInt(3, database.getIdAccount());
            Pft.setInt(4, database.getIdContact());
            position = Pft.executeUpdate();
            if (position <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (position > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement rest = connection.createStatement();
            ResultSet rs = rest.executeQuery(""select max(id_project) from project"");
            rs.next();
            url = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return url;
    }
",1,1,1,-1,"o,insert,id,project,pst,st,rs","o:-2.384185791015625e-07,insert:1.233816146850586e-05,id:4.875659942626953e-05,project:2.8312206268310547e-05,pst:0.0,st:2.3066997528076172e-05,rs:2.1696090698242188e-05,",6,23,"id:url,project:database,st:rest,rs:rs,insert:position,pst:Pft,o:connection,",Greedy,374,0.15498390197753906
88,"['2490462', '3635291', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n', '    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        byte[] sha1hash = null;\n        md = MessageDigest.getInstance(""SHA"");\n        sha1hash = new byte[40];\n        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n']",266,"    private void getRandomGUID(boolean active) {
        MessageDigest mp64 = null;
        StringBuffer sbValueBeforeMC512 = new StringBuffer();
        try {
            mp64 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long id = System.currentTimeMillis();
            long rar = 0;
            if (active) {
                rar = mySecureRand.nextLong();
            } else {
                rar = myRand.nextLong();
            }
            sbValueBeforeMC512.append(s_id);
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(id));
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(rar));
            valueBeforeMC3 = sbValueBeforeMC512.toString();
            mp64.update(valueBeforeMC3.getBytes());
            byte[] image = mp64.digest();
            StringBuffer bj = new StringBuffer();
            for (int dy = 0; dy < image.length; ++dy) {
                int mb = image[dy] & 0xFF;
                if (mb < 0x10) bj.append('0');
                bj.append(Integer.toHexString(mb));
            }
            valueAfterAMD5 = bj.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1,1,1,-1,"secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","secure:2.6226043701171875e-06,md5:0.0,sbValueBeforeMD5:0.0,time:8.344650268554688e-07,rand:1.2755393981933594e-05,valueBeforeMD5:0.0,array:-8.225440979003906e-06,sb:3.135204315185547e-05,j:-7.843971252441406e-05,b:3.218650817871094e-05,valueAfterMD5:0.0,",11,36,"b:mb,sb:bj,rand:rar,secure:active,time:id,md5:mp64,sbValueBeforeMD5:sbValueBeforeMC512,valueBeforeMD5:valueBeforeMC3,valueAfterMD5:valueAfterAMD5,array:image,j:dy,",Greedy,548,0.23110959927241007
89,"['19999376', '624490', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",138,"    private static void unzipEntry(ZipFile zipfile, ZipEntry in, File outFile) throws IOException {
        if (in.isDirectory()) {
            createDir(new File(outFile, in.getName()));
            return;
        }
        File outputFile = new File(outFile, in.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(in));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",1,1,1,-1,"zipfile,entry,outputDir,outputFile,inputStream,outputStream","zipfile:0.0,entry:-0.0010192394256591797,outputDir:0.0,outputFile:0.0,inputStream:0.0,outputStream:0.0,",2,8,"zipfile:zipfile,outputDir:outFile,outputFile:outputFile,inputStream:inputStream,outputStream:outputStream,entry:in,",Greedy,216,0.10657970110575359
90,"['3109016', '10789070', '    private void copySon(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n', '    public List<Datastream> getFiles(final String pFile) throws IOException {\n        List<Datastream> tDatastreams = new ArrayList<Datastream>();\n        new File(this.getTmpExtractDirName()).mkdir();\n        ZipFile tZipFile = new ZipFile(pFile);\n        Enumeration tEntries = tZipFile.entries();\n        ZipEntry tEntry = null;\n        File tFile = null;\n        String tFileLocation = """";\n        LocalDatastream tLocalDs = null;\n        while (tEntries.hasMoreElements()) {\n            tEntry = (ZipEntry) tEntries.nextElement();\n            if (tEntry.isDirectory()) {\n                continue;\n            }\n            tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + tEntry.getName();\n            tFile = new File(tFileLocation);\n            LOG.debug(""Saving "" + tEntry.getName() + "" to "" + tFile.getPath());\n            tFile.getParentFile().mkdirs();\n            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));\n            tLocalDs = new LocalDatastream(tFile.getName().split(""\\\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\\\."")[1]), tFileLocation);\n            tLocalDs.setLabel(tEntry.getName());\n            tDatastreams.add(tLocalDs);\n        }\n        return tDatastreams;\n    }\n']",227,"    private void copySon(File copy) {
        System.out.println(""parent---"" + copy.getAbsolutePath());
        if (copy.isDirectory() && !"".svn"".equals(copy.getName())) {
            File cases = new File(copy, ""cases"");
            if (cases.exists()) {
                File answers = new File(copy, ""answers"");
                if (!answers.exists()) {
                    answers.mkdir();
                    File answers_linux = new File(copy, ""answers_linux"");
                    for (File file : answers_linux.listFiles()) {
                        if (file.isDirectory()) {
                            continue;
                        }
                        File target = new File(answers, file.getName());
                        try {
                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));
                        } catch (Throwable t) {
                            t.printStackTrace();
                        }
                    }
                }
            } else {
                for (File son : copy.listFiles()) {
                    System.out.println(""parent---"" + son.getAbsolutePath());
                    copySon(son);
                }
            }
        }
    }
",1,1,1,-1,"parent,cases,answers,answers_linux,file,target,son","parent:4.2319297790527344e-05,cases:3.832578659057617e-05,answers:0.0,answers_linux:0.0,file:-2.9027462005615234e-05,target:-1.5497207641601562e-05,son:-1.0728836059570312e-05,",1,8,"parent:copy,cases:cases,answers:answers,answers_linux:answers_linux,son:son,target:target,file:file,",Greedy,390,0.1628767132759094
91,"['5317769', '19044529', '    private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException {\n        try {\n            final String providerNamePrefix = providerClass.getName() + ""."";\n            final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() {\n\n                public int compare(final String key1, final String key2) {\n                    return key1.compareTo(key2);\n                }\n            });\n            final File platformProviders = new File(this.getPlatformProviderLocation());\n            if (platformProviders.exists()) {\n                InputStream in = null;\n                final java.util.Properties p = new java.util.Properties();\n                try {\n                    in = new FileInputStream(platformProviders);\n                    p.load(in);\n                } finally {\n                    if (in != null) {\n                        in.close();\n                    }\n                }\n                for (Map.Entry e : p.entrySet()) {\n                    if (e.getKey().toString().startsWith(providerNamePrefix)) {\n                        final Class<?> provider = this.findClass(e.getValue().toString());\n                        if (provider == null) {\n                            throw new BootstrapException(getMessage(""implementationNotFound"", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()));\n                        }\n                        if (!providerClass.isAssignableFrom(provider)) {\n                            throw new BootstrapException(getMessage(""illegalImplementation"", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()));\n                        }\n                        providers.put(e.getKey().toString(), provider.asSubclass(providerClass));\n                    }\n                }\n            }\n            final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + \'/\' + providerClass.getName());\n            while (classpathProviders.hasMoreElements()) {\n                final URL url = classpathProviders.nextElement();\n                final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));\n                String line = null;\n                while ((line = reader.readLine()) != null) {\n                    if (line.contains(""#"")) {\n                        continue;\n                    }\n                    final Class<?> provider = this.findClass(line);\n                    if (provider == null) {\n                        throw new BootstrapException(getMessage(""implementationNotFound"", providerClass.getName(), line, url.toExternalForm()));\n                    }\n                    if (!providerClass.isAssignableFrom(provider)) {\n                        throw new BootstrapException(getMessage(""illegalImplementation"", providerClass.getName(), line, url.toExternalForm()));\n                    }\n                    providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass));\n                }\n                reader.close();\n            }\n            return providers.values();\n        } catch (final IOException e) {\n            throw new BootstrapException(e.getMessage(), e);\n        }\n    }\n', '    public void put(File fileToPut) throws IOException {\n        FTPClient ftp = new FTPClient();\n        try {\n            int reply;\n            ftp.connect(this.endpointURL, Config.getFtpPort());\n            log.debug(""Ftp put reply: "" + ftp.getReplyString());\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                throw new IOException(""Ftp put server refused connection."");\n            }\n            if (!ftp.login(""anonymous"", """")) {\n                ftp.logout();\n                throw new IOException(""FTP: server wrong passwd"");\n            }\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            ftp.enterLocalPassiveMode();\n            InputStream input = new FileInputStream(fileToPut);\n            if (ftp.storeFile(fileToPut.getName(), input) != true) {\n                ftp.logout();\n                input.close();\n                throw new IOException(""FTP put exception"");\n            }\n            input.close();\n            ftp.logout();\n        } catch (Exception e) {\n            log.error(""Ftp client exception: "" + e.getMessage(), e);\n            throw new IOException(e.getMessage());\n        }\n    }\n']",594,"    private <T> Collection<Class<? extends T>> loadProviders(final Class<T> provideType) throws BootstrapException {
        try {
            final String providerNamePrefix = provideType.getName() + ""."";
            final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() {

                public int compare(final String pick1, final String key2) {
                    return pick1.compareTo(key2);
                }
            });
            final File platformProviders = new File(this.getPlatformProviderLocation());
            if (platformProviders.exists()) {
                InputStream in = null;
                final java.util.Properties lp = new java.util.Properties();
                try {
                    in = new FileInputStream(platformProviders);
                    lp.load(in);
                } finally {
                    if (in != null) {
                        in.close();
                    }
                }
                for (Map.Entry element : lp.entrySet()) {
                    if (element.getKey().toString().startsWith(providerNamePrefix)) {
                        final Class<?> provider = this.findClass(element.getValue().toString());
                        if (provider == null) {
                            throw new BootstrapException(getMessage(""implementationNotFound"", provideType.getName(), element.getValue().toString(), platformProviders.getAbsolutePath()));
                        }
                        if (!provideType.isAssignableFrom(provider)) {
                            throw new BootstrapException(getMessage(""illegalImplementation"", provideType.getName(), element.getValue().toString(), platformProviders.getAbsolutePath()));
                        }
                        providers.put(element.getKey().toString(), provider.asSubclass(provideType));
                    }
                }
            }
            final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + provideType.getName());
            while (classpathProviders.hasMoreElements()) {
                final URL file = classpathProviders.nextElement();
                final BufferedReader reader = new BufferedReader(new InputStreamReader(file.openStream(), ""UTF-8""));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    if (line.contains(""#"")) {
                        continue;
                    }
                    final Class<?> provider = this.findClass(line);
                    if (provider == null) {
                        throw new BootstrapException(getMessage(""implementationNotFound"", provideType.getName(), line, file.toExternalForm()));
                    }
                    if (!provideType.isAssignableFrom(provider)) {
                        throw new BootstrapException(getMessage(""illegalImplementation"", provideType.getName(), line, file.toExternalForm()));
                    }
                    providers.put(providerNamePrefix + providers.size(), provider.asSubclass(provideType));
                }
                reader.close();
            }
            return providers.values();
        } catch (final IOException element) {
            throw new BootstrapException(element.getMessage(), element);
        }
    }
",0,0,0,-1,"providerClass,providerNamePrefix,providers,key1,key2,platformProviders,in,p,e,provider,classpathProviders,url","providerClass:0.0,providerNamePrefix:0.0,providers:0.0,key1:0.0,key2:0.0,platformProviders:0.0,in:-4.208087921142578e-05,p:1.9431114196777344e-05,e:1.5497207641601562e-06,provider:0.0,classpathProviders:0.0,url:-4.410743713378906e-05,",5,29,"p:lp,e:element,providerClass:provideType,providerNamePrefix:providerNamePrefix,providers:providers,key1:pick1,key2:key2,platformProviders:platformProviders,provider:provider,classpathProviders:classpathProviders,in:in,url:file,",Greedy,648,0.33311585982640585
92,"['17977185', '19650324', '    private String getServerData(String returnString) {\n        InputStream is = null;\n        String result = """";\n        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(""usuario"", Login.usuario));\n        nameValuePairs.add(new BasicNameValuePair(""amigoABorrar"", amigoABorrar.trim()));\n        nameValuePairs.add(new BasicNameValuePair(""grupo"", MisGrupos.seleccion.trim()));\n        try {\n            HttpClient httpclient = new DefaultHttpClient();\n            HttpPost httppost = new HttpPost(returnString);\n            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = httpclient.execute(httppost);\n            HttpEntity entity = response.getEntity();\n            is = entity.getContent();\n        } catch (Exception e) {\n            Log.e(""AmigosPorGrupo"", ""Error en la conexion http "" + e.toString());\n        }\n        try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);\n            String line = reader.readLine();\n            is.close();\n            result = line.trim().toString();\n            Log.d(""AmigosPorGrupo"", ""Longitud line: "" + line.trim().length());\n        } catch (Exception e) {\n            Log.e(""AmigosPorGrupo"", ""Error converting result "" + e.toString());\n        }\n        Log.d(""AmigosPorGrupo"", ""Funciono json"" + result);\n        return result;\n    }\n', '        public void perform(Context context) {\n            Long workflowIdParentProcess;\n            SimpleProvider config;\n            VariablesContext var;\n            String xmldocument;\n            Service service;\n            Object[] param;\n            String method;\n            String wsurl;\n            Object ret;\n            Call call;\n            URL url;\n            try {\n                var = Variables.getContext();\n                if (var.get(""wsurl"") == null || var.get(""method"") == null) {\n                    System.out.println(""----- Need the url of the webservice and the method! -----"");\n                    log_.error(""Need the url of the webservice and the method!"");\n                    return;\n                }\n                method = var.get(""method"");\n                wsurl = var.get(""wsurl"");\n                url = new java.net.URL(wsurl);\n                try {\n                    url.openConnection().connect();\n                } catch (IOException ex) {\n                    System.out.println(""----- Could not connect to the webservice! -----"");\n                    log_.error(""Could not connect to the webservice!"");\n                    return;\n                }\n                if (var.get(""param0"") == null || var.get(""param1"") == null) {\n                    System.out.println(""----- Need parameters! -----"");\n                    log_.error(""Need parameters!"");\n                    return;\n                }\n                xmldocument = var.get(""param0"");\n                workflowIdParentProcess = new Long(var.get(""param1""));\n                param = new Object[] { xmldocument, workflowIdParentProcess };\n                config = new SimpleProvider();\n                config.deployTransport(""http"", new HTTPSender());\n                service = new Service(config);\n                call = (Call) service.createCall();\n                call.setTargetEndpointAddress(new java.net.URL(wsurl));\n                call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));\n                try {\n                    ret = call.invoke(param);\n                    context.set(CTX_ANSW, ""=> notifyIhk invoked - Result: "" + ret);\n                    System.out.println(""----- notifyIhk invoked! -----"");\n                    log_.info(""notifyIhk invoked!"");\n                } catch (RemoteException ex) {\n                    System.out.println(""----- Could not invoke the method! -----"");\n                    log_.error(""Could not invoke the method!"");\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace(System.err);\n            }\n        }\n']",291,"    private String getServerData(String returnString) {
        InputStream in = null;
        String match = """";
        ArrayList<NameValuePair> nameValuesCair = new ArrayList<NameValuePair>();
        nameValuesCair.add(new BasicNameValuePair(""usuario"", Login.usuario));
        nameValuesCair.add(new BasicNameValuePair(""amigoABorrar"", amigoABorrar.trim()));
        nameValuesCair.add(new BasicNameValuePair(""grupo"", MisGrupos.seleccion.trim()));
        try {
            HttpClient  httpconnection = new DefaultHttpClient();
            HttpPost httppPost = new HttpPost(returnString);
            httppPost.setEntity(new UrlEncodedFormEntity(nameValuesCair));
            HttpResponse onse =  httpconnection.execute(httppPost);
            HttpEntity ilo = onse.getEntity();
            in = ilo.getContent();
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error en la conexion http "" + e.toString());
        }
        try {
            BufferedReader ri = new BufferedReader(new InputStreamReader(in, ""iso-8859-1""), 8);
            String line = ri.readLine();
            in.close();
            match = line.trim().toString();
            Log.d(""AmigosPorGrupo"", ""Longitud line: "" + line.trim().length());
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error converting result "" + e.toString());
        }
        Log.d(""AmigosPorGrupo"", ""Funciono json"" + match);
        return match;
    }
",0,0,0,-1,"returnString,is,nameValuePairs,httpclient,httppost,response,entity,reader,line,result","returnString:0.0,is:-3.445148468017578e-05,nameValuePairs:0.0,httpclient:0.0,httppost:0.0,response:2.7298927307128906e-05,entity:6.079673767089844e-06,reader:2.7179718017578125e-05,line:1.1205673217773438e-05,result:3.4570693969726562e-06,",8,25,"response:onse,reader:ri,line:line,entity:ilo,result:match,returnString:returnString,nameValuePairs:nameValuesCair,httpclient: httpconnection,httppost:httppPost,is:in,",Greedy,480,0.23006416161855062
93,"['17972560', '19645104', '    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {\n        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {\n            File selectedFolder = folderFileChooser.getSelectedFile();\n            File collectionCopyFile;\n            String newDocumentName;\n            Document newDocument;\n            StringBuilder distinguisherReplacer = new StringBuilder();\n            int matchingFilenameDistinguisher;\n            String nextToken;\n            Term newTerm;\n            String userHome;\n            String fileSeparator;\n            int userOption;\n            ArrayList<File> folderTextFiles = new ArrayList<File>();\n            ArrayList<File> folderRejectedFiles = new ArrayList<File>();\n            HashSet<File> ignoredFiles = new HashSet<File>();\n            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");\n            Scanner tokenizer = null;\n            FileChannel fileSource = null;\n            FileChannel collectionDestination = null;\n            HashMap<String, Integer> termHashMap = null;\n            Index collectionIndex = activeCollection.getIndex();\n            int documentTermMaxFrequency;\n            int currentTermFrequency;\n            for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);\n            for (File selectedFile : folderTextFiles) {\n                newDocumentName = selectedFile.getName();\n                newDocument = new Document(newDocumentName);\n                if (activeCollection.containsDocument(newDocument)) {\n                    matchingFilenameDistinguisher = 1;\n                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");\n                    newDocument.setDocumentName(newDocumentName);\n                    while (activeCollection.containsDocument(newDocument)) {\n                        matchingFilenameDistinguisher++;\n                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();\n                        newDocument.setDocumentName(newDocumentName);\n                    }\n                }\n                termHashMap = new HashMap<String, Integer>();\n                try {\n                    tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));\n                    tokenizer.useDelimiter(Pattern.compile(""\\\\p{Space}|\\\\p{Punct}|\\\\p{Cntrl}""));\n                    while (tokenizer.hasNext()) {\n                        nextToken = tokenizer.next().toLowerCase();\n                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);\n                    }\n                    documentTermMaxFrequency = 0;\n                    for (String term : termHashMap.keySet()) {\n                        newTerm = new Term(term);\n                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);\n                        currentTermFrequency = termHashMap.get(term);\n                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;\n                        collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);\n                    }\n                    newDocument.setTermMaxFrequency(documentTermMaxFrequency);\n                    activeCollection.addDocument(newDocument);\n                    userHome = System.getProperty(""user.home"");\n                    fileSeparator = System.getProperty(""file.separator"");\n                    collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);\n                    collectionCopyFile.createNewFile();\n                    fileSource = new FileInputStream(selectedFile).getChannel();\n                    collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();\n                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());\n                } catch (FileNotFoundException e) {\n                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");\n                    return;\n                } catch (IOException e) {\n                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\n                    if (userOption == JOptionPane.NO_OPTION) {\n                        activeCollection.removeDocument(newDocument);\n                        for (String term : termHashMap.keySet()) {\n                            collectionIndex.removeAllOccurences(new Term(term), newDocument);\n                        }\n                        folderTextFiles.add(selectedFile);\n                    } else ignoredFiles.add(selectedFile);\n                } finally {\n                    try {\n                        if (tokenizer != null) tokenizer.close();\n                        if (fileSource != null) fileSource.close();\n                        if (collectionDestination != null) collectionDestination.close();\n                    } catch (IOException e) {\n                        System.err.println(e.getMessage());\n                    }\n                }\n            }\n            if (ignoredFiles.size() > 0) {\n                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);\n                ignoredFilesDialog.setVisible(true);\n            }\n            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n    }\n', '    public void write(HttpServletResponse res) throws MalformedURLException, IOException {\n        if (m_url.equals("""")) {\n            return;\n        }\n        URL url = new URL(m_url);\n        URLConnection con = url.openConnection();\n        con.setUseCaches(false);\n        BufferedInputStream in = new BufferedInputStream(con.getInputStream(), BUF_SIZE);\n        BufferedOutputStream out = new BufferedOutputStream(res.getOutputStream());\n        byte[] buf = new byte[BUF_SIZE];\n        int size = 0;\n        String contentType = con.getContentType();\n        if (contentType != null) {\n            res.setContentType(con.getContentType());\n        }\n        while ((size = in.read(buf)) > 0) {\n            out.write(buf, 0, size);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n']",879,"    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent ekte) {
        if (ekte.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File selectedFolder = folderFileChooser.getSelectedFile();
            File collectionCopyFile;
            String newDocumentName;
            Document viewdocument;
            StringBuilder distinguisherReplacer = new StringBuilder();
            int matchingFilenameDistinguisher;
            String nextToken;
            Term newTerm;
            String userHome;
            String fileSeparator;
            int userOption;
            ArrayList<File> folderTEXTFiles = new ArrayList<File>();
            ArrayList<File> folderReruptedItems = new ArrayList<File>();
            HashSet<File> ignoredFiles = new HashSet<File>();
            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");
            Scanner tokenizer = null;
            FileChannel fileSource = null;
            FileChannel collectionDestination = null;
            HashMap<String, Integer> termHashMap = null;
            Index collectionIndex = activeCollection.getIndex();
            int documentTermMaxFrequency;
            int currentTermFrequency;
            for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTEXTFiles.add(folderFile); else folderReruptedItems.add(folderFile);
            for (File selectedFile : folderTEXTFiles) {
                newDocumentName = selectedFile.getName();
                viewdocument = new Document(newDocumentName);
                if (activeCollection.containsDocument(viewdocument)) {
                    matchingFilenameDistinguisher = 1;
                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");
                    viewdocument.setDocumentName(newDocumentName);
                    while (activeCollection.containsDocument(viewdocument)) {
                        matchingFilenameDistinguisher++;
                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();
                        viewdocument.setDocumentName(newDocumentName);
                    }
                }
                termHashMap = new HashMap<String, Integer>();
                try {
                    tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));
                    tokenizer.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                    while (tokenizer.hasNext()) {
                        nextToken = tokenizer.next().toLowerCase();
                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);
                    }
                    documentTermMaxFrequency = 0;
                    for (String term : termHashMap.keySet()) {
                        newTerm = new Term(term);
                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);
                        currentTermFrequency = termHashMap.get(term);
                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;
                        collectionIndex.addOccurence(newTerm, viewdocument, currentTermFrequency);
                    }
                    viewdocument.setTermMaxFrequency(documentTermMaxFrequency);
                    activeCollection.addDocument(viewdocument);
                    userHome = System.getProperty(""user.home"");
                    fileSeparator = System.getProperty(""file.separator"");
                    collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);
                    collectionCopyFile.createNewFile();
                    fileSource = new FileInputStream(selectedFile).getChannel();
                    collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();
                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());
                } catch (FileNotFoundException e) {
                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                    return;
                } catch (IOException e) {
                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (userOption == JOptionPane.NO_OPTION) {
                        activeCollection.removeDocument(viewdocument);
                        for (String term : termHashMap.keySet()) {
                            collectionIndex.removeAllOccurences(new Term(term), viewdocument);
                        }
                        folderTEXTFiles.add(selectedFile);
                    } else ignoredFiles.add(selectedFile);
                } finally {
                    try {
                        if (tokenizer != null) tokenizer.close();
                        if (fileSource != null) fileSource.close();
                        if (collectionDestination != null) collectionDestination.close();
                    } catch (IOException e) {
                        System.err.println(e.getMessage());
                    }
                }
            }
            if (ignoredFiles.size() > 0) {
                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);
                ignoredFilesDialog.setVisible(true);
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (ekte.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
",0,0,0,-1,"evt,selectedFolder,collectionCopyFile,newDocumentName,newDocument,distinguisherReplacer,matchingFilenameDistinguisher,nextToken,newTerm,userHome,fileSeparator,userOption,folderTextFiles,folderRejectedFiles,ignoredFiles,textFileFilter,tokenizer,fileSource,collectionDestination,termHashMap,collectionIndex,documentTermMaxFrequency,currentTermFrequency,folderFile,selectedFile","evt:0.0,selectedFolder:0.0,collectionCopyFile:0.0,newDocumentName:0.0,newDocument:0.0,distinguisherReplacer:0.0,matchingFilenameDistinguisher:0.0,nextToken:0.0,newTerm:0.0,userHome:0.0,fileSeparator:0.0,userOption:0.0,folderTextFiles:0.0,folderRejectedFiles:0.0,ignoredFiles:0.0,textFileFilter:0.0,tokenizer:0.0,fileSource:0.0,collectionDestination:0.0,termHashMap:0.0,collectionIndex:0.0,documentTermMaxFrequency:0.0,currentTermFrequency:0.0,folderFile:0.0,selectedFile:0.0,",4,20,"evt:ekte,selectedFolder:selectedFolder,collectionCopyFile:collectionCopyFile,newDocumentName:newDocumentName,newDocument:viewdocument,distinguisherReplacer:distinguisherReplacer,matchingFilenameDistinguisher:matchingFilenameDistinguisher,nextToken:nextToken,newTerm:newTerm,userHome:userHome,fileSeparator:fileSeparator,userOption:userOption,folderTextFiles:folderTEXTFiles,folderRejectedFiles:folderReruptedItems,ignoredFiles:ignoredFiles,textFileFilter:textFileFilter,tokenizer:tokenizer,fileSource:fileSource,collectionDestination:collectionDestination,termHashMap:termHashMap,collectionIndex:collectionIndex,documentTermMaxFrequency:documentTermMaxFrequency,currentTermFrequency:currentTermFrequency,folderFile:folderFile,selectedFile:selectedFile,",Greedy,927,0.6101782123247782
94,"['10735044', '880885', '    public static byte[] getBytes(URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        int contentLength = connection.getContentLength();\n        ByteArrayOutputStream tmpOut;\n        if (contentLength != -1) {\n            tmpOut = new ByteArrayOutputStream(contentLength);\n        } else {\n            tmpOut = new ByteArrayOutputStream(16384);\n        }\n        byte[] buf = new byte[512];\n        while (true) {\n            int len = in.read(buf);\n            if (len == -1) {\n                break;\n            }\n            tmpOut.write(buf, 0, len);\n        }\n        in.close();\n        tmpOut.close();\n        byte[] array = tmpOut.toByteArray();\n        return array;\n    }\n', '    public static void main(final String... args) {\n        int returnCode = 0;\n        if (args.length == 0) {\n            System.err.println(""Usage: JWGet url..."");\n            returnCode++;\n        }\n        final byte[] buf = new byte[8192];\n        for (final String arg : args) {\n            try {\n                final URL url = new URL(arg);\n                OutputStream out = null;\n                InputStream in = null;\n                try {\n                    final URLConnection con = url.openConnection();\n                    in = con.getInputStream();\n                    final String location = con.getHeaderField(""Content-Location"");\n                    final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName();\n                    System.err.println(outputFilename);\n                    out = new FileOutputStream(outputFilename);\n                    for (int bytesRead; (bytesRead = in.read(buf)) != -1; out.write(buf, 0, bytesRead)) ;\n                } catch (final IOException e) {\n                    System.err.println(e);\n                    returnCode++;\n                } finally {\n                    try {\n                        in.close();\n                    } catch (final Exception ignore) {\n                    }\n                    try {\n                        out.close();\n                    } catch (final Exception ignore) {\n                    }\n                }\n            } catch (final MalformedURLException e) {\n                System.err.println(e);\n                returnCode++;\n            }\n        }\n        System.exit(returnCode);\n    }\n']",147,"    public static byte[] getBytes(URL file) throws IOException {
        URLConnection socket = file.openConnection();
        InputStream socket = socket.getInputStream();
        int ContentId = socket.getContentLength();
        ByteArrayOutputStream tempOUT;
        if (ContentId != -1) {
            tempOUT = new ByteArrayOutputStream(ContentId);
        } else {
            tempOUT = new ByteArrayOutputStream(16384);
        }
        byte[] header = new byte[512];
        while (true) {
            int line = socket.read(header);
            if (line == -1) {
                break;
            }
            tempOUT.write(header, 0, line);
        }
        socket.close();
        tempOUT.close();
        byte[] all = tempOUT.toByteArray();
        return all;
    }
",0,0,0,-1,"url,connection,in,contentLength,tmpOut,buf,len,array","url:2.86102294921875e-05,connection:9.5367431640625e-06,in:-3.337860107421875e-06,contentLength:0.0,tmpOut:0.0,buf:2.9802322387695312e-06,len:2.384185791015625e-06,array:1.0728836059570312e-06,",8,25,"url:file,connection:socket,buf:header,len:line,array:all,contentLength:ContentId,tmpOut:tempOUT,in:socket,",Greedy,351,0.15632296800613404
95,"['20292404', '15416857', '    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {\n        File inputFile = null;\n        File outputFile = null;\n        try {\n            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());\n            OutputStream inputFileStream = null;\n            try {\n                inputFileStream = new FileOutputStream(inputFile);\n                IOUtils.copy(inputStream, inputFileStream);\n            } finally {\n                IOUtils.closeQuietly(inputFileStream);\n            }\n            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());\n            convert(inputFile, inputFormat, outputFile, outputFormat);\n            InputStream outputFileStream = null;\n            try {\n                outputFileStream = new FileInputStream(outputFile);\n                IOUtils.copy(outputFileStream, outputStream);\n            } finally {\n                IOUtils.closeQuietly(outputFileStream);\n            }\n        } catch (IOException ioException) {\n            throw new OpenOfficeException(""conversion failed"", ioException);\n        } finally {\n            if (inputFile != null) {\n                inputFile.delete();\n            }\n            if (outputFile != null) {\n                outputFile.delete();\n            }\n        }\n    }\n', '    private boolean extract(File archive, File dir, IProgressMonitor monitor) {\n        monitor.subTask(""Extract : "" + archive.getName());\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else {\n            File[] files = dir.listFiles();\n            for (int j = 0; j < files.length; j++) {\n                files[j].delete();\n            }\n        }\n        ZipInputStream zis = null;\n        try {\n            zis = new ZipInputStream(new FileInputStream(archive));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                File indexFile = new File(dir, entry.getName());\n                FileOutputStream fos = null;\n                try {\n                    fos = new FileOutputStream(indexFile);\n                    IOUtils.copy(zis, fos);\n                } finally {\n                    IOUtils.closeQuietly(fos);\n                }\n            }\n            return true;\n        } catch (Exception ex) {\n            M4EclipsePlugin.log(new Status(IStatus.ERROR, M4EclipsePlugin.PLUGIN_ID, -1, ""For index \'"" + dir.getName() + ""\' Unable to initialize indexes"", ex));\n        } finally {\n            IOUtils.closeQuietly(zis);\n        }\n        return false;\n    }\n']",203,"    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",1,1,1,-1,"inputStream,inputFormat,outputStream,outputFormat,inputFile,outputFile,inputFileStream,outputFileStream","inputStream:0.0,inputFormat:0.0,outputStream:0.0,outputFormat:0.0,inputFile:0.0,outputFile:0.0,inputFileStream:0.0,outputFileStream:0.0,",0,0,"inputStream:inputStream,inputFormat:inputFormat,outputStream:outputStream,outputFormat:outputFormat,inputFile:inputFile,outputFile:outputFile,inputFileStream:inputFileStream,outputFileStream:outputFileStream,",Greedy,377,0.1762018084526062
96,"['17874922', '8988243', '    public static boolean buildPerMovieDiffBinary(String masterFile) {\n        try {\n            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            System.out.println(inC.size());\n            short movie1, movie2;\n            int count;\n            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;\n            long position;\n            for (long i = 1; i < 17770; i++) {\n                File outFile = new File(""C:\\\\NetflixData\\\\download\\\\SmartGrape\\\\CFItemToItemStats\\\\Movie--"" + i + ""-MatrixData.txt"");\n                FileChannel outC = new FileOutputStream(outFile, true).getChannel();\n                ByteBuffer buf = ByteBuffer.allocate(17770 * 44);\n                for (long j = 1; j < i; j++) {\n                    ByteBuffer bbuf = ByteBuffer.allocate(44);\n                    position = 0;\n                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();\n                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();\n                    position += new Long((i - j - 1) * 44).longValue();\n                    inC.position(position);\n                    inC.read(bbuf);\n                    bbuf.flip();\n                    buf.putShort(bbuf.getShort());\n                    bbuf.getShort();\n                    buf.putInt(bbuf.getInt());\n                    buf.putFloat(-bbuf.getInt());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                }\n                buf.putShort(new Long(i).shortValue());\n                buf.putInt(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                position = 0;\n                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();\n                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();\n                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);\n                while (remainingBuf.hasRemaining()) {\n                    remainingBuf.getShort();\n                    buf.putShort(remainingBuf.getShort());\n                    buf.putInt(remainingBuf.getInt());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                }\n                buf.flip();\n                outC.write(buf);\n                buf.clear();\n                outC.close();\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n', '    private static void extractSOUNDFILES() throws Exception {\n        ArrayList<File> soundFiles = new ArrayList<File>();\n        File soundsFolder = new File(""/var/lib/asterisk/sounds/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        soundsFolder = new File(""/opt/jboss/server/default/deploy/Tobe.war/WEB-INF/lib/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        for (int i = 0; i < soundFiles.size(); i++) {\n            ZipFile zipFile = new ZipFile(soundFiles.get(i));\n            InputStream inputStream = null;\n            Enumeration<? extends ZipEntry> oEnum = zipFile.entries();\n            while (oEnum.hasMoreElements()) {\n                ZipEntry zipEntry = oEnum.nextElement();\n                File file = new File(""/var/lib/asterisk/sounds/"", zipEntry.getName());\n                if (zipEntry.isDirectory()) {\n                    file.mkdirs();\n                } else {\n                    inputStream = zipFile.getInputStream(zipEntry);\n                    FileOutputStream fos = new FileOutputStream(file);\n                    IOUtils.copy(inputStream, fos);\n                    fos.close();\n                }\n            }\n        }\n    }\n']",810,"    public static boolean buildPerMovieDiffBinary(String masterFile) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            System.out.println(inC.size());
            short movie1, movie2;
            int count;
            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;
            long position;
            for (long i = 1; i < 17770; i++) {
                File outFile = new File(""C:\\NetflixData\\download\\SmartGrape\\CFItemToItemStats\\Movie--"" + i + ""-MatrixData.txt"");
                FileChannel outC = new FileOutputStream(outFile, true).getChannel();
                ByteBuffer uc = ByteBuffer.allocate(17770 * 44);
                for (long j = 1; j < i; j++) {
                    ByteBuffer bbuf = ByteBuffer.allocate(44);
                    position = 0;
                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();
                    position += new Long((i - j - 1) * 44).longValue();
                    inC.position(position);
                    inC.read(bbuf);
                    bbuf.flip();
                    uc.putShort(bbuf.getShort());
                    bbuf.getShort();
                    uc.putInt(bbuf.getInt());
                    uc.putFloat(-bbuf.getInt());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                    uc.putFloat(bbuf.getFloat());
                }
                uc.putShort(new Long(i).shortValue());
                uc.putInt(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                uc.putFloat(0);
                position = 0;
                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();
                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);
                while (remainingBuf.hasRemaining()) {
                    remainingBuf.getShort();
                    uc.putShort(remainingBuf.getShort());
                    uc.putInt(remainingBuf.getInt());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                    uc.putFloat(remainingBuf.getFloat());
                }
                uc.flip();
                outC.write(uc);
                uc.clear();
                outC.close();
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",1,1,1,-1,"masterFile,inFile,inC,movie1,movie2,count,diffRating,sumXY,sumX,sumY,sumX2,sumY2,pearsonCorr,adjustedCosineCorr,cosineCorr,position,i,outFile,outC,buf,j,bbuf","masterFile:0.0,inFile:0.0,inC:0.0,movie1:0.0,movie2:0.0,count:4.845857620239258e-05,diffRating:0.0,sumXY:0.0,sumX:0.0,sumY:0.0,sumX2:0.0,sumY2:0.0,pearsonCorr:0.0,adjustedCosineCorr:0.0,cosineCorr:0.0,position:-2.276897430419922e-05,i:-0.00043141841888427734,outFile:0.0,outC:0.0,buf:0.0010352730751037598,j:-0.00024384260177612305,bbuf:0.0,",1,37,"buf:uc,count:count,masterFile:masterFile,inFile:inFile,inC:inC,movie1:movie1,movie2:movie2,diffRating:diffRating,sumXY:sumXY,sumX:sumX,sumY:sumY,sumX2:sumX2,sumY2:sumY2,pearsonCorr:pearsonCorr,adjustedCosineCorr:adjustedCosineCorr,cosineCorr:cosineCorr,outFile:outFile,outC:outC,bbuf:bbuf,position:position,j:j,i:i,",Greedy,721,0.47622764905293785
97,"['4540202', '7157998', '    public void myClickHandler(View view) {\n        switch(view.getId()) {\n            case R.id.ReadWebPage:\n                try {\n                    textView.setText("""");\n                    URL url = new URL(urlText.getText().toString());\n                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));\n                    String line = """";\n                    while ((line = rd.readLine()) != null) {\n                        textView.append(line);\n                    }\n                } catch (Exception e) {\n                    System.out.println(""Nay, did not work"");\n                    textView.setText(e.getMessage());\n                }\n                break;\n        }\n    }\n', '    public static synchronized String encrypt(String x) throws Exception {\n        MessageDigest d = MessageDigest.getInstance(""SHA-1"");\n        d.reset();\n        d.update(String.valueOf(x).getBytes());\n        return byteArrayToHexString(d.digest());\n    }\n']",131,"    public void myClickHandler(View event) {
        switch(event.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL reader = new URL(urlText.getText().toString());
                    BufferedReader rr = new BufferedReader(new InputStreamReader(reader.openStream()));
                    String line = """";
                    while ((line = rr.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
",0,0,0,-1,"view,url,rd,line","view:2.6226043701171875e-06,url:-3.814697265625e-06,rd:-3.5762786865234375e-07,line:2.2530555725097656e-05,",3,6,"line:line,view:event,rd:rr,url:reader,",Greedy,187,0.08072335322697957
98,"['23598855', '15424571', '    public void requestConfirm() throws Exception {\n        if (!this._c.checkProperty(""directory.request"", ""request"")) {\n            throw new Exception(""product has no active request"");\n        }\n        if (!new File(WBSAgnitioConfiguration.getHARequestFile()).canWrite()) {\n            throw new Exception(""cannot remove request from system"");\n        }\n        HashMap<String, String> values = getValues(WBSAgnitioConfiguration.getHARequestFile());\n        if (!values.containsKey(""address.virtual"")) {\n            throw new Exception(""failed to determine the virtual address"");\n        }\n        if (!values.containsKey(""address.real"")) {\n            throw new Exception(""failed to determine the remote address"");\n        }\n        HTTPClient _hc = new HTTPClient(values.get(""address.real""));\n        if (TomcatConfiguration.checkHTTPS()) {\n            _hc.setSecure(true);\n        }\n        _hc.load(""/admin/Comm?type="" + CommResponse.TYPE_HA + ""&command="" + CommResponse.COMMAND_REQUEST_CONFIRM + ""&virtual="" + values.get(""address.virtual""));\n        String _reply = new String(_hc.getContent());\n        if (_reply.isEmpty()) {\n            throw new Exception(""remote product has not sent any reply"");\n        } else if (_reply.indexOf(""done"") == -1) {\n            throw new Exception(_reply);\n        }\n        HAConfiguration.setSlave(values.get(""address.virtual""), values.get(""address.real""));\n        File _f = new File(WBSAgnitioConfiguration.getOptionalSchemaRequestFile());\n        if (_f.exists()) {\n            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getOptionalSchemaFile());\n            FileInputStream _fis = new FileInputStream(_f);\n            while (_fis.available() > 0) {\n                _fos.write(_fis.read());\n            }\n            _fis.close();\n            _fos.close();\n            _f.delete();\n        }\n        _f = new File(WBSAgnitioConfiguration.getSchemaObjectRequestFile());\n        if (_f.exists()) {\n            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getSchemaObjectFile());\n            FileInputStream _fis = new FileInputStream(_f);\n            while (_fis.available() > 0) {\n                _fos.write(_fis.read());\n            }\n            _fis.close();\n            _fos.close();\n            _f.delete();\n        }\n        new File(WBSAgnitioConfiguration.getHARequestFile()).delete();\n        this._c.removeProperty(""directory.request"");\n        this._c.setProperty(""directory.virtual"", values.get(""address.virtual""));\n        this._c.setProperty(""directory.status"", ""slave"");\n        this._c.store();\n    }\n', '    private File copyFile(File source, File destiny) {\n        try {\n            FileInputStream fileinputstream = new FileInputStream(source);\n            FileOutputStream fileoutputstream = new FileOutputStream(destiny);\n            byte abyte0[] = new byte[4096];\n            int i;\n            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);\n            fileinputstream.close();\n            fileoutputstream.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        } catch (IOException e) {\n            e.printStackTrace();\n            LOGGER.error(e.getMessage());\n        }\n        return destiny;\n    }\n']",514,"    public void requestConfirm() throws Exception {
        if (!this._c.checkProperty(""directory.request"", ""request"")) {
            throw new Exception(""product has no active request"");
        }
        if (!new File(WBSAgnitioConfiguration.getHARequestFile()).canWrite()) {
            throw new Exception(""cannot remove request from system"");
        }
        HashMap<String, String> groups = getValues(WBSAgnitioConfiguration.getHARequestFile());
        if (!groups.containsKey(""address.virtual"")) {
            throw new Exception(""failed to determine the virtual address"");
        }
        if (!groups.containsKey(""address.real"")) {
            throw new Exception(""failed to determine the remote address"");
        }
        HTTPClient _htc = new HTTPClient(groups.get(""address.real""));
        if (TomcatConfiguration.checkHTTPS()) {
            _htc.setSecure(true);
        }
        _htc.load(""/admin/Comm?type="" + CommResponse.TYPE_HA + ""&command="" + CommResponse.COMMAND_REQUEST_CONFIRM + ""&virtual="" + groups.get(""address.virtual""));
        String _response = new String(_htc.getContent());
        if (_response.isEmpty()) {
            throw new Exception(""remote product has not sent any reply"");
        } else if (_response.indexOf(""done"") == -1) {
            throw new Exception(_response);
        }
        HAConfiguration.setSlave(groups.get(""address.virtual""), groups.get(""address.real""));
        File  _fe = new File(WBSAgnitioConfiguration.getOptionalSchemaRequestFile());
        if ( _fe.exists()) {
            FileOutputStream _pos = new FileOutputStream(WBSAgnitioConfiguration.getOptionalSchemaFile());
            FileInputStream _fs
 = new FileInputStream( _fe);
            while (_fs
.available() > 0) {
                _pos.write(_fs
.read());
            }
            _fs
.close();
            _pos.close();
             _fe.delete();
        }
         _fe = new File(WBSAgnitioConfiguration.getSchemaObjectRequestFile());
        if ( _fe.exists()) {
            FileOutputStream _pos = new FileOutputStream(WBSAgnitioConfiguration.getSchemaObjectFile());
            FileInputStream _fs
 = new FileInputStream( _fe);
            while (_fs
.available() > 0) {
                _pos.write(_fs
.read());
            }
            _fs
.close();
            _pos.close();
             _fe.delete();
        }
        new File(WBSAgnitioConfiguration.getHARequestFile()).delete();
        this._c.removeProperty(""directory.request"");
        this._c.setProperty(""directory.virtual"", groups.get(""address.virtual""));
        this._c.setProperty(""directory.status"", ""slave"");
        this._c.store();
    }
",1,1,1,-1,"values,_hc,_reply,_f,_fos,_fis","values:0.0005260109901428223,_hc:0.0,_reply:0.0,_f:0.0,_fos:0.0,_fis:0.0,",6,38,"values:groups,_hc:_htc,_reply:_response,_f: _fe,_fos:_pos,_fis:_fs
,",Greedy,283,0.15059324502944946
99,"['18288470', '7599114', '    public static void unzip(String zipfile, String outputDirectory) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(zipfile));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                System.out.println(""entryname "" + entryName);\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(outputDirectory + entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private static byte[] readBytes(URL url) throws IOException {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        byte[] buf = new byte[8192];\n        InputStream in = url.openStream();\n        try {\n            int readlen;\n            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);\n        } finally {\n            in.close();\n        }\n        return bos.toByteArray();\n    }\n']",207,"    public static void unzip(String zipfile, String outputDirectory) {
        try {
            byte[] buf = new byte[1024];
            ZipInputStream zipinputstream = null;
            ZipEntry zipentry;
            zipinputstream = new ZipInputStream(new FileInputStream(zipfile));
            zipentry = zipinputstream.getNextEntry();
            while (zipentry != null) {
                String entryName = zipentry.getName();
                System.out.println(""entryname "" + entryName);
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(entryName);
                String description = newFile.getParent();
                if (description == null) {
                    if (newFile.isDirectory()) break;
                }
                fileoutputstream = new FileOutputStream(outputDirectory + entryName);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
                zipentry = zipinputstream.getNextEntry();
            }
            zipinputstream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"zipfile,outputDirectory,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,directory","zipfile:0.0,outputDirectory:0.0,buf:-1.3113021850585938e-06,zipinputstream:0.0,zipentry:0.0,entryName:0.0,n:-1.1920928955078125e-07,fileoutputstream:0.0,newFile:0.0,directory:5.960464477539062e-07,",1,2,"directory:description,zipfile:zipfile,outputDirectory:outputDirectory,zipinputstream:zipinputstream,zipentry:zipentry,entryName:entryName,fileoutputstream:fileoutputstream,newFile:newFile,n:n,buf:buf,",Greedy,475,0.20343793233235677
100,"['7993946', '16589432', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n', '    private static String hash(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA"");\n        } catch (Exception e) {\n            return null;\n        }\n        try {\n            md.update(string.getBytes(""UTF-8""));\n        } catch (Exception e) {\n            return null;\n        }\n        byte raw[] = md.digest();\n        return (new BASE64Encoder()).encode(raw);\n    }\n']",113,"    public void unsplit(String oldfilename, File[] Files) throws Exception {
        FileOutputStream write = new FileOutputStream(new File(oldfilename));
        for (int i = 0; i < Files.length; i++) {
            FileInputStream rf = new FileInputStream(Files[i].getAbsolutePath());
            DataInputStream din = new DataInputStream(rf);
            while (din.available() > 0) {
                write.write(din.read());
            }
            din.close();
            rf.close();
        }
        write.close();
    }
",0,0,0,-1,"newFilename,files,stream,i,fin,din","newFilename:0.0,files:-2.9802322387695312e-06,stream:1.633167266845703e-05,i:-1.33514404296875e-05,fin:-7.152557373046875e-07,din:1.0728836059570312e-05,",4,11,"stream:write,din:din,newFilename:oldfilename,fin:rf,files:Files,i:i,",Greedy,274,0.11190378665924072
101,"['17568209', '7993946', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n']",225,"    private static boolean CopyFile(File viewUrl, File catDir) throws IOException {
        if (viewUrl == null || catDir == null) {
            return false;
        }
        int url = 2097152;
        File DIRBase = new File(getFileFolder(catDir.getAbsolutePath()));
        if (!DIRBase.exists()) {
            DIRBase.mkdirs();
        }
        FileInputStream plus = new FileInputStream(viewUrl);
        FileOutputStream out = new FileOutputStream(catDir.getAbsolutePath());
        FileChannel uninCL = plus.getChannel();
        FileChannel tagE = out.getChannel();
        int i = 0;
        while (true) {
            if (uninCL.position() == uninCL.size()) {
                uninCL.close();
                tagE.close();
                break;
            }
            if ((uninCL.size() - uninCL.position()) < 20971520) url = (int) (uninCL.size() - uninCL.position()); else url = 20971520;
            uninCL.transferTo(uninCL.position(), url, tagE);
            uninCL.position(uninCL.position() + url);
            i++;
        }
        return true;
    }
",1,1,0,1,"srcFile,tagFile,length,dirFile,in,out,inC,outC,i","srcFile:0.0,tagFile:0.0,length:-0.0014711618423461914,dirFile:0.0,in:-0.0018824338912963867,out:0.012071311473846436,inC:0.0,outC:-3.5762786865234375e-07,i:0.0008037686347961426,",7,32,"out:out,i:i,srcFile:viewUrl,tagFile:catDir,dirFile:DIRBase,inC:uninCL,outC:tagE,length:url,in:plus,",Greedy,444,0.18537365595499675
102,"['8561732', '15193222', '    public boolean actualizarRondaActual(division div) {\n        int intResult = 0;\n        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n', '    @Override\n    public void copy(final String fileName) throws FileIOException {\n        try {\n            if (opened) {\n                fileChannel.position(0);\n            } else {\n                fileChannel = new FileInputStream(file).getChannel();\n            }\n            FileChannel dstChannel = null;\n            try {\n                dstChannel = new FileOutputStream(fileName).getChannel();\n                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());\n            } finally {\n                try {\n                    if (dstChannel != null) {\n                        dstChannel.close();\n                    }\n                } catch (Exception exception) {\n                }\n            }\n            if (opened) {\n                fileChannel.position(currentPositionInFile);\n            } else {\n                fileChannel.close();\n            }\n        } catch (IOException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);\n        }\n    }\n']",141,"    public boolean actualizarRondaActual(division dev) {
        int intResult = 0;
        String job = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + dev.getRondaActual() + "" WHERE idDivisionxTorneo = "" + dev.getidDivision();
        try {
            reader = conexionBD.getConnection();
            reader.setAutoCommit(false);
            os = reader.prepareStatement(job);
            intResult = os.executeUpdate();
            reader.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                reader.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(os);
            conexionBD.close(reader);
        }
        return (intResult > 0);
    }
",0,0,0,-1,"div,intResult,sql,connection,ps","div:-1.1920928955078125e-06,intResult:0.0,sql:2.2649765014648438e-06,connection:3.3974647521972656e-05,ps:-1.0132789611816406e-05,",4,14,"connection:reader,sql:job,intResult:intResult,div:dev,ps:os,",Greedy,219,0.10038688580195108
103,"['12516574', '1760350', '    public static Image getImage(URL url) throws IOException {\n        InputStream is = null;\n        try {\n            is = url.openStream();\n            Image img = getImage(is);\n            img.setUrl(url);\n            return img;\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n        }\n    }\n', '    public static int deleteOrder(String likePatten) {\n        Connection conn = null;\n        PreparedStatement psmt = null;\n        StringBuffer SQL = new StringBuffer(200);\n        int deleted = 0;\n        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");\n        try {\n            conn = JdbcConnectionPool.mainConnection();\n            conn.setAutoCommit(false);\n            conn.setReadOnly(false);\n            psmt = conn.prepareStatement(SQL.toString());\n            psmt.setString(1, ""%"" + likePatten + ""%"");\n            deleted = psmt.executeUpdate();\n            conn.commit();\n        } catch (SQLException e) {\n            if (null != conn) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e1) {\n                    System.out.println("" error when roll back !"");\n                }\n            }\n        } finally {\n            try {\n                if (null != psmt) {\n                    psmt.close();\n                    psmt = null;\n                }\n                if (null != conn) {\n                    conn.close();\n                    conn = null;\n                }\n            } catch (SQLException e) {\n                System.out.println("" error  when psmt close or conn close ."");\n            }\n        }\n        return deleted;\n    }\n']",63,"    public static Image getImage(URL url) throws IOException {
        InputStream nis = null;
        try {
            nis = url.openStream();
            Image jpg = getImage(nis);
            jpg.setUrl(url);
            return jpg;
        } finally {
            if (nis != null) {
                nis.close();
            }
        }
    }
",0,0,0,-1,"url,is,img","url:3.5762786865234375e-07,is:2.9087066650390625e-05,img:-4.76837158203125e-06,",2,8,"is:nis,url:url,img:jpg,",Greedy,173,0.07087179025014241
104,"['5055545', '8364554', '    public static void copy(File fromFile, File toFile) throws IOException {\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFile.getAbsolutePath());\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        String parent = toFile.getParent();\n        if (parent == null) parent = System.getProperty(""user.dir"");\n        File dir = new File(parent);\n        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    @Override\n    public void executeInterruptible() {\n        EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;\n        File encoderFile = null;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            if (Platform.isWindows()) {\n                encoderFile = new File(""."", ""lame.exe"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");\n            } else if (Platform.isLinux()) {\n                encoderFile = new File(""."", ""lame"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");\n            } else {\n                MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));\n                return;\n            }\n            os = new FileOutputStream(encoderFile);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            LOG.error(""Cannot extract encoder executable"", e);\n            MainWindowInterface.showError(e);\n            return;\n        } finally {\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(os);\n        }\n        encoderFile.setExecutable(true, true);\n        try {\n            long totalSize = 0l;\n            for (int i = 0, l = filesModel.getSize(); i < l; i++) {\n                if (isInterrupted()) return;\n                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);\n                File origFile = element.getFile();\n                totalSize += origFile.length();\n            }\n            rangeModel = dialog.getProgressBar().getModel();\n            rangeModel.setMinimum(0);\n            rangeModel.setMaximum((int) totalSize);\n            int parallelProcesses = dialog.getParallelProcesses();\n            List<Thread> encodingThreads = new ArrayList<Thread>();\n            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);\n            for (int i = 0; i < parallelProcesses; i++) {\n                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);\n                Thread thread = new Thread(encoderLauncherRunnable);\n                encodingRunnables.add(encoderLauncherRunnable);\n                encodingThreads.add(thread);\n                thread.start();\n            }\n            for (Thread thread : encodingThreads) {\n                thread.join();\n            }\n            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));\n        } catch (Exception e) {\n            LOG.error(""Cannot encode files"", e);\n            MainWindowInterface.showError(e);\n        } finally {\n            if (encoderFile != null) encoderFile.delete();\n            dialog.setVisible(false);\n        }\n    }\n']",344,"    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        String parent = toFile.getParent();
        if (parent == null) parent = System.getProperty(""user.dir"");
        File dir = new File(parent);
        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        FileInputStream from = null;
        FileOutputStream url = null;
        try {
            from = new FileInputStream(fromFile);
            url = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) url.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (url != null) try {
                url.close();
            } catch (IOException e) {
            }
        }
    }
",1,1,0,1,"fromFile,toFile,parent,dir,from,to,buffer,bytesRead","fromFile:0.0,toFile:0.0,parent:6.699562072753906e-05,dir:-0.00015908479690551758,from:4.9948692321777344e-05,to:0.00034928321838378906,buffer:1.2636184692382812e-05,bytesRead:0.0,",1,5,"to:url,",Greedy,103,0.050162768363952635
105,"['948486', '8452567', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private static JSONObject sendCouchRequest(HttpUriRequest request) {\n        try {\n            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(request);\n            HttpEntity entity = httpResponse.getEntity();\n            if (entity != null) {\n                InputStream instream = entity.getContent();\n                String resultString = convertStreamToString(instream);\n                instream.close();\n                JSONObject jsonResult = new JSONObject(resultString);\n                return jsonResult;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n']",193,"    public static boolean encodeFileToFile(String Infilename, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream source = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Infilename)), Base64.ENCODE);
            source = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                source.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                source.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0,0,0,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:-2.8789043426513672e-05,out:0.00038826465606689453,buffer:0.0002754330635070801,read:0.00013768672943115234,success:1.1324882507324219e-05,",3,9,"out:source,buffer:url,read:read,success:success,infile:Infilename,outfile:outfile,in:in,",Greedy,332,0.1493265469868978
106,"['8731413', '153462', '    public ImportFromFile() {\n        JFrame jf = new JFrame();\n        JFileChooser fc = new JFileChooser(KTH.data._path);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fc.showOpenDialog(jf);\n        File file = null;\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            file = fc.getSelectedFile();\n            KTH.data._path = file.getParent();\n            System.out.println(file.getAbsolutePath() + ""\\n"");\n        } else {\n        }\n        if (file != null) {\n            File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);\n            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));\n            if (f.exists() && !IOUtils.isNewerContent(file, f)) {\n            } else {\n                try {\n                    IOUtils.copyFile(file, f, true);\n                } catch (Exception e) {\n                    KTH.out.err(e);\n                }\n            }\n            KTH.dc2.removeDc(""Import"");\n        } else {\n        }\n    }\n', '    private static File copyFileTo(File file, File directory) throws IOException {\n        File newFile = new File(directory, file.getName());\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(file);\n            fos = new FileOutputStream(newFile);\n            byte buff[] = new byte[1024];\n            int val;\n            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);\n        } finally {\n            if (fis != null) fis.close();\n            if (fos != null) fos.close();\n        }\n        return newFile;\n    }\n']",227,"    public ImportFromFile() {
        JFrame gfile = new JFrame();
        JFileChooser abc = new JFileChooser(SKCH.site._location);
        abc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int openTx = abc.showOpenDialog(gfile);
        File url = null;
        if (openTx == JFileChooser.APPROVE_OPTION) {
            url = abc.getSelectedFile();
            SKCH.site._location = url.getParent();
            System.out.println(url.getAbsolutePath() + ""
"");
        } else {
        }
        if (url != null) {
            File fen = new File(SKCH.site.getHomeDir() + File.separator + SKCH.site.katalogName);
            System.out.println(fen + (fen.exists() ? "" is found "" : "" is missing ""));
            if (fen.exists() && !IOUtils.isNewerContent(url, fen)) {
            } else {
                try {
                    IOUtils.copyFile(url, fen, true);
                } catch (Exception e) {
                    SKCH.out.err(e);
                }
            }
            SKCH.dc2.removeDc(""Import"");
        } else {
        }
    }
",1,1,1,-1,"jf,fc,returnVal,file,KTH,data,_path,f","jf:0.0,fc:-1.710653305053711e-05,returnVal:0.0,file:0.0002148151397705078,KTH:0.0,data:7.969141006469727e-05,_path:0.0,f:0.0001761913299560547,",8,33,"file:url,f:fen,data:site,jf:gfile,returnVal:openTx,KTH:SKCH,_path:_location,fc:abc,",Greedy,382,0.17124033371607464
107,"['11840745', '471591', '    public final void close() throws IOException {\n        if (dataStream == null) throw new NullPointerException(""Write stream is null."");\n        dataStream.flush();\n        dataStream.close();\n        dataStream = null;\n        File tmpFile = new File(packPath + "".tmp"");\n        FileOutputStream packStream = new FileOutputStream(packPath);\n        try {\n            String nbFiles = Long.toString(currentNbFiles) + ""\\0"";\n            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));\n            structBufferWriter.flush();\n            structBufferWriter.close();\n            int headerSize = structBuffer.size() + nbFiles.length();\n            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));\n            packStream.write(\'\\0\');\n            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));\n            structBuffer.writeTo(packStream);\n            structBufferWriter = null;\n            structBuffer = null;\n            FileInputStream in = new FileInputStream(tmpFile);\n            try {\n                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];\n                int read;\n                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);\n                packStream.flush();\n                packStream.close();\n            } finally {\n                Utilities.closeStream(in);\n            }\n        } finally {\n            Utilities.closeStream(packStream);\n        }\n        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);\n        packPath = null;\n        structBuffer = null;\n    }\n', '    private String getFanFouMessage(int pageNo) throws IOException {\n        URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);\n        HttpURLConnection request = (HttpURLConnection) url.openConnection();\n        request.setDoOutput(true);\n        request.setRequestMethod(""GET"");\n        String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());\n        request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);\n        System.out.println(""Sending request..."");\n        request.connect();\n        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n        String b = null;\n        StringBuffer sb = new StringBuffer();\n        while ((b = reader.readLine()) != null) {\n            sb.append(b);\n        }\n        return sb.toString();\n    }\n']",283,"    public final void close() throws IOException {
        if (dataSem == null) throw new NullPointerException(""Write stream is null."");
        dataSem.flush();
        dataSem.close();
        dataSem = null;
        File tempPath = new File(parseFile + "".tmp"");
        FileOutputStream ackSteam = new FileOutputStream(parseFile);
        try {
            String nbFiles = Long.toString(currentNbFiles) + ""\0"";
            ackSteam.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));
            StructFileWritten.flush();
            StructFileWritten.close();
            int headerSize = intWriter.size() + nbFiles.length();
            ackSteam.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));
            ackSteam.write('\0');
            ackSteam.write(nbFiles.getBytes(Charsets.ISO_8859_1));
            intWriter.writeTo(ackSteam);
            StructFileWritten = null;
            intWriter = null;
            FileInputStream url = new FileInputStream(tempPath);
            try {
                byte[] data = new byte[FILE_COPY_BUFFER_LEN];
                int reader;
                while ((reader = url.reader(data)) > 0) ackSteam.write(data, 0, reader);
                ackSteam.flush();
                ackSteam.close();
            } finally {
                Utilities.closeStream(url);
            }
        } finally {
            Utilities.closeStream(ackSteam);
        }
        if (tempPath.isFile()) Utilities.deleteFile(tempPath);
        parseFile = null;
        intWriter = null;
    }
",0,0,0,-1,"dataStream,tmpFile,packStream,nbFiles,headerSize,structBufferWriter,structBuffer,in,buffer,read,packPath","dataStream:0.0,tmpFile:0.0,packStream:0.0,nbFiles:0.0,headerSize:0.0,structBufferWriter:0.0,structBuffer:0.0,in:-2.384185791015625e-07,buffer:3.5762786865234375e-07,read:-2.384185791015625e-07,packPath:0.0,",9,38,"buffer:data,dataStream:dataSem,tmpFile:tempPath,packStream:ackSteam,nbFiles:nbFiles,headerSize:headerSize,structBufferWriter:StructFileWritten,structBuffer:intWriter,packPath:parseFile,in:url,read:reader,",Greedy,541,0.23777966499328612
108,"['2980809', '5551857', '    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String url = request.getParameter(""proxyurl"");\n        URLConnection conn = new URL(url).openConnection();\n        Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());\n        response.setContentType(conn.getContentType());\n        response.setContentLength(conn.getContentLength());\n        Writer out = response.getWriter();\n        char[] buf = new char[256];\n        int len;\n        while ((len = in.read(buf)) != -1) {\n            out.write(buf, 0, len);\n        }\n        in.close();\n        out.close();\n        String log = request.getParameter(""logging"");\n        if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);\n    }\n', '    public static String sha1(String src) {\n        MessageDigest md1 = null;\n        try {\n            md1 = MessageDigest.getInstance(""SHA-1"");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        try {\n            md1.update(src.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return hex(md1.digest());\n    }\n']",182,"    public void doGet(HttpServletRequest post, HttpServletResponse ception) throws ServletException, IOException {
        String url = post.getParameter(""proxyurl"");
        URLConnection connection = new URL(url).openConnection();
        Reader inc = new InputStreamReader(connection.getInputStream(), ception.getCharacterEncoding());
        ception.setContentType(connection.getContentType());
        ception.setContentLength(connection.getContentLength());
        Writer name = ception.getWriter();
        char[] cas = new char[256];
        int f;
        while ((f = inc.read(cas)) != -1) {
            name.write(cas, 0, f);
        }
        inc.close();
        name.close();
        String sql = post.getParameter(""logging"");
        if (sql != null && sql.toLowerCase().equals(""true"")) logRequest(post);
    }
",0,0,0,-1,"request,response,url,conn,in,out,buf,len,log","request:-3.337860107421875e-06,response:4.649162292480469e-06,url:-4.649162292480469e-06,conn:-1.430511474609375e-06,in:4.5299530029296875e-06,out:9.5367431640625e-07,buf:-5.960464477539062e-07,len:-4.76837158203125e-06,log:-1.1920928955078125e-06,",8,28,"response:ception,in:inc,out:name,buf:cas,log:sql,conn:connection,request:post,url:url,len:f,",Greedy,445,0.18310048977533977
109,"['20254498', '17511631', '    public static void main(String[] args) throws IOException {\n        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));\n        String[] files = new File(Constants.INDEX_PATH).list();\n        for (int i = 0; i < files.length; i++) {\n            String f = files[i];\n            if (f.equals(""deletable"") || f.startsWith(""."")) continue;\n            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));\n            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));\n            byte[] buf = new byte[16384];\n            int n;\n            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n            in.close();\n            out.close();\n            filesTxt.println(f);\n        }\n        filesTxt.close();\n    }\n', '    private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException {\n        File desf = new File(desDir);\n        if (!desf.exists()) {\n            desf.mkdirs();\n        }\n        int start = 1;\n        if (null != startDirLevel && startDirLevel.length > 0) {\n            start = startDirLevel[0];\n            if (start < 1) {\n                start = 1;\n            }\n        }\n        String startDir = """";\n        String zeName = zipEntry.getName();\n        String folder = zeName;\n        boolean isDir = zipEntry.isDirectory();\n        if (null != folder) {\n            String[] folders = folder.split(""\\\\/"");\n            if (null != folders && folders.length > 0) {\n                int len = folders.length;\n                if (start == 1) {\n                    startDir = zeName;\n                } else {\n                    if (start > len) {\n                    } else {\n                        for (int i = start - 1; i < len; i++) {\n                            startDir += ""/"" + folders[i];\n                        }\n                        if (null != startDir) {\n                            startDir = startDir.substring(1);\n                        }\n                    }\n                }\n            }\n        }\n        startDir = StringUtils.trim(startDir);\n        if (StringUtils.isNotEmpty(startDir)) {\n            StringBuilder desFileName = new StringBuilder(desDir);\n            if (!desDir.endsWith(""/"") && !startDir.startsWith(""/"")) {\n                desFileName.append(""/"");\n            }\n            desFileName.append(startDir);\n            File destFile = new File(desFileName.toString());\n            if (isDir) {\n                if (!destFile.exists()) {\n                    destFile.mkdirs();\n                }\n            } else {\n                File parentDir = new File(destFile.getParentFile().getPath());\n                if (!parentDir.exists()) {\n                    parentDir.mkdirs();\n                }\n                InputStream is = zf.getInputStream(zipEntry);\n                OutputStream os = new FileOutputStream(destFile);\n                IOUtils.copy(is, os);\n                if (null != is) {\n                    is.close();\n                }\n                if (null != os) {\n                    os.close();\n                }\n            }\n        }\n    }\n']",199,"    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals(""deletable"") || f.startsWith(""."")) continue;
            FileInputStream url = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));
            byte[] buf = new byte[16384];
            int n;
            while ((n = url.read(buf)) > 0) out.write(buf, 0, n);
            url.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
",1,1,0,1,"filesTxt,files,i,f,in,out,buf,n","filesTxt:0.0,files:0.00018364191055297852,i:0.00016832351684570312,f:0.00011682510375976562,in:0.0003720521926879883,out:0.00043636560440063477,buf:-0.00018829107284545898,n:0.00020700693130493164,",1,3,"out:out,in:url,",Greedy,115,0.0545320471127828
110,"['5671908', '17568209', '    private static String readGeoJSON(String feature) {\n        StringBuffer content = new StringBuffer();\n        try {\n            URL url = new URL(feature);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.connect();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                content.append(line);\n            }\n            conn.disconnect();\n        } catch (Exception e) {\n        }\n        return content.toString();\n    }\n', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n']",111,"    private static String readGeoJSON(String grain) {
        StringBuffer response = new StringBuffer();
        try {
            URL URL = new URL(grain);
            HttpURLConnection rt = (HttpURLConnection) URL.openConnection();
            rt.connect();
            BufferedReader rl = new BufferedReader(new InputStreamReader(rt.getInputStream()));
            String file;
            while ((file = rl.readLine()) != null) {
                response.append(file);
            }
            rt.disconnect();
        } catch (Exception e) {
        }
        return response.toString();
    }
",0,0,0,-1,"feature,content,url,conn,rd,line","feature:-5.0067901611328125e-06,content:1.1920928955078125e-06,url:1.5735626220703125e-05,conn:-1.5139579772949219e-05,rd:-1.4185905456542969e-05,line:-2.872943878173828e-05,",6,16,"url:URL,content:response,feature:grain,rd:rl,conn:rt,line:file,",Greedy,304,0.12076207399368286
111,"['11371499', '7422454', '    public void sortArray() {\n        int a;\n        for (int i = 0; i < array.length; i++) {\n            for (int j = 0; j < array.length - 1; j++) {\n                if (array[j] < array[j + 1]) {\n                    a = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = a;\n                }\n            }\n        }\n    }\n', '    public void run() {\n        if (name == null) {\n            System.err.println(""Must set file name for retrieval"");\n            return;\n        }\n        if (handle == null) {\n            System.err.println(""Must set CCNHandle"");\n            return;\n        }\n        if (htmlPane == null) {\n            System.err.println(""Must set JEditorPane"");\n            return;\n        }\n        JFrame frame = new JFrame();\n        JFileChooser chooser = new JFileChooser();\n        File f = null;\n        chooser.setCurrentDirectory(null);\n        int returnVal = chooser.showSaveDialog(frame);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            f = chooser.getSelectedFile();\n        } else {\n            htmlPane.setText(""Save File cancelled"");\n            return;\n        }\n        boolean overwrite = false;\n        try {\n            if (f.exists()) {\n                htmlPane.setText(""Overwriting contents of "" + f.getPath());\n                overwrite = true;\n            } else {\n                f.createNewFile();\n            }\n            if (f.canWrite()) {\n            } else {\n                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");\n                return;\n            }\n        } catch (IOException e) {\n            System.err.println(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n            htmlPane.setText(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n        }\n        try {\n            if (!overwrite) htmlPane.setText(""saving "" + name + "" to "" + f.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + f.getCanonicalPath() + "" to save "" + name);\n            CCNFileInputStream fis = new CCNFileInputStream(name, handle);\n            FileOutputStream output = new FileOutputStream(f);\n            byte[] buffer = new byte[readsize];\n            int readcount = 0;\n            int readtotal = 0;\n            while ((readcount = fis.read(buffer)) != -1) {\n                readtotal += readcount;\n                output.write(buffer, 0, readcount);\n                output.flush();\n            }\n            htmlPane.setText(""Saved "" + name + "" to "" + f.getCanonicalPath());\n        } catch (Exception e) {\n            htmlPane.setText(""Could not save "" + name + "" to "" + f.getPath() + "" This may be a prefix for an object or just may not be available at this time."");\n            System.err.println(""Could not retrieve file: "" + name);\n        }\n    }\n']",92,"    public void sortArray() {
        int a;
        for (int i = 0; i < item.length; i++) {
            for (int b = 0; b < item.length - 1; b++) {
                if (item[b] < item[b + 1]) {
                    a = item[b];
                    item[b] = item[b + 1];
                    item[b + 1] = a;
                }
            }
        }
    }
",0,0,0,-1,"a,i,array,j","a:-2.8789043426513672e-05,i:-0.00018298625946044922,array:-0.00037920475006103516,j:3.331899642944336e-05,",2,17,"j:b,a:a,i:i,array:item,",Greedy,219,0.08945815165837606
112,"['545112', '1332258', '    public static void main(String[] args) throws Exception {\n        String uri = args[0];\n        Configuration conf = new Configuration();\n        FileSystem fs = FileSystem.get(URI.create(uri), conf);\n        Path inputPath = new Path(uri);\n        CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n        CompressionCodec codec = factory.getCodec(inputPath);\n        if (codec == null) {\n            System.err.println(""No codec found for "" + uri);\n            System.exit(1);\n        }\n        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = codec.createInputStream(fs.open(inputPath));\n            out = fs.create(new Path(outputUri));\n            IOUtils.copyBytes(in, out, conf);\n        } finally {\n            IOUtils.closeStream(in);\n            IOUtils.closeStream(out);\n        }\n    }\n', '    public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(""Stream not closed"");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }\n']",187,"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration req = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), req);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(req);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, req);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
",1,1,1,-1,"uri,conf,fs,inputPath,factory,codec,outputUri,in,out","uri:4.4405460357666016e-05,conf:8.052587509155273e-05,fs:-0.0003160834312438965,inputPath:0.0,factory:0.0,codec:0.0,outputUri:0.0,in:7.528066635131836e-05,out:-1.5079975128173828e-05,",1,4,"conf:req,in:in,uri:uri,inputPath:inputPath,factory:factory,codec:codec,outputUri:outputUri,out:out,fs:fs,",Greedy,422,0.1748768170674642
113,"['17511631', '1332258', '    private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException {\n        File desf = new File(desDir);\n        if (!desf.exists()) {\n            desf.mkdirs();\n        }\n        int start = 1;\n        if (null != startDirLevel && startDirLevel.length > 0) {\n            start = startDirLevel[0];\n            if (start < 1) {\n                start = 1;\n            }\n        }\n        String startDir = """";\n        String zeName = zipEntry.getName();\n        String folder = zeName;\n        boolean isDir = zipEntry.isDirectory();\n        if (null != folder) {\n            String[] folders = folder.split(""\\\\/"");\n            if (null != folders && folders.length > 0) {\n                int len = folders.length;\n                if (start == 1) {\n                    startDir = zeName;\n                } else {\n                    if (start > len) {\n                    } else {\n                        for (int i = start - 1; i < len; i++) {\n                            startDir += ""/"" + folders[i];\n                        }\n                        if (null != startDir) {\n                            startDir = startDir.substring(1);\n                        }\n                    }\n                }\n            }\n        }\n        startDir = StringUtils.trim(startDir);\n        if (StringUtils.isNotEmpty(startDir)) {\n            StringBuilder desFileName = new StringBuilder(desDir);\n            if (!desDir.endsWith(""/"") && !startDir.startsWith(""/"")) {\n                desFileName.append(""/"");\n            }\n            desFileName.append(startDir);\n            File destFile = new File(desFileName.toString());\n            if (isDir) {\n                if (!destFile.exists()) {\n                    destFile.mkdirs();\n                }\n            } else {\n                File parentDir = new File(destFile.getParentFile().getPath());\n                if (!parentDir.exists()) {\n                    parentDir.mkdirs();\n                }\n                InputStream is = zf.getInputStream(zipEntry);\n                OutputStream os = new FileOutputStream(destFile);\n                IOUtils.copy(is, os);\n                if (null != is) {\n                    is.close();\n                }\n                if (null != os) {\n                    os.close();\n                }\n            }\n        }\n    }\n', '    public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(""Stream not closed"");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }\n']",433,"    private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException {
        File desf = new File(desDir);
        if (!desf.exists()) {
            desf.mkdirs();
        }
        int start = 1;
        if (null != startDirLevel && startDirLevel.length > 0) {
            start = startDirLevel[0];
            if (start < 1) {
                start = 1;
            }
        }
        String startDir = """";
        String zeName = zipEntry.getName();
        String folder = zeName;
        boolean isDir = zipEntry.isDirectory();
        if (null != folder) {
            String[] folders = folder.split(""\\/"");
            if (null != folders && folders.length > 0) {
                int len = folders.length;
                if (start == 1) {
                    startDir = zeName;
                } else {
                    if (start > len) {
                    } else {
                        for (int i = start - 1; i < len; i++) {
                            startDir += ""/"" + folders[i];
                        }
                        if (null != startDir) {
                            startDir = startDir.substring(1);
                        }
                    }
                }
            }
        }
        startDir = StringUtils.trim(startDir);
        if (StringUtils.isNotEmpty(startDir)) {
            StringBuilder desFileName = new StringBuilder(desDir);
            if (!desDir.endsWith(""/"") && !startDir.startsWith(""/"")) {
                desFileName.append(""/"");
            }
            desFileName.append(startDir);
            File destFile = new File(desFileName.toString());
            if (isDir) {
                if (!destFile.exists()) {
                    destFile.mkdirs();
                }
            } else {
                File parentDir = new File(destFile.getParentFile().getPath());
                if (!parentDir.exists()) {
                    parentDir.mkdirs();
                }
                InputStream is = zf.getInputStream(zipEntry);
                OutputStream bos = new FileOutputStream(destFile);
                IOUtils.copy(is, bos);
                if (null != is) {
                    is.close();
                }
                if (null != bos) {
                    bos.close();
                }
            }
        }
    }
",1,1,1,-1,"zf,zipEntry,desDir,startDirLevel,desf,start,zeName,folder,isDir,folders,len,startDir,i,desFileName,destFile,parentDir,is,os","zf:0.0,zipEntry:0.0,desDir:0.0,startDirLevel:0.0,desf:0.0,start:-7.009506225585938e-05,zeName:0.0,folder:-2.8848648071289062e-05,isDir:0.0,folders:0.0,len:-4.798173904418945e-05,startDir:0.0,i:-0.00014269351959228516,desFileName:0.0,destFile:0.0,parentDir:0.0,is:-2.6226043701171875e-06,os:1.8775463104248047e-05,",1,4,"os:bos,zf:zf,zipEntry:zipEntry,desDir:desDir,startDirLevel:startDirLevel,desf:desf,zeName:zeName,isDir:isDir,folders:folders,startDir:startDir,desFileName:desFileName,destFile:destFile,parentDir:parentDir,is:is,folder:folder,len:len,start:start,i:i,",Greedy,938,0.4302314798037211
114,"['22255481', '7157998', '    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        MessageDigest encript = MessageDigest.getInstance(""MD5"");\n        encript.update(password.getBytes());\n        byte[] b = encript.digest();\n        int size = b.length;\n        StringBuffer h = new StringBuffer(size);\n        for (int i = 0; i < size; i++) {\n            h.append(b[i]);\n        }\n        return h.toString();\n    }\n', '    public static synchronized String encrypt(String x) throws Exception {\n        MessageDigest d = MessageDigest.getInstance(""SHA-1"");\n        d.reset();\n        d.update(String.valueOf(x).getBytes());\n        return byteArrayToHexString(d.digest());\n    }\n']",94,"    private String encryptPassword(String path) throws NoSuchAlgorithmException {
        MessageDigest isentext = MessageDigest.getInstance(""MD5"");
        isentext.update(path.getBytes());
        byte[] batch = isentext.digest();
        int small = batch.length;
        StringBuffer http = new StringBuffer(small);
        for (int uri = 0; uri < small; uri++) {
            http.append(batch[uri]);
        }
        return http.toString();
    }
",1,1,1,-1,"password,encript,b,size,h,i","password:-0.003974258899688721,encript:0.0,b:-0.0002504587173461914,size:4.309415817260742e-05,h:0.0004159212112426758,i:0.0033606886863708496,",6,18,"i:uri,h:http,size:small,encript:isentext,b:batch,password:path,",Greedy,274,0.11388949950536092
115,"['15385608', '2774850', '    public boolean setFavBoard(List<BoardObject> list) throws NetworkException, ContentException {\n        HttpClient client = HttpConfig.newInstance();\n        HttpPost post = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);\n        List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n        for (BoardObject board : list) nvps.add(new BasicNameValuePair(board.getId(), ""on""));\n        try {\n            post.setEntity(new UrlEncodedFormEntity(nvps, BBSBodyParseHelper.BBS_CHARSET));\n            HttpResponse response = client.execute(post);\n            HttpEntity entity = response.getEntity();\n            if (HTTPUtil.isHttp200(response) && HTTPUtil.isXmlContentType(response)) {\n                HTTPUtil.consume(response.getEntity());\n                return true;\n            } else {\n                String msg = BBSBodyParseHelper.parseFailMsg(entity);\n                throw new ContentException(msg);\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n', '    protected Scanner loadSource(String country) {\n        if (httpProxy != null && httpProxy.isEnabled()) {\n            System.setProperty(""proxySet"", ""true"");\n            System.setProperty(""http.proxyHost"", httpProxy.getUrl());\n            System.setProperty(""http.proxyPort"", Integer.toString(httpProxy.getPort()));\n        }\n        try {\n            URL url = new URL(this.url + country);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(""GET"");\n            connection.setUseCaches(false);\n            return new Scanner(connection.getInputStream());\n        } catch (MalformedURLException e) {\n            return null;\n        } catch (ProtocolException e) {\n            return null;\n        } catch (IOException e) {\n            return null;\n        }\n    }\n']",211,"    public boolean setFavBoard(List<BoardObject> gallery) throws NetworkException, ContentException {
        HttpClient cli = HttpConfig.newInstance();
        HttpPost wp = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);
        List<NameValuePair> nvips = new ArrayList<NameValuePair>();
        for (BoardObject row : gallery) nvips.add(new BasicNameValuePair(row.getId(), ""on""));
        try {
            wp.setEntity(new UrlEncodedFormEntity(nvips, BBSBodyParseHelper.BBS_CHARSET));
            HttpResponse output = cli.execute(wp);
            HttpEntity output = output.getEntity();
            if (HTTPUtil.isHttp200(output) && HTTPUtil.isXmlContentType(output)) {
                HTTPUtil.consume(output.getEntity());
                return true;
            } else {
                String ma = BBSBodyParseHelper.parseFailMsg(output);
                throw new ContentException(ma);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0,0,0,-1,"list,client,post,nvps,board,response,entity,msg","list:2.384185791015625e-07,client:1.5497207641601562e-06,post:4.76837158203125e-06,nvps:0.0,board:-3.5762786865234375e-07,response:1.430511474609375e-06,entity:1.1920928955078125e-07,msg:0.0,",8,21,"post:wp,client:cli,response:output,list:gallery,entity:output,nvps:nvips,msg:ma,board:row,",Greedy,360,0.164759894212087
116,"['9796809', '3257108', '    @Override\n    protected byte[] computeHash() {\n        try {\n            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");\n            inputHash.update(bufferFileData().getBytes());\n            return inputHash.digest();\n        } catch (final NoSuchAlgorithmException nsae) {\n            lastException = nsae;\n            return new byte[0];\n        } catch (final IOException ioe) {\n            lastException = ioe;\n            return new byte[0];\n        }\n    }\n', '    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(s.getBytes(), 0, s.length());\n            s = new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return s;\n    }\n']",85,"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest InputBuild = MessageDigest.getInstance(""SHA"");
            InputBuild.update(bufferFileData().getBytes());
            return InputBuild.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            firstExc = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            firstExc = ioe;
            return new byte[0];
        }
    }
",1,1,1,-1,"inputHash,lastException","inputHash:0.0,lastException:0.0,",2,5,"inputHash:InputBuild,lastException:firstExc,",Greedy,55,0.03990819056828817
117,"['14297380', '19295911', '    private String hashPassword(String plainTextPassword) {\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(""SHA-1"");\n            digest.reset();\n            digest.update(plainTextPassword.getBytes());\n            BASE64Encoder enc = new BASE64Encoder();\n            return enc.encode(digest.digest());\n        } catch (NoSuchAlgorithmException e) {\n            log.error(e);\n            throw new RuntimeException(e);\n        }\n    }\n', '    public void setTableEmbossage(String te, boolean sys) {\n        fiConf.setProperty(OptNames.pr_emboss_table, te);\n        fiConf.setProperty(OptNames.fi_is_sys_emboss_table, Boolean.toString(sys));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            String fichTable;\n            if (!(te.endsWith("".ent""))) {\n                te = te + "".ent"";\n            }\n            if (sys) {\n                fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + te;\n            } else {\n                fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + te;\n            }\n            in = new FileInputStream(fichTable).getChannel();\n            out = new FileOutputStream(ConfigNat.getUserEmbossTableFolder() + ""/Embtab.ent"").getChannel();\n            in.transferTo(0, in.size(), out);\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",86,"    private String hashPassword(String plainTEXTPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTEXTPassword.getBytes());
            BASE64Encoder util = new BASE64Encoder();
            return util.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
",0,0,0,-1,"plainTextPassword,digest,enc","plainTextPassword:0.0,digest:0.0,enc:5.3882598876953125e-05,",2,4,"enc:util,plainTextPassword:plainTEXTPassword,digest:digest,",Greedy,147,0.06746277014414469
118,"['15136801', '19044529', '    public static String readUrl(String urlString) {\n        try {\n            java.net.URL url = new java.net.URL(urlString);\n            BufferedReader br = null;\n            if (url != null) {\n                br = new BufferedReader(new InputStreamReader(url.openStream()));\n            }\n            StringBuffer fileString = new StringBuffer();\n            while (true) {\n                String line = br.readLine();\n                if (line == null) {\n                    break;\n                }\n                fileString.append(line + ""\\n"");\n            }\n            return fileString.toString();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n', '    public void put(File fileToPut) throws IOException {\n        FTPClient ftp = new FTPClient();\n        try {\n            int reply;\n            ftp.connect(this.endpointURL, Config.getFtpPort());\n            log.debug(""Ftp put reply: "" + ftp.getReplyString());\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                throw new IOException(""Ftp put server refused connection."");\n            }\n            if (!ftp.login(""anonymous"", """")) {\n                ftp.logout();\n                throw new IOException(""FTP: server wrong passwd"");\n            }\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            ftp.enterLocalPassiveMode();\n            InputStream input = new FileInputStream(fileToPut);\n            if (ftp.storeFile(fileToPut.getName(), input) != true) {\n                ftp.logout();\n                input.close();\n                throw new IOException(""FTP put exception"");\n            }\n            input.close();\n            ftp.logout();\n        } catch (Exception e) {\n            log.error(""Ftp client exception: "" + e.getMessage(), e);\n            throw new IOException(e.getMessage());\n        }\n    }\n']",120,"    public static String readUrl(String resourceStr) {
        try {
            java.net.URL file = new java.net.URL(resourceStr);
            BufferedReader fr = null;
            if (file != null) {
                fr = new BufferedReader(new InputStreamReader(file.openStream()));
            }
            StringBuffer fileInt = new StringBuffer();
            while (true) {
                String write = fr.readLine();
                if (write == null) {
                    break;
                }
                fileInt.append(write + ""
"");
            }
            return fileInt.toString();
        } catch (Exception e) {
            return null;
        }
    }
",0,0,0,-1,"urlString,url,br,fileString,line","urlString:0.0,url:1.7940998077392578e-05,br:-7.039308547973633e-05,fileString:0.0,line:-0.00016295909881591797,",5,14,"url:file,urlString:resourceStr,fileString:fileInt,br:fr,line:write,",Greedy,219,0.1052658716837565
119,"['8988243', '14588787', '    private static void extractSOUNDFILES() throws Exception {\n        ArrayList<File> soundFiles = new ArrayList<File>();\n        File soundsFolder = new File(""/var/lib/asterisk/sounds/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        soundsFolder = new File(""/opt/jboss/server/default/deploy/Tobe.war/WEB-INF/lib/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        for (int i = 0; i < soundFiles.size(); i++) {\n            ZipFile zipFile = new ZipFile(soundFiles.get(i));\n            InputStream inputStream = null;\n            Enumeration<? extends ZipEntry> oEnum = zipFile.entries();\n            while (oEnum.hasMoreElements()) {\n                ZipEntry zipEntry = oEnum.nextElement();\n                File file = new File(""/var/lib/asterisk/sounds/"", zipEntry.getName());\n                if (zipEntry.isDirectory()) {\n                    file.mkdirs();\n                } else {\n                    inputStream = zipFile.getInputStream(zipEntry);\n                    FileOutputStream fos = new FileOutputStream(file);\n                    IOUtils.copy(inputStream, fos);\n                    fos.close();\n                }\n            }\n        }\n    }\n', '    public void saveFile(final InputStream inputStream, final String fileName) {\n        final File file = new File(System.getProperty(""java.io.tmpdir"") + File.separator + fileName);\n        FileOutputStream fileOut = null;\n        try {\n            fileOut = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOut);\n        } catch (FileNotFoundException e) {\n            LOGGER.error(""saveFile() - File Not Found."" + e);\n        } catch (IOException e) {\n            LOGGER.error(""saveFile() - Error while saving file."" + e);\n        } finally {\n            try {\n                inputStream.close();\n                if (fileOut != null) {\n                    fileOut.close();\n                }\n            } catch (IOException e) {\n                LOGGER.error(e);\n            }\n        }\n    }\n']",390,"    private static void extractSOUNDFILES() throws Exception {
        ArrayList<File> soundFiles = new ArrayList<File>();
        File poundDirectory = new File(""/var/lib/asterisk/sounds/"");
        if (poundDirectory.exists()) {
            File soundFiles1[] = poundDirectory.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    if (NullStatus.isNull(name)) {
                        return false;
                    }
                    if (name.endsWith(""-sounds.jar"")) {
                        return true;
                    }
                    return false;
                }
            });
            for (int i = 0; i < soundFiles1.length; i++) {
                soundFiles.add(soundFiles1[i]);
            }
        }
        poundDirectory = new File(""/opt/jboss/server/default/deploy/Tobe.war/WEB-INF/lib/"");
        if (poundDirectory.exists()) {
            File soundFiles1[] = poundDirectory.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    if (NullStatus.isNull(name)) {
                        return false;
                    }
                    if (name.endsWith(""-sounds.jar"")) {
                        return true;
                    }
                    return false;
                }
            });
            for (int i = 0; i < soundFiles1.length; i++) {
                soundFiles.add(soundFiles1[i]);
            }
        }
        for (int i = 0; i < soundFiles.size(); i++) {
            ZipFile zipFile = new ZipFile(soundFiles.get(i));
            InputStream inputStream = null;
            Enumeration<? extends ZipEntry> oEnum = zipFile.entries();
            while (oEnum.hasMoreElements()) {
                ZipEntry zipEntry = oEnum.nextElement();
                File data = new File(""/var/lib/asterisk/sounds/"", zipEntry.getName());
                if (zipEntry.isDirectory()) {
                    data.mkdirs();
                } else {
                    inputStream = zipFile.getInputStream(zipEntry);
                    FileOutputStream fos = new FileOutputStream(data);
                    IOUtils.copy(inputStream, fos);
                    fos.close();
                }
            }
        }
    }
",1,1,1,-1,"soundFiles,soundsFolder,soundFiles1,dir,name,i,zipFile,inputStream,oEnum,zipEntry,file,fos","soundFiles:0.0,soundsFolder:0.0,soundFiles1:0.0,dir:-0.003316044807434082,name:0.00010097026824951172,i:-0.0058329105377197266,zipFile:0.0,inputStream:0.0,oEnum:0.0,zipEntry:0.0,file:0.002382218837738037,fos:0.0,",2,9,"file:data,name:name,soundFiles:soundFiles,soundsFolder:poundDirectory,soundFiles1:soundFiles1,zipFile:zipFile,inputStream:inputStream,oEnum:oEnum,zipEntry:zipEntry,fos:fos,dir:dir,i:i,",Greedy,664,0.30063239733378094
120,"['7317602', '1785987', '    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '    public static String hashSourceCode(String source) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n            md.update(source.getBytes());\n            return new sun.misc.BASE64Encoder().encode(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            _log.error(""Failed to generate hashcode."", e);\n        }\n        return null;\n    }\n']",75,"    public static String SHA1(String config) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest vd;
        vd = MessageDigest.getInstance(""SHA-1"");
        byte[] sha256hash = new byte[40];
        vd.update(config.getBytes(""iso-8859-1""), 0, config.length());
        sha256hash = vd.digest();
        return convertToHex(sha256hash);
    }
",1,1,1,-1,"text,md,sha1hash","text:0.49030601978302,md:0.05806756019592285,sha1hash:0.0,",3,10,"text:config,md:vd,sha1hash:sha256hash,",Greedy,166,0.07660125891367595
121,"['21368983', '18623182', '    public APIResponse update(Application application) throws Exception {\n        APIResponse response = new APIResponse();\n        connection = (HttpURLConnection) new URL(url + ""/api/application/update"").openConnection();\n        connection.setDoOutput(true);\n        connection.setRequestMethod(""PUT"");\n        connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");\n        connection.setUseCaches(false);\n        connection.setConnectTimeout(TIMEOUT);\n        connection.connect();\n        marshaller.marshal(application, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), ""utf-8"")));\n        connection.getOutputStream().flush();\n        connection.getOutputStream().close();\n        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), ""utf-8"")).readLine()));\n            response.setDone(true);\n            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));\n            connection.getInputStream().close();\n        } else {\n            response.setDone(false);\n            response.setMessage(""Update Application Error Code: Http ("" + connection.getResponseCode() + "")"");\n        }\n        connection.disconnect();\n        return response;\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",268,"    public APIResponse update(Application analysis) throws Exception {
        APIResponse status = new APIResponse();
        condition = (HttpURLConnection) new URL(url + ""/api/application/update"").openConnection();
        condition.setDoOutput(true);
        condition.setRequestMethod(""PUT"");
        condition.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
        condition.setUseCaches(false);
        condition.setConnectTimeout(TIMEOUT);
        condition.connect();
        marshaller.marshal(analysis, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(condition.getOutputStream(), ""utf-8"")));
        condition.getOutputStream().flush();
        condition.getOutputStream().close();
        if (condition.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject aj = new JSONObject(new String(new BufferedReader(new InputStreamReader(condition.getInputStream(), ""utf-8"")).readLine()));
            status.setDone(true);
            status.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(aj, new MappedNamespaceConvention(new Configuration()))));
            condition.getInputStream().close();
        } else {
            status.setDone(false);
            status.setMessage(""Update Application Error Code: Http ("" + condition.getResponseCode() + "")"");
        }
        condition.disconnect();
        return status;
    }
",0,0,0,-1,"application,response,connection,obj","application:-2.9802322387695312e-06,response:2.384185791015625e-06,connection:1.1086463928222656e-05,obj:-6.318092346191406e-06,",4,25,"connection:condition,response:status,application:analysis,obj:aj,",Greedy,243,0.11716655890146892
122,"['22095676', '10895680', '    public static String addTag(String tag_id, String tag_description, String tag_text, String tag_author, String application_code) {\n        String so = OctopusErrorMessages.UNKNOWN_ERROR;\n        if (tag_id == null || tag_id.trim().equals("""")) {\n            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;\n        }\n        if (tag_id.trim().equals(application_code)) {\n            return OctopusErrorMessages.TAG_ID_TOO_SHORT;\n        }\n        if (!StringUtil.isAlphaNumerical(StringUtil.replace(StringUtil.replace(tag_id, ""-"", """"), ""_"", """"))) {\n            return OctopusErrorMessages.TAG_ID_MUST_BE_ALPHANUMERIC;\n        }\n        if (!tag_id.startsWith(application_code)) {\n            return OctopusErrorMessages.TAG_ID_MUST_START + "" "" + application_code;\n        }\n        String tag_exist = exist(tag_id);\n        if (!tag_exist.equals(OctopusErrorMessages.DOESNT_ALREADY_EXIST)) {\n            return tag_exist;\n        }\n        if (tag_description != null && !tag_description.trim().equals("""")) {\n            tag_description = StringUtil.replace(tag_description, ""\\n"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""\\r"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""\\t"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""<"", ""&#60;"");\n            tag_description = StringUtil.replace(tag_description, "">"", ""&#62;"");\n            tag_description = StringUtil.replace(tag_description, ""\'"", ""&#39;"");\n        } else {\n            return OctopusErrorMessages.DESCRIPTION_TEXT_EMPTY;\n        }\n        if (tag_text != null && !tag_text.trim().equals("""")) {\n            tag_text = StringUtil.replace(tag_text, ""\\n"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""\\r"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""\\t"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""<"", ""&#60;"");\n            tag_text = StringUtil.replace(tag_text, "">"", ""&#62;"");\n            tag_text = StringUtil.replace(tag_text, ""\'"", ""&#39;"");\n        } else {\n            return OctopusErrorMessages.TRANSLATION_TEXT_EMPTY;\n        }\n        if (tag_author == null || tag_author.trim().equals("""")) {\n            return OctopusErrorMessages.MAIN_PARAMETER_EMPTY;\n        }\n        DBConnection theConnection = null;\n        try {\n            theConnection = DBServiceManager.allocateConnection();\n            theConnection.setAutoCommit(false);\n            String query = ""INSERT INTO tr_tag (tr_tag_id,tr_tag_applicationid,tr_tag_info,tr_tag_creationdate) "";\n            query += ""VALUES (?,?,\'"" + tag_description + ""\',getdate())"";\n            PreparedStatement state = theConnection.prepareStatement(query);\n            state.setString(1, tag_id);\n            state.setString(2, application_code);\n            state.executeUpdate();\n            String query2 = ""INSERT INTO tr_translation (tr_translation_trtagid, tr_translation_language, tr_translation_text, tr_translation_version, tr_translation_lud, tr_translation_lun ) "";\n            query2 += ""VALUES(?,\'"" + OctopusApplication.MASTER_LANGUAGE + ""\',\'"" + tag_text + ""\',0,getdate(),?)"";\n            PreparedStatement state2 = theConnection.prepareStatement(query2);\n            state2.setString(1, tag_id);\n            state2.setString(2, tag_author);\n            state2.executeUpdate();\n            theConnection.commit();\n            so = OctopusErrorMessages.ACTION_DONE;\n        } catch (SQLException e) {\n            try {\n                theConnection.rollback();\n            } catch (SQLException ex) {\n            }\n            so = OctopusErrorMessages.ERROR_DATABASE;\n        } finally {\n            if (theConnection != null) {\n                try {\n                    theConnection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n                theConnection.release();\n            }\n        }\n        return so;\n    }\n', '    private DefaultMutableTreeNode parseTree() {\n        try {\n            DefaultMutableTreeNode root;\n            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");\n            InputStream is = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setIgnoringComments(true);\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(is);\n            NodeList elements = document.getElementsByTagName(""help"");\n            Element element = (Element) elements.item(0);\n            root = createTreeContent(element);\n            is.close();\n            return root;\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n            return null;\n        } catch (ParserConfigurationException e1) {\n            System.out.println(e1.getMessage());\n            return null;\n        } catch (org.xml.sax.SAXException e2) {\n            System.out.println(e2.getMessage());\n            return null;\n        }\n    }\n']",665,"    public static String addTag(String tag_id, String blog_comment, String comment_content, String tag__from, String application1codes) {
        String  reply = OctopusErrorMessages.UNKNOWN_ERROR;
        if (tag_id == null || tag_id.trim().equals("""")) {
            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;
        }
        if (tag_id.trim().equals(application1codes)) {
            return OctopusErrorMessages.TAG_ID_TOO_SHORT;
        }
        if (!StringUtil.isAlphaNumerical(StringUtil.replace(StringUtil.replace(tag_id, ""-"", """"), ""_"", """"))) {
            return OctopusErrorMessages.TAG_ID_MUST_BE_ALPHANUMERIC;
        }
        if (!tag_id.startsWith(application1codes)) {
            return OctopusErrorMessages.TAG_ID_MUST_START + "" "" + application1codes;
        }
        String tag67exist = exist(tag_id);
        if (!tag67exist.equals(OctopusErrorMessages.DOESNT_ALREADY_EXIST)) {
            return tag67exist;
        }
        if (blog_comment != null && !blog_comment.trim().equals("""")) {
            blog_comment = StringUtil.replace(blog_comment, ""
"", "" "");
            blog_comment = StringUtil.replace(blog_comment, ""\r"", "" "");
            blog_comment = StringUtil.replace(blog_comment, ""\t"", "" "");
            blog_comment = StringUtil.replace(blog_comment, ""<"", ""&#60;"");
            blog_comment = StringUtil.replace(blog_comment, "">"", ""&#62;"");
            blog_comment = StringUtil.replace(blog_comment, ""'"", ""&#39;"");
        } else {
            return OctopusErrorMessages.DESCRIPTION_TEXT_EMPTY;
        }
        if (comment_content != null && !comment_content.trim().equals("""")) {
            comment_content = StringUtil.replace(comment_content, ""
"", "" "");
            comment_content = StringUtil.replace(comment_content, ""\r"", "" "");
            comment_content = StringUtil.replace(comment_content, ""\t"", "" "");
            comment_content = StringUtil.replace(comment_content, ""<"", ""&#60;"");
            comment_content = StringUtil.replace(comment_content, "">"", ""&#62;"");
            comment_content = StringUtil.replace(comment_content, ""'"", ""&#39;"");
        } else {
            return OctopusErrorMessages.TRANSLATION_TEXT_EMPTY;
        }
        if (tag__from == null || tag__from.trim().equals("""")) {
            return OctopusErrorMessages.MAIN_PARAMETER_EMPTY;
        }
        DBConnection theConnection = null;
        try {
            theConnection = DBServiceManager.allocateConnection();
            theConnection.setAutoCommit(false);
            String query = ""INSERT INTO tr_tag (tr_tag_id,tr_tag_applicationid,tr_tag_info,tr_tag_creationdate) "";
            query += ""VALUES (?,?,'"" + blog_comment + ""',getdate())"";
            PreparedStatement state = theConnection.prepareStatement(query);
            state.setString(1, tag_id);
            state.setString(2, application1codes);
            state.executeUpdate();
            String query2 = ""INSERT INTO tr_translation (tr_translation_trtagid, tr_translation_language, tr_translation_text, tr_translation_version, tr_translation_lud, tr_translation_lun ) "";
            query2 += ""VALUES(?,'"" + OctopusApplication.MASTER_LANGUAGE + ""','"" + comment_content + ""',0,getdate(),?)"";
            PreparedStatement state2 = theConnection.prepareStatement(query2);
            state2.setString(1, tag_id);
            state2.setString(2, tag__from);
            state2.executeUpdate();
            theConnection.commit();
             reply = OctopusErrorMessages.ACTION_DONE;
        } catch (SQLException e) {
            try {
                theConnection.rollback();
            } catch (SQLException ex) {
            }
             reply = OctopusErrorMessages.ERROR_DATABASE;
        } finally {
            if (theConnection != null) {
                try {
                    theConnection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
                theConnection.release();
            }
        }
        return  reply;
    }
",0,0,0,-1,"tag_id,tag_description,tag_text,tag_author,application_code,so,tag_exist","tag_id:0.0,tag_description:0.0,tag_text:0.0,tag_author:0.0,application_code:0.0,so:1.6093254089355469e-06,tag_exist:0.0,",6,48,"so: reply,tag_id:tag_id,tag_description:blog_comment,tag_text:comment_content,tag_author:tag__from,application_code:application1codes,tag_exist:tag67exist,",Greedy,378,0.2270095984141032
123,"['11902597', '1332258', '    public static void main(String[] args) {\n        System.out.println(""Start filtering zgps..."");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = ""GPSFilterZGPS"";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));\n        System.out.println(""Start reading selected stages..."");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");\n        System.out.println(""Start reading and writing zgps..."");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(""\\t"");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(""Could not find source file for selected stages."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""IO Exception while reading or writing zgps."");\n            e.printStackTrace();\n        }\n        System.out.println(""Done."");\n    }\n', '    public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(""Stream not closed"");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }\n']",370,"    public static void main(String[] args) {
        System.query.println(""Start filtering zgps..."");
        final Config config = Gbl.createConfig(args);
        final String CONFIG_MODULE = ""GPSFilterZGPS"";
        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));
        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));
        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));
        System.query.println(""Start reading selected stages..."");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedStages);
        System.query.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");
        System.query.println(""Start reading and writing zgps..."");
        try {
            BufferedReader url = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter query = new BufferedWriter(new FileWriter(targetFile));
            query.write(url.readLine());
            query.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = url.readLine()) != null) {
                String[] entries = lineFromInputFile.split(""\t"");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    query.write(lineFromInputFile);
                    query.newLine();
                    query.flush();
                }
            }
            url.close();
            query.close();
        } catch (FileNotFoundException e) {
            System.query.println(""Could not find source file for selected stages."");
            e.printStackTrace();
        } catch (IOException e) {
            System.query.println(""IO Exception while reading or writing zgps."");
            e.printStackTrace();
        }
        System.query.println(""Done."");
    }
",1,1,0,1,"config,CONFIG_MODULE,sourceFileSelectedStages,sourceFileZGPS,targetFile,selectedStages,in,out,lineFromInputFile,entries","config:3.5762786865234375e-07,CONFIG_MODULE:0.0,sourceFileSelectedStages:0.0,sourceFileZGPS:0.0,targetFile:0.0,selectedStages:0.0,in:7.152557373046875e-07,out:2.6226043701171875e-06,lineFromInputFile:0.0,entries:0.0,",2,18,"out:query,in:url,",Greedy,199,0.0899626096089681
124,"['8172652', '6842462', '    @Test\n    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })\n    public void testTestServlet() throws Exception {\n        TestServlet.reset();\n        HttpClient client = new DefaultHttpClient();\n        HttpEntity entity = new StringEntity(xml);\n        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");\n        method.setEntity(entity);\n        HttpResponse response = client.execute(method);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        assertEquals(xml, TestServlet.getPosted());\n    }\n', '    private void playAudio(String mediaUrl) {\n        try {\n            URLConnection cn = new URL(mediaUrl).openConnection();\n            InputStream is = cn.getInputStream();\n            mediaFile = new File(this.getCacheDir(), ""mediafile"");\n            FileOutputStream fos = new FileOutputStream(mediaFile);\n            byte buf[] = new byte[16 * 1024];\n            Log.i(""FileOutputStream"", ""Download"");\n            do {\n                int numread = is.read(buf);\n                if (numread <= 0) break;\n                fos.write(buf, 0, numread);\n            } while (true);\n            fos.flush();\n            fos.close();\n            Log.i(""FileOutputStream"", ""Saved"");\n            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {\n\n                public void onCompletion(MediaPlayer mp) {\n                    mp.release();\n                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");\n                }\n            };\n            mixPlayer.setOnCompletionListener(listener);\n            FileInputStream fis = new FileInputStream(mediaFile);\n            mixPlayer.setDataSource(fis.getFD());\n            mixPlayer.prepare();\n            Log.i(""MediaPlayer"", ""Start Player"");\n            loading = false;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",119,"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient request = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost wrapper = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        wrapper.setEntity(entity);
        HttpResponse Response = request.execute(wrapper);
        assertEquals(200, Response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
",0,0,0,-1,"client,entity,method,response","client:-5.960464477539062e-07,entity:9.5367431640625e-07,method:3.5762786865234375e-07,response:5.125999450683594e-06,",3,7,"response:Response,entity:entity,method:wrapper,client:request,",Greedy,173,0.08871686061223348
125,"['6795580', '22768445', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n', '    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (useDefaultEncoding) {\n                digest.update(password.getBytes());\n            } else {\n                for (char c : password.toCharArray()) {\n                    digest.update((byte) (c >> 8));\n                    digest.update((byte) c);\n                }\n            }\n            byte[] digestedPassword = digest.digest();\n            BASE64Encoder encoder = new BASE64Encoder();\n            String encodedDigested = encoder.encode(digestedPassword);\n            return prefixKey + encodedDigested;\n        } catch (NoSuchAlgorithmException ne) {\n            return password;\n        }\n    }\n']",266,"    private void getRandomGUID(boolean active) {
        MessageDigest mp64 = null;
        StringBuffer sbValueBeforeMC512 = new StringBuffer();
        try {
            mp64 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long id = System.currentTimeMillis();
            long rar = 0;
            if (active) {
                rar = mySecureRand.nextLong();
            } else {
                rar = myRand.nextLong();
            }
            sbValueBeforeMC512.append(s_id);
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(id));
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(rar));
            valueBeforeMC3 = sbValueBeforeMC512.toString();
            mp64.update(valueBeforeMC3.getBytes());
            byte[] image = mp64.digest();
            StringBuffer bj = new StringBuffer();
            for (int ij = 0; ij < image.length; ++ij) {
                int mb = image[ij] & 0xFF;
                if (mb < 0x10) bj.append('0');
                bj.append(Integer.toHexString(mb));
            }
            valueAfterAMD5 = bj.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1,1,1,-1,"secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","secure:3.5762786865234375e-06,md5:0.0,sbValueBeforeMD5:0.0,time:1.430511474609375e-06,rand:1.5497207641601562e-05,valueBeforeMD5:0.0,array:-1.0013580322265625e-05,sb:3.731250762939453e-05,j:-8.988380432128906e-05,b:3.898143768310547e-05,valueAfterMD5:0.0,",11,36,"b:mb,sb:bj,rand:rar,secure:active,time:id,md5:mp64,sbValueBeforeMD5:sbValueBeforeMC512,valueBeforeMD5:valueBeforeMC3,valueAfterMD5:valueAfterAMD5,array:image,j:ij,",Greedy,548,0.2499349276224772
126,"['16765164', '115129', '        private void open() throws IOException {\n            if (in != null) return;\n            try {\n                con = url.openConnection();\n                in = con.getInputStream();\n            } catch (IOException e) {\n                if (cached.exists()) {\n                    LOG.fine(""Falling back to cached copy of wiki file "" + url);\n                    in = new FileInputStream(cached);\n                    con = null;\n                    return;\n                }\n                throw e;\n            }\n            try {\n                tmp = new File(cached.getAbsolutePath() + "".tmp"");\n                tmp.getParentFile().mkdirs();\n                out = new FileOutputStream(tmp);\n            } catch (IOException e) {\n                LOG.fine(""can\'t write cached copy of wiki file "" + url);\n            }\n        }\n', '    public static void bubbleSort(String[] a) {\n        Collator myCollator = Collator.getInstance();\n        boolean switched = true;\n        for (int pass = 0; pass < a.length - 1 && switched; pass++) {\n            switched = false;\n            for (int i = 0; i < a.length - pass - 1; i++) {\n                if (myCollator.compare(a[i], a[i + 1]) > 0) {\n                    switched = true;\n                    String temp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = temp;\n                }\n            }\n        }\n    }\n']",136,"        private void open() throws IOException {
            if (i != null) return;
            try {
                login = url.openConnection();
                i = login.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    i = new FileInputStream(cached);
                    login = null;
                    return;
                }
                throw e;
            }
            try {
                copy = new File(cached.getAbsolutePath() + "".tmp"");
                copy.getParentFile().mkdirs();
                temp = new FileOutputStream(copy);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
",0,0,0,-1,"con,in,tmp,out","con:0.00024366378784179688,in:-1.710653305053711e-05,tmp:5.4836273193359375e-05,out:-0.00012487173080444336,",4,10,"con:login,tmp:copy,in:i,out:temp,",Greedy,180,0.07859223286310832
127,"['20177902', '16995204', '    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {\n        String path = req.getParameter(""path"");\n        path = URLDecoder.decode(path, ""UTF-8"");\n        String name = req.getParameter(""name"");\n        name = new String(name.getBytes(), ""UTF-8"");\n        String contentType = req.getParameter(""contentType"");\n        if (path == null) {\n            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");\n            LOG.error(e);\n            throw e;\n        }\n        URL url = new URL(path);\n        InputStream inStream = null;\n        try {\n            inStream = URLUtils.getFileContent(url, req.getSession().getId());\n            res.setContentType(contentType);\n            res.addHeader(""Content-Disposition"", ""attachment;filename=\\"""" + name + ""\\"""");\n            ServletOutputStream out = res.getOutputStream();\n            IOUtils.copy(inStream, out);\n            res.flushBuffer();\n        } finally {\n            if (inStream != null) {\n                inStream.close();\n            }\n        }\n    }\n', '    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        fields.put(item.getFieldName(), item.getString());\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = """";\n                if (fields.get(""taBody"") != null) {\n                    body = (String) fields.get(""taBody"");\n                } else if (fields.get(""taReplyBody"") != null) {\n                    body = (String) fields.get(""taReplyBody"");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(""mid"");\n                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));\n            } else {\n                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));\n                request.setAttribute(""exception"", ""The form is null"");\n                request.setAttribute(""newLocation"", null);\n                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = ""NullPointerException"";\n            }\n            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));\n            request.setAttribute(""exception"", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), ""OK"");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n']",215,"    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter(""path"");
        path = URLDecoder.decode(path, ""UTF-8"");
        String name = req.getParameter(""name"");
        name = new String(name.getBytes(), ""UTF-8"");
        String contentType = req.getParameter(""contentType"");
        if (path == null) {
            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");
            LOG.error(e);
            throw e;
        }
        URL buffer = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(buffer, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
",1,1,1,-1,"req,res,parent,path,name,contentType,e,url,inStream,out","req:-2.6226043701171875e-06,res:-6.198883056640625e-06,parent:-1.2278556823730469e-05,path:-8.702278137207031e-06,name:-3.5762786865234375e-06,contentType:0.0,e:1.5497207641601562e-06,url:0.00012201070785522461,inStream:0.0,out:-3.5762786865234375e-07,",1,2,"url:buffer,e:e,contentType:contentType,inStream:inStream,out:out,req:req,name:name,res:res,path:path,parent:parent,",Greedy,497,0.2230325698852539
128,"['7170603', '624490', '    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {\n        File milestoneDefFile = new File(milestoneDefFileName);\n        if (!milestoneDefFile.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");\n        }\n        if (!milestoneDefFile.isFile()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");\n        }\n        if (!milestoneDefFile.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");\n        }\n        File sqlDirectory = new File(sqlDirectoryName);\n        if (!sqlDirectory.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");\n        }\n        if (!sqlDirectory.isDirectory()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");\n        }\n        if (!sqlDirectory.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");\n        }\n        File destFile = new File(destFileName);\n        if (destFile.exists()) {\n            throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");\n        }\n        destFile.createNewFile();\n        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();\n        FileInputStream milestoneDefFIS = null;\n        try {\n            milestoneDefFIS = new FileInputStream(milestoneDefFile);\n            parser.parse(milestoneDefFIS);\n        } catch (XMLParseException e) {\n            printXmlError(e, milestoneDefFileName);\n        } finally {\n            try {\n                if (milestoneDefFIS != null) milestoneDefFIS.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing inputstream "", e);\n            }\n        }\n        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);\n        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);\n        if (fromMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (toMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (fromMilestoneIdx == toMilestoneIdx) {\n            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");\n        }\n        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(destFile);\n            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n        } catch (Exception e) {\n            fos.close();\n            destFile.delete();\n            throw e;\n        } finally {\n            try {\n                if (fos != null) fos.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing outputstream "", e);\n            }\n        }\n        System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",616,"    private static void generateSQLUpgradeFile(String milestonedeffileUrl, String sqldirectoryPath, String withLegaxy, String destDigename, String DestDirectoryPath) throws Exception {
        File milestoneDEFStream = new File(milestonedeffileUrl);
        if (!milestoneDEFStream.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : does not exists"");
        }
        if (!milestoneDEFStream.isFile()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not a file"");
        }
        if (!milestoneDEFStream.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not readable"");
        }
        File dbFolder = new File(sqldirectoryPath);
        if (!dbFolder.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : does not exists"");
        }
        if (!dbFolder.isDirectory()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not a directory"");
        }
        if (!dbFolder.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not readable"");
        }
        File targetPage = new File(DestDirectoryPath);
        if (targetPage.exists()) {
            throw new IllegalArgumentException(""Cannot write to ["" + DestDirectoryPath + ""] : already exists"");
        }
        targetPage.createNewFile();
        SqlUpgradeXmlParser json = SqlUpgradeXmlParser.newParser();
        FileInputStream milestoneDefFIS = null;
        try {
            milestoneDefFIS = new FileInputStream(milestoneDEFStream);
            json.parse(milestoneDefFIS);
        } catch (XMLParseException e) {
            printXmlError(e, milestonedeffileUrl);
        } finally {
            try {
                if (milestoneDefFIS != null) milestoneDefFIS.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing inputstream "", e);
            }
        }
        int fromMilestoneIdx = json.getMilestoneIndex(withLegaxy);
        int toMilestoneIdx = json.getMilestoneIndex(destDigename);
        if (fromMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + withLegaxy + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (toMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destDigename + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (fromMilestoneIdx == toMilestoneIdx) {
            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");
        }
        List<String> files = json.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);
        List<String> views = json.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(targetPage);
            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
        } catch (Exception e) {
            fos.close();
            targetPage.delete();
            throw e;
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing outputstream "", e);
            }
        }
        System.out.println(""An SQL update file has been generated to "" + DestDirectoryPath + ""."");
    }
",1,1,0,1,"milestoneDefFileName,sqlDirectoryName,fromMilestone,destMilestone,destFileName,milestoneDefFile,sqlDirectory,destFile,parser,milestoneDefFIS","milestoneDefFileName:0.0,sqlDirectoryName:0.0,fromMilestone:0.0,destMilestone:0.0,destFileName:0.0,milestoneDefFile:0.0,sqlDirectory:0.0,destFile:0.0,parser:0.00011235475540161133,milestoneDefFIS:0.0,",9,45,"parser:json,milestoneDefFileName:milestonedeffileUrl,sqlDirectoryName:sqldirectoryPath,fromMilestone:withLegaxy,destMilestone:destDigename,destFileName:DestDirectoryPath,milestoneDefFile:milestoneDEFStream,sqlDirectory:dbFolder,destFile:targetPage,",Greedy,530,0.28614983956019086
129,"['3928959', '19846242', '    public static void copyFile(File from, File to) throws IOException {\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(from);\n            out = new FileOutputStream(to);\n            byte[] bytes = new byte[1024 * 4];\n            int len = 0;\n            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);\n        } finally {\n            Streams.closeQuietly(in);\n            Streams.closeQuietly(out);\n        }\n    }\n', '    public I18N(JApplet applet) {\n        if (prop != null) return;\n        String lang = ""en"";\n        try {\n            Properties userProperties = new Properties();\n            if (applet != null) {\n                URL url = new URL(applet.getCodeBase() + ""logicsim.cfg"");\n                userProperties.load(url.openStream());\n            } else {\n                userProperties.load(new FileInputStream(""logicsim.cfg""));\n            }\n            if (userProperties.containsKey(""language"")) lang = userProperties.getProperty(""language"");\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        prop = new Properties();\n        try {\n            if (applet != null) {\n                URL url = new URL(applet.getCodeBase() + ""languages/"" + lang + "".txt"");\n                prop.load(url.openStream());\n            } else {\n                prop.load(new FileInputStream(""languages/"" + lang + "".txt""));\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            try {\n                if (applet != null) {\n                    URL url = new URL(applet.getCodeBase() + ""languages/en.txt"");\n                    prop.load(url.openStream());\n                } else {\n                    prop.load(new FileInputStream(""languages/en.txt""));\n                }\n            } catch (Exception ex2) {\n                JOptionPane.showMessageDialog(null, ""Language file languages/en.txt not found.\\nPlease run the program from its directory."");\n                System.exit(5);\n            }\n        }\n    }\n']",105,"    public static void copyFile(File address, File token) throws IOException {
        FileInputStream id = null;
        FileOutputStream out = null;
        try {
            id = new FileInputStream(address);
            out = new FileOutputStream(token);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = id.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(id);
            Streams.closeQuietly(out);
        }
    }
",0,0,0,-1,"from,to,in,out,bytes,len","from:1.3113021850585938e-06,to:5.960464477539062e-07,in:8.344650268554688e-07,out:-7.152557373046875e-07,bytes:4.76837158203125e-07,len:1.1920928955078125e-06,",3,8,"from:address,len:len,in:id,to:token,bytes:bytes,out:out,",Greedy,268,0.11677527030309041
130,"['7811549', '15383485', '    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {\n        if (TDebug.TraceAudioFileReader) {\n            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");\n        }\n        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;\n        InputStream inputStream = url.openStream();\n        AudioInputStream audioInputStream = null;\n        try {\n            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);\n        } catch (UnsupportedAudioFileException e) {\n            inputStream.close();\n            throw e;\n        } catch (IOException e) {\n            inputStream.close();\n            throw e;\n        }\n        if (TDebug.TraceAudioFileReader) {\n            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");\n        }\n        return audioInputStream;\n    }\n', '    protected byte[] getTSAResponse(byte[] requestBytes) throws Exception {\n        URL url = new URL(tsaURL);\n        URLConnection tsaConnection;\n        tsaConnection = (URLConnection) url.openConnection();\n        tsaConnection.setDoInput(true);\n        tsaConnection.setDoOutput(true);\n        tsaConnection.setUseCaches(false);\n        tsaConnection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");\n        tsaConnection.setRequestProperty(""Content-Transfer-Encoding"", ""binary"");\n        if ((tsaUsername != null) && !tsaUsername.equals("""")) {\n            String userPassword = tsaUsername + "":"" + tsaPassword;\n            tsaConnection.setRequestProperty(""Authorization"", ""Basic "" + Base64.encodeBytes(userPassword.getBytes()));\n        }\n        OutputStream out = tsaConnection.getOutputStream();\n        out.write(requestBytes);\n        out.close();\n        InputStream inp = tsaConnection.getInputStream();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int bytesRead = 0;\n        while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {\n            baos.write(buffer, 0, bytesRead);\n        }\n        byte[] respBytes = baos.toByteArray();\n        String encoding = tsaConnection.getContentEncoding();\n        if (encoding != null && encoding.equalsIgnoreCase(""base64"")) {\n            respBytes = Base64.decode(new String(respBytes));\n        }\n        return respBytes;\n    }\n']",115,"    public AudioInputStream getAudioInputStream(URL buffer) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileSizeINbytes = AudioSystem.NOT_SPECIFIED;
        InputStream initstream = buffer.openStream();
        AudioInputStream audioByteStream = null;
        try {
            audioByteStream = getAudioInputStream(initstream, lFileSizeINbytes);
        } catch (UnsupportedAudioFileException e) {
            initstream.close();
            throw e;
        } catch (IOException e) {
            initstream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioByteStream;
    }
",0,0,0,-1,"url,lFileLengthInBytes,inputStream,audioInputStream","url:4.780292510986328e-05,lFileLengthInBytes:0.0,inputStream:0.0,audioInputStream:0.0,",4,11,"url:buffer,lFileLengthInBytes:lFileSizeINbytes,inputStream:initstream,audioInputStream:audioByteStream,",Greedy,176,0.08612274328867595
131,"['10450245', '3765287', '    public Map<String, String> getMetadata(WebFileObject fo) throws IOException {\n        if (!fo.wfs.getRootURL().getProtocol().equals(""ftp"")) {\n            String realName = fo.pathname;\n            boolean exists;\n            URL ur = new URL(fo.wfs.getRootURL(), realName);\n            HttpURLConnection connect = (HttpURLConnection) ur.openConnection();\n            connect.setRequestMethod(""HEAD"");\n            HttpURLConnection.setFollowRedirects(false);\n            connect.connect();\n            HttpURLConnection.setFollowRedirects(true);\n            if (connect.getResponseCode() == 303) {\n                String surl = connect.getHeaderField(""Location"");\n                if (surl.startsWith(fo.wfs.root.toString())) {\n                    realName = surl.substring(fo.wfs.root.toString().length());\n                }\n                connect.disconnect();\n                ur = new URL(fo.wfs.getRootURL(), realName);\n                connect = (HttpURLConnection) ur.openConnection();\n                connect.setRequestMethod(""HEAD"");\n                connect.connect();\n            }\n            exists = connect.getResponseCode() != 404;\n            Map<String, String> result = new HashMap<String, String>();\n            Map<String, List<String>> fields = connect.getHeaderFields();\n            for (Entry<String, List<String>> e : fields.entrySet()) {\n                String key = e.getKey();\n                List<String> value = e.getValue();\n                result.put(key, value.get(0));\n            }\n            result.put(META_EXIST, String.valueOf(exists));\n            connect.disconnect();\n            return result;\n        } else {\n            Map<String, String> result = new HashMap<String, String>();\n            URL url = new URL(fo.wfs.getRootURL(), fo.pathname);\n            URLConnection urlc = url.openConnection();\n            try {\n                urlc.connect();\n                urlc.getInputStream().close();\n                result.put(META_EXIST, ""true"");\n            } catch (IOException ex) {\n                result.put(META_EXIST, ""false"");\n            }\n            return result;\n        }\n    }\n', '    private void initializeSecretKey() {\n        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();\n        MessageDigest digest;\n        String secretKey;\n        try {\n            digest = java.security.MessageDigest.getInstance(""MD5"");\n            digest.reset();\n            digest.update(baseKey.getBytes());\n            byte messageDigest[] = digest.digest();\n            int len = messageDigest.length;\n            StringBuilder sb = new StringBuilder(len << 1);\n            for (int i = 0; i < len; i++) {\n                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));\n                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));\n            }\n            secretKey = sb.substring(0, 32);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n        this.setSecretKey(secretKey);\n    }\n']",444,"    public Map<String, String> getMetadata(WebFileObject umo) throws IOException {
        if (!umo.wfs.getRootURL().getProtocol().equals(""ftp"")) {
            String RealName = umo.pathname;
            boolean exists;
            URL conn = new URL(umo.wfs.getRootURL(), RealName);
            HttpURLConnection fail = (HttpURLConnection) conn.openConnection();
            fail.setRequestMethod(""HEAD"");
            HttpURLConnection.setFollowRedirects(false);
            fail.fail();
            HttpURLConnection.setFollowRedirects(true);
            if (fail.getResponseCode() == 303) {
                String slocation = fail.getHeaderField(""Location"");
                if (slocation.startsWith(umo.wfs.root.toString())) {
                    RealName = slocation.substring(umo.wfs.root.toString().length());
                }
                fail.disconnect();
                conn = new URL(umo.wfs.getRootURL(), RealName);
                fail = (HttpURLConnection) conn.openConnection();
                fail.setRequestMethod(""HEAD"");
                fail.fail();
            }
            exists = fail.getResponseCode() != 404;
            Map<String, String> json = new HashMap<String, String>();
            Map<String, List<String>> services = fail.getHeaderFields();
            for (Entry<String, List<String>> ie : services.entrySet()) {
                String id = ie.getKey();
                List<String> collection = ie.getValue();
                json.put(id, collection.get(0));
            }
            json.put(META_EXIST, String.valueOf(exists));
            fail.disconnect();
            return json;
        } else {
            Map<String, String> json = new HashMap<String, String>();
            URL url = new URL(umo.wfs.getRootURL(), umo.pathname);
            URLConnection URLcon = url.openConnection();
            try {
                URLcon.fail();
                URLcon.getInputStream().close();
                json.put(META_EXIST, ""true"");
            } catch (IOException ex) {
                json.put(META_EXIST, ""false"");
            }
            return json;
        }
    }
",0,0,0,-1,"fo,realName,exists,ur,connect,surl,result,fields,e,key,value,url,urlc","fo:-9.119510650634766e-06,realName:0.0,exists:0.0,ur:3.7610530853271484e-05,connect:-2.8431415557861328e-05,surl:0.0,result:4.547834396362305e-05,fields:-9.775161743164062e-06,e:3.814697265625e-06,key:1.704692840576172e-05,value:9.417533874511719e-06,url:0.00036597251892089844,urlc:0.0,",11,55,"url:url,result:json,ur:conn,key:id,value:collection,e:ie,realName:RealName,exists:exists,surl:slocation,urlc:URLcon,fo:umo,fields:services,connect:fail,",Greedy,703,0.32264344294865926
132,"['15034107', '7993946', '    private static void copyFile(File in, File out) throws Exception {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n']",68,"    private static void copyFile(File url, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(url).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",1,1,0,1,"in,out,sourceChannel,destinationChannel","in:-0.002608180046081543,out:-0.013296127319335938,sourceChannel:0.0,destinationChannel:0.0,",1,2,"sourceChannel:sourceChannel,destinationChannel:destinationChannel,in:url,",Greedy,139,0.06455606619517008
133,"['12577306', '12798566', '    @Override\n    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        String url = ""http://jdkcn.com/checkUpdateNew.jsp?ver="" + blogFacade.getDatabaseSiteConfig().getAppVersion();\n        response.setCharacterEncoding(""UTF-8"");\n        URLConnection connection = new URL(url).openConnection();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));\n        StringBuilder sb = new StringBuilder();\n        String line = reader.readLine();\n        while (line != null) {\n            sb.append(line).append(""\\r\\n"");\n            line = reader.readLine();\n        }\n        response.getWriter().println(sb.toString());\n        return null;\n    }\n', '    private static void process(String urlstring) {\n        try {\n            URL url = new URL(urlstring);\n            System.out.println(""Connecting to "" + url);\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {\n                System.out.println(TAG.matcher(line).replaceAll(""""));\n            }\n            in.close();\n        } catch (IOException ioe) {\n            System.err.println("""" + ioe);\n        }\n    }\n']",142,,0,1,,-4,"request,response,url,connection,reader,sb,line",,,,,Greedy,1,0.006003872553507487
134,"['12289756', '15078689', '    public String loadURL(URL url) {\n        String retVal = """";\n        try {\n            InputStream inputStream = url.openStream();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = bufferedReader.readLine();\n            retVal += line + ""\\n"";\n            while (line != null) {\n                System.out.println(line);\n                line = bufferedReader.readLine();\n                if (line != null) retVal += line + ""\\n"";\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (Exception e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        }\n        return retVal;\n    }\n', '    protected void fetchDicomSopInstance(File result) throws Exception {\n        try {\n            URL url = new URL(this.config.getUrl(""wadoserver.url"").toString() + ""?requestType=WADO&contentType=text/xml"" + ""&studyUID="" + publicationProperties.getProperty(""studyUID"") + ""&seriesUID="" + publicationProperties.getProperty(""seriesUID"") + ""&objectUID="" + publicationProperties.getProperty(""objectUID""));\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            OutputStream ostream;\n            InputStream istream;\n            connection.setUseCaches(false);\n            connection.setRequestProperty(""accept"", ""text/xml"");\n            connection.connect();\n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                throw new Exception(""Error fetching DICOM SOP instance ("" + connection.getResponseCode() + "" "" + connection.getResponseMessage() + "")"");\n            }\n            ostream = new BufferedOutputStream(new FileOutputStream(result));\n            try {\n                istream = connection.getInputStream();\n                Utilities.copyStream(istream, ostream);\n            } finally {\n                ostream.close();\n            }\n        } catch (Exception e) {\n            throw new Exception(""Error fetching DICOM SOP instance."", e);\n        }\n    }\n']",168,"    public String loadURL(URL lr) {
        String refBu = """";
        try {
            InputStream inputReader = lr.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputReader));
            String line = bufferedReader.readLine();
            refBu += line + ""
"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) refBu += line + ""
"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            refBu = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            refBu = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            refBu = e.getMessage();
        }
        return refBu;
    }
",0,0,0,-1,"url,inputStream,bufferedReader,line,retVal","url:-2.0265579223632812e-06,inputStream:0.0,bufferedReader:0.0,line:-1.430511474609375e-06,retVal:0.0,",3,11,"inputStream:inputReader,bufferedReader:bufferedReader,retVal:refBu,line:line,url:lr,",Greedy,286,0.1195699413617452
135,"['15464715', '2885691', '    private String sendQuery(String query) {\n        File xmlServerResponse = null;\n        String serverResponse = """";\n        try {\n            long start = Calendar.getInstance().getTimeInMillis();\n            System.out.println(""\\n\\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");\n            System.out.println(""    consulta de busqueda -> "" + query);\n            URL url = new URL(query);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = """";\n            while ((line = in.readLine()) != null) {\n                serverResponse += line;\n            }\n            long ahora = (Calendar.getInstance().getTimeInMillis() - start);\n            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);\n            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\\n"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return serverResponse;\n    }\n', '    public static boolean sendInformation(String reportType, HashMap<String, String> data) {\n        if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_UDC)) {\n            logger.debug(""Report usage information to devs..."");\n            String transferData = ""reportType="" + reportType;\n            transferData += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");\n            transferData += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);\n            for (String key : data.keySet()) {\n                transferData += ""&Suppl-"" + key + ""="" + data.get(key);\n            }\n            try {\n                URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/UsageReport"");\n                URLConnection conn = url.openConnection();\n                conn.setDoOutput(true);\n                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());\n                writer.write(transferData);\n                writer.flush();\n                StringBuffer answer = new StringBuffer();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    answer.append(line + ""\\r\\n"");\n                }\n                writer.close();\n                reader.close();\n                logger.debug(""UDC Server answer: "" + answer.toString());\n            } catch (Exception e) {\n                CrashReporter.reportException(e);\n                logger.debug(""Could not report usage data: "" + e.toString());\n                return false;\n            }\n            return true;\n        } else {\n            logger.debug(""Reporting not wished!"");\n            return false;\n        }\n    }\n']",169,"    private String sendQuery(String data) {
        File xmlserverresponse = null;
        String ServerResponse = """";
        try {
            long art = Calendar.getInstance().getTimeInMillis();
            System.out.println(""

++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + data);
            URL connection = new URL(data);
            BufferedReader ilo = new BufferedReader(new InputStreamReader(connection.openStream()));
            String connection = """";
            while ((connection = ilo.readLine()) != null) {
                ServerResponse += connection;
            }
            long ahoria = (Calendar.getInstance().getTimeInMillis() - art);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahoria);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++

"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ServerResponse;
    }
",1,1,1,-1,"query,xmlServerResponse,start,url,in,line,serverResponse,ahora","query:-0.0001412034034729004,xmlServerResponse:0.0,start:-0.0001036524772644043,url:0.0028180480003356934,in:-0.0008091330528259277,line:0.0006792545318603516,serverResponse:0.0,ahora:0.0,",8,18,"url:connection,line:connection,xmlServerResponse:xmlserverresponse,serverResponse:ServerResponse,ahora:ahoria,start:art,query:data,in:ilo,",Greedy,307,0.14441761175791423
136,"['15634393', '6102140', '    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {\n        File sourceFile = getTileFile(x, y, zoom, tileSource);\n        if (!sourceFile.exists()) return false;\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        long sourceBytes = 0;\n        long writtenBytes = 0;\n        try {\n            fis = new FileInputStream(sourceFile);\n            fos = new FileOutputStream(targetFileName);\n            FileChannel source = fis.getChannel();\n            FileChannel destination = fos.getChannel();\n            sourceBytes = source.size();\n            writtenBytes = destination.transferFrom(source, 0, sourceBytes);\n        } finally {\n            Utilities.closeStream(fis);\n            Utilities.closeStream(fos);\n        }\n        if (writtenBytes != sourceBytes) throw new IOException(""Target file\'s size is not equal to the source file\'s size!"");\n        return true;\n    }\n', '    public static void main(String[] args) {\n        try {\n            boolean readExp = Utils.getFlag(\'l\', args);\n            final boolean writeExp = Utils.getFlag(\'s\', args);\n            final String expFile = Utils.getOption(\'f\', args);\n            if ((readExp || writeExp) && (expFile.length() == 0)) {\n                throw new Exception(""A filename must be given with the -f option"");\n            }\n            Experiment exp = null;\n            if (readExp) {\n                FileInputStream fi = new FileInputStream(expFile);\n                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n                exp = (Experiment) oi.readObject();\n                oi.close();\n            } else {\n                exp = new Experiment();\n            }\n            System.err.println(""Initial Experiment:\\n"" + exp.toString());\n            final JFrame jf = new JFrame(""Weka Experiment Setup"");\n            jf.getContentPane().setLayout(new BorderLayout());\n            final SetupPanel sp = new SetupPanel();\n            jf.getContentPane().add(sp, BorderLayout.CENTER);\n            jf.addWindowListener(new WindowAdapter() {\n\n                public void windowClosing(WindowEvent e) {\n                    System.err.println(""\\nFinal Experiment:\\n"" + sp.m_Exp.toString());\n                    if (writeExp) {\n                        try {\n                            FileOutputStream fo = new FileOutputStream(expFile);\n                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n                            oo.writeObject(sp.m_Exp);\n                            oo.close();\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                            System.err.println(""Couldn\'t write experiment to: "" + expFile + \'\\n\' + ex.getMessage());\n                        }\n                    }\n                    jf.dispose();\n                    System.exit(0);\n                }\n            });\n            jf.pack();\n            jf.setVisible(true);\n            System.err.println(""Short nap"");\n            Thread.currentThread().sleep(3000);\n            System.err.println(""Done"");\n            sp.setExperiment(exp);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.err.println(ex.getMessage());\n        }\n    }\n']",162,"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File targetFiles = getTileFile(x, y, zoom, tileSource);
        if (!targetFiles.exists()) return false;
        FileInputStream  fs = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
             fs = new FileInputStream(targetFiles);
            fos = new FileOutputStream(targetFileName);
            FileChannel source =  fs.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream( fs);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
",1,1,1,-1,"targetFileName,x,y,zoom,tileSource,sourceFile,fis,fos,sourceBytes,writtenBytes,source,destination","targetFileName:0.0,x:0.005810856819152832,y:-0.0020025968551635742,zoom:0.0,tileSource:0.0,sourceFile:0.0,fis:0.0,fos:0.0,sourceBytes:0.0,writtenBytes:0.0,source:-0.003888547420501709,destination:0.0,",2,7,"x:x,targetFileName:targetFileName,zoom:zoom,tileSource:tileSource,sourceFile:targetFiles,fis: fs,fos:fos,sourceBytes:sourceBytes,writtenBytes:writtenBytes,destination:destination,y:y,source:source,",Greedy,471,0.2167987585067749
137,"['16422406', '18741904', '    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {\n        URL urlServlet = null;\n        if (strServlet_name == null) {\n            urlServlet = m_Url;\n        } else {\n            urlServlet = new URL(m_Url, strServlet_name);\n        }\n        URLConnection connection = urlServlet.openConnection();\n        connection.setConnectTimeout(180000);\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        connection.setUseCaches(false);\n        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");\n        if (m_strJsessionid != null) {\n            connection.setRequestProperty(""Cookie"", m_strJsessionid);\n        }\n        return connection;\n    }\n', '    protected void cboTemplateIndexSelectionChanged() {\n        int idx = WizardPage1.this.cboTemplateIndex.getSelectionIndex();\n        IPreferenceStore store = Activator.getDefault().getPreferenceStore();\n        String prefnamePrefix = PreferenceConstants.TEMPLATE_PREFIX + idx;\n        String baseUrl = store.getString(prefnamePrefix + PreferenceConstants.BASEURL_POSTFIX);\n        String descfile = store.getString(prefnamePrefix + PreferenceConstants.DESCFILE_POSTFIX);\n        try {\n            URL url = new URL(baseUrl + descfile);\n            URLConnection con = url.openConnection();\n            WizardPage1.this.setTemplContainer(new TemplateContainer(con.getInputStream(), baseUrl));\n            fillListboxFromTemplateContainer();\n        } catch (MalformedURLException e1) {\n            getTxaTemplateDescription().setText(e1.getMessage());\n            e1.printStackTrace();\n        } catch (IOException e2) {\n            getTxaTemplateDescription().setText(e2.getMessage());\n            e2.printStackTrace();\n        } catch (XPathExpressionException e3) {\n            getTxaTemplateDescription().setText(e3.getMessage());\n            e3.printStackTrace();\n        } catch (ParserConfigurationException e4) {\n            getTxaTemplateDescription().setText(e4.getMessage());\n            e4.printStackTrace();\n        } catch (SAXException e5) {\n            getTxaTemplateDescription().setText(e5.getMessage());\n            e5.printStackTrace();\n        }\n    }\n']",115,"    private URLConnection getServletConnection(String strServlet_data) throws MalformedURLException, IOException {
        URL pageBootle = null;
        if (strServlet_data == null) {
            pageBootle = m_Url;
        } else {
            pageBootle = new URL(m_Url, strServlet_data);
        }
        URLConnection http = pageBootle.openConnection();
        http.setConnectTimeout(180000);
        http.setDoInput(true);
        http.setDoOutput(true);
        http.setUseCaches(false);
        http.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            http.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return http;
    }
",0,0,0,-1,"strServlet_name,urlServlet,connection","strServlet_name:0.0,urlServlet:0.0,connection:1.8715858459472656e-05,",3,15,"connection:http,strServlet_name:strServlet_data,urlServlet:pageBootle,",Greedy,180,0.09267598390579224
138,"['6778337', '7678253', '    private void copy(File from, File to) throws FileNotFoundException, IOException {\n        FileReader in;\n        in = new FileReader(from);\n        FileWriter out = new FileWriter(to);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n', '    protected void copyFile(File sourceFile, File targetFile) throws FileNotFoundException, IOException {\n        FileChannel inChannel = null;\n        FileChannel outChannel = null;\n        try {\n            inChannel = new FileInputStream(sourceFile).getChannel();\n            outChannel = new FileOutputStream(targetFile).getChannel();\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            try {\n                if (inChannel != null) {\n                    inChannel.close();\n                }\n                if (outChannel != null) {\n                    outChannel.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n']",73,"    private void copy(File url, File to) throws FileNotFoundException, IOException {
        FileReader cin;
        cin = new FileReader(url);
        FileWriter out = new FileWriter(to);
        int c;
        while ((c = cin.read()) != -1) out.write(c);
        cin.close();
        out.close();
    }
",1,1,0,1,"from,to,in,out,c","from:8.255243301391602e-05,to:-1.2159347534179688e-05,in:8.541345596313477e-05,out:0.0008031129837036133,c:4.26173210144043e-05,",2,6,"out:out,in:cin,from:url,",Greedy,138,0.06102287769317627
139,"['288695', '2009328', '    public void CopyFile(File source, File destination) throws Exception {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    private String storeProxy(String proxyPath, String userName) throws IOException {\n        File inputFile = new File(proxyPath);\n        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;\n        File outputFile = new File(outfile);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);\n        try {\n            p.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return outfile;\n    }\n']",146,"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] url = new byte[4096];
            int get;
            while ((get = fis.get(url)) != -1) {
                fos.write(url, 0, get);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,0,1,"source,destination,fis,fos,buffer,read","source:0.004290521144866943,destination:0.0,fis:0.0,fos:0.0,buffer:0.0007978677749633789,read:0.0006902217864990234,",2,7,"source:source,buffer:url,read:get,",Greedy,172,0.07461082935333252
140,"['11647643', '6226250', '        public void actionPerformed(ActionEvent e) {\n            try {\n                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");\n                try {\n                    File file = File.createTempFile(""temp"", ""xml"");\n                    InputStream in = new BufferedInputStream(url.openStream());\n                    OutputStream out = new FileOutputStream(file);\n                    byte[] buf = new byte[1024];\n                    int n;\n                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n                    out.flush();\n                    out.close();\n                    module.merge(file);\n                } catch (IOException f) {\n                }\n            } catch (MalformedURLException f) {\n            }\n        }\n', '    public static String MD5(String plainTxt) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(plainTxt.getBytes());\n            byte[] b = md.digest();\n            int i = 0;\n            StringBuffer buffer = new StringBuffer();\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) {\n                    i += 256;\n                }\n                if (i < 16) {\n                    buffer.append(""0"");\n                }\n                buffer.append(Integer.toHexString(i));\n            }\n            return buffer.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return ""ERROR"";\n        }\n    }\n']",137,"        public void actionPerformed(ActionEvent e) {
            try {
                URL pull = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File File = File.createTempFile(""temp"", ""xml"");
                    InputStream input = new BufferedInputStream(pull.openStream());
                    OutputStream write = new FileOutputStream(File);
                    byte[] temp = new byte[1024];
                    int size;
                    while ((size = input.read(temp)) > 0) write.write(temp, 0, size);
                    write.flush();
                    write.close();
                    module.merge(File);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
",0,0,0,-1,"e,url,file,in,out,buf,n","e:4.410743713378906e-06,url:3.3855438232421875e-05,file:-9.5367431640625e-07,in:2.288818359375e-05,out:1.7523765563964844e-05,buf:1.1920928955078125e-05,n:-7.3909759521484375e-06,",6,17,"url:pull,in:input,out:write,buf:temp,e:e,file:File,n:size,",Greedy,310,0.13969156344731648
141,"['13551188', '272355', '    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {\n        URL url = getResource(resName, clazz);\n        try {\n            return (url != null) ? url.openStream() : null;\n        } catch (IOException e) {\n            return null;\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",54,"    public static InputStream getResourceAsStream(String resName, Class<?> CLone) {
        URL file = getResource(resName, CLone);
        try {
            return (file != null) ? file.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
",0,0,0,-1,"resName,clazz,url","resName:0.0,clazz:0.0,url:-1.5497207641601562e-06,",2,5,"resName:resName,clazz:CLone,url:file,",Greedy,112,0.059716796875
142,"['10067028', '9307757', '    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            long size = in.size();\n            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buffer);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n', '    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            clearTables(stmt);\n            stmt.executeQuery(""select setval(\'objects_objectid_seq\', 1000)"");\n            stmt.executeQuery(""select setval(\'instructions_instructionid_seq\', 1)"");\n            stmt.executeQuery(""select setval(\'transactions_transactionid_seq\', 1)"");\n            stmt.executeQuery(""select setval(\'verbtransactions_verbid_seq\', 1)"");\n            stmt.executeUpdate(""update SystemProperties set value = \'Minimal Data\' where name = \'DB Data Version\'"");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n']",117,"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel data = null;
        FileChannel out = null;
        try {
            data = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = data.size();
            MappedByteBuffer buffer = data.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (data != null) {
                data.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
",0,0,0,-1,"source,destination,in,out,size,buffer","source:-2.2649765014648438e-06,destination:0.0,in:-2.384185791015625e-06,out:-3.6954879760742188e-06,size:-2.384185791015625e-07,buffer:-2.1457672119140625e-06,",1,6,"destination:destination,size:size,buffer:buffer,source:source,in:data,out:out,",Greedy,284,0.12022825082143147
143,"['813913', '9769234', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    void downloadImage(String filename, File imageFile) throws Exception {\n        String URL = Constants.IMAGE_URL + ""/"" + filename;\n        SiteResponse response = stratSite.getResponse(URL);\n        InputStream inputStream = response.getInputStream();\n        OutputStream outputStream = new FileOutputStream(imageFile);\n        IOUtils.copy(inputStream, outputStream);\n    }\n']",271,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",1,1,0,1,"inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","inFile:0.0,outFile:0.0,iis:0.0,dcmParser:0.0,ds:3.5762786865234375e-07,pdReader:0.0,out:4.76837158203125e-07,dcmEncParam:0.0,pdWriter:0.0,",1,9,"out:url,",Greedy,137,0.05534657637278239
144,"['2640244', '22328844', '    public DocumentDialog(Frame frame, String title, String document) {\n        setTitle(title);\n        textArea = new JTextArea();\n        textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        textArea.setEditable(false);\n        getContentPane().add(textPane);\n        URL url = DocumentDialog.class.getClassLoader().getResource(document);\n        try {\n            StringBuilder sb = new StringBuilder();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));\n            String buildNumber = MessageBundle.getBuildNumber();\n            String releaseNumber = MessageBundle.getReleaseNumber();\n            String tmp;\n            while ((tmp = in.readLine()) != null) {\n                tmp = tmp.replace(""${build_number}"", buildNumber);\n                tmp = tmp.replace(""${release_number}"", releaseNumber);\n                sb.append(tmp + ""\\n"");\n            }\n            textArea.setText(sb.toString());\n            textArea.setCaretPosition(0);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    protected void doBackupOrganize() throws Exception {\n        Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet result = null;\n        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;\n        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";\n        DBOperation dbo = factory.createDBOperation(POOL_NAME);\n        try {\n            try {\n                con = dbo.getConnection();\n                con.setAutoCommit(false);\n                ps = con.prepareStatement(strSelQuery);\n                result = ps.executeQuery();\n                ps = con.prepareStatement(strInsQuery);\n                while (result.next()) {\n                    ps.setInt(1, this.versionNO);\n                    ps.setString(2, result.getString(""organize_id""));\n                    ps.setString(3, result.getString(""organize_type_id""));\n                    ps.setString(4, result.getString(""organize_name""));\n                    ps.setString(5, result.getString(""organize_manager""));\n                    ps.setString(6, result.getString(""organize_describe""));\n                    ps.setString(7, result.getString(""work_type""));\n                    ps.setInt(8, result.getInt(""show_order""));\n                    ps.setInt(9, result.getInt(""position_x""));\n                    ps.setInt(10, result.getInt(""position_y""));\n                    int resultCount = ps.executeUpdate();\n                    if (resultCount != 1) {\n                        con.rollback();\n                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);\n                    }\n                }\n                con.commit();\n            } catch (SQLException se) {\n                con.rollback();\n                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);\n            } finally {\n                con.setAutoCommit(true);\n                close(dbo, ps, result);\n            }\n        } catch (SQLException se) {\n            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");\n        }\n    }\n']",212,"    public DocumentDialog(Frame message, String content, String page) {
        setTitle(content);
        fontPa = new JTextArea();
        textpace = new StdScrollPane(fontPa, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        fontPa.setEditable(false);
        getContentPane().add(textpace);
        URL url = DocumentDialog.class.getClassLoader().getResource(page);
        try {
            StringBuilder sb = new StringBuilder();
            BufferedReader line = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            String buildNumber = MessageBundle.getBuildNumber();
            String ReleaseNumber = MessageBundle.getReleaseNumber();
            String src;
            while ((src = line.readLine()) != null) {
                src = src.replace(""${build_number}"", buildNumber);
                src = src.replace(""${release_number}"", ReleaseNumber);
                sb.append(src + ""
"");
            }
            fontPa.setText(sb.toString());
            fontPa.setCaretPosition(0);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"frame,title,document,textArea,textPane,url,sb,in,buildNumber,releaseNumber,tmp","frame:-7.152557373046875e-07,title:1.1920928955078125e-07,document:-4.649162292480469e-06,textArea:0.0,textPane:0.0,url:1.3947486877441406e-05,sb:2.5033950805664062e-06,in:2.2649765014648438e-06,buildNumber:0.0,releaseNumber:0.0,tmp:2.384185791015625e-07,",8,23,"url:url,sb:sb,in:line,tmp:src,title:content,textArea:fontPa,textPane:textpace,buildNumber:buildNumber,releaseNumber:ReleaseNumber,frame:message,document:page,",Greedy,459,0.21345282793045045
145,"['323592', '6644160', '    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {\n        System.out.println(""GestorPedido.elimina()"");\n        int id = pe.getId();\n        String sql;\n        Statement stmt = null;\n        try {\n            gd.begin();\n            sql = ""DELETE FROM pedido WHERE id="" + id;\n            System.out.println(""Ejecutando: "" + sql);\n            stmt = gd.getConexion().createStatement();\n            stmt.executeUpdate(sql);\n            System.out.println(""executeUpdate"");\n            gd.commit();\n            System.out.println(""commit"");\n            stmt.close();\n        } catch (SQLException e) {\n            gd.rollback();\n            throw new errorSQL(e.toString());\n        } catch (errorConexionBD e) {\n            System.err.println(""Error en GestorPedido.elimina(): "" + e);\n        } catch (errorSQL e) {\n            System.err.println(""Error en GestorPedido.elimina(): "" + e);\n        }\n    }\n', '    public void saveHiddenNames(HashSet names) throws SQLException {\n        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();\n        PreparedStatement ps = null;\n        try {\n            conn.setAutoCommit(false);\n            Statement stmt = conn.createStatement();\n            stmt.executeUpdate(""DELETE FROM HIDDENBOARDNAMES"");\n            stmt.close();\n            stmt = null;\n            ps = conn.prepareStatement(""INSERT INTO HIDDENBOARDNAMES (boardname) VALUES (?)"");\n            for (Iterator i = names.iterator(); i.hasNext(); ) {\n                String bName = (String) i.next();\n                ps.setString(1, bName);\n                ps.executeUpdate();\n            }\n            ps.close();\n            conn.commit();\n            conn.setAutoCommit(true);\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, ""Exception during save"", t);\n            try {\n                conn.rollback();\n            } catch (Throwable t1) {\n                logger.log(Level.SEVERE, ""Exception during rollback"", t1);\n            }\n            try {\n                conn.setAutoCommit(true);\n            } catch (Throwable t1) {\n            }\n        } finally {\n            AppLayerDatabase.getInstance().givePooledConnection(conn);\n            try {\n                if (ps != null) ps.close();\n            } catch (Throwable t1) {\n            }\n            ;\n        }\n    }\n']",188,"    public void elimina(Pedido pei) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int url = pei.getId();
        String http;
        Statement estmb = null;
        try {
            gd.begin();
            http = ""DELETE FROM pedido WHERE id="" + url;
            System.out.println(""Ejecutando: "" + http);
            estmb = gd.getConexion().createStatement();
            estmb.executeUpdate(http);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            estmb.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
",1,1,1,-1,"pe,id,sql,stmt","pe:3.0994415283203125e-06,id:8.344650268554688e-07,sql:-3.4570693969726562e-06,stmt:0.0,",4,12,"pe:pei,id:url,stmt:estmb,sql:http,",Greedy,202,0.0926203966140747
146,"['16302957', '12482760', '    private void parse(URL url, String description, boolean qualifiersOnTarget) throws org.xml.sax.SAXException, java.io.IOException {\n        this.qualifiersOnTarget = qualifiersOnTarget;\n        model = new Model(description);\n        if (roughMode) model.setRoughMode(true);\n        DOMParser parser = new DOMParser();\n        parser.setFeature(""http://xml.org/sax/features/validation"", false);\n        parser.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);\n        parser.parse(new InputSource(url.openStream()));\n        Document doc = parser.getDocument();\n        Element documentEl = doc.getDocumentElement();\n        Element contentEl = demandChildElement(documentEl, ""XMI.content"");\n        adapter = Adapter.getAdapter(documentEl);\n        parsePackage(contentEl);\n        if (!packagePath.isEmpty()) throw new IllegalArgumentException();\n        packagePath = null;\n        for (Iterator i = generalizations.iterator(); i.hasNext(); ) parseGeneralization((Element) i.next());\n        generalizations = null;\n        for (Iterator i = associations.keySet().iterator(); i.hasNext(); ) {\n            Element assoel = (Element) i.next();\n            parseAssociation(assoel, (ModelClass) (associations.get(assoel)));\n        }\n        associations = null;\n        for (Iterator i = classElements.keySet().iterator(); i.hasNext(); ) elaborate((ModelClass) (i.next()));\n        classElements = null;\n        if (roughMode) model.determineAllSupertypes(); else model.flatten();\n        url = null;\n    }\n', '    public synchronized void connect() throws FTPConnectionException {\n        checkLocked();\n        try {\n            int reply;\n            this.disconnect();\n            if (isSecured()) {\n                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);\n            } else {\n                this.client = new FTPClient();\n            }\n            if (this.controlEncoding != null) {\n                this.client.setControlEncoding(this.controlEncoding);\n                debug(""control encoding : "", controlEncoding);\n            }\n            Logger.defaultLogger().info(""Trying to connect to server : "" + this.remoteServer + "" ..."");\n            debug(""connect : connect"", remoteServer);\n            client.connect(remoteServer, this.remotePort);\n            Logger.defaultLogger().info(""Received FTP server response : "" + formatFTPReplyString(client.getReplyString()));\n            this.connectionId = Util.getRndLong();\n            reply = client.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                String msg = formatFTPReplyString(client.getReplyString());\n                this.disconnect();\n                throw new FTPConnectionException(""Unable to communicate with remote FTP server. Got message : "" + msg);\n            } else {\n                Logger.defaultLogger().info(""Trying to log in with user : "" + this.login + "" ..."");\n                debug(""connect : login"", login + ""/"" + password);\n                if (!client.login(this.login, this.password)) {\n                    String msg = formatFTPReplyString(client.getReplyString());\n                    this.disconnect();\n                    throw new FTPConnectionException(""Unable to login on FTP server ("" + login + ""/"" + password + ""). Received response : "" + msg);\n                } else {\n                    Logger.defaultLogger().info(""Logged in with user : "" + this.login + "". Received response : "" + formatFTPReplyString(client.getReplyString()));\n                    if (this.passivMode) {\n                        Logger.defaultLogger().info(""Switching to passive mode ..."");\n                        debug(""connect : pasv"");\n                        client.enterLocalPassiveMode();\n                        reply = client.getReplyCode();\n                        if (!FTPReply.isPositiveCompletion(reply)) {\n                            String msg = formatFTPReplyString(client.getReplyString());\n                            this.disconnect();\n                            throw new FTPConnectionException(""Unable to switch to passiv mode. Received response : "" + msg);\n                        } else {\n                            this.updateOpTime();\n                        }\n                    } else {\n                        this.updateOpTime();\n                    }\n                    debug(""connect : bin"");\n                    client.setFileType(FTP.BINARY_FILE_TYPE);\n                    Logger.defaultLogger().info(""Connected to server : "" + this.remoteServer);\n                }\n            }\n        } catch (UnknownHostException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Unknown FTP server : "" + this.remoteServer);\n        } catch (SocketException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());\n        } catch (IOException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());\n        } finally {\n            clearCache();\n        }\n    }\n']",314,"    private void parse(URL file, String filename, boolean qualificationsOntarget) throws org.xml.sax.SAXException, java.io.IOException {
        this.qualificationsOntarget = qualificationsOntarget;
        file = new Model(filename);
        if (roughMode) file.setRoughMode(true);
        DOMParser dd = new DOMParser();
        dd.setFeature(""http://xml.org/sax/features/validation"", false);
        dd.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
        dd.parse(new InputSource(file.openStream()));
        Document df = dd.getDocument();
        Element xmlel = df.getDocumentElement();
        Element xmlEL = demandChildElement(xmlel, ""XMI.content"");
        adapter = Adapter.getAdapter(xmlel);
        parsePackage(xmlEL);
        if (! packageName.isEmpty()) throw new IllegalArgumentException();
         packageName = null;
        for (Iterator f = Generalizes.iterator(); f.hasNext(); ) parseGeneralization((Element) f.next());
        Generalizes = null;
        for (Iterator f = attociation.keySet().iterator(); f.hasNext(); ) {
            Element asseel = (Element) f.next();
            parseAssociation(asseel, (ModelClass) (attociation.get(asseel)));
        }
        attociation = null;
        for (Iterator f = ClassElements.keySet().iterator(); f.hasNext(); ) elaborate((ModelClass) (f.next()));
        ClassElements = null;
        if (roughMode) file.determineAllSupertypes(); else file.flatten();
        file = null;
    }
",0,0,0,-1,"url,description,qualifiersOnTarget,model,parser,doc,documentEl,contentEl,adapter,packagePath,i,generalizations,assoel,associations,classElements","url:4.369020462036133e-05,description:-1.1920928955078125e-06,qualifiersOnTarget:0.0,model:-5.960464477539062e-07,parser:2.384185791015625e-06,doc:-1.4841556549072266e-05,documentEl:0.0,contentEl:0.0,adapter:0.0,packagePath:0.0,i:1.728534698486328e-05,generalizations:0.0,assoel:0.0,associations:0.0,classElements:0.0,",14,45,"url:file,i:f,parser:dd,qualifiersOnTarget:qualificationsOntarget,documentEl:xmlel,contentEl:xmlEL,adapter:adapter,packagePath: packageName,generalizations:Generalizes,assoel:asseel,associations:attociation,classElements:ClassElements,model:file,description:filename,doc:df,",Greedy,642,0.3164271394411723
147,"['20215222', '1332258', '    public static void main(String[] args) {\n        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";\n        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";\n        ShapeFileReader reader = new ShapeFileReader();\n        reader.readFileAndInitialize(in);\n        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());\n        for (Feature ft : reader.getFeatureSet()) {\n            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();\n            for (int i = 0; i < ml.getNumGeometries(); i++) {\n                LineString ls = (LineString) ml.getGeometryN(i);\n                Point start = ls.getStartPoint();\n                checkIt(start, quad);\n                Point end = ls.getEndPoint();\n                checkIt(end, quad);\n            }\n        }\n        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);\n    }\n', '    public void writeTo(OutputStream out) throws IOException {\n        if (!closed) {\n            throw new IOException(""Stream not closed"");\n        }\n        if (isInMemory()) {\n            memoryOutputStream.writeTo(out);\n        } else {\n            FileInputStream fis = new FileInputStream(outputFile);\n            try {\n                IOUtils.copy(fis, out);\n            } finally {\n                IOUtils.close(fis);\n            }\n        }\n    }\n']",197,"    public static void main(String[] args) {
        String url = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";
        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(url);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
",1,1,0,1,"in,out,reader,quad,ft,ml,i,ls,start,end","in:0.002412259578704834,out:0.00045233964920043945,reader:0.0015003085136413574,quad:5.227327346801758e-05,ft:0.00042051076889038086,ml:8.082389831542969e-05,i:-0.0010707974433898926,ls:-8.988380432128906e-05,start:0.00020450353622436523,end:6.270408630371094e-05,",1,2,"in:url,",Greedy,68,0.033629631996154784
148,"['3046105', '19687459', '    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {\n        List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));\n        qparams.add(new BasicNameValuePair(""key"", this.key));\n        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");\n        URI uri = new URI(url);\n        HttpGet httpget = new HttpGet(uri);\n        HttpResponse response = httpClient.execute(httpget);\n        int status = response.getStatusLine().getStatusCode();\n        errorCheck(response, status);\n        InputStream content = response.getEntity().getContent();\n        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);\n        return licenses;\n    }\n', '    @SuppressWarnings(""deprecation"")\n    public void testMemberIterator() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));\n        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember0 = iter.next();\n        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());\n        assertEquals(""wrong 1k member count"", 1024, count0);\n        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());\n        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember1 = iter.next();\n        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());\n        assertEquals(""wrong 32k member count"", (32 * 1024), count1);\n        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());\n        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember2 = iter.next();\n        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());\n        assertEquals(""wrong 1-byte member count"", 1, count2);\n        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());\n        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());\n        assertTrue(iter.hasNext());\n        GZIPMembersInputStream gzMember3 = iter.next();\n        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());\n        assertEquals(""wrong 5-byte member count"", 5, count3);\n        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());\n        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());\n        assertFalse(iter.hasNext());\n    }\n']",159,"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> iqresult = new ArrayList<NameValuePair>();
        iqresult.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        iqresult.add(new BasicNameValuePair(""key"", this.key));
        String rule = REST_URL + ""?"" + URLEncodedUtils.format(iqresult, ""UTF-8"");
        URI resource = new URI(rule);
        HttpGet HttpGet = new HttpGet(resource);
        HttpResponse success = httpClient.execute(HttpGet);
        int warning = success.getStatusLine().getStatusCode();
        errorCheck(success, warning);
        InputStream resources = success.getEntity().getContent();
        GGLicenses compentials = JAXB.unmarshal(resources, GGLicenses.class);
        return compentials;
    }
",0,0,0,-1,"qparams,url,uri,httpget,response,status,content,licenses","qparams:0.0,url:5.3048133850097656e-05,uri:2.9802322387695312e-06,httpget:0.0,response:3.8623809814453125e-05,status:1.1801719665527344e-05,content:1.2755393981933594e-05,licenses:0.0,",8,20,"url:rule,response:success,content:resources,status:warning,uri:resource,qparams:iqresult,httpget:HttpGet,licenses:compentials,",Greedy,306,0.1411561886469523
149,"['1218380', '22261730', '    public static void main(String[] args) {\n        try {\n            Object o = Naming.lookup(""Server"");\n            IServer serverStub = (IServer) o;\n            File srcDir = new File(args[0]);\n            File dstDir = new File(args[1]);\n            File[] srcFiles = srcDir.listFiles();\n            long position = 0;\n            for (File f : srcFiles) {\n                if (f.isDirectory()) continue;\n                try {\n                    FileChannel srcChannel = new FileInputStream(f).getChannel();\n                    String fileName = dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();\n                    FileChannel dstChannel = new FileOutputStream(fileName).getChannel();\n                    System.out.println(""Coping "" + fileName);\n                    ByteBuffer buffer = ByteBuffer.allocate(65536);\n                    int nr = 0;\n                    srcChannel.position(nr);\n                    nr = srcChannel.read(buffer);\n                    while (nr > -1) {\n                        buffer.flip();\n                        byte[] bytes = new byte[buffer.limit()];\n                        buffer.get(bytes);\n                        position = serverStub.write(bytes, position);\n                        buffer.clear();\n                        nr = srcChannel.read(buffer);\n                    }\n                    System.out.println(""Done "");\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static boolean fileCopy(String sFileSrc, String sFileDst) {\n        boolean ok = true;\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            File fSrc = new File(sFileSrc);\n            int len = 32768;\n            byte[] buff = new byte[(int) Math.min(len, fSrc.length())];\n            fis = new FileInputStream(fSrc);\n            boolean append = false;\n            fos = new FileOutputStream(sFileDst, append);\n            while (0 < (len = fis.read(buff))) fos.write(buff, 0, len);\n            fos.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n            ok = false;\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                    JdxLog.logError(ex);\n                }\n            }\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                    JdxLog.logError(ex);\n                }\n            }\n        }\n        return ok;\n    }\n']",323,"    public static void main(String[] args) {
        try {
            Object or = Naming.lookup(""Server"");
            IServer serverstUB = (IServer) or;
            File srcDir = new File(args[0]);
            File drcFolder = new File(args[1]);
            File[] sourceDir = srcDir.listFiles();
            long page = 0;
            for (File f : sourceDir) {
                if (f.isDirectory()) continue;
                try {
                    FileChannel remoteClient = new FileInputStream(f).getChannel();
                    String fUrl = drcFolder.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();
                    FileChannel ddestConnection = new FileOutputStream(fUrl).getChannel();
                    System.out.println(""Coping "" + fUrl);
                    ByteBuffer buffer = ByteBuffer.allocate(65536);
                    int counter = 0;
                    remoteClient.page(counter);
                    counter = remoteClient.read(buffer);
                    while (counter > -1) {
                        buffer.flip();
                        byte[] bc = new byte[buffer.limit()];
                        buffer.get(bc);
                        page = serverstUB.write(bc, page);
                        buffer.clear();
                        counter = remoteClient.read(buffer);
                    }
                    System.out.println(""Done "");
                    remoteClient.close();
                    ddestConnection.close();
                } catch (IOException e) {
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (NotBoundException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"o,serverStub,srcDir,dstDir,srcFiles,position,f,srcChannel,fileName,dstChannel,buffer,nr,bytes","o:1.9371509552001953e-05,serverStub:0.0,srcDir:0.0,dstDir:0.0,srcFiles:0.0,position:-1.5497207641601562e-06,f:5.7637691497802734e-05,srcChannel:0.0,fileName:0.0,dstChannel:0.0,buffer:1.901388168334961e-05,nr:1.7881393432617188e-06,bytes:9.59634780883789e-06,",10,30,"f:f,o:or,buffer:buffer,bytes:bc,nr:counter,serverStub:serverstUB,srcDir:srcDir,dstDir:drcFolder,srcFiles:sourceDir,srcChannel:remoteClient,fileName:fUrl,dstChannel:ddestConnection,position:page,",Greedy,562,0.2674111247062683
150,"['5229696', '18519247', '    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {\n        HttpsURLConnection con;\n        try {\n            URL url = new URL(feedUrl);\n            con = (HttpsURLConnection) url.openConnection();\n            con.setRequestMethod(httpMethod);\n            if (headers != null && !headers.isEmpty()) {\n                for (String key : headers.keySet()) {\n                    con.setRequestProperty(key, headers.get(key));\n                }\n            }\n        } catch (IOException e) {\n            throw new BuzzIOException(e);\n        }\n        return con;\n    }\n', '    public List<PathObject> fetchPath(PathObject parent) throws NetworkException {\n        if (parent.isFetched()) {\n            return parent.getChildren();\n        } else if (!""d"".equals(parent.getType())) {\n            return null;\n        }\n        HttpClient client = HttpConfig.newInstance();\n        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN + parent.getPath());\n        try {\n            HttpResponse response = client.execute(get);\n            HttpEntity entity = response.getEntity();\n            Document doc = XmlOperator.readDocument(entity.getContent());\n            BBSBodyParseHelper.parsePathList(doc, parent);\n            return parent.getChildren();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n']",115,"    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> ers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (ers != null && !ers.isEmpty()) {
                for (String element : ers.keySet()) {
                    con.setRequestProperty(element, ers.get(element));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
",0,0,0,-1,"feedUrl,httpMethod,headers,con,url,key","feedUrl:0.0,httpMethod:0.0,headers:1.1920928955078125e-06,con:2.384185791015625e-06,url:1.1682510375976562e-05,key:5.960464477539062e-07,",2,8,"url:url,con:con,headers:ers,key:element,feedUrl:feedUrl,httpMethod:httpMethod,",Greedy,279,0.11373140017191569
151,"['18354823', '14647876', '    private String storeEditionFile(InputStream in) throws IOException {\n        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;\n        File attachmentsDir = new File(datadir);\n        attachmentsDir.mkdirs();\n        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);\n        FileOutputStream out = new FileOutputStream(storedEditionFile);\n        IOUtils.copyLarge(in, out);\n        IOUtils.closeQuietly(out);\n        IOUtils.closeQuietly(in);\n        return storedEditionFile.getAbsolutePath();\n    }\n', '    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {\n        File fromFile = fromFileName.toFile();\n        File toFile = toFileName.toFile();\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFileName);\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        }\n        InputStream from = null;\n        OutputStream to = null;\n        try {\n            from = new BufferedInputStream(new FileInputStream(fromFile));\n            to = new BufferedOutputStream(new FileOutputStream(toFile));\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",106,"    private String storeEditionFile(InputStream in) throws IOException {
        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;
        File attachmentsDir = new File(datadir);
        attachmentsDir.mkdirs();
        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);
        FileOutputStream out = new FileOutputStream(storedEditionFile);
        IOUtils.copyLarge(in, out);
        IOUtils.closeQuietly(out);
        IOUtils.closeQuietly(in);
        return storedEditionFile.getAbsolutePath();
    }
",1,1,1,-1,"in,datadir,attachmentsDir,storedEditionFile,out","in:-1.6450881958007812e-05,datadir:0.0,attachmentsDir:0.0,storedEditionFile:0.0,out:-5.662441253662109e-06,",0,0,"datadir:datadir,attachmentsDir:attachmentsDir,storedEditionFile:storedEditionFile,out:out,in:in,",Greedy,269,0.11153105894724528
152,"['12039035', '23299412', '    public static ArrayList<Principal> importPrincipals(String urlString) {\n        ArrayList<Principal> results = new ArrayList<Principal>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(""</Principal>"")) {\n                    Principal principal = ProfileParser.parsePrincipal(buff.toString());\n                    results.add(principal);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n        }\n        return results;\n    }\n', '    public List<String> getLinks(String url) {\n        List<String> links = new ArrayList<String>();\n        try {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n            String s;\n            StringBuilder builder = new StringBuilder();\n            while ((s = bufferedReader.readLine()) != null) {\n                builder.append(s);\n            }\n            Matcher tagmatch = htmltag.matcher(builder.toString());\n            while (tagmatch.find()) {\n                Matcher matcher = link.matcher(tagmatch.group());\n                matcher.find();\n                String link = matcher.group().replaceFirst(""href=\\"""", """").replaceFirst(""\\"">"", """");\n                if (valid(link)) {\n                    links.add(makeAbsolute(url, link));\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return links;\n    }\n']",165,"    public static ArrayList<Principal> importPrincipals(String httpUrl) {
        ArrayList<Principal> response = new ArrayList<Principal>();
        try {
            URL connection = new URL(httpUrl);
            BufferedReader fe = new BufferedReader(new InputStreamReader(connection.openStream()));
            StringBuffer boot = new StringBuffer();
            String parse;
            while ((parse = fe.readLine()) != null) {
                boot.append(parse);
                if (parse.equals(""</Principal>"")) {
                    Principal pripiple = ProfileParser.parsePrincipal(boot.toString());
                    response.add(pripiple);
                    boot = new StringBuffer();
                } else {
                    boot.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return response;
    }
",1,1,1,-1,"urlString,results,url,in,buff,line,principal","urlString:0.0,results:-7.033348083496094e-06,url:0.00017654895782470703,in:-5.1021575927734375e-05,buff:-1.430511474609375e-06,line:-8.821487426757812e-05,principal:0.0,",7,20,"url:connection,urlString:httpUrl,principal:pripiple,buff:boot,results:response,in:fe,line:parse,",Greedy,338,0.14170692761739095
153,"['16870482', '23213941', '    private void populateSessionId() throws IOException, java.net.MalformedURLException {\n        String general_search_url = ""http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?"" + ""DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB"";\n        String sidString = """", inputLine;\n        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_search_url)).openStream()));\n        while ((inputLine = in.readLine()) != null) {\n            if (inputLine.startsWith(""<INPUT TYPE=HIDDEN NAME=PID VALUE="")) {\n                sidString = (inputLine.substring(inputLine.indexOf(""PID VALUE="") + 11, inputLine.indexOf("">"") - 1));\n            }\n        }\n        sessionId = Integer.parseInt(sidString.trim());\n    }\n', '    @Override\n    protected void writeSnapshot(final String message, final String details) {\n        try {\n            final URL url = proxyAddress == null ? new URL(url_spec) : new URL(""http"", proxyAddress, proxyPort, url_spec);\n            LOG.info(""connect to "" + url);\n            final URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            final HttpQueryWriter out = new HttpQueryWriter(connection.getOutputStream());\n            out.addParameter(""error"", message);\n            out.addParameter(""trace"", details);\n            out.close();\n            final InputStream in = connection.getInputStream();\n            int c;\n            final StringBuffer result = new StringBuffer();\n            while ((c = in.read()) != -1) {\n                result.append((char) c);\n            }\n            LOG.info(result);\n            in.close();\n        } catch (final UnknownHostException e) {\n            LOG.info(""could not find host (unknown host) to submit log to"");\n        } catch (final IOException e) {\n            LOG.debug(""i/o problem submitting log"", e);\n        }\n    }\n']",130,"    private void populateSessionId() throws IOException, java.net.MalformedURLException {
        String general_Search_field = ""http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?"" + ""DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB"";
        String sessionService = """", inLine;
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_Search_field)).openStream()));
        while ((inLine = in.readLine()) != null) {
            if (inLine.startsWith(""<INPUT TYPE=HIDDEN NAME=PID VALUE="")) {
                sessionService = (inLine.substring(inLine.indexOf(""PID VALUE="") + 11, inLine.indexOf("">"") - 1));
            }
        }
         sessionInfo = Integer.parseInt(sessionService.trim());
    }
",0,0,0,-1,"general_search_url,inputLine,in,sidString,sessionId","general_search_url:0.0,inputLine:0.0,in:6.616115570068359e-06,sidString:0.0,sessionId:0.0,",4,12,"in:in,general_search_url:general_Search_field,inputLine:inLine,sidString:sessionService,sessionId: sessionInfo,",Greedy,176,0.09548197189966838
154,"['8006559', '11066054', '    private final void findSubclasses(URL location, String packageName, Class superClass, Set setOfClasses) {\n        synchronized (results) {\n            String fqcn = searchClass.getName();\n            List knownLocations = new ArrayList();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = (URL) knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    File[] files = directory.listFiles(CLASSES_ONLY);\n                    for (int i = 0; i < files.length; i++) {\n                        String filename = files[i].getName();\n                        String classname = filename.substring(0, filename.length() - 6);\n                        try {\n                            if (!fqcn.equals(packageName + ""."" + classname)) {\n                                Class c = callClassForName(packageName + ""."" + classname);\n                                manageClass(setOfClasses, superClass, c, url);\n                            }\n                        } catch (Throwable t) {\n                            errors.add(t);\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = (JarEntry) e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(""/"")) classname = classname.substring(1);\n                                classname = classname.replace(\'/\', \'.\');\n                                try {\n                                    if (!fqcn.equals(classname)) {\n                                        Class c = callClassForName(classname);\n                                        manageClass(setOfClasses, superClass, c, url);\n                                    }\n                                } catch (Throwable t) {\n                                    errors.add(t);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n        }\n    }\n', '    private static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) {\n            if (force) {\n                dest.delete();\n            } else {\n                throw new IOException(""Cannot overwrite existing file: "" + dest.getName());\n            }\n        }\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } finally {\n                    if (out != null) {\n                        out.close();\n                    }\n                }\n            }\n        }\n    }\n']",423,"    private final void findSubclasses(URL document, String packageName, Class superClass, Set setOfClasses) {
        synchronized (results) {
            String fqcn = searchClass.getName();
            List knownLocations = new ArrayList();
            knownLocations.add(document);
            for (int lit = 0; lit < knownLocations.size(); lit++) {
                URL file = (URL) knownLocations.get(lit);
                File directory = new File(file.getFile());
                if (directory.exists()) {
                    File[] file = directory.listFiles(CLASSES_ONLY);
                    for (int i = 0; i < file.length; i++) {
                        String file = file[i].getName();
                        String classname = file.substring(0, file.length() - 6);
                        try {
                            if (!fqcn.equals(packageName + ""."" + classname)) {
                                Class c = callClassForName(packageName + ""."" + classname);
                                manageClass(setOfClasses, superClass, c, file);
                            }
                        } catch (Throwable t) {
                            errors.add(t);
                        }
                    }
                } else {
                    try {
                        JarURLConnection conf = (JarURLConnection) file.openConnection();
                        JarFile jarFile = conf.getJarFile();
                        Enumeration e = jarFile.entries();
                        while (e.hasMoreElements()) {
                            JarEntry entry = (JarEntry) e.nextElement();
                            String entryname = entry.getName();
                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {
                                String classname = entryname.substring(0, entryname.length() - 6);
                                if (classname.startsWith(""/"")) classname = classname.substring(1);
                                classname = classname.replace('/', '.');
                                try {
                                    if (!fqcn.equals(classname)) {
                                        Class c = callClassForName(classname);
                                        manageClass(setOfClasses, superClass, c, file);
                                    }
                                } catch (Throwable t) {
                                    errors.add(t);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
        }
    }
",0,0,1,1,"location,packageName,superClass,setOfClasses,fqcn,knownLocations,loc,url,directory,files,i,filename,classname,c,conn,jarFile,e,entry,entryname","location:8.344650268554688e-07,packageName:0.0,superClass:0.0,setOfClasses:0.0,fqcn:0.0,knownLocations:0.0,loc:7.152557373046875e-07,url:1.1086463928222656e-05,directory:4.76837158203125e-07,files:7.152557373046875e-07,i:-2.0265579223632812e-06,filename:8.344650268554688e-07,classname:0.0,c:-3.5762786865234375e-07,conn:2.5033950805664062e-06,jarFile:0.0,e:-2.384185791015625e-07,entry:3.5762786865234375e-07,entryname:0.0,",6,19,"url:file,conn:conf,location:document,filename:file,loc:lit,files:file,",Greedy,342,0.1528075059254964
155,"['7902699', '15605423', '    public static List<String> getLevelIndex(URL fetchUrl) {\n        List<String> levelNames = new ArrayList<String>();\n        BufferedReader bufferedreader;\n        try {\n            URLConnection urlconnection = fetchUrl.openConnection();\n            urlconnection.setConnectTimeout(30000);\n            if (urlconnection.getContentEncoding() != null) {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));\n            } else {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));\n            }\n        } catch (IOException _ex) {\n            System.err.println(""HexTD::readFile:: Can\'t read from "" + fetchUrl);\n            return levelNames;\n        }\n        String sLine1;\n        try {\n            while ((sLine1 = bufferedreader.readLine()) != null) {\n                if (sLine1.trim().length() != 0) {\n                    levelNames.add(sLine1);\n                }\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return levelNames;\n    }\n', '    private static void generateGIF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {\n        System.out.println(""ImageCropper.generateGIF begin"");\n        MapContext map_context = new MapContext(""test"", new Configuration());\n        try {\n            Map map = new Map(map_context, area_label, new Configuration());\n            map.setCoordSys(ProjectionCategories.default_coordinate_system);\n            map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));\n            String type = null;\n            RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));\n            map.addLayer(rlayer, true);\n            map.setBounds2DImage(bounds, true);\n            Dimension image_dim = null;\n            image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);\n            if (output_maximum_size > 0) {\n                double width_factor = image_dim.getWidth() / output_maximum_size;\n                double height_factor = image_dim.getHeight() / output_maximum_size;\n                double factor = Math.max(width_factor, height_factor);\n                if (factor > 1.0) {\n                    image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);\n                }\n            }\n            map.setImageDimension(image_dim);\n            map.scale();\n            image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());\n            Image image = null;\n            Graphics gr = null;\n            image = ImageCreator.getImage(image_dim);\n            gr = image.getGraphics();\n            try {\n                map.paint(gr);\n            } catch (Exception e) {\n                Debug.println(""map.paint error: "" + e.getMessage());\n            }\n            String gif_filename = """";\n            try {\n                gif_filename = formatPath(category, timeseries, output_filename);\n                new File(new_filename).mkdirs();\n                new GifEncoder(image, new FileOutputStream(gif_filename)).encode();\n            } catch (IOException e) {\n                Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());\n                throw new IOException(""GenerateGIF.IOException: "" + e);\n            }\n            PreparedStatement pstmt = null;\n            try {\n                String delete_raster = ""delete raster_layer where "" + ""label=\'"" + gif_name.trim() + ""\' and category=\'"" + category.trim() + ""\' and area_code=\' "" + area_code.trim() + ""\'"";\n                pstmt = con.prepareStatement(delete_raster);\n                boolean del = pstmt.execute();\n                pstmt.close();\n                String insert_raster = ""insert into RASTER_LAYER "" + ""values(RASTER_LAYER_ID.nextval, ?, ?, ?, "" + ""?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "" + ""SYSDATE, ?)"";\n                pstmt = con.prepareStatement(insert_raster);\n                pstmt.setString(1, gif_name);\n                pstmt.setString(2, category);\n                pstmt.setString(3, area_code);\n                pstmt.setString(4, topic_code);\n                if (time == null) {\n                    pstmt.setNull(5, java.sql.Types.DATE);\n                } else {\n                    pstmt.setDate(5, new java.sql.Date(time.getTimeInMillis()));\n                }\n                pstmt.setString(6, timeseries);\n                pstmt.setString(7, gif_filename);\n                pstmt.setNull(8, java.sql.Types.INTEGER);\n                pstmt.setNull(9, java.sql.Types.INTEGER);\n                pstmt.setDouble(10, raster_bounds.getX());\n                pstmt.setDouble(11, raster_bounds.getY());\n                pstmt.setDouble(12, raster_bounds.getWidth());\n                pstmt.setDouble(13, raster_bounds.getHeight());\n                pstmt.setString(14, note);\n                int sequence = 0;\n                if (gif_name.endsWith(""DP"")) {\n                    sequence = 1;\n                } else if (gif_name.endsWith(""DY"")) {\n                    sequence = 2;\n                } else if (gif_name.endsWith(""DA"")) {\n                    sequence = 3;\n                }\n                pstmt.setInt(15, sequence);\n                pstmt.executeUpdate();\n            } catch (SQLException e) {\n                Debug.println(""SQLException occurred e: "" + e.getMessage());\n                con.rollback();\n                throw new SQLException(""GenerateGIF.SQLException: "" + e);\n            } finally {\n                pstmt.close();\n            }\n        } catch (Exception e) {\n            Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());\n        }\n        System.out.println(""ImageCropper.generateGIF end"");\n    }\n']",208,"    public static List<String> getLevelIndex(URL fetchUrl) {
        List<String> listNs = new ArrayList<String>();
        BufferedReader  bufferedReader;
        try {
            URLConnection httpconn = fetchUrl.openConnection();
            httpconn.setConnectTimeout(30000);
            if (httpconn.getContentEncoding() != null) {
                 bufferedReader = new BufferedReader(new InputStreamReader(httpconn.getInputStream(), httpconn.getContentEncoding()));
            } else {
                 bufferedReader = new BufferedReader(new InputStreamReader(httpconn.getInputStream(), ""utf-8""));
            }
        } catch (IOException _ex) {
            System.err.println(""HexTD::readFile:: Can't read from "" + fetchUrl);
            return listNs;
        }
        String  sLineU;
        try {
            while (( sLineU =  bufferedReader.readLine()) != null) {
                if ( sLineU.trim().length() != 0) {
                    listNs.add( sLineU);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listNs;
    }
",0,0,0,-1,"fetchUrl,levelNames,bufferedreader,urlconnection,sLine1","fetchUrl:0.0,levelNames:0.0,bufferedreader:0.0,urlconnection:0.0,sLine1:0.0,",4,18,"fetchUrl:fetchUrl,levelNames:listNs,bufferedreader: bufferedReader,urlconnection:httpconn,sLine1: sLineU,",Greedy,291,0.12496673663457235
156,"['21750197', '1274215', '    public static byte[] getBytesFromURL(URL url) throws IOException {\n        byte[] b;\n        URLConnection con = url.openConnection();\n        int size = con.getContentLength();\n        InputStream s = con.getInputStream();\n        try {\n            if (size <= 0) b = IOUtil.getBytesFromStream(s); else {\n                b = new byte[size];\n                int len = 0;\n                do {\n                    int n = s.read(b, len, size - len);\n                    if (n < 0) throw new IOException(""the stream was closed: "" + url.toString());\n                    len += n;\n                } while (len < size);\n            }\n        } finally {\n            s.close();\n        }\n        return b;\n    }\n', '    public static void main(String[] args) {\n        try {\n            if (args.length < 2) {\n                System.err.println(""usage: test [src] [dest]"");\n                return;\n            }\n            FileInputStream in = new FileInputStream(args[0]);\n            FileOutputStream out = new FileOutputStream(args[1]);\n            FileChannel src = in.getChannel();\n            FileChannel channel = out.getChannel();\n            long pos = 0, len = src.size(), ret;\n            while (len > 0) {\n                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;\n                len -= ret;\n                pos += ret;\n            }\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",143,"    public static byte[] getBytesFromURL(URL ssl) throws IOException {
        byte[] obj;
        URLConnection con = ssl.openConnection();
        int body = con.getContentLength();
        InputStream aws = con.getInputStream();
        try {
            if (body <= 0) obj = IOUtil.getBytesFromStream(aws); else {
                obj = new byte[body];
                int limit = 0;
                do {
                    int length = aws.read(obj, limit, body - limit);
                    if (length < 0) throw new IOException(""the stream was closed: "" + ssl.toString());
                    limit += length;
                } while (limit < body);
            }
        } finally {
            aws.close();
        }
        return obj;
    }
",0,0,0,-1,"url,b,con,size,s,len,n","url:0.00023287534713745117,b:0.00011545419692993164,con:1.2516975402832031e-06,size:-2.5928020477294922e-05,s:-6.818771362304688e-05,len:4.035234451293945e-05,n:4.798173904418945e-05,",6,25,"url:ssl,b:obj,n:length,len:limit,con:con,size:body,s:aws,",Greedy,377,0.1572635014851888
157,"['11444436', '20292404', '    public void run() {\n        try {\n            FTPClient c = new FTPClient();\n            c.configure(ftpConfig);\n            logger.debug(""Trying to connect"");\n            c.connect(""127.0.0.1"", 21211);\n            logger.debug(""Connected"");\n            c.setSoTimeout(5000);\n            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {\n                logger.debug(""Houston, we have a problem. D/C"");\n                c.disconnect();\n                throw new Exception();\n            }\n            if (c.login(""drftpd"", ""drftpd"")) {\n                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");\n                _sc.addSuccess();\n                Thread.sleep(5000);\n                c.disconnect();\n            } else {\n                logger.debug(""Login failed, D/C!"");\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            logger.debug(e, e);\n            _sc.addFailure();\n        }\n        logger.debug(""exiting"");\n    }\n', '    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {\n        File inputFile = null;\n        File outputFile = null;\n        try {\n            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());\n            OutputStream inputFileStream = null;\n            try {\n                inputFileStream = new FileOutputStream(inputFile);\n                IOUtils.copy(inputStream, inputFileStream);\n            } finally {\n                IOUtils.closeQuietly(inputFileStream);\n            }\n            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());\n            convert(inputFile, inputFormat, outputFile, outputFormat);\n            InputStream outputFileStream = null;\n            try {\n                outputFileStream = new FileInputStream(outputFile);\n                IOUtils.copy(outputFileStream, outputStream);\n            } finally {\n                IOUtils.closeQuietly(outputFileStream);\n            }\n        } catch (IOException ioException) {\n            throw new OpenOfficeException(""conversion failed"", ioException);\n        } finally {\n            if (inputFile != null) {\n                inputFile.delete();\n            }\n            if (outputFile != null) {\n                outputFile.delete();\n            }\n        }\n    }\n']",192,"    public void run() {
        try {
            FTPClient ci = new FTPClient();
            ci.configure(ftpConfig);
            logger.debug(""Trying to connect"");
            ci.connect(""127.0.0.1"", 21211);
            logger.debug(""Connected"");
            ci.setSoTimeout(5000);
            if (!FTPReply.isPositiveCompletion(ci.getReplyCode())) {
                logger.debug(""Houston, we have a problem. D/C"");
                ci.disconnect();
                throw new Exception();
            }
            if (ci.login(""drftpd"", ""drftpd"")) {
                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");
                _sc.addSuccess();
                Thread.sleep(5000);
                ci.disconnect();
            } else {
                logger.debug(""Login failed, D/C!"");
                throw new Exception();
            }
        } catch (Exception e) {
            logger.debug(e, e);
            _sc.addFailure();
        }
        logger.debug(""exiting"");
    }
",0,0,0,-1,c,"c:1.2755393981933594e-05,",1,8,"c:ci,",Greedy,63,0.039111983776092527
158,"['6925921', '7993946', '    public static void bubbleSort(int[] polje) {\n        boolean swapped;\n        int temp;\n        int n = polje.length;\n        do {\n            swapped = false;\n            n--;\n            for (int i = 0; i < n - 1; i++) {\n                if (polje[i] > polje[i + 1]) {\n                    temp = polje[i];\n                    polje[i] = polje[i + 1];\n                    polje[i + 1] = temp;\n                    swapped = true;\n                }\n            }\n        } while (swapped);\n    }\n', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n']",106,"    public static void bubbleSort(int[] parte) {
        boolean swoped;
        int data;
        int nan = parte.length;
        do {
            swoped = false;
            nan--;
            for (int i = 0; i < nan - 1; i++) {
                if (parte[i] > parte[i + 1]) {
                    data = parte[i];
                    parte[i] = parte[i + 1];
                    parte[i + 1] = data;
                    swoped = true;
                }
            }
        } while (swoped);
    }
",0,0,0,-1,"polje,swapped,temp,n,i","polje:0.0,swapped:0.0,temp:-0.005640864372253418,n:-0.00210493803024292,i:-0.019232094287872314,",4,18,"polje:parte,swapped:swoped,n:nan,temp:data,i:i,",Greedy,277,0.11371015707651774
159,"['2940068', '2525895', '    public void run() {\n        checkupdates.BetaST.setText("""");\n        checkupdates.stableST.setText("""");\n        \n        String[] s = new String[7];\n       int i=0;\n        try {\n            \n            URL url = new URL(""http://memorize-words.sourceforge.net/latest.txt"");\n            \n            BufferedReader in = new BufferedReader(new\n                    InputStreamReader(url.openStream()));\n            String str;\n           \n            while (((str = in.readLine()) != null)&&(i<7)) {\n                \n                s[i]=str;\n                i++;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n       if (i<5) \n       { checkupdates.CheckBT.setEnabled(true);\n           return;\n       }\n       //S[0]=latest Beta version\n       //S[1]=latest Stable version\n       //s[2]=Beta version download path\n       //s[3]=Stable version download path\n       //s[4]= Beta name\n       //s[5]=Stable name\n       boolean updated=false;\n       if ((MF.CurVersion<Integer.parseInt(s[0]))&&(checkupdates.BetaCHK.isSelected()))\n       {\n       checkupdates.BetaST.setText(""<HTML>A newer BETA version (<b>""+s[4]+""</b>) is available at<BR> <a href=\'\'>""+s[2]+""</a></HTML>"");\n       updated=true;\n       checkupdates.hasBeta=true;\n       checkupdates.BetaURL=s[2];\n       }else\n           checkupdates.BetaST.setText("""");\n           \n       if ((MF.CurVersion<Integer.parseInt(s[1]))&&(checkupdates.StableCHK.isSelected()))\n       {\n       checkupdates.stableST.setText(""<HTML>A newer STABLE version (<b>""+s[5]+""</b>) is available at<BR> <a href=\'\'>""+s[3]+""</a></HTML>"");\n       updated=true;\n       checkupdates.hasStable=true;\n       checkupdates.StableURL=s[3];\n       }\n       else\n           checkupdates.stableST.setText("""");\n       \n       if (updated)\n           checkupdates.setVisible(true);\n       checkupdates.CheckBT.setEnabled(true);\n       // ""A newer stable version (memorize-words 1-2-2) is available at http://""\n       //   MF.CurVersion;\n    }\n', '    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(DIGEST);\n            SecureRandom random = SecureRandom.getInstance(RANDOM);\n            digester.reset();\n            for (int i = 0; i < ITERATIONS; i++) {\n                digester.update(salt);\n                digester.update(cryptPassword.getBytes(""UTF-8""));\n            }\n            byte[] hash = digester.digest();\n            random.setSeed(hash);\n            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n            generator.init(maxKeySize, random);\n            SecretKey key = generator.generateKey();\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherOut = cipher.doFinal(credentials);\n            byte[] ret = new byte[salt.length + cipherOut.length];\n            System.arraycopy(salt, 0, ret, 0, salt.length);\n            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);\n            return ret;\n        } catch (Exception e) {\n            StorePlugin.getDefault().log(e);\n        }\n        return new byte[0];\n    }\n']",353,"    public void run() {
        checkoffdates.BetaST.setText("""");
        checkoffdates.stableST.setText("""");
        
        String[] ssl = new String[7];
       int z=0;
        try {
            
            URL ls = new URL(""http://memorize-words.sourceforge.net/latest.txt"");
            
            BufferedReader ini = new BufferedReader(new
                    InputStreamReader(ls.openStream()));
            String line;
           
            while (((line = ini.readLine()) != null)&&(z<7)) {
                
                ssl[z]=line;
                z++;
            }
            ini.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
       if (z<5) 
       { checkoffdates.CheckBT.setEnabled(true);
           return;
       }
       //S[0]=latest Beta version
       //S[1]=latest Stable version
       //s[2]=Beta version download path
       //s[3]=Stable version download path
       //s[4]= Beta name
       //s[5]=Stable name
       boolean Update=false;
       if ((MF.CurVersion<Integer.parseInt(ssl[0]))&&(checkoffdates.BetaCHK.isSelected()))
       {
       checkoffdates.BetaST.setText(""<HTML>A newer BETA version (<b>""+ssl[4]+""</b>) is available at<BR> <a href=''>""+ssl[2]+""</a></HTML>"");
       Update=true;
       checkoffdates.hasBeta=true;
       checkoffdates.BetaURL=ssl[2];
       }else
           checkoffdates.BetaST.setText("""");
           
       if ((MF.CurVersion<Integer.parseInt(ssl[1]))&&(checkoffdates.StableCHK.isSelected()))
       {
       checkoffdates.stableST.setText(""<HTML>A newer STABLE version (<b>""+ssl[5]+""</b>) is available at<BR> <a href=''>""+ssl[3]+""</a></HTML>"");
       Update=true;
       checkoffdates.hasStable=true;
       checkoffdates.StableURL=ssl[3];
       }
       else
           checkoffdates.stableST.setText("""");
       
       if (Update)
           checkoffdates.setVisible(true);
       checkoffdates.CheckBT.setEnabled(true);
       // ""A newer stable version (memorize-words 1-2-2) is available at http://""
       //   MF.CurVersion;
    }
",0,0,0,-1,"s,i,url,in,str,checkupdates,BetaURL,StableURL,updated","s:0.00015985965728759766,i:-0.00019931793212890625,url:0.00036901235580444336,in:5.4836273193359375e-05,str:0.00012296438217163086,checkupdates:0.0,BetaURL:0.0,StableURL:0.0,updated:4.315376281738281e-05,",7,42,"url:ls,s:ssl,str:line,in:ini,updated:Update,checkupdates:checkoffdates,BetaURL:BetaURL,StableURL:StableURL,i:z,",Greedy,601,0.2768876552581787
160,"['2525895', '14356579', '    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(DIGEST);\n            SecureRandom random = SecureRandom.getInstance(RANDOM);\n            digester.reset();\n            for (int i = 0; i < ITERATIONS; i++) {\n                digester.update(salt);\n                digester.update(cryptPassword.getBytes(""UTF-8""));\n            }\n            byte[] hash = digester.digest();\n            random.setSeed(hash);\n            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n            generator.init(maxKeySize, random);\n            SecretKey key = generator.generateKey();\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherOut = cipher.doFinal(credentials);\n            byte[] ret = new byte[salt.length + cipherOut.length];\n            System.arraycopy(salt, 0, ret, 0, salt.length);\n            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);\n            return ret;\n        } catch (Exception e) {\n            StorePlugin.getDefault().log(e);\n        }\n        return new byte[0];\n    }\n', '    public String getRandomGUID() {\n        MessageDigest md5 = null;\n        String valueBeforeMD5 = """";\n        String retValue = """";\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            InetAddress id = InetAddress.getLocalHost();\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            rand = random.nextLong();\n            sbValueBeforeMD5.append(id.toString());\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            retValue = sb.toString();\n        } catch (UnknownHostException e) {\n            System.out.println(""Error:"" + e);\n        }\n        return retValue;\n    }\n']",258,"    public static byte[] encode(String cryptPass, byte[] cryptentials, byte[] psulator) {
        try {
            MessageDigest genercher = MessageDigest.getInstance(DIGEST);
            SecureRandom auto = SecureRandom.getInstance(RANDOM);
            genercher.reset();
            for (int uri = 0; uri < ITERATIONS; uri++) {
                genercher.update(psulator);
                genercher.update(cryptPass.getBytes(""UTF-8""));
            }
            byte[] url = genercher.digest();
            auto.setSeed(url);
            int maxBlockLength = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator gate = KeyGenerator.getInstance(CIPHER);
            gate.init(maxBlockLength, auto);
            SecretKey crypt = gate.generateKey();
            Cipher Cairo = Cipher.getInstance(CIPHER);
            Cairo.init(Cipher.ENCRYPT_MODE, crypt);
            byte[] cursorOUT = Cairo.doFinal(cryptentials);
            byte[] reply = new byte[psulator.length + cursorOUT.length];
            System.arraycopy(psulator, 0, reply, 0, psulator.length);
            System.arraycopy(cursorOUT, 0, reply, psulator.length, cursorOUT.length);
            return reply;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",1,1,1,-1,"cryptPassword,credentials,salt,digester,random,i,hash,maxKeySize,generator,key,cipher,cipherOut,ret","cryptPassword:0.0,credentials:0.0,salt:0.0,digester:0.0,random:0.07758927345275879,i:0.22507059574127197,hash:-0.2770236134529114,maxKeySize:0.0,generator:0.0,key:-0.0030437707901000977,cipher:-1.1920928955078125e-07,cipherOut:-2.384185791015625e-07,ret:-0.13736087083816528,",13,41,"i:uri,random:auto,cryptPassword:cryptPass,credentials:cryptentials,salt:psulator,digester:genercher,maxKeySize:maxBlockLength,generator:gate,cipher:Cairo,cipherOut:cursorOUT,key:crypt,ret:reply,hash:url,",Greedy,579,0.27093913952509563
161,"['545112', '6102140', '    public static void main(String[] args) throws Exception {\n        String uri = args[0];\n        Configuration conf = new Configuration();\n        FileSystem fs = FileSystem.get(URI.create(uri), conf);\n        Path inputPath = new Path(uri);\n        CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n        CompressionCodec codec = factory.getCodec(inputPath);\n        if (codec == null) {\n            System.err.println(""No codec found for "" + uri);\n            System.exit(1);\n        }\n        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = codec.createInputStream(fs.open(inputPath));\n            out = fs.create(new Path(outputUri));\n            IOUtils.copyBytes(in, out, conf);\n        } finally {\n            IOUtils.closeStream(in);\n            IOUtils.closeStream(out);\n        }\n    }\n', '    public static void main(String[] args) {\n        try {\n            boolean readExp = Utils.getFlag(\'l\', args);\n            final boolean writeExp = Utils.getFlag(\'s\', args);\n            final String expFile = Utils.getOption(\'f\', args);\n            if ((readExp || writeExp) && (expFile.length() == 0)) {\n                throw new Exception(""A filename must be given with the -f option"");\n            }\n            Experiment exp = null;\n            if (readExp) {\n                FileInputStream fi = new FileInputStream(expFile);\n                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n                exp = (Experiment) oi.readObject();\n                oi.close();\n            } else {\n                exp = new Experiment();\n            }\n            System.err.println(""Initial Experiment:\\n"" + exp.toString());\n            final JFrame jf = new JFrame(""Weka Experiment Setup"");\n            jf.getContentPane().setLayout(new BorderLayout());\n            final SetupPanel sp = new SetupPanel();\n            jf.getContentPane().add(sp, BorderLayout.CENTER);\n            jf.addWindowListener(new WindowAdapter() {\n\n                public void windowClosing(WindowEvent e) {\n                    System.err.println(""\\nFinal Experiment:\\n"" + sp.m_Exp.toString());\n                    if (writeExp) {\n                        try {\n                            FileOutputStream fo = new FileOutputStream(expFile);\n                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n                            oo.writeObject(sp.m_Exp);\n                            oo.close();\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                            System.err.println(""Couldn\'t write experiment to: "" + expFile + \'\\n\' + ex.getMessage());\n                        }\n                    }\n                    jf.dispose();\n                    System.exit(0);\n                }\n            });\n            jf.pack();\n            jf.setVisible(true);\n            System.err.println(""Short nap"");\n            Thread.currentThread().sleep(3000);\n            System.err.println(""Done"");\n            sp.setExperiment(exp);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.err.println(ex.getMessage());\n        }\n    }\n']",187,"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(conf);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, conf);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
",1,1,1,-1,"uri,conf,fs,inputPath,factory,codec,outputUri,in,out","uri:5.245208740234375e-06,conf:-0.00012689828872680664,fs:0.00023978948593139648,inputPath:0.0,factory:0.0,codec:0.0,outputUri:0.0,in:6.407499313354492e-05,out:0.00029975175857543945,",0,0,"out:out,fs:fs,in:in,uri:uri,inputPath:inputPath,factory:factory,codec:codec,outputUri:outputUri,conf:conf,",Greedy,422,0.19310645659764608
162,"['13339653', '11540200', '    public void write(String resource, String destinationPath) throws IOException, CoreException {\n        OutputStream output = null;\n        InputStream contentStream = null;\n        try {\n            contentStream = new BufferedInputStream(new FileInputStream(resource));\n            output = new BufferedOutputStream(new FileOutputStream(destinationPath));\n            int available = contentStream.available();\n            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;\n            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);\n            byte[] readBuffer = new byte[chunkSize];\n            int n = contentStream.read(readBuffer);\n            while (n > 0) {\n                output.write(readBuffer, 0, n);\n                n = contentStream.read(readBuffer);\n            }\n        } finally {\n            if (contentStream != null) {\n                try {\n                    contentStream.close();\n                } catch (IOException e) {\n                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);\n                }\n            }\n            if (output != null) {\n                output.close();\n            }\n        }\n    }\n', '    public File uploadImage(InputStream inputStream, String fileName, String sessionId) {\n        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);\n        FileOutputStream fileOutputStream = null;\n        try {\n            FileUtils.touch(file);\n            fileOutputStream = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOutputStream);\n        } catch (IOException e) {\n            logger.error(""Save uploaded image to file occur IOException."", e);\n            throw new FileOperationException(""Save uploaded image to file occur IOException."", e);\n        } finally {\n            try {\n                if (fileOutputStream != null) {\n                    fileOutputStream.close();\n                }\n            } catch (IOException e) {\n                logger.error(""Close FileOutputStream Occur IOException while save a uploaded image."", e);\n            }\n        }\n        return file;\n    }\n']",187,"    public void write(String url, String DestributionFile) throws IOException, CoreException {
        OutputStream download = null;
        InputStream coreSteam = null;
        try {
            coreSteam = new BufferedInputStream(new FileInputStream(url));
            download = new BufferedOutputStream(new FileOutputStream(DestributionFile));
            int api = coreSteam.api();
            api = api <= 0 ? DEFAULT_BUFFER_SIZE : api;
            int shunkize = Math.min(DEFAULT_BUFFER_SIZE, api);
            byte[] playBuff = new byte[shunkize];
            int ne = coreSteam.read(playBuff);
            while (ne > 0) {
                download.write(playBuff, 0, ne);
                ne = coreSteam.read(playBuff);
            }
        } finally {
            if (coreSteam != null) {
                try {
                    coreSteam.close();
                } catch (IOException e) {
                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + url, e);
                }
            }
            if (download != null) {
                download.close();
            }
        }
    }
",1,1,0,1,"resource,destinationPath,output,contentStream,available,chunkSize,readBuffer,n","resource:-0.0016109347343444824,destinationPath:0.0,output:0.004330098628997803,contentStream:0.0,available:0.00014197826385498047,chunkSize:0.0,readBuffer:0.0,n:-0.0013564229011535645,",8,33,"output:download,available:api,destinationPath:DestributionFile,contentStream:coreSteam,chunkSize:shunkize,readBuffer:playBuff,n:ne,resource:url,",Greedy,434,0.18967543045679727
163,"['10895680', '120730', '    private DefaultMutableTreeNode parseTree() {\n        try {\n            DefaultMutableTreeNode root;\n            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");\n            InputStream is = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setIgnoringComments(true);\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(is);\n            NodeList elements = document.getElementsByTagName(""help"");\n            Element element = (Element) elements.item(0);\n            root = createTreeContent(element);\n            is.close();\n            return root;\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n            return null;\n        } catch (ParserConfigurationException e1) {\n            System.out.println(e1.getMessage());\n            return null;\n        } catch (org.xml.sax.SAXException e2) {\n            System.out.println(e2.getMessage());\n            return null;\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",194,"    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode div;
            URL file = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = file.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            div = createTreeContent(element);
            is.close();
            return div;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
",0,0,1,1,"root,url,is,factory,parser,document,elements,element","root:3.5762786865234375e-07,url:1.6689300537109375e-06,is:-9.5367431640625e-07,factory:0.0,parser:-3.5762786865234375e-07,document:1.1920928955078125e-07,elements:0.0,element:2.384185791015625e-07,",2,5,"url:file,root:div,",Greedy,106,0.0564029057820638
164,"['272355', '13339653', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public void write(String resource, String destinationPath) throws IOException, CoreException {\n        OutputStream output = null;\n        InputStream contentStream = null;\n        try {\n            contentStream = new BufferedInputStream(new FileInputStream(resource));\n            output = new BufferedOutputStream(new FileOutputStream(destinationPath));\n            int available = contentStream.available();\n            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;\n            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);\n            byte[] readBuffer = new byte[chunkSize];\n            int n = contentStream.read(readBuffer);\n            while (n > 0) {\n                output.write(readBuffer, 0, n);\n                n = contentStream.read(readBuffer);\n            }\n        } finally {\n            if (contentStream != null) {\n                try {\n                    contentStream.close();\n                } catch (IOException e) {\n                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);\n                }\n            }\n            if (output != null) {\n                output.close();\n            }\n        }\n    }\n']",764,"    public void convert(File url, File dc) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser np = pfact.newDcmParser(in);
        Dataset ils = fact.newDataset();
        np.setDcmHandler(ils.getDcmHandler());
        try {
            FileFormat format = np.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            np.parseDcmFile(format, Tags.PixelData);
            if (ils.contains(Tags.StudyInstanceUID) || ils.contains(Tags.SeriesInstanceUID) || ils.contains(Tags.SOPInstanceUID) || ils.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = np.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ils.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = np.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ils.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ils.getInt(Tags.BitsAllocated, 0) >>> 3) * ils.getInt(Tags.Rows, 0) * ils.getInt(Tags.Columns, 0) * ils.getInt(Tags.NumberOfFrames, 1) * ils.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ils.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ils.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ils.putUI(Tags.SOPInstanceUID, uid(instUID));
            ils.putUI(Tags.SOPClassUID, classUID);
            if (!ils.contains(Tags.NumberOfSamples)) {
                ils.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ils.contains(Tags.PhotometricInterpretation)) {
                ils.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ils.setFileMetaInfo(fact.newFileMetaInfo(ils, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dc));
            try {
            } finally {
                ils.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1,1,0,1,"src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","src:8.231401443481445e-05,dest:0.0008128881454467773,in:-8.404254913330078e-05,p:6.80088996887207e-05,ds:0.00014150142669677734,format:5.924701690673828e-05,hasPixelData:0.0,inflate:0.0,pxlen:0.0,out:0.0001671314239501953,",4,37,"dest:dc,out:out,ds:ils,src:url,p:np,",Greedy,355,0.19550020694732667
165,"['7687037', '9830267', '    public synchronized int insertMessage(FrostMessageObject mo) {\n        AttachmentList files = mo.getAttachmentsOfType(Attachment.FILE);\n        AttachmentList boards = mo.getAttachmentsOfType(Attachment.BOARD);\n        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();\n        try {\n            conn.setAutoCommit(false);\n            PreparedStatement ps = conn.prepareStatement(""INSERT INTO "" + getMessageTableName() + "" ("" + ""primkey,messageid,inreplyto,isvalid,invalidreason,msgdatetime,msgindex,board,fromname,subject,recipient,signature,"" + ""signaturestatus,publickey,isdeleted,isnew,isreplied,isjunk,isflagged,isstarred,hasfileattachment,hasboardattachment,idlinepos,idlinelen"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");\n            Long identity = null;\n            Statement stmt = AppLayerDatabase.getInstance().createStatement();\n            ResultSet rs = stmt.executeQuery(""select UNIQUEKEY(\'"" + getMessageTableName() + ""\')"");\n            if (rs.next()) {\n                identity = new Long(rs.getLong(1));\n            } else {\n                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");\n            }\n            rs.close();\n            stmt.close();\n            int i = 1;\n            ps.setLong(i++, identity.longValue());\n            ps.setString(i++, mo.getMessageId());\n            ps.setString(i++, mo.getInReplyTo());\n            ps.setBoolean(i++, mo.isValid());\n            ps.setString(i++, mo.getInvalidReason());\n            ps.setLong(i++, mo.getDateAndTime().getMillis());\n            ps.setInt(i++, mo.getIndex());\n            ps.setInt(i++, mo.getBoard().getPrimaryKey().intValue());\n            ps.setString(i++, mo.getFromName());\n            ps.setString(i++, mo.getSubject());\n            ps.setString(i++, ((mo.getRecipientName() != null && mo.getRecipientName().length() == 0) ? null : mo.getRecipientName()));\n            if (mo.getSignatureV2() == null || mo.getSignatureV2().length() == 0) {\n                ps.setString(i++, mo.getSignatureV1());\n            } else {\n                ps.setString(i++, mo.getSignatureV2());\n            }\n            ps.setInt(i++, mo.getSignatureStatus());\n            ps.setString(i++, mo.getPublicKey());\n            ps.setBoolean(i++, mo.isDeleted());\n            ps.setBoolean(i++, mo.isNew());\n            ps.setBoolean(i++, mo.isReplied());\n            ps.setBoolean(i++, mo.isJunk());\n            ps.setBoolean(i++, mo.isFlagged());\n            ps.setBoolean(i++, mo.isStarred());\n            ps.setBoolean(i++, (files.size() > 0));\n            ps.setBoolean(i++, (boards.size() > 0));\n            ps.setInt(i++, mo.getIdLinePos());\n            ps.setInt(i++, mo.getIdLineLen());\n            int inserted;\n            try {\n                inserted = ps.executeUpdate();\n            } finally {\n                ps.close();\n            }\n            if (inserted == 0) {\n                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");\n                throw new Exception(""message insert returned 0 !!!"");\n            }\n            mo.setMsgIdentity(identity.longValue());\n            PreparedStatement pc = conn.prepareStatement(""INSERT INTO "" + getContentTableName() + "" (msgref,msgcontent) VALUES (?,?)"");\n            pc.setLong(1, mo.getMsgIdentity());\n            pc.setString(2, mo.getContent());\n            try {\n                inserted = pc.executeUpdate();\n            } finally {\n                pc.close();\n            }\n            if (inserted == 0) {\n                logger.log(Level.SEVERE, ""message content insert returned 0 !!!"");\n                throw new Exception(""message content insert returned 0 !!!"");\n            }\n            if (files.size() > 0) {\n                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getFileAttachmentsTableName() + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");\n                try {\n                    for (Iterator it = files.iterator(); it.hasNext(); ) {\n                        FileAttachment fa = (FileAttachment) it.next();\n                        int ix = 1;\n                        p.setLong(ix++, mo.getMsgIdentity());\n                        p.setString(ix++, fa.getFilename());\n                        p.setLong(ix++, fa.getFileSize());\n                        p.setString(ix++, fa.getKey());\n                        int ins = p.executeUpdate();\n                        if (ins == 0) {\n                            logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");\n                            throw new Exception(""fileattachment insert returned 0 !!!"");\n                        }\n                    }\n                } finally {\n                    p.close();\n                }\n            }\n            if (boards.size() > 0) {\n                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getBoardAttachmentsTableName() + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");\n                try {\n                    for (Iterator it = boards.iterator(); it.hasNext(); ) {\n                        BoardAttachment ba = (BoardAttachment) it.next();\n                        Board b = ba.getBoardObj();\n                        int ix = 1;\n                        p.setLong(ix++, mo.getMsgIdentity());\n                        p.setString(ix++, b.getNameLowerCase());\n                        p.setString(ix++, b.getPublicKey());\n                        p.setString(ix++, b.getPrivateKey());\n                        p.setString(ix++, b.getDescription());\n                        int ins = p.executeUpdate();\n                        if (ins == 0) {\n                            logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");\n                            throw new Exception(""boardattachment insert returned 0 !!!"");\n                        }\n                    }\n                } finally {\n                    p.close();\n                }\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n            return INSERT_OK;\n        } catch (Throwable t) {\n            boolean isDuplicate;\n            if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_ID_UNIQUE_ONLY"") > 0) {\n                isDuplicate = true;\n                logger.warning(""Duplicate message id, not added to database table: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex());\n            } else if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_UNIQUE_ONLY"") > 0) {\n                isDuplicate = true;\n                logger.warning(""Duplicate msgdatetime,index,board, not added to database table: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex());\n            } else {\n                isDuplicate = false;\n                logger.log(Level.SEVERE, ""Exception during insert of message: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex(), t);\n                try {\n                    conn.rollback();\n                } catch (Throwable t1) {\n                    logger.log(Level.SEVERE, ""Exception during rollback"", t1);\n                }\n            }\n            try {\n                conn.setAutoCommit(true);\n            } catch (Throwable t1) {\n            }\n            if (isDuplicate) {\n                return INSERT_DUPLICATE;\n            } else {\n                return INSERT_ERROR;\n            }\n        } finally {\n            AppLayerDatabase.getInstance().givePooledConnection(conn);\n        }\n    }\n', '            public void run() {\n                final SimpleMessageListener listener = new SimpleMessageListener() {\n\n                    public final boolean accept(final String from, final String recipient) {\n                        return true;\n                    }\n\n                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {\n                        System.out.println(""FROM: "" + from);\n                        System.out.println(""TO: "" + recipient);\n                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));\n                        final File file = new File(tmpDir, recipient);\n                        final FileWriter fw = new FileWriter(file);\n                        try {\n                            IOUtils.copy(data, fw);\n                        } finally {\n                            fw.close();\n                        }\n                    }\n                };\n                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));\n                smtpServer.start();\n                System.out.println(""Started SMTP Server"");\n            }\n']",1489,"    public synchronized int insertMessage(FrostMessageObject umo) {
        AttachmentList files = umo.getAttachmentsOfType(Attachment.FILE);
        AttachmentList ones = umo.getAttachmentsOfType(Attachment.BOARD);
        Connection cp = AppLayerDatabase.getInstance().getPooledConnection();
        try {
            cp.setAutoCommit(false);
            PreparedStatement pos = cp.prepareStatement(""INSERT INTO "" + getMessageTableName() + "" ("" + ""primkey,messageid,inreplyto,isvalid,invalidreason,msgdatetime,msgindex,board,fromname,subject,recipient,signature,"" + ""signaturestatus,publickey,isdeleted,isnew,isreplied,isjunk,isflagged,isstarred,hasfileattachment,hasboardattachment,idlinepos,idlinelen"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");
            Long stringentity = null;
            Statement rtr = AppLayerDatabase.getInstance().createStatement();
            ResultSet rd = rtr.executeQuery(""select UNIQUEKEY('"" + getMessageTableName() + ""')"");
            if (rd.next()) {
                stringentity = new Long(rd.getLong(1));
            } else {
                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");
            }
            rd.close();
            rtr.close();
            int i = 1;
            pos.setLong(i++, stringentity.longValue());
            pos.setString(i++, umo.getMessageId());
            pos.setString(i++, umo.getInReplyTo());
            pos.setBoolean(i++, umo.isValid());
            pos.setString(i++, umo.getInvalidReason());
            pos.setLong(i++, umo.getDateAndTime().getMillis());
            pos.setInt(i++, umo.getIndex());
            pos.setInt(i++, umo.getBoard().getPrimaryKey().intValue());
            pos.setString(i++, umo.getFromName());
            pos.setString(i++, umo.getSubject());
            pos.setString(i++, ((umo.getRecipientName() != null && umo.getRecipientName().length() == 0) ? null : umo.getRecipientName()));
            if (umo.getSignatureV2() == null || umo.getSignatureV2().length() == 0) {
                pos.setString(i++, umo.getSignatureV1());
            } else {
                pos.setString(i++, umo.getSignatureV2());
            }
            pos.setInt(i++, umo.getSignatureStatus());
            pos.setString(i++, umo.getPublicKey());
            pos.setBoolean(i++, umo.isDeleted());
            pos.setBoolean(i++, umo.isNew());
            pos.setBoolean(i++, umo.isReplied());
            pos.setBoolean(i++, umo.isJunk());
            pos.setBoolean(i++, umo.isFlagged());
            pos.setBoolean(i++, umo.isStarred());
            pos.setBoolean(i++, (files.size() > 0));
            pos.setBoolean(i++, (ones.size() > 0));
            pos.setInt(i++, umo.getIdLinePos());
            pos.setInt(i++, umo.getIdLineLen());
            int inserted;
            try {
                inserted = pos.executeUpdate();
            } finally {
                pos.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");
                throw new Exception(""message insert returned 0 !!!"");
            }
            umo.setMsgIdentity(stringentity.longValue());
            PreparedStatement pc = cp.prepareStatement(""INSERT INTO "" + getContentTableName() + "" (msgref,msgcontent) VALUES (?,?)"");
            pc.setLong(1, umo.getMsgIdentity());
            pc.setString(2, umo.getContent());
            try {
                inserted = pc.executeUpdate();
            } finally {
                pc.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message content insert returned 0 !!!"");
                throw new Exception(""message content insert returned 0 !!!"");
            }
            if (files.size() > 0) {
                PreparedStatement p = cp.prepareStatement(""INSERT INTO "" + getFileAttachmentsTableName() + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");
                try {
                    for (Iterator it = files.iterator(); it.hasNext(); ) {
                        FileAttachment fa = (FileAttachment) it.next();
                        int ix = 1;
                        p.setLong(ix++, umo.getMsgIdentity());
                        p.setString(ix++, fa.getFilename());
                        p.setLong(ix++, fa.getFileSize());
                        p.setString(ix++, fa.getKey());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");
                            throw new Exception(""fileattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            if (ones.size() > 0) {
                PreparedStatement p = cp.prepareStatement(""INSERT INTO "" + getBoardAttachmentsTableName() + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");
                try {
                    for (Iterator it = ones.iterator(); it.hasNext(); ) {
                        BoardAttachment ba = (BoardAttachment) it.next();
                        Board b = ba.getBoardObj();
                        int ix = 1;
                        p.setLong(ix++, umo.getMsgIdentity());
                        p.setString(ix++, b.getNameLowerCase());
                        p.setString(ix++, b.getPublicKey());
                        p.setString(ix++, b.getPrivateKey());
                        p.setString(ix++, b.getDescription());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");
                            throw new Exception(""boardattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            cp.commit();
            cp.setAutoCommit(true);
            return INSERT_OK;
        } catch (Throwable t) {
            boolean isDuplicate;
            if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_ID_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate message id, not added to database table: msgid='"" + umo.getMessageId() + ""', board="" + umo.getBoard().getName() + "", date='"" + umo.getDateAndTimeString() + ""', index="" + umo.getIndex());
            } else if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate msgdatetime,index,board, not added to database table: msgid='"" + umo.getMessageId() + ""', board="" + umo.getBoard().getName() + "", date='"" + umo.getDateAndTimeString() + ""', index="" + umo.getIndex());
            } else {
                isDuplicate = false;
                logger.log(Level.SEVERE, ""Exception during insert of message: msgid='"" + umo.getMessageId() + ""', board="" + umo.getBoard().getName() + "", date='"" + umo.getDateAndTimeString() + ""', index="" + umo.getIndex(), t);
                try {
                    cp.rollback();
                } catch (Throwable t1) {
                    logger.log(Level.SEVERE, ""Exception during rollback"", t1);
                }
            }
            try {
                cp.setAutoCommit(true);
            } catch (Throwable t1) {
            }
            if (isDuplicate) {
                return INSERT_DUPLICATE;
            } else {
                return INSERT_ERROR;
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(cp);
        }
    }
",0,0,0,-1,"mo,files,boards,conn,ps,identity,stmt,rs,i","mo:4.887580871582031e-06,files:-1.7881393432617188e-06,boards:-7.152557373046875e-07,conn:-4.410743713378906e-05,ps:-1.1801719665527344e-05,identity:0.0,stmt:0.0,rs:-3.814697265625e-06,i:3.170967102050781e-05,",7,100,"i:i,mo:umo,identity:stringentity,stmt:rtr,boards:ones,files:files,rs:rd,ps:pos,conn:cp,",Greedy,540,0.3855708559354146
166,"['7082101', '16324555', '    public byte[] computeMD5(String plainText) throws GException {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException ex) {\n            throw new GException(""The MD5 hash algorithm is not available."", ex);\n        }\n        try {\n            md.update(plainText.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException ex) {\n            throw new GException(""The UTF-8 encoding is not supported."", ex);\n        }\n        return md.digest();\n    }\n', '    public static String gerarDigest(String mensagem) {\n        String mensagemCriptografada = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA"");\n            System.out.println(""Mensagem original: "" + mensagem);\n            md.update(mensagem.getBytes());\n            byte[] digest = md.digest();\n            mensagemCriptografada = converterBytesEmHexa(digest);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return mensagemCriptografada;\n    }\n']",92,"    public byte[] computeMD5(String fileContent) throws GException {
        MessageDigest mp = null;
        try {
            mp = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            mp.update(fileContent.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return mp.digest();
    }
",1,1,1,-1,"plainText,md","plainText:0.0,md:-0.01284879446029663,",2,6,"plainText:fileContent,md:mp,",Greedy,87,0.04599885940551758
167,"['2897046', '6707620', '    public boolean execute_check() {\n        FTPClient ftp = new FTPClient();\n        File filename = null;\n        FileChannel channel;\n        InputStream is;\n        OutputStream os;\n        int reply;\n        if (super.verbose > 0) verbose = true;\n        ftp.setDefaultPort(port);\n        ftp.setDefaultTimeout(timeout);\n        if (verbose) {\n            System.out.println(""Using FTP Server: "" + hostname);\n            System.out.println(""Using FTP Port: "" + port);\n            System.out.println(""Using Timeout of: "" + timeout);\n        }\n        if (passive) {\n            ftp.enterLocalPassiveMode();\n            if (verbose) System.out.println(""Using Passive Mode"");\n        }\n        try {\n            filename = new File(file);\n            channel = new RandomAccessFile(filename, ""rw"").getChannel();\n            if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);\n            ftp.connect(hostname);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");\n                check_state = common_h.STATE_CRITICAL;\n                check_message = ftp.getReplyString();\n                filename.delete();\n                ftp.disconnect();\n                return true;\n            }\n            if (username != null && password != null) {\n                if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);\n                if (!ftp.login(username, password)) {\n                    if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);\n                    check_state = common_h.STATE_CRITICAL;\n                    check_message = ftp.getReplyString();\n                    ftp.disconnect();\n                    filename.delete();\n                    return true;\n                }\n            }\n            if (verbose) System.out.println(""Attempting to change to required directory"");\n            if (!ftp.changeWorkingDirectory(directory)) {\n                if (verbose) System.out.println(""Required directory cannot be found!"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Attempting to retrieve specified file!"");\n            is = ftp.retrieveFileStream(file);\n            if (is == null) {\n                if (verbose) System.out.println(""Unable to locate required file."");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            os = Channels.newOutputStream(channel);\n            byte[] buf = new byte[4096];\n            if (verbose) System.out.println(""Beginning File transfer..."");\n            for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);\n            if (verbose) {\n                System.out.println(""...transfer complete."");\n                System.out.println(""Attempting to finalise Command"");\n            }\n            if (!ftp.completePendingCommand()) {\n                if (verbose) System.out.println(""Unable to finalise command"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Check Completed."");\n            check_state = common_h.STATE_OK;\n            check_message = ftp.getReplyString();\n            is.close();\n            os.close();\n            channel.close();\n            filename.delete();\n        } catch (IOException e) {\n            check_state = common_h.STATE_CRITICAL;\n            check_message = e.getMessage();\n            if (filename != null) filename.delete();\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.logout();\n                    ftp.disconnect();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return true;\n    }\n', '    private static String getHash(String hash, String clear) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(hash);\n            md.update(clear.getBytes(""UTF-8""));\n            byte[] bytes = md.digest();\n            String str = new String();\n            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);\n            return str;\n        } catch (NoSuchAlgorithmException exc) {\n        } catch (UnsupportedEncodingException exc) {\n        }\n        return """";\n    }\n']",763,"    public boolean execute_check() {
        FTPClient  ftuser = new FTPClient();
        File config = null;
        FileChannel config;
        InputStream image;
        OutputStream ios;
        int rr;
        if (super. verbosity > 0)  verbosity = true;
         ftuser.setDefaultPort(port);
         ftuser.setDefaultTimeout(timeout);
        if ( verbosity) {
            System.out.println(""Using FTP Server: "" + hostname);
            System.out.println(""Using FTP Port: "" + port);
            System.out.println(""Using Timeout of: "" + timeout);
        }
        if (passive) {
             ftuser.enterLocalPassiveMode();
            if ( verbosity) System.out.println(""Using Passive Mode"");
        }
        try {
            config = new File(file);
            config = new RandomAccessFile(config, ""rw"").getChannel();
            if ( verbosity) System.out.println(""Attempting FTP Connection to "" + hostname);
             ftuser.connect(hostname);
            rr =  ftuser.getReplyCode();
            if (!FTPReply.isPositiveCompletion(rr)) {
                if ( verbosity) System.out.println(""FTP Connection to "" + hostname + "" failed"");
                checkprestate = common_h.STATE_CRITICAL;
                comment_mail =  ftuser.getReplyString();
                config.delete();
                 ftuser.disconnect();
                return true;
            }
            if (username != null && password != null) {
                if ( verbosity) System.out.println(""Attempting to log in into FTP Server "" + hostname);
                if (! ftuser.login(username, password)) {
                    if ( verbosity) System.out.println(""Unable to log in to FTP Server "" + hostname);
                    checkprestate = common_h.STATE_CRITICAL;
                    comment_mail =  ftuser.getReplyString();
                     ftuser.disconnect();
                    config.delete();
                    return true;
                }
            }
            if ( verbosity) System.out.println(""Attempting to change to required directory"");
            if (! ftuser.changeWorkingDirectory(directory)) {
                if ( verbosity) System.out.println(""Required directory cannot be found!"");
                checkprestate = common_h.STATE_WARNING;
                comment_mail =  ftuser.getReplyString();
                 ftuser.disconnect();
                config.delete();
                return true;
            }
            if ( verbosity) System.out.println(""Attempting to retrieve specified file!"");
            image =  ftuser.retrieveFileStream(file);
            if (image == null) {
                if ( verbosity) System.out.println(""Unable to locate required file."");
                checkprestate = common_h.STATE_WARNING;
                comment_mail =  ftuser.getReplyString();
                 ftuser.disconnect();
                config.delete();
                return true;
            }
            ios = Channels.newOutputStream(config);
            byte[] buf = new byte[4096];
            if ( verbosity) System.out.println(""Beginning File transfer..."");
            for (int len = -1; (len = image.read(buf)) != -1; ) ios.write(buf, 0, len);
            if ( verbosity) {
                System.out.println(""...transfer complete."");
                System.out.println(""Attempting to finalise Command"");
            }
            if (! ftuser.completePendingCommand()) {
                if ( verbosity) System.out.println(""Unable to finalise command"");
                checkprestate = common_h.STATE_WARNING;
                comment_mail =  ftuser.getReplyString();
                 ftuser.disconnect();
                config.delete();
                return true;
            }
            if ( verbosity) System.out.println(""Check Completed."");
            checkprestate = common_h.STATE_OK;
            comment_mail =  ftuser.getReplyString();
            image.close();
            ios.close();
            config.close();
            config.delete();
        } catch (IOException e) {
            checkprestate = common_h.STATE_CRITICAL;
            comment_mail = e.getMessage();
            if (config != null) config.delete();
        } finally {
            if ( ftuser.isConnected()) {
                try {
                     ftuser.logout();
                     ftuser.disconnect();
                } catch (Exception e) {
                }
            }
        }
        return true;
    }
",0,0,0,-1,"ftp,filename,channel,is,os,reply,verbose,check_state,check_message","ftp:0.0,filename:-1.3470649719238281e-05,channel:2.2113323211669922e-05,is:-1.1086463928222656e-05,os:-3.337860107421875e-06,reply:-1.1563301086425781e-05,verbose:0.0,check_state:0.0,check_message:0.0,",9,81,"channel:config,ftp: ftuser,verbose: verbosity,check_state:checkprestate,check_message:comment_mail,os:ios,is:image,reply:rr,filename:config,",Greedy,563,0.2943432251612345
168,"['15136801', '518901', '    public static String readUrl(String urlString) {\n        try {\n            java.net.URL url = new java.net.URL(urlString);\n            BufferedReader br = null;\n            if (url != null) {\n                br = new BufferedReader(new InputStreamReader(url.openStream()));\n            }\n            StringBuffer fileString = new StringBuffer();\n            while (true) {\n                String line = br.readLine();\n                if (line == null) {\n                    break;\n                }\n                fileString.append(line + ""\\n"");\n            }\n            return fileString.toString();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n', '    public void fetchFile(String ID) {\n        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";\n        System.out.println(url);\n        try {\n            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));\n            if (!id.contains(""MARC"" + ID + "".txt"")) {\n                id.add(""MARC"" + ID + "".txt"");\n            }\n            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));\n            in.readLine();\n            String inputLine, stx = """";\n            StringBuffer sb = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.startsWith(""<TR><TD><B>"")) {\n                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));\n                    int i = 0;\n                    try {\n                        i = Integer.parseInt(sts);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    if (i > 0) {\n                        stx = stx + ""\\n"" + sts + "" - "";\n                    } else {\n                        stx += sts;\n                    }\n                }\n                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {\n                    String tx = inputLine.trim();\n                    stx += tx;\n                }\n            }\n            pw.println(stx);\n            pw.close();\n        } catch (Exception e) {\n            System.out.println(""Couldn\'t open stream"");\n            System.out.println(e);\n        }\n    }\n']",120,,0,1,,-4,"urlString,url,br,fileString,line",,,,,Greedy,1,0.007061723868052165
169,"['15037259', '14282702', '    public void testJob() {\n        try {\n            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");\n            url.openConnection();\n            url.getContent();\n            System.out.print(""00"");\n        } catch (Exception e) {\n            System.out.print(""Daily data update exception:"" + e);\n        }\n    }\n', '    @Override\n    public void runTask(HashMap jobStack) throws Exception {\n        String lstrFilter = (String) getResources().get(""filter"");\n        String lstrTarget = (String) getResources().get(""target"");\n        String lstrSource = (String) getResources().get(""source"");\n        String[] lstrFilesFound = null;\n        lstrFilesFound = searchForFiles(lstrSource, lstrFilter);\n        if (lstrFilesFound != null) {\n            for (int i = 0; i < lstrFilesFound.length; i++) {\n                getLog().debug(""Found match ["" + lstrSource + File.separator + lstrFilesFound[i] + ""]"");\n                File lfileSource = new File(lstrSource + File.separator + lstrFilesFound[i]);\n                File lfileTarget = new File(lstrTarget + File.separator + lstrFilesFound[i]);\n                FileChannel lfisInput = null;\n                FileChannel lfosOutput = null;\n                try {\n                    lfisInput = new FileInputStream(lfileSource).getChannel();\n                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();\n                    int maxCount = (32 * 1024 * 1024) - (32 * 1024);\n                    long size = lfisInput.size();\n                    long position = 0;\n                    while (position < size) {\n                        position += lfisInput.transferTo(position, maxCount, lfosOutput);\n                    }\n                } finally {\n                    if (lfisInput != null) {\n                        lfisInput.close();\n                    }\n                    if (lfosOutput != null) {\n                        lfosOutput.close();\n                    }\n                }\n            }\n        }\n    }\n']",64,"    public void testJob() {
        try {
            URL file = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            file.openConnection();
            file.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
",0,0,0,-1,url,"url:5.960464477539062e-07,",1,3,"url:file,",Greedy,51,0.03180104891459147
170,"['20852768', '2766456', '    private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {\n        synchronized (results) {\n            Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);\n            Vector<Class<?>> v = new Vector<Class<?>>();\n            String fqcn = searchClass.getName();\n            List<URL> knownLocations = new ArrayList<URL>();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    String[] files = directory.list();\n                    for (int i = 0; i < files.length; i++) {\n                        if (files[i].endsWith("".class"")) {\n                            String classname = files[i].substring(0, files[i].length() - 6);\n                            try {\n                                Class<?> c = Class.forName(packageName + ""."" + classname);\n                                if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + ""."" + classname)) {\n                                    thisResult.put(c, url);\n                                }\n                            } catch (ClassNotFoundException cnfex) {\n                                errors.add(cnfex);\n                            } catch (Exception ex) {\n                                errors.add(ex);\n                            }\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration<JarEntry> e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(""/"")) classname = classname.substring(1);\n                                classname = classname.replace(\'/\', \'.\');\n                                try {\n                                    Class c = Class.forName(classname);\n                                    if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {\n                                        thisResult.put(c, url);\n                                    }\n                                } catch (ClassNotFoundException cnfex) {\n                                    errors.add(cnfex);\n                                } catch (NoClassDefFoundError ncdfe) {\n                                    errors.add(ncdfe);\n                                } catch (UnsatisfiedLinkError ule) {\n                                    errors.add(ule);\n                                } catch (Exception exception) {\n                                    errors.add(exception);\n                                } catch (Error error) {\n                                    errors.add(error);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n            results.putAll(thisResult);\n            Iterator<Class<?>> it = thisResult.keySet().iterator();\n            while (it.hasNext()) {\n                v.add(it.next());\n            }\n            return v;\n        }\n    }\n', '    private void renderScript(PhaseEvent event) {\n        URL url = AjaxPhaseListener.class.getResource(SCRIPT_RESOURCE_NAME);\n        URLConnection conn = null;\n        InputStream stream = null;\n        BufferedReader bufReader = null;\n        HttpServletResponse response = (HttpServletResponse) event.getFacesContext().getExternalContext().getResponse();\n        OutputStreamWriter outWriter = null;\n        String curLine = null;\n        try {\n            outWriter = new OutputStreamWriter(response.getOutputStream(), response.getCharacterEncoding());\n            conn = url.openConnection();\n            conn.setUseCaches(false);\n            stream = conn.getInputStream();\n            bufReader = new BufferedReader(new InputStreamReader(stream));\n            response.setContentType(""text/javascript"");\n            response.setStatus(200);\n            while (null != (curLine = bufReader.readLine())) {\n                outWriter.write(curLine + ""\\n"");\n            }\n            outWriter.flush();\n            outWriter.close();\n            event.getFacesContext().responseComplete();\n        } catch (Exception e) {\n            String message = null;\n            message = ""Can\'t load script file:"" + url.toExternalForm();\n        }\n    }\n']",623,"    private final Vector<Class<?>> findSubclasses(URL filename, String packagePath, Class<?> perclass) {
        synchronized (results) {
            Map<Class<?>, URL> thisArray = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);
            Vector<Class<?>> br = new Vector<Class<?>>();
            String fvn = searchClass.getName();
            List<URL> knownAllocation = new ArrayList<URL>();
            knownAllocation.add(filename);
            for (int il = 0; il < knownAllocation.size(); il++) {
                URL lr = knownAllocation.get(il);
                File connection = new File(lr.getFile());
                if (connection.exists()) {
                    String[] headers = connection.list();
                    for (int u = 0; u < headers.length; u++) {
                        if (headers[u].endsWith("".class"")) {
                            String classsource = headers[u].substring(0, headers[u].length() - 6);
                            try {
                                Class<?> name = Class.forName(packagePath + ""."" + classsource);
                                if (perclass.isAssignableFrom(name) && !fvn.equals(packagePath + ""."" + classsource)) {
                                    thisArray.put(name, lr);
                                }
                            } catch (ClassNotFoundException cnfex) {
                                errors.add(cnfex);
                            } catch (Exception ex) {
                                errors.add(ex);
                            }
                        }
                    }
                } else {
                    try {
                        JarURLConnection fp = (JarURLConnection) lr.openConnection();
                        JarFile javafile = fp.getJarFile();
                        Enumeration<JarEntry> be = javafile.entries();
                        while (be.hasMoreElements()) {
                            JarEntry parse = be.nextElement();
                            String entrysize = parse.getName();
                            if (!parse.isDirectory() && entrysize.endsWith("".class"")) {
                                String classsource = entrysize.substring(0, entrysize.length() - 6);
                                if (classsource.startsWith(""/"")) classsource = classsource.substring(1);
                                classsource = classsource.replace('/', '.');
                                try {
                                    Class name = Class.forName(classsource);
                                    if (perclass.isAssignableFrom(name) && !fvn.equals(classsource)) {
                                        thisArray.put(name, lr);
                                    }
                                } catch (ClassNotFoundException cnfex) {
                                    errors.add(cnfex);
                                } catch (NoClassDefFoundError ncdfe) {
                                    errors.add(ncdfe);
                                } catch (UnsatisfiedLinkError ule) {
                                    errors.add(ule);
                                } catch (Exception exception) {
                                    errors.add(exception);
                                } catch (Error error) {
                                    errors.add(error);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
            results.putAll(thisArray);
            Iterator<Class<?>> it = thisArray.keySet().iterator();
            while (it.hasNext()) {
                br.add(it.next());
            }
            return br;
        }
    }
",0,0,0,-1,"location,packageName,superClass,thisResult,v,fqcn,knownLocations,loc,url,directory,files,i,classname,c,conn,jarFile,e,entry,entryname","location:0.0,packageName:0.0,superClass:0.0,thisResult:0.0,v:-8.344650268554688e-07,fqcn:0.0,knownLocations:0.0,loc:8.344650268554688e-07,url:2.0503997802734375e-05,directory:8.344650268554688e-07,files:4.76837158203125e-07,i:9.5367431640625e-07,classname:0.0,c:3.5762786865234375e-06,conn:9.179115295410156e-06,jarFile:0.0,e:3.5762786865234375e-07,entry:-5.960464477539062e-07,entryname:0.0,",19,77,"url:lr,conn:fp,c:name,i:u,loc:il,directory:connection,files:headers,e:be,location:filename,packageName:packagePath,superClass:perclass,thisResult:thisArray,fqcn:fvn,knownLocations:knownAllocation,classname:classsource,jarFile:javafile,entryname:entrysize,entry:parse,v:br,",Greedy,893,0.472320564587911
171,"['16324741', '23413733', '    public static void copyFiles(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n', '    public static void copyFile(File from, File to) throws Exception {\n        if (!from.exists()) return;\n        FileInputStream in = new FileInputStream(from);\n        FileOutputStream out = new FileOutputStream(to);\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int bytes_read;\n        while (true) {\n            bytes_read = in.read(buffer);\n            if (bytes_read == -1) break;\n            out.write(buffer, 0, bytes_read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n']",112,"    public static void copyFiles(File source, File temp) throws IOException {
        FileChannel url = null, out = null;
        try {
            url = new FileInputStream(source).getChannel();
            out = new FileOutputStream(temp).getChannel();
            long size = url.size();
            MappedByteBuffer buf = url.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",1,1,0,1,"source,dest,in,out,size,buf","source:8.14199447631836e-05,dest:2.682209014892578e-05,in:2.2292137145996094e-05,out:0.00024014711380004883,size:3.039836883544922e-06,buf:3.838539123535156e-05,",2,8,"out:out,source:source,buf:buf,dest:temp,in:url,",Greedy,247,0.10278148253758748
172,"['4710943', '691789', '    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        long t0 = System.currentTimeMillis();\n        String id = request.getRequestURI().split(""/"")[3];\n        Song song = manager.find(id);\n        if (song != null) {\n            if (song.getArtwork()) {\n                if (log.isDebugEnabled()) log.debug(""song has embedded artwork"");\n                try {\n                    AudioFile af = AudioFileIO.read(new File(song.getFile()));\n                    Tag tag = af.getTag();\n                    Artwork aw = tag.getFirstArtwork();\n                    byte[] bytes = aw.getBinaryData();\n                    response.setStatus(HttpServletResponse.SC_OK);\n                    response.setContentType(aw.getMimeType());\n                    response.getOutputStream().write(bytes);\n                } catch (Exception e) {\n                    log.warn(e.getMessage());\n                }\n            } else {\n                if (log.isDebugEnabled()) log.debug(""search in directory"");\n                File directory = new File(song.getFile()).getParentFile();\n                File[] files = directory.listFiles(filter);\n                if (files != null && files.length > 0) {\n                    File file = files[0];\n                    String type = FilenameUtils.getExtension(file.getName()).toLowerCase();\n                    if (type.startsWith(""jp"")) type = ""jpeg"";\n                    String mime = ""image/"" + type;\n                    response.setStatus(HttpServletResponse.SC_OK);\n                    response.setContentType(mime);\n                    FileInputStream stream = new FileInputStream(file);\n                    try {\n                        IOUtils.copy(stream, response.getOutputStream());\n                    } catch (IOException e) {\n                        log.warn(e.getMessage());\n                    } finally {\n                        IOUtils.closeQuietly(stream);\n                    }\n                } else {\n                    if (log.isDebugEnabled()) log.debug(""image not found: "" + id + "", sending redirect: "" + redirect);\n                    response.sendRedirect(redirect);\n                }\n            }\n        } else {\n            log.info(""song not found: "" + id);\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        }\n        long t1 = System.currentTimeMillis();\n        log.info(""request: "" + id + "" duration: "" + (t1 - t0) + ""ms"");\n    }\n', '    public void bubbleSort(int[] arr) {\n        BasicProcessor.getInstance().getStartBlock();\n        BasicProcessor.getInstance().getVarDeclaration();\n        boolean swapped = true;\n        BasicProcessor.getInstance().getVarDeclaration();\n        int j = 0;\n        BasicProcessor.getInstance().getVarDeclaration();\n        int tmp;\n        {\n            BasicProcessor.getInstance().getWhileStatement();\n            while (swapped) {\n                BasicProcessor.getInstance().getStartBlock();\n                swapped = false;\n                j++;\n                {\n                    BasicProcessor.getInstance().getForStatement();\n                    for (int i = 0; i < arr.length - j; i++) {\n                        BasicProcessor.getInstance().getStartBlock();\n                        {\n                            BasicProcessor.getInstance().getIfStatement();\n                            if (arr[i] > arr[i + 1]) {\n                                BasicProcessor.getInstance().getStartBlock();\n                                tmp = arr[i];\n                                arr[i] = arr[i + 1];\n                                arr[i + 1] = tmp;\n                                swapped = true;\n                                BasicProcessor.getInstance().getEndBlock();\n                            }\n                        }\n                        BasicProcessor.getInstance().getEndBlock();\n                    }\n                }\n                BasicProcessor.getInstance().getEndBlock();\n            }\n        }\n        BasicProcessor.getInstance().getEndBlock();\n    }\n']",466,"    @Override
    protected void doGet(HttpServletRequest url, HttpServletResponse Url) throws ServletException, IOException {
        long t0 = System.currentTimeMillis();
        String url = url.getRequestURI().split(""/"")[3];
        Song band = manager.find(url);
        if (band != null) {
            if (band.getArtwork()) {
                if (log.isDebugEnabled()) log.debug(""song has embedded artwork"");
                try {
                    AudioFile fa = AudioFileIO.read(new File(band.getFile()));
                    Tag image = fa.getTag();
                    Artwork aux = image.getFirstArtwork();
                    byte[] bps = aux.getBinaryData();
                    Url.setStatus(HttpServletResponse.SC_OK);
                    Url.setContentType(aux.getMimeType());
                    Url.getOutputStream().write(bps);
                } catch (Exception e) {
                    log.warn(e.getMessage());
                }
            } else {
                if (log.isDebugEnabled()) log.debug(""search in directory"");
                File Directory = new File(band.getFile()).getParentFile();
                File[] archives = Directory.listFiles(filter);
                if (archives != null && archives.length > 0) {
                    File show = archives[0];
                    String copy = FilenameUtils.getExtension(show.getName()).toLowerCase();
                    if (copy.startsWith(""jp"")) copy = ""jpeg"";
                    String mag = ""image/"" + copy;
                    Url.setStatus(HttpServletResponse.SC_OK);
                    Url.setContentType(mag);
                    FileInputStream url = new FileInputStream(show);
                    try {
                        IOUtils.copy(url, Url.getOutputStream());
                    } catch (IOException e) {
                        log.warn(e.getMessage());
                    } finally {
                        IOUtils.closeQuietly(url);
                    }
                } else {
                    if (log.isDebugEnabled()) log.debug(""image not found: "" + url + "", sending redirect: "" + redirect);
                    Url.sendRedirect(redirect);
                }
            }
        } else {
            log.info(""song not found: "" + url);
            Url.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
        long t1 = System.currentTimeMillis();
        log.info(""request: "" + url + "" duration: "" + (t1 - t0) + ""ms"");
    }
",0,0,0,-1,"request,response,t0,id,song,af,tag,aw,bytes,directory,files,file,type,mime,stream","request:-4.1961669921875e-05,response:0.00013083219528198242,t0:0.0,id:-5.632638931274414e-05,song:-4.035234451293945e-05,af:1.4901161193847656e-06,tag:7.390975952148438e-05,aw:2.980232238769531e-07,bytes:-0.00013977289199829102,directory:-0.0002804994583129883,files:-0.00022238492965698242,file:5.620718002319336e-05,type:8.58306884765625e-06,mime:0.0,stream:7.259845733642578e-05,",14,51,"response:Url,tag:image,stream:url,file:show,type:copy,af:fa,aw:aux,t0:t0,mime:mag,song:band,request:url,id:url,bytes:bps,files:archives,directory:Directory,",Greedy,746,0.35703256527582805
173,"['19631892', '14647876', '    public static void copyFiles(File src, File dest) throws IOException {\n        if (src.isDirectory()) {\n            dest.mkdirs();\n            for (String f : src.list()) {\n                String df = dest.getPath() + File.separator + f;\n                String sf = src.getPath() + File.separator + f;\n                copyFiles(new File(sf), new File(df));\n            }\n        } else {\n            FileInputStream fin = new FileInputStream(src);\n            FileOutputStream fout = new FileOutputStream(dest);\n            int c;\n            while ((c = fin.read()) >= 0) fout.write(c);\n            fin.close();\n            fout.close();\n        }\n    }\n', '    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {\n        File fromFile = fromFileName.toFile();\n        File toFile = toFileName.toFile();\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFileName);\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        }\n        InputStream from = null;\n        OutputStream to = null;\n        try {\n            from = new BufferedInputStream(new FileInputStream(fromFile));\n            to = new BufferedOutputStream(new FileOutputStream(toFile));\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",146,"    public static void copyFiles(File url, File dest) throws IOException {
        if (url.isDirectory()) {
            dest.mkdirs();
            for (String f : url.list()) {
                String df = dest.getPath() + File.separator + f;
                String xf = url.getPath() + File.separator + f;
                copyFiles(new File(xf), new File(df));
            }
        } else {
            FileInputStream rf = new FileInputStream(url);
            FileOutputStream fdout = new FileOutputStream(dest);
            int cb;
            while ((cb = rf.read()) >= 0) fdout.write(cb);
            rf.close();
            fdout.close();
        }
    }
",1,1,0,1,"src,dest,f,df,sf,fin,fout,c","src:-0.0009494423866271973,dest:-0.0002353191375732422,f:-0.00032073259353637695,df:-0.00024443864822387695,sf:-0.0001990199089050293,fin:0.0002570152282714844,fout:0.0,c:4.172325134277344e-06,",5,16,"fin:rf,c:cb,fout:fdout,sf:xf,dest:dest,df:df,f:f,src:url,",Greedy,387,0.16152812639872233
174,"['9049568', '8109022', '    public void reset(String componentName, int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");\n            psta.setInt(1, currentPilot);\n            psta.setString(2, componentName);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }\n', '    public static void main(String args[]) throws Exception {\n        currTime = getCurrentTimestamp();\n        String sqlDoc = """";\n        String sqlVersion = """";\n        String sqlDocVersion = """";\n        String sqlContent = """";\n        String sqlDocDetail = """";\n        String sqlRoot = """";\n        java.util.Properties props = new java.util.Properties();\n        String path = new LoadDocumentData().getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(6);\n        if (!path.endsWith(""/"")) {\n            path += ""/"";\n        }\n        path += ""generate.properties"";\n        if (!path.startsWith(""/"")) {\n            path = ""/"" + path;\n        }\n        java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(path));\n        props.load(fis);\n        author = props.getProperty(""author"");\n        srcPath = props.getProperty(""srcPath"");\n        driverStr = props.getProperty(""driverStr"");\n        dbConnStr = props.getProperty(""dbConnStr"");\n        dbUsername = props.getProperty(""dbUsername"");\n        dbPassword = props.getProperty(""dbPassword"");\n        openDBConn();\n        stat = conn.createStatement();\n        Hashtable htTableKey = new Hashtable();\n        htTableKey = getTableKey(conn);\n        genUserDefinedIndex(conn, htTableKey);\n        Integer ownerID = new Integer(0);\n        Integer nDocID = new Integer(1);\n        Integer nDocDetailID = new Integer(1);\n        Integer nVersionID = new Integer(1);\n        Integer nContentID = new Integer(1);\n        Integer nDmsRootID = new Integer(1);\n        Integer nMtmDocVersionID = new Integer(1);\n        Integer nParentID = null;\n        Integer nRootID = null;\n        String sName = ""1000000001.txt"";\n        String sConvertedName = ""1000000001"";\n        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {\n            nDocID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT"")).intValue() + 1);\n        }\n        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {\n            nDocDetailID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT_DETAIL"")).intValue() + 1);\n        }\n        if (htTableKey.containsKey(""DMS_VERSION"")) {\n            nVersionID = new Integer(((Integer) htTableKey.get(""DMS_VERSION"")).intValue() + 1);\n        }\n        if (htTableKey.containsKey(""DMS_CONTENT"")) {\n            nContentID = new Integer(((Integer) htTableKey.get(""DMS_CONTENT"")).intValue() + 1);\n        }\n        if (htTableKey.containsKey(""DMS_ROOT"")) {\n            nDmsRootID = new Integer(((Integer) htTableKey.get(""DMS_ROOT"")).intValue() + 1);\n        }\n        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {\n            nMtmDocVersionID = new Integer(((Integer) htTableKey.get(""MTM_DOCUMENT_VERSION"")).intValue() + 1);\n        }\n        int nStart = (new Integer(args[0])).intValue();\n        int nEnd = (new Integer(args[1])).intValue();\n        nParentID = new Integer(args[2]);\n        Integer nRootParentID = new Integer(args[2]);\n        nRootID = new Integer(args[3]);\n        String sPhysicalLoc = new String(args[4]);\n        indexPath = new String(args[5]);\n        System.out.println(""rootID : "" + nRootID + ""  ParentID "" + nParentID + "" physical Loc = "" + sPhysicalLoc);\n        String sFieldValue = """";\n        PreparedStatement preStat = null;\n        String sDocName = """";\n        int count = 0;\n        int total = 0;\n        FileInputStream infile = new FileInputStream(new File(sPhysicalLoc + sName));\n        byte[] buffer = new byte[infile.available()];\n        infile.read(buffer);\n        String inFileData = new String(buffer);\n        for (int i = nStart; i <= nEnd; i++) {\n            try {\n                sFieldValue = ""REF"" + i;\n                sDocName = Calendar.getInstance().getTimeInMillis() + "".tif"";\n                dmsDocument.setID(nDocID);\n                dmsDocument.setDocumentType(""D"");\n                dmsDocument.setParentID(nParentID);\n                dmsDocument.setRootID(nRootID);\n                dmsDocument.setCreateType(""S"");\n                dmsDocument.setReferenceNo(""Ref Num"");\n                dmsDocument.setDescription(""desc"");\n                dmsDocument.setUdfDetailList(new ArrayList());\n                dmsDocument.setEffectiveStartDate(currTime);\n                dmsDocument.setItemSize(new Integer(20480));\n                dmsDocument.setItemStatus(""A"");\n                dmsDocument.setOwnerID(new Integer(0));\n                dmsDocument.setUpdateCount(new Integer(0));\n                dmsDocument.setCreatorID(new Integer(0));\n                dmsDocument.setCreateDate(currTime);\n                dmsDocument.setUpdaterID(new Integer(0));\n                dmsDocument.setUpdateDate(currTime);\n                dmsDocument.setRecordStatus(""A"");\n                if (count % 500 == 0) {\n                    sDocName = ""TestDocument"" + i;\n                    dmsDocument.setDocumentName(sDocName);\n                    dmsDocument.setDocumentType(""F"");\n                    sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",\'"" + sDocName + ""\',\'F\',"" + nRootParentID + "","" + nRootID.toString() + "", \'S\', \'"" + dmsDocument.getCreateDate().toString() + ""\', NULL, \'"" + ownerID + ""\',\'Ref Num\', \'desc\', 0, \'A\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\'A\',0,0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                    preStat = conn.prepareStatement(sqlDoc);\n                    preStat.executeUpdate();\n                    nParentID = nDocID;\n                    nDocID = new Integer(nDocID.intValue() + 1);\n                }\n                total = count + nStart;\n                System.out.println(""xxx Count: "" + total + "" docID = "" + nDocID);\n                sDocName = ""TestFullText"" + i + "".txt"";\n                dmsDocument.setDocumentName(sDocName);\n                sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",\'"" + sDocName + ""\',\'D\',"" + nParentID.toString() + "","" + nRootID.toString() + "", \'S\',\'"" + dmsDocument.getCreateDate().toString() + ""\', NULL, \'"" + ownerID + ""\',\'Ref Num\', \'desc\', 20480, \'A\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \'A\',0,0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                preStat = conn.prepareStatement(sqlDoc);\n                preStat.executeUpdate();\n                sqlDocDetail = ""INSERT INTO DMS_DOCUMENT_DETAIL VALUES("" + nDocDetailID.toString() + "","" + nDocID.toString() + "","" + sUdfID + "","" + sUdfDetailID + "",\'"" + sFieldValue + ""\', null, null, \'A\',0,0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                preStat = conn.prepareStatement(sqlDocDetail);\n                preStat.executeUpdate();\n                dmsDocument.setUserDefinedFieldID(new Integer(sUdfID));\n                sqlContent = "" INSERT INTO DMS_CONTENT VALUES ("" + nContentID.toString() + "","" + sConvertedName + "", \'IMAGE\', null, \'TIF\', \'A\', 0,0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                preStat = conn.prepareStatement(sqlContent);\n                preStat.executeUpdate();\n                dmsDocument.setContentID(nContentID);\n                sqlVersion = ""INSERT INTO DMS_VERSION VALUES("" + nVersionID.toString() + "", "" + nDocID.toString() + "", 1,\'ROOT\',0,"" + nContentID.toString() + "",0, \'Ref Num\', \'desc\', 20480, \'A\', null, \'A\',0,0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                preStat = conn.prepareStatement(sqlVersion);\n                preStat.executeUpdate();\n                dmsDocument.setVersionID(nVersionID);\n                dmsDocument.setVersionID(new Integer(1));\n                dmsDocument.setVersionLabel(""ROOT"");\n                sqlDocVersion = ""INSERT INTO MTM_DOCUMENT_VERSION VALUES("" + nMtmDocVersionID.toString() + "","" + nDocID.toString() + "","" + nVersionID.toString() + "",\'A\', 0, 0,\'"" + dmsDocument.getCreateDate().toString() + ""\',0,\'"" + dmsDocument.getCreateDate().toString() + ""\')"";\n                preStat = conn.prepareStatement(sqlDocVersion);\n                preStat.executeUpdate();\n                nDocID = new Integer(nDocID.intValue() + 1);\n                nDocDetailID = new Integer(nDocDetailID.intValue() + 1);\n                nVersionID = new Integer(nVersionID.intValue() + 1);\n                nContentID = new Integer(nContentID.intValue() + 1);\n                nDmsRootID = new Integer(nDmsRootID.intValue() + 1);\n                nMtmDocVersionID = new Integer(nMtmDocVersionID.intValue() + 1);\n                SessionContainer sessionContainer = new SessionContainer();\n                if (""D"".equals(dmsDocument.getDocumentType())) {\n                    File outFile = new File(sPhysicalLoc + ""temp.txt"");\n                    PrintStream out = new PrintStream(new FileOutputStream(outFile, false), true);\n                    out.println(formatNumber(i));\n                    out.print(inFileData);\n                    try {\n                        out.close();\n                    } catch (Exception ignore) {\n                        out = null;\n                    }\n                    FileInputStream data = new FileInputStream(outFile);\n                    indexDocument(dmsDocument, data, GlobalConstant.OP_MODE_INSERT);\n                    try {\n                        data.close();\n                    } catch (Exception ignore) {\n                        data = null;\n                    }\n                }\n                count++;\n            } catch (Exception ee) {\n                log.error(ee, ee);\n                conn.rollback();\n            } finally {\n                try {\n                    preStat.close();\n                    conn.rollback();\n                } catch (Exception ep) {\n                }\n            }\n        }\n        try {\n            infile.close();\n        } catch (Exception ignore) {\n            infile = null;\n        }\n        PreparedStatement statment = null;\n        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {\n            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocID.toString() + "" WHERE TABLE_NAME=\'DMS_DOCUMENT\'"");\n            statment.executeUpdate();\n        } else {\n            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES(\'DMS_DOCUMENT\', "" + nDocID.toString() + "")"");\n            statment.executeUpdate();\n        }\n        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {\n            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocDetailID.toString() + "" WHERE TABLE_NAME=\'DMS_DOCUMENT_DETAIL\'"");\n            statment.executeUpdate();\n        } else {\n            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES(\'DMS_DOCUMENT_DETAIL\', "" + nDocDetailID.toString() + "")"");\n            statment.executeUpdate();\n        }\n        if (htTableKey.containsKey(""DMS_VERSION"")) {\n            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nVersionID.toString() + "" WHERE TABLE_NAME=\'DMS_VERSION\'"");\n            statment.executeUpdate();\n        } else {\n            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES(\'DMS_VERSION\', "" + nVersionID.toString() + "")"");\n            statment.executeUpdate();\n        }\n        if (htTableKey.containsKey(""DMS_CONTENT"")) {\n            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nContentID.toString() + "" WHERE TABLE_NAME=\'DMS_CONTENT\'"");\n            statment.executeUpdate();\n        } else {\n            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES(\'DMS_CONTENT\', "" + nContentID.toString() + "")"");\n            statment.executeUpdate();\n        }\n        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {\n            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nMtmDocVersionID.toString() + "" WHERE TABLE_NAME=\'MTM_DOCUMENT_VERSION\'"");\n            statment.executeUpdate();\n        } else {\n            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES(\'MTM_DOCUMENT_VERSION\', "" + nMtmDocVersionID.toString() + "")"");\n            statment.executeUpdate();\n        }\n        statment.close();\n        System.out.println(""final value: "" + "" DocumentID "" + nDocID + "" DocDetailID "" + nDocDetailID + "" DocVersion "" + nVersionID + "" DocContent "" + nContentID + "" nMtmDocVersionID "" + nMtmDocVersionID);\n        closeDBConn();\n    }\n']",85,,1,0,,-4,"componentName,currentPilot,psta",,,,,Greedy,1,0.008778083324432372
175,"['19886663', '21273053', '    public boolean retrieveByPMID(String pmid) {\n        try {\n            URL url = new URL(baseURL + ""&id="" + pmid.trim());\n            BufferedReader xml = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            StringBuffer title_sb = new StringBuffer();\n            while ((line = xml.readLine()) != null) {\n                if (line.indexOf(""<ArticleTitle>"") != -1) {\n                    title_sb.delete(0, title_sb.length());\n                    title_sb.append(line.substring(line.indexOf(""<ArticleTitle>"") + 14, line.length() - 15));\n                } else if (line.indexOf(""<AbstractText>"") != -1) {\n                    PrintWriter article = new PrintWriter(new FileWriter(new File(outputDir.getPath() + File.separatorChar + pmid + "".txt"")));\n                    article.println(title_sb);\n                    article.println(line.substring(line.indexOf(""<AbstractText>"") + 14, line.length() - 15));\n                    article.close();\n                    break;\n                }\n            }\n            xml.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n', '    public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {\n        int length = list.size();\n        Index_value[] enemy_dist = new Index_value[length];\n        if (field.equals("""") || field.equals(""location"")) {\n            Location cur_loc = this.getLocation();\n            for (int i = 0; i < length; i++) {\n                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));\n            }\n        } else if (field.equals(""health"")) {\n            for (int i = 0; i < length; i++) {\n                enemy_dist[i] = new Index_value(i, list.get(i).health);\n            }\n        } else {\n            say(""impossible to sort list - nothing modified"");\n            return list;\n        }\n        boolean permut;\n        do {\n            permut = false;\n            for (int i = 0; i < length - 1; i++) {\n                if (enemy_dist[i].value > enemy_dist[i + 1].value) {\n                    Index_value a = enemy_dist[i];\n                    enemy_dist[i] = enemy_dist[i + 1];\n                    enemy_dist[i + 1] = a;\n                    permut = true;\n                }\n            }\n        } while (permut);\n        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);\n        for (int i = 0; i < length; i++) {\n            new_enemy_list.addLast(list.get(enemy_dist[i].index));\n        }\n        return new_enemy_list;\n    }\n']",249,"    public boolean retrieveByPMID(String cmname) {
        try {
            URL file = new URL(baseURL + ""&id="" + cmname.trim());
            BufferedReader zip = new BufferedReader(new InputStreamReader(file.openStream()));
            String line = null;
            StringBuffer  title_nb = new StringBuffer();
            while ((line = zip.readLine()) != null) {
                if (line.indexOf(""<ArticleTitle>"") != -1) {
                     title_nb.delete(0,  title_nb.length());
                     title_nb.append(line.substring(line.indexOf(""<ArticleTitle>"") + 14, line.length() - 15));
                } else if (line.indexOf(""<AbstractText>"") != -1) {
                    PrintWriter orb = new PrintWriter(new FileWriter(new File(outputDir.getPath() + File.separatorChar + cmname + "".txt"")));
                    orb.println( title_nb);
                    orb.println(line.substring(line.indexOf(""<AbstractText>"") + 14, line.length() - 15));
                    orb.close();
                    break;
                }
            }
            zip.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
",0,0,0,-1,"pmid,url,xml,line,title_sb,article","pmid:0.0,url:0.0005269646644592285,xml:-7.343292236328125e-05,line:0.00028634071350097656,title_sb:0.0,article:1.5735626220703125e-05,",5,17,"url:file,line:line,article:orb,pmid:cmname,title_sb: title_nb,xml:zip,",Greedy,308,0.14569734334945678
176,"['13902980', '11840745', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public final void close() throws IOException {\n        if (dataStream == null) throw new NullPointerException(""Write stream is null."");\n        dataStream.flush();\n        dataStream.close();\n        dataStream = null;\n        File tmpFile = new File(packPath + "".tmp"");\n        FileOutputStream packStream = new FileOutputStream(packPath);\n        try {\n            String nbFiles = Long.toString(currentNbFiles) + ""\\0"";\n            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));\n            structBufferWriter.flush();\n            structBufferWriter.close();\n            int headerSize = structBuffer.size() + nbFiles.length();\n            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));\n            packStream.write(\'\\0\');\n            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));\n            structBuffer.writeTo(packStream);\n            structBufferWriter = null;\n            structBuffer = null;\n            FileInputStream in = new FileInputStream(tmpFile);\n            try {\n                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];\n                int read;\n                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);\n                packStream.flush();\n                packStream.close();\n            } finally {\n                Utilities.closeStream(in);\n            }\n        } finally {\n            Utilities.closeStream(packStream);\n        }\n        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);\n        packPath = null;\n        structBuffer = null;\n    }\n']",193,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:0.5459102392196655,out:-0.5705493688583374,buffer:-0.39779403805732727,read:-0.09714916348457336,success:-0.013701558113098145,",0,0,"in:in,infile:infile,outfile:outfile,success:success,read:read,buffer:buffer,out:out,",Greedy,332,0.14271550973256428
177,"['6217412', '8364554', '    protected void EncodeRoute() throws EncodeFailedException, IOException {\n        File storefile = getNode().getCodec().PackStore(null, ReturnStore);\n        DownRoute.EncodeData(storefile);\n        File data = getNode().getCodec().PackRemoteDownload(this);\n        data = PigData.EncodeData(data);\n        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);\n        FileChannel foc = fos.getChannel();\n        FileInputStream fis = new FileInputStream(data);\n        FileChannel fic = fis.getChannel();\n        fic.transferTo(0, fic.size(), foc);\n        foc.close();\n        fic.close();\n        UpRoute.EncodeData(PiggybackRouteFile);\n    }\n', '    @Override\n    public void executeInterruptible() {\n        EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;\n        File encoderFile = null;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            if (Platform.isWindows()) {\n                encoderFile = new File(""."", ""lame.exe"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");\n            } else if (Platform.isLinux()) {\n                encoderFile = new File(""."", ""lame"");\n                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");\n            } else {\n                MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));\n                return;\n            }\n            os = new FileOutputStream(encoderFile);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            LOG.error(""Cannot extract encoder executable"", e);\n            MainWindowInterface.showError(e);\n            return;\n        } finally {\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(os);\n        }\n        encoderFile.setExecutable(true, true);\n        try {\n            long totalSize = 0l;\n            for (int i = 0, l = filesModel.getSize(); i < l; i++) {\n                if (isInterrupted()) return;\n                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);\n                File origFile = element.getFile();\n                totalSize += origFile.length();\n            }\n            rangeModel = dialog.getProgressBar().getModel();\n            rangeModel.setMinimum(0);\n            rangeModel.setMaximum((int) totalSize);\n            int parallelProcesses = dialog.getParallelProcesses();\n            List<Thread> encodingThreads = new ArrayList<Thread>();\n            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);\n            for (int i = 0; i < parallelProcesses; i++) {\n                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);\n                Thread thread = new Thread(encoderLauncherRunnable);\n                encodingRunnables.add(encoderLauncherRunnable);\n                encodingThreads.add(thread);\n                thread.start();\n            }\n            for (Thread thread : encodingThreads) {\n                thread.join();\n            }\n            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));\n        } catch (Exception e) {\n            LOG.error(""Cannot encode files"", e);\n            MainWindowInterface.showError(e);\n        } finally {\n            if (encoderFile != null) encoderFile.delete();\n            dialog.setVisible(false);\n        }\n    }\n']",133,"    protected void EncodeRoute() throws EncodeFailedException, IOException {
        File storefile = getNode().getCodec().PackStore(null, ReturnStore);
        DownRoute.EncodeData(storefile);
        File parent = getNode().getCodec().PackRemoteDownload(this);
        parent = PigData.EncodeData(parent);
        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(parent);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        UpRoute.EncodeData(PiggybackRouteFile);
    }
",1,1,1,-1,"storefile,data,fos,foc,fis,fic","storefile:0.0,data:0.001588284969329834,fos:0.0,foc:0.0,fis:0.0,fic:0.0,",1,4,"data:parent,storefile:storefile,fos:fos,foc:foc,fis:fis,fic:fic,",Greedy,196,0.10064303874969482
178,"['12306298', '9970377', '    public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {\n        if (destFile.exists()) {\n            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);\n        }\n        if (!sourceFile.exists()) {\n            return;\n        }\n        boolean succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            NLogger.warn(FileUtils.class, ""First renameTo operation worked!"");\n            return;\n        }\n        NLogger.warn(FileUtils.class, ""First renameTo operation failed."");\n        System.gc();\n        Thread.yield();\n        succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            return;\n        }\n        NLogger.warn(FileUtils.class, ""Second renameTo operation failed."");\n        FileInputStream input = null;\n        FileOutputStream output = null;\n        try {\n            input = new FileInputStream(sourceFile);\n            output = new FileOutputStream(destFile);\n            long lengthLeft = sourceFile.length();\n            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];\n            int read;\n            while (lengthLeft > 0) {\n                read = input.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                lengthLeft -= read;\n                output.write(buffer, 0, read);\n            }\n        } catch (IOException exp) {\n            NLogger.warn(FileUtils.class, ""Third renameTo operation failed."");\n            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);\n        } finally {\n            IOUtil.closeQuietly(input);\n            IOUtil.closeQuietly(output);\n        }\n        destFile.setLastModified(sourceFile.lastModified());\n        FileUtils.deleteFileMultiFallback(sourceFile);\n    }\n', '    public void doWrite() {\n        System.out.print(""\\nSerializing..."");\n        try {\n            IFile ifile = null;\n            File file = null;\n            if (null != method.getResource()) {\n                ifile = method.getJavaProject().getResource().getProject().getFile(Statics.CFG_DIR + Statics.SEPARATOR + path.substring(path.lastIndexOf(Statics.SEPARATOR)));\n            }\n            file = new File(path);\n            if (file.exists()) {\n                boolean ans = MessageDialog.openQuestion(wb.getSite().getShell(), ""Flow Plug-in"", ""File already exists. Do you want to overwrite it?"");\n                if (ans) {\n                    file.delete();\n                }\n            }\n            if (!file.exists()) {\n                FileOutputStream fos = new FileOutputStream(path);\n                ObjectOutputStream oos = new ObjectOutputStream(fos);\n                BufferedOutputStream bo = new BufferedOutputStream(oos);\n                oos.writeObject(anode);\n                oos.flush();\n                oos.close();\n                InputStream is = new FileInputStream(path);\n                if (null != ifile) {\n                    if (ifile.exists()) ifile.delete(true, null);\n                    ifile.create(is, IResource.NONE, null);\n                }\n                Path fullpath = new Path(path);\n                IDE.openEditorOnFileStore(wb.getSite().getPage(), EFS.getLocalFileSystem().getStore(fullpath));\n                method.getResource().refreshLocal(10, null);\n                System.out.println(""Serializing ...Done!"");\n            }\n        } catch (PartInitException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (CoreException e) {\n            e.printStackTrace();\n        }\n    }\n']",306,"    public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {
        if (destFile.exists()) {
            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);
        }
        if (!sourceFile.exists()) {
            return;
        }
        boolean succ = sourceFile.renameTo(destFile);
        if (succ) {
            NLogger.warn(FileUtils.class, ""First renameTo operation worked!"");
            return;
        }
        NLogger.warn(FileUtils.class, ""First renameTo operation failed."");
        System.gc();
        Thread.yield();
        succ = sourceFile.renameTo(destFile);
        if (succ) {
            return;
        }
        NLogger.warn(FileUtils.class, ""Second renameTo operation failed."");
        FileInputStream url = null;
        FileOutputStream output = null;
        try {
            url = new FileInputStream(sourceFile);
            output = new FileOutputStream(destFile);
            long lengthLeft = sourceFile.length();
            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];
            int read;
            while (lengthLeft > 0) {
                read = url.read(buffer);
                if (read == -1) {
                    break;
                }
                lengthLeft -= read;
                output.write(buffer, 0, read);
            }
        } catch (IOException exp) {
            NLogger.warn(FileUtils.class, ""Third renameTo operation failed."");
            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);
        } finally {
            IOUtil.closeQuietly(url);
            IOUtil.closeQuietly(output);
        }
        destFile.setLastModified(sourceFile.lastModified());
        FileUtils.deleteFileMultiFallback(sourceFile);
    }
",1,1,0,1,"sourceFile,destFile,succ,input,output,lengthLeft,buffer,read","sourceFile:0.0,destFile:0.0,succ:0.0,input:0.0008438825607299805,output:0.00028270483016967773,lengthLeft:0.0,buffer:9.79304313659668e-05,read:0.000390470027923584,",1,4,"input:url,",Greedy,93,0.04852002461751302
179,"['7495800', '6541774', '    public static void copyFile(File fromFile, File toFile) throws IOException {\n        FileReader from = new FileReader(fromFile);\n        FileWriter to = new FileWriter(toFile);\n        char[] buffer = new char[4096];\n        int bytes_read;\n        while ((bytes_read = from.read(buffer)) != -1) {\n            to.write(buffer, 0, bytes_read);\n        }\n        to.flush();\n        to.close();\n        from.close();\n    }\n', '    private static String digest(String val) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(val.trim().getBytes());\n            byte[] digest = md.digest();\n            StringBuffer buf = new StringBuffer();\n            for (byte b : digest) {\n                String hexString = Integer.toHexString(b);\n                int length = hexString.length();\n                if (length > 2) {\n                    hexString = hexString.substring(length - 2, length);\n                } else if (length < 2) {\n                    hexString = ""0"" + hexString;\n                }\n                buf.append(hexString);\n            }\n            return buf.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new EnerjyException(""Could not create digest: MD5"", e);\n        }\n    }\n']",94,"    public static void copyFile(File fromFile, File targetFile) throws IOException {
        FileReader From = new FileReader(fromFile);
        FileWriter io = new FileWriter(targetFile);
        char[] read = new char[4096];
        int  bytes_valid;
        while (( bytes_valid = From.read(read)) != -1) {
            io.write(read, 0,  bytes_valid);
        }
        io.flush();
        io.close();
        From.close();
    }
",0,0,0,-1,"fromFile,toFile,from,to,buffer,bytes_read","fromFile:0.0,toFile:0.0,from:1.0728836059570312e-06,to:1.1205673217773438e-05,buffer:1.0728836059570312e-06,bytes_read:0.0,",5,15,"to:io,from:From,buffer:read,fromFile:fromFile,toFile:targetFile,bytes_read: bytes_valid,",Greedy,216,0.1060581644376119
180,"['7687037', '15826301', '    public synchronized int insertMessage(FrostMessageObject mo) {\n        AttachmentList files = mo.getAttachmentsOfType(Attachment.FILE);\n        AttachmentList boards = mo.getAttachmentsOfType(Attachment.BOARD);\n        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();\n        try {\n            conn.setAutoCommit(false);\n            PreparedStatement ps = conn.prepareStatement(""INSERT INTO "" + getMessageTableName() + "" ("" + ""primkey,messageid,inreplyto,isvalid,invalidreason,msgdatetime,msgindex,board,fromname,subject,recipient,signature,"" + ""signaturestatus,publickey,isdeleted,isnew,isreplied,isjunk,isflagged,isstarred,hasfileattachment,hasboardattachment,idlinepos,idlinelen"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");\n            Long identity = null;\n            Statement stmt = AppLayerDatabase.getInstance().createStatement();\n            ResultSet rs = stmt.executeQuery(""select UNIQUEKEY(\'"" + getMessageTableName() + ""\')"");\n            if (rs.next()) {\n                identity = new Long(rs.getLong(1));\n            } else {\n                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");\n            }\n            rs.close();\n            stmt.close();\n            int i = 1;\n            ps.setLong(i++, identity.longValue());\n            ps.setString(i++, mo.getMessageId());\n            ps.setString(i++, mo.getInReplyTo());\n            ps.setBoolean(i++, mo.isValid());\n            ps.setString(i++, mo.getInvalidReason());\n            ps.setLong(i++, mo.getDateAndTime().getMillis());\n            ps.setInt(i++, mo.getIndex());\n            ps.setInt(i++, mo.getBoard().getPrimaryKey().intValue());\n            ps.setString(i++, mo.getFromName());\n            ps.setString(i++, mo.getSubject());\n            ps.setString(i++, ((mo.getRecipientName() != null && mo.getRecipientName().length() == 0) ? null : mo.getRecipientName()));\n            if (mo.getSignatureV2() == null || mo.getSignatureV2().length() == 0) {\n                ps.setString(i++, mo.getSignatureV1());\n            } else {\n                ps.setString(i++, mo.getSignatureV2());\n            }\n            ps.setInt(i++, mo.getSignatureStatus());\n            ps.setString(i++, mo.getPublicKey());\n            ps.setBoolean(i++, mo.isDeleted());\n            ps.setBoolean(i++, mo.isNew());\n            ps.setBoolean(i++, mo.isReplied());\n            ps.setBoolean(i++, mo.isJunk());\n            ps.setBoolean(i++, mo.isFlagged());\n            ps.setBoolean(i++, mo.isStarred());\n            ps.setBoolean(i++, (files.size() > 0));\n            ps.setBoolean(i++, (boards.size() > 0));\n            ps.setInt(i++, mo.getIdLinePos());\n            ps.setInt(i++, mo.getIdLineLen());\n            int inserted;\n            try {\n                inserted = ps.executeUpdate();\n            } finally {\n                ps.close();\n            }\n            if (inserted == 0) {\n                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");\n                throw new Exception(""message insert returned 0 !!!"");\n            }\n            mo.setMsgIdentity(identity.longValue());\n            PreparedStatement pc = conn.prepareStatement(""INSERT INTO "" + getContentTableName() + "" (msgref,msgcontent) VALUES (?,?)"");\n            pc.setLong(1, mo.getMsgIdentity());\n            pc.setString(2, mo.getContent());\n            try {\n                inserted = pc.executeUpdate();\n            } finally {\n                pc.close();\n            }\n            if (inserted == 0) {\n                logger.log(Level.SEVERE, ""message content insert returned 0 !!!"");\n                throw new Exception(""message content insert returned 0 !!!"");\n            }\n            if (files.size() > 0) {\n                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getFileAttachmentsTableName() + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");\n                try {\n                    for (Iterator it = files.iterator(); it.hasNext(); ) {\n                        FileAttachment fa = (FileAttachment) it.next();\n                        int ix = 1;\n                        p.setLong(ix++, mo.getMsgIdentity());\n                        p.setString(ix++, fa.getFilename());\n                        p.setLong(ix++, fa.getFileSize());\n                        p.setString(ix++, fa.getKey());\n                        int ins = p.executeUpdate();\n                        if (ins == 0) {\n                            logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");\n                            throw new Exception(""fileattachment insert returned 0 !!!"");\n                        }\n                    }\n                } finally {\n                    p.close();\n                }\n            }\n            if (boards.size() > 0) {\n                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getBoardAttachmentsTableName() + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");\n                try {\n                    for (Iterator it = boards.iterator(); it.hasNext(); ) {\n                        BoardAttachment ba = (BoardAttachment) it.next();\n                        Board b = ba.getBoardObj();\n                        int ix = 1;\n                        p.setLong(ix++, mo.getMsgIdentity());\n                        p.setString(ix++, b.getNameLowerCase());\n                        p.setString(ix++, b.getPublicKey());\n                        p.setString(ix++, b.getPrivateKey());\n                        p.setString(ix++, b.getDescription());\n                        int ins = p.executeUpdate();\n                        if (ins == 0) {\n                            logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");\n                            throw new Exception(""boardattachment insert returned 0 !!!"");\n                        }\n                    }\n                } finally {\n                    p.close();\n                }\n            }\n            conn.commit();\n            conn.setAutoCommit(true);\n            return INSERT_OK;\n        } catch (Throwable t) {\n            boolean isDuplicate;\n            if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_ID_UNIQUE_ONLY"") > 0) {\n                isDuplicate = true;\n                logger.warning(""Duplicate message id, not added to database table: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex());\n            } else if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_UNIQUE_ONLY"") > 0) {\n                isDuplicate = true;\n                logger.warning(""Duplicate msgdatetime,index,board, not added to database table: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex());\n            } else {\n                isDuplicate = false;\n                logger.log(Level.SEVERE, ""Exception during insert of message: msgid=\'"" + mo.getMessageId() + ""\', board="" + mo.getBoard().getName() + "", date=\'"" + mo.getDateAndTimeString() + ""\', index="" + mo.getIndex(), t);\n                try {\n                    conn.rollback();\n                } catch (Throwable t1) {\n                    logger.log(Level.SEVERE, ""Exception during rollback"", t1);\n                }\n            }\n            try {\n                conn.setAutoCommit(true);\n            } catch (Throwable t1) {\n            }\n            if (isDuplicate) {\n                return INSERT_DUPLICATE;\n            } else {\n                return INSERT_ERROR;\n            }\n        } finally {\n            AppLayerDatabase.getInstance().givePooledConnection(conn);\n        }\n    }\n', '    public static int getContentLength(String address) {\n        URLConnection conn = null;\n        int contentLength = 0;\n        try {\n            URL url = new URL(address);\n            conn = url.openConnection();\n            contentLength = conn.getContentLength();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return contentLength;\n    }\n']",1489,"    public synchronized int insertMessage(FrostMessageObject M) {
        AttachmentList classes = M.getAttachmentsOfType(Attachment.FILE);
        AttachmentList ids = M.getAttachmentsOfType(Attachment.BOARD);
        Connection cp = AppLayerDatabase.getInstance().getPooledConnection();
        try {
            cp.setAutoCommit(false);
            PreparedStatement proxy = cp.prepareStatement(""INSERT INTO "" + getMessageTableName() + "" ("" + ""primkey,messageid,inreplyto,isvalid,invalidreason,msgdatetime,msgindex,board,fromname,subject,recipient,signature,"" + ""signaturestatus,publickey,isdeleted,isnew,isreplied,isjunk,isflagged,isstarred,hasfileattachment,hasboardattachment,idlinepos,idlinelen"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");
            Long identity = null;
            Statement  str = AppLayerDatabase.getInstance().createStatement();
            ResultSet maps =  str.executeQuery(""select UNIQUEKEY('"" + getMessageTableName() + ""')"");
            if (maps.next()) {
                identity = new Long(maps.getLong(1));
            } else {
                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");
            }
            maps.close();
             str.close();
            int i = 1;
            proxy.setLong(i++, identity.longValue());
            proxy.setString(i++, M.getMessageId());
            proxy.setString(i++, M.getInReplyTo());
            proxy.setBoolean(i++, M.isValid());
            proxy.setString(i++, M.getInvalidReason());
            proxy.setLong(i++, M.getDateAndTime().getMillis());
            proxy.setInt(i++, M.getIndex());
            proxy.setInt(i++, M.getBoard().getPrimaryKey().intValue());
            proxy.setString(i++, M.getFromName());
            proxy.setString(i++, M.getSubject());
            proxy.setString(i++, ((M.getRecipientName() != null && M.getRecipientName().length() == 0) ? null : M.getRecipientName()));
            if (M.getSignatureV2() == null || M.getSignatureV2().length() == 0) {
                proxy.setString(i++, M.getSignatureV1());
            } else {
                proxy.setString(i++, M.getSignatureV2());
            }
            proxy.setInt(i++, M.getSignatureStatus());
            proxy.setString(i++, M.getPublicKey());
            proxy.setBoolean(i++, M.isDeleted());
            proxy.setBoolean(i++, M.isNew());
            proxy.setBoolean(i++, M.isReplied());
            proxy.setBoolean(i++, M.isJunk());
            proxy.setBoolean(i++, M.isFlagged());
            proxy.setBoolean(i++, M.isStarred());
            proxy.setBoolean(i++, (classes.size() > 0));
            proxy.setBoolean(i++, (ids.size() > 0));
            proxy.setInt(i++, M.getIdLinePos());
            proxy.setInt(i++, M.getIdLineLen());
            int inserted;
            try {
                inserted = proxy.executeUpdate();
            } finally {
                proxy.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");
                throw new Exception(""message insert returned 0 !!!"");
            }
            M.setMsgIdentity(identity.longValue());
            PreparedStatement pc = cp.prepareStatement(""INSERT INTO "" + getContentTableName() + "" (msgref,msgcontent) VALUES (?,?)"");
            pc.setLong(1, M.getMsgIdentity());
            pc.setString(2, M.getContent());
            try {
                inserted = pc.executeUpdate();
            } finally {
                pc.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message content insert returned 0 !!!"");
                throw new Exception(""message content insert returned 0 !!!"");
            }
            if (classes.size() > 0) {
                PreparedStatement p = cp.prepareStatement(""INSERT INTO "" + getFileAttachmentsTableName() + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");
                try {
                    for (Iterator it = classes.iterator(); it.hasNext(); ) {
                        FileAttachment fa = (FileAttachment) it.next();
                        int ix = 1;
                        p.setLong(ix++, M.getMsgIdentity());
                        p.setString(ix++, fa.getFilename());
                        p.setLong(ix++, fa.getFileSize());
                        p.setString(ix++, fa.getKey());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");
                            throw new Exception(""fileattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            if (ids.size() > 0) {
                PreparedStatement p = cp.prepareStatement(""INSERT INTO "" + getBoardAttachmentsTableName() + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");
                try {
                    for (Iterator it = ids.iterator(); it.hasNext(); ) {
                        BoardAttachment ba = (BoardAttachment) it.next();
                        Board b = ba.getBoardObj();
                        int ix = 1;
                        p.setLong(ix++, M.getMsgIdentity());
                        p.setString(ix++, b.getNameLowerCase());
                        p.setString(ix++, b.getPublicKey());
                        p.setString(ix++, b.getPrivateKey());
                        p.setString(ix++, b.getDescription());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");
                            throw new Exception(""boardattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            cp.commit();
            cp.setAutoCommit(true);
            return INSERT_OK;
        } catch (Throwable t) {
            boolean isDuplicate;
            if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_ID_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate message id, not added to database table: msgid='"" + M.getMessageId() + ""', board="" + M.getBoard().getName() + "", date='"" + M.getDateAndTimeString() + ""', index="" + M.getIndex());
            } else if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate msgdatetime,index,board, not added to database table: msgid='"" + M.getMessageId() + ""', board="" + M.getBoard().getName() + "", date='"" + M.getDateAndTimeString() + ""', index="" + M.getIndex());
            } else {
                isDuplicate = false;
                logger.log(Level.SEVERE, ""Exception during insert of message: msgid='"" + M.getMessageId() + ""', board="" + M.getBoard().getName() + "", date='"" + M.getDateAndTimeString() + ""', index="" + M.getIndex(), t);
                try {
                    cp.rollback();
                } catch (Throwable t1) {
                    logger.log(Level.SEVERE, ""Exception during rollback"", t1);
                }
            }
            try {
                cp.setAutoCommit(true);
            } catch (Throwable t1) {
            }
            if (isDuplicate) {
                return INSERT_DUPLICATE;
            } else {
                return INSERT_ERROR;
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(cp);
        }
    }
",0,0,0,-1,"mo,files,boards,conn,ps,identity,stmt,rs,i","mo:3.55839729309082e-05,files:-1.1801719665527344e-05,boards:4.827976226806641e-06,conn:-2.7179718017578125e-05,ps:-2.3424625396728516e-05,identity:0.0,stmt:0.0,rs:1.8477439880371094e-05,i:6.282329559326172e-05,",7,100,"i:i,mo:M,rs:maps,boards:ids,identity:identity,stmt: str,files:classes,ps:proxy,conn:cp,",Greedy,540,0.3846341252326965
181,"['22255481', '23186914', '    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        MessageDigest encript = MessageDigest.getInstance(""MD5"");\n        encript.update(password.getBytes());\n        byte[] b = encript.digest();\n        int size = b.length;\n        StringBuffer h = new StringBuffer(size);\n        for (int i = 0; i < size; i++) {\n            h.append(b[i]);\n        }\n        return h.toString();\n    }\n', '    public void save(Connection conn, boolean commit) throws SQLException {\n        PreparedStatement stmt = null;\n        if (!isValid()) {\n            String errorMessage = ""Unable to save invalid DAO \'"" + getClass().getName() + ""\'!"";\n            if (log.isErrorEnabled()) {\n                log.error(errorMessage);\n            }\n            throw new SQLException(errorMessage);\n        }\n        try {\n            if (isNew()) {\n                primaryKey = createNewPrimaryKey();\n                stmt = conn.prepareStatement(getInsertSql());\n            } else {\n                stmt = conn.prepareStatement(getUpdateSql());\n            }\n            setValues(stmt);\n            int rowCount = stmt.executeUpdate();\n            if (rowCount != 1) {\n                primaryKey = OvUuid.NULL_UUID;\n                if (commit) {\n                    conn.rollback();\n                }\n                String errorMessage = ""Invalid number of rows changed!"";\n                if (log.isErrorEnabled()) {\n                    log.error(errorMessage);\n                }\n                throw new SQLException(errorMessage);\n            } else {\n                if (commit) {\n                    conn.commit();\n                }\n            }\n        } finally {\n            OvJdbcUtils.closeStatement(stmt);\n        }\n    }\n']",94,"    private String encryptPassword(String hash) throws NoSuchAlgorithmException {
        MessageDigest encec = MessageDigest.getInstance(""MD5"");
        encec.update(hash.getBytes());
        byte[] bb = encec.digest();
        int time = bb.length;
        StringBuffer hash = new StringBuffer(time);
        for (int key = 0; key < time; key++) {
            hash.append(bb[key]);
        }
        return hash.toString();
    }
",0,0,0,-1,"password,encript,b,size,h,i","password:-0.0002511739730834961,encript:0.0,b:-1.1920928955078125e-06,size:5.304813385009766e-06,h:3.0517578125e-05,i:0.00022113323211669922,",6,18,"i:key,h:hash,size:time,encript:encec,b:bb,password:hash,",Greedy,274,0.11918091773986816
182,"['15292308', '4003117', '    private static File createFileFromURL(URL url) throws IOException {\n        File tempFile = File.createTempFile(""oboFile"", "".obo"");\n        PrintStream ps = new PrintStream(tempFile);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            ps.println(line);\n        }\n        ps.close();\n        return tempFile;\n    }\n', '    public void execute() {\n        check();\n        FTPClient ftp = new FTPClient();\n        try {\n            ftp.connect(host, port);\n        } catch (IOException ex) {\n            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");\n        }\n        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());\n        }\n        try {\n            try {\n                if (!ftp.login(userid, password)) {\n                    throw new BuildException(""Identification failed"");\n                }\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (binary) {\n                try {\n                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);\n                } catch (IOException ex) {\n                    throw new BuildException(ex);\n                }\n                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());\n                }\n            }\n            try {\n                ftp.changeWorkingDirectory(remotedir);\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());\n            }\n            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;\n            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;\n            BufferedOutputStream outstream = null;\n            try {\n                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));\n                ftp.retrieveFile(remoteFullFileName, outstream);\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                throw new BuildException(""File retrieval of \'"" + localFullFileName + ""\' has failed ("" + ftp.getReplyString() + "")"");\n            }\n        } finally {\n            try {\n                ftp.disconnect();\n            } catch (IOException ex) {\n                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");\n            }\n        }\n    }\n']",89,"    private static File createFileFromURL(URL buffer) throws IOException {
        File poraryFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream pers = new PrintStream(poraryFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(buffer.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            pers.println(line);
        }
        pers.close();
        return poraryFile;
    }
",0,0,0,-1,"url,tempFile,ps,reader,line","url:0.00023257732391357422,tempFile:0.0,ps:5.739927291870117e-05,reader:-0.0003746151924133301,line:-0.00031876564025878906,",3,8,"url:buffer,ps:pers,tempFile:poraryFile,line:line,reader:reader,",Greedy,233,0.10410087903340658
183,"['11444436', '18519247', '    public void run() {\n        try {\n            FTPClient c = new FTPClient();\n            c.configure(ftpConfig);\n            logger.debug(""Trying to connect"");\n            c.connect(""127.0.0.1"", 21211);\n            logger.debug(""Connected"");\n            c.setSoTimeout(5000);\n            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {\n                logger.debug(""Houston, we have a problem. D/C"");\n                c.disconnect();\n                throw new Exception();\n            }\n            if (c.login(""drftpd"", ""drftpd"")) {\n                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");\n                _sc.addSuccess();\n                Thread.sleep(5000);\n                c.disconnect();\n            } else {\n                logger.debug(""Login failed, D/C!"");\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            logger.debug(e, e);\n            _sc.addFailure();\n        }\n        logger.debug(""exiting"");\n    }\n', '    public List<PathObject> fetchPath(PathObject parent) throws NetworkException {\n        if (parent.isFetched()) {\n            return parent.getChildren();\n        } else if (!""d"".equals(parent.getType())) {\n            return null;\n        }\n        HttpClient client = HttpConfig.newInstance();\n        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN + parent.getPath());\n        try {\n            HttpResponse response = client.execute(get);\n            HttpEntity entity = response.getEntity();\n            Document doc = XmlOperator.readDocument(entity.getContent());\n            BBSBodyParseHelper.parsePathList(doc, parent);\n            return parent.getChildren();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n']",192,"    public void run() {
        try {
            FTPClient w = new FTPClient();
            w.configure(ftpConfig);
            logger.debug(""Trying to connect"");
            w.connect(""127.0.0.1"", 21211);
            logger.debug(""Connected"");
            w.setSoTimeout(5000);
            if (!FTPReply.isPositiveCompletion(w.getReplyCode())) {
                logger.debug(""Houston, we have a problem. D/C"");
                w.disconnect();
                throw new Exception();
            }
            if (w.login(""drftpd"", ""drftpd"")) {
                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");
                _sc.addSuccess();
                Thread.sleep(5000);
                w.disconnect();
            } else {
                logger.debug(""Login failed, D/C!"");
                throw new Exception();
            }
        } catch (Exception e) {
            logger.debug(e, e);
            _sc.addFailure();
        }
        logger.debug(""exiting"");
    }
",0,0,0,-1,c,"c:0.00013822317123413086,",1,8,"c:w,",Greedy,63,0.03419609864552816
184,"['20413859', '7474020', '    @Override\n    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {\n        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n            final HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n            final HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n            final String contextPath = httpServletRequest.getContextPath() + ""/"";\n            final String requestURI = httpServletRequest.getRequestURI();\n            if (requestURI.startsWith(contextPath)) {\n                final String filterURI = requestURI.substring(contextPath.length());\n                final String filterPath = getFilterPath();\n                if (filterURI.startsWith(filterPath)) {\n                    final String targetURI = filterURI.substring(filterPath.length());\n                    for (final Entry<String, String> entry : mapping.entrySet()) {\n                        final String key = entry.getKey();\n                        final String value = entry.getValue();\n                        if (targetURI.startsWith(key) && (targetURI.length() > key.length())) {\n                            final String resourceName = value + targetURI.substring(key.length());\n                            InputStream is = null;\n                            try {\n                                is = getClass().getResourceAsStream(""/"" + resourceName);\n                                if (is != null) {\n                                    IOUtils.copy(is, httpServletResponse.getOutputStream());\n                                    httpServletResponse.flushBuffer();\n                                    break;\n                                } else {\n                                    httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);\n                                    break;\n                                }\n                            } catch (final IOException ioex) {\n                                throw new ServletException(""Error serving resource ["" + resourceName + ""]."", ioex);\n                            } finally {\n                                IOUtils.closeQuietly(is);\n                            }\n                        }\n                    }\n                } else {\n                    chain.doFilter(request, response);\n                }\n            } else {\n                chain.doFilter(request, response);\n            }\n        } else {\n            chain.doFilter(request, response);\n        }\n    }\n', '    protected void copyClassFiles(File initFile, File destFile) {\n        if (initFile != null && destFile != null) {\n            File[] children = initFile.listFiles();\n            File childDestinationDirectory = null, destChild = null;\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            FileChannel cin = null, cout = null;\n            for (File child : children) {\n                if (child != null) {\n                    if (child.isDirectory()) {\n                        childDestinationDirectory = fileExistAsChild(destFile, child.getName());\n                        if (childDestinationDirectory == null) {\n                            try {\n                                childDestinationDirectory = new File(destFile, child.getName());\n                                childDestinationDirectory.mkdir();\n                            } catch (Exception ex) {\n                                ex.printStackTrace();\n                            }\n                        }\n                        copyClassFiles(child, childDestinationDirectory);\n                    } else {\n                        try {\n                            destChild = new File(destFile, child.getName());\n                            in = new FileInputStream(child);\n                            out = new FileOutputStream(destChild);\n                            cin = in.getChannel();\n                            cout = out.getChannel();\n                            ByteBuffer buffer = ByteBuffer.allocate(1000);\n                            int pos = 0;\n                            while (cin.position() < cin.size()) {\n                                pos = cin.read(buffer);\n                                if (pos > 0) {\n                                    cout.write(buffer);\n                                }\n                            }\n                            cin.close();\n                            cout.close();\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n    }\n']",356,"    @Override
    public void doFilter(final ServletRequest reader, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {
        if (reader instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            final HttpServletRequest httpServletRequest = (HttpServletRequest) reader;
            final HttpServletResponse httpServletResponse = (HttpServletResponse) response;
            final String contextPath = httpServletRequest.getContextPath() + ""/"";
            final String requestURI = httpServletRequest.getRequestURI();
            if (requestURI.startsWith(contextPath)) {
                final String filterURI = requestURI.substring(contextPath.length());
                final String filterPath = getFilterPath();
                if (filterURI.startsWith(filterPath)) {
                    final String targetURI = filterURI.substring(filterPath.length());
                    for (final Entry<String, String> entry : mapping.entrySet()) {
                        final String key = entry.getKey();
                        final String url = entry.getValue();
                        if (targetURI.startsWith(key) && (targetURI.length() > key.length())) {
                            final String resourceName = url + targetURI.substring(key.length());
                            InputStream nis = null;
                            try {
                                nis = getClass().getResourceAsStream(""/"" + resourceName);
                                if (nis != null) {
                                    IOUtils.copy(nis, httpServletResponse.getOutputStream());
                                    httpServletResponse.flushBuffer();
                                    break;
                                } else {
                                    httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
                                    break;
                                }
                            } catch (final IOException ioex) {
                                throw new ServletException(""Error serving resource ["" + resourceName + ""]."", ioex);
                            } finally {
                                IOUtils.closeQuietly(nis);
                            }
                        }
                    }
                } else {
                    chain.doFilter(reader, response);
                }
            } else {
                chain.doFilter(reader, response);
            }
        } else {
            chain.doFilter(reader, response);
        }
    }
",1,1,1,-1,"request,response,chain,httpServletRequest,httpServletResponse,contextPath,requestURI,filterURI,filterPath,targetURI,entry,key,value,resourceName,is","request:-4.887580871582031e-06,response:-6.198883056640625e-06,chain:-5.602836608886719e-06,httpServletRequest:0.0,httpServletResponse:0.0,contextPath:0.0,requestURI:0.0,filterURI:0.0,filterPath:0.0,targetURI:0.0,entry:3.5762786865234375e-07,key:2.0265579223632812e-06,value:-1.1920928955078125e-07,resourceName:0.0,is:3.5762786865234375e-07,",3,13,"key:key,entry:entry,is:nis,httpServletRequest:httpServletRequest,httpServletResponse:httpServletResponse,contextPath:contextPath,requestURI:requestURI,filterURI:filterURI,filterPath:filterPath,targetURI:targetURI,resourceName:resourceName,value:url,request:reader,chain:chain,response:response,",Greedy,718,0.3435796618461609
185,"['14974844', '12783807', '    public boolean backupFile(File oldFile, File newFile) {\n        boolean isBkupFileOK = false;\n        FileChannel sourceChannel = null;\n        FileChannel targetChannel = null;\n        try {\n            sourceChannel = new FileInputStream(oldFile).getChannel();\n            targetChannel = new FileOutputStream(newFile).getChannel();\n            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);\n        } finally {\n            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {\n                isBkupFileOK = true;\n            }\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n                if (targetChannel != null) {\n                    targetChannel.close();\n                }\n            } catch (IOException e) {\n                logger.log(Level.INFO, ""closing channels failed"");\n            }\n        }\n        return isBkupFileOK;\n    }\n', '    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        response.setHeader(""Content-type"", ""application/force-download"");\n        response.setHeader(""Content-disposition"", ""attachment"");\n        response.setHeader(""filename"", ""export.txt"");\n        response.setHeader(""Pragma"", ""no-cache"");\n        response.setHeader(""Expires"", ""0"");\n        response.setStatus(HttpServletResponse.SC_OK);\n        baseRequest.setHandled(true);\n        InputStream x = baseRequest.getInputStream();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(x, writer);\n        String theString = writer.toString();\n        System.out.println(theString);\n        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\\n""));\n    }\n']",180,"    public boolean backupFile(File oldFile, File newFile) {
        boolean isBkupDirectoryok = false;
        FileChannel sourceChannel = null;
        FileChannel argetConnection = null;
        try {
            sourceChannel = new FileInputStream(oldFile).getChannel();
            argetConnection = new FileOutputStream(newFile).getChannel();
            argetConnection.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);
        } finally {
            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {
                isBkupDirectoryok = true;
            }
            try {
                if (sourceChannel != null) {
                    sourceChannel.close();
                }
                if (argetConnection != null) {
                    argetConnection.close();
                }
            } catch (IOException e) {
                logger.log(Level.INFO, ""closing channels failed"");
            }
        }
        return isBkupDirectoryok;
    }
",1,1,1,-1,"oldFile,newFile,sourceChannel,targetChannel,isBkupFileOK","oldFile:0.0,newFile:0.0,sourceChannel:0.0,targetChannel:0.0,isBkupFileOK:0.0,",2,8,"oldFile:oldFile,newFile:newFile,sourceChannel:sourceChannel,targetChannel:argetConnection,isBkupFileOK:isBkupDirectoryok,",Greedy,201,0.09757184584935506
186,"['1824914', '11426721', '    public static void copyFile(File source, File destination) throws IOException {\n        destination.getParentFile().mkdirs();\n        BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));\n        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));\n        byte[] buffer = new byte[4096];\n        int read = -1;\n        while ((read = in.read(buffer)) != -1) {\n            out.write(buffer, 0, read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n', '    public boolean uploadToUrl(URL url, Map postData) {\n        boolean success = false;\n        OutputStream oStream;\n        HttpURLConnection urlConn = null;\n        try {\n            urlConn = (HttpURLConnection) url.openConnection();\n            urlConn.setDoOutput(true);\n            urlConn.setDoInput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setAllowUserInteraction(false);\n            String parametersAsString = """";\n            Iterator itParams = postData.entrySet().iterator();\n            while (itParams.hasNext()) {\n                Map.Entry param = (Map.Entry) itParams.next();\n                parametersAsString += (String) param.getKey() + ""="" + URLEncoder.encode((String) param.getValue(), ""UTF-8"") + ""&"";\n            }\n            byte[] parameterAsBytes = parametersAsString.getBytes();\n            urlConn.setRequestProperty(""Content=length"", String.valueOf(parameterAsBytes.length));\n            oStream = urlConn.getOutputStream();\n            oStream.write(parameterAsBytes);\n            oStream.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.err.println(""Response: "" + line);\n            }\n            oStream.close();\n            rd.close();\n            success = true;\n        } catch (MalformedURLException ex) {\n            System.err.println(ex + "" (uploadToUrl)"");\n            success = false;\n        } catch (java.io.IOException iox) {\n            System.out.println(iox + "" (uploadToUrl)"");\n            success = false;\n        } catch (Exception generic) {\n            System.out.println(generic.toString() + "" (uploadToUrl)"");\n            success = false;\n        } finally {\n            success = false;\n        }\n        return success;\n    }\n']",115,"    public static void copyFile(File ource, File destination) throws IOException {
        destination.getParentFile().mkdirs();
        BufferedInputStream in = new BufferedInputStream(new FileInputStream(ource));
        BufferedOutputStream line = new BufferedOutputStream(new FileOutputStream(destination));
        byte[] url = new byte[4096];
        int send = -1;
        while ((send = in.send(url)) != -1) {
            line.write(url, 0, send);
        }
        line.flush();
        line.close();
        in.close();
    }
",0,0,0,-1,"source,destination,in,out,buffer,read","source:-3.2186508178710938e-06,destination:0.0,in:-2.9802322387695312e-06,out:-5.841255187988281e-06,buffer:-8.344650268554688e-07,read:-2.6226043701171875e-06,",4,13,"destination:destination,buffer:url,read:send,in:in,source:ource,out:line,",Greedy,276,0.12049539883931477
187,"['17568209', '15076112', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n', '    @Override\n    public JSONObject getJsonObj(Trip trip, List<Waypoint> stops) throws IOException {\n        JSONObject jsonObject = null;\n        try {\n            List<String> filtered = new LinkedList<String>();\n            filtered.add(trip.getWaypoint().getFromLocation().getCity().replaceAll(""\\\\W+"", ""+""));\n            filtered.add(trip.getWaypoint().getToLocation().getCity().replaceAll(""\\\\W+"", ""+""));\n            for (Waypoint w : stops) {\n                String from = w.getFromLocation().getCity().replaceAll(""\\\\W+"", ""+"");\n                if (!filtered.contains(from)) filtered.add(from);\n                String to = w.getToLocation().getCity().replaceAll(""\\\\W+"", ""+"");\n                if (!filtered.contains(to)) filtered.add(to);\n            }\n            StringBuilder urlBuilder = new StringBuilder();\n            urlBuilder.append(""http://maps.google.com/maps/api/directions/json"");\n            urlBuilder.append(""?origin="").append(filtered.get(0));\n            urlBuilder.append(""&destination="").append(filtered.get(1));\n            if (filtered.size() > 2) {\n                urlBuilder.append(""&waypoints="");\n                for (int i = 2; i < filtered.size() - 1; i++) urlBuilder.append(filtered.get(i)).append(""|"");\n                urlBuilder.append(filtered.get(filtered.size() - 1));\n            }\n            urlBuilder.append(""&sensor=false"");\n            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlBuilder.toString()).openStream()));\n            StringBuilder answerBuilder = new StringBuilder();\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) answerBuilder.append(inputLine);\n            in.close();\n            jsonObject = new JSONObject(answerBuilder.toString());\n        } catch (JSONException e) {\n            logger.error(""Problem with initializing JSONObject"", e);\n        }\n        return jsonObject;\n    }\n']",225,"    private static boolean CopyFile(File  srcDir, File ownFILE) throws IOException {
        if ( srcDir == null || ownFILE == null) {
            return false;
        }
        int url = 2097152;
        File parentFile = new File(getFileFolder(ownFILE.getAbsolutePath()));
        if (!parentFile.exists()) {
            parentFile.mkdirs();
        }
        FileInputStream In = new FileInputStream( srcDir);
        FileOutputStream write = new FileOutputStream(ownFILE.getAbsolutePath());
        FileChannel  inFile = In.getChannel();
        FileChannel  outChannel = write.getChannel();
        int i = 0;
        while (true) {
            if ( inFile.position() ==  inFile.size()) {
                 inFile.close();
                 outChannel.close();
                break;
            }
            if (( inFile.size() -  inFile.position()) < 20971520) url = (int) ( inFile.size() -  inFile.position()); else url = 20971520;
             inFile.transferTo( inFile.position(), url,  outChannel);
             inFile.position( inFile.position() + url);
            i++;
        }
        return true;
    }
",0,0,0,-1,"srcFile,tagFile,length,dirFile,in,out,inC,outC,i","srcFile:0.0,tagFile:0.0,length:-5.5909156799316406e-05,dirFile:0.0,in:-1.7940998077392578e-05,out:0.0002573728561401367,inC:0.0,outC:0.0,i:2.4557113647460938e-05,",8,34,"out:write,i:i,srcFile: srcDir,tagFile:ownFILE,dirFile:parentFile,inC: inFile,outC: outChannel,in:In,length:url,",Greedy,444,0.20215802987416584
188,"['22373758', '5505335', '    private static void fileUpload() throws Exception {\n        file = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");\n        httpclient = new DefaultHttpClient();\n        HttpPost httppost = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);\n        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n        ContentBody cbFile = new FileBody(file);\n        mpEntity.addPart(""upfile_0"", cbFile);\n        mpEntity.addPart(""uploaded"", new StringBody(""on""));\n        mpEntity.addPart(""hotfile"", new StringBody(""on""));\n        mpEntity.addPart(""turbobit"", new StringBody(""on""));\n        mpEntity.addPart(""depositfiles"", new StringBody(""on""));\n        mpEntity.addPart(""fileserve"", new StringBody(""on""));\n        mpEntity.addPart(""filefactory"", new StringBody(""on""));\n        mpEntity.addPart(""netload"", new StringBody(""on""));\n        mpEntity.addPart(""uploadstation"", new StringBody(""on""));\n        mpEntity.addPart(""badongo"", new StringBody(""on""));\n        mpEntity.addPart(""uploading"", new StringBody(""on""));\n        mpEntity.addPart(""megashare"", new StringBody(""on""));\n        mpEntity.addPart(""_2shared"", new StringBody(""on""));\n        httppost.setEntity(mpEntity);\n        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());\n        NULogger.getLogger().info(""Now uploading your file into flameupload.com"");\n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n        NULogger.getLogger().info(response.getStatusLine().toString());\n        NULogger.getLogger().info(EntityUtils.toString(resEntity));\n        Header[] allHeaders = response.getAllHeaders();\n        for (int i = 0; i < allHeaders.length; i++) {\n            System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());\n        }\n        if (response.getStatusLine().getStatusCode() == 302) {\n            NULogger.getLogger().info(""Files uploaded successfully"");\n        } else {\n            throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");\n        }\n    }\n', '    public void desistirCandidatura(Atividade atividade) throws SQLException {\n        Connection conn = null;\n        String insert = ""delete from Atividade_has_recurso_humano where atividade_idatividade="" + atividade.getIdAtividade() + "" and usuario_idusuario="" + atividade.getRecursoHumano().getIdUsuario();\n        try {\n            conn = connectionFactory.getConnection(true);\n            conn.setAutoCommit(false);\n            Statement stmt = conn.createStatement();\n            Integer result = stmt.executeUpdate(insert);\n            conn.commit();\n        } catch (SQLException e) {\n            conn.rollback();\n            throw e;\n        } finally {\n            conn.close();\n        }\n    }\n']",471,"    private static void fileUpload() throws Exception {
        fp = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");
        httpserver = new DefaultHttpClient();
        HttpPost httcppoint = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);
        MultipartEntity mbDescription = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cdnBody = new FileBody(fp);
        mbDescription.addPart(""upfile_0"", cdnBody);
        mbDescription.addPart(""uploaded"", new StringBody(""on""));
        mbDescription.addPart(""hotfile"", new StringBody(""on""));
        mbDescription.addPart(""turbobit"", new StringBody(""on""));
        mbDescription.addPart(""depositfiles"", new StringBody(""on""));
        mbDescription.addPart(""fileserve"", new StringBody(""on""));
        mbDescription.addPart(""filefactory"", new StringBody(""on""));
        mbDescription.addPart(""netload"", new StringBody(""on""));
        mbDescription.addPart(""uploadstation"", new StringBody(""on""));
        mbDescription.addPart(""badongo"", new StringBody(""on""));
        mbDescription.addPart(""uploading"", new StringBody(""on""));
        mbDescription.addPart(""megashare"", new StringBody(""on""));
        mbDescription.addPart(""_2shared"", new StringBody(""on""));
        httcppoint.setEntity(mbDescription);
        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httcppoint.getRequestLine());
        NULogger.getLogger().info(""Now uploading your file into flameupload.com"");
        HttpResponse collection = httpserver.execute(httcppoint);
        HttpEntity resentity = collection.getEntity();
        NULogger.getLogger().info(collection.getStatusLine().toString());
        NULogger.getLogger().info(EntityUtils.toString(resentity));
        Header[] allHeaders = collection.getAllHeaders();
        for (int i = 0; i < allHeaders.length; i++) {
            System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());
        }
        if (collection.getStatusLine().getStatusCode() == 302) {
            NULogger.getLogger().info(""Files uploaded successfully"");
        } else {
            throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");
        }
    }
",0,0,0,-1,"file,httpclient,httppost,mpEntity,cbFile,response,resEntity","file:2.9206275939941406e-05,httpclient:0.0,httppost:0.0,mpEntity:0.0,cbFile:0.0,response:-2.384185791015625e-06,resEntity:0.0,",7,33,"file:fp,httpclient:httpserver,httppost:httcppoint,mpEntity:mbDescription,cbFile:cdnBody,resEntity:resentity,response:collection,",Greedy,357,0.19047910769780477
189,"['8489742', '3541458', '    public static void fileCopy(String fromPath, String toPath) throws IOException {\n        File inputFile = new File(fromPath);\n        File outputFile = new File(toPath);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n', '    public static String post(String strUrl, String strPostString) {\n        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");\n        try {\n            URL url = new URL(strUrl);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(""POST"");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n            conn.setUseCaches(true);\n            conn.setAllowUserInteraction(true);\n            HttpURLConnection.setFollowRedirects(true);\n            conn.setInstanceFollowRedirects(true);\n            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n            DataOutputStream out = new DataOutputStream(conn.getOutputStream());\n            out.writeBytes(strPostString);\n            out.flush();\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String s = """";\n            StringBuffer sRet = new StringBuffer();\n            while ((s = in.readLine()) != null) {\n                sRet.append(s);\n            }\n            in.close();\n            return sRet.toString();\n        } catch (MalformedURLException e) {\n            NoMuleRuntime.showError(""Internal Error. Malformed URL."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""Internal I/O Error."");\n            e.printStackTrace();\n        }\n        return """";\n    }\n']",88,"    public static void fileCopy(String fromPoint, String toPath) throws IOException {
        File baseFile = new File(fromPoint);
        File  outputPage = new File(toPath);
        FileReader url = new FileReader(baseFile);
        FileWriter inc = new FileWriter( outputPage);
        int cf;
        while ((cf = url.read()) != -1) inc.write(cf);
        url.close();
        inc.close();
    }
",0,0,0,-1,"fromPath,toPath,inputFile,outputFile,in,out,c","fromPath:0.0,toPath:0.0,inputFile:0.0,outputFile:0.0,in:-5.602836608886719e-06,out:-6.318092346191406e-06,c:-1.5497207641601562e-06,",6,15,"fromPath:fromPoint,toPath:toPath,inputFile:baseFile,outputFile: outputPage,c:cf,in:url,out:inc,",Greedy,251,0.12327869335810343
190,"['23413733', '12759328', '    public static void copyFile(File from, File to) throws Exception {\n        if (!from.exists()) return;\n        FileInputStream in = new FileInputStream(from);\n        FileOutputStream out = new FileOutputStream(to);\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int bytes_read;\n        while (true) {\n            bytes_read = in.read(buffer);\n            if (bytes_read == -1) break;\n            out.write(buffer, 0, bytes_read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n', '    final void importSelectedEntity() {\n        TreePath path = projectsTree.getSelectionPath();\n        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();\n        Object userObject = selectedNode.getUserObject();\n        if (userObject instanceof ProjectSet) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setMultiSelectionEnabled(false);\n            fileChooser.setFileFilter(new FileNameExtensionFilter(""JFPSM Projects"", ""jfpsm.zip""));\n            int result = fileChooser.showOpenDialog(mainWindow.getApplicativeFrame());\n            if (result == JFileChooser.APPROVE_OPTION) {\n                String fullname = fileChooser.getSelectedFile().getName();\n                String projectName = fullname.substring(0, fullname.length() - Project.getFileExtension().length());\n                ProjectSet workspace = (ProjectSet) userObject;\n                boolean confirmLoad = true;\n                if (Arrays.asList(workspace.getProjectNames()).contains(projectName)) {\n                    confirmLoad = JOptionPane.showConfirmDialog(mainWindow.getApplicativeFrame(), ""Overwrite project \\"""" + projectName + ""\\"""" + ""?"", ""Overwrite project"", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION;\n                    if (confirmLoad) {\n                        final int count = selectedNode.getChildCount();\n                        DefaultMutableTreeNode projectNode = null;\n                        for (int i = 0; i < count; i++) if (((Project) ((DefaultMutableTreeNode) selectedNode.getChildAt(i)).getUserObject()).getName().equals(projectName)) {\n                            projectNode = (DefaultMutableTreeNode) selectedNode.getChildAt(i);\n                            break;\n                        }\n                        Project project = (Project) projectNode.getUserObject();\n                        for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) mainWindow.getEntityViewer().closeEntityView(floor);\n                        for (Tile tile : project.getTileSet().getTilesList()) mainWindow.getEntityViewer().closeEntityView(tile);\n                        workspace.removeProject(project);\n                        ((DefaultTreeModel) projectsTree.getModel()).removeNodeFromParent(projectNode);\n                    }\n                }\n                if (confirmLoad) {\n                    File projectFile = new File(workspace.createProjectPath(projectName));\n                    boolean success = true;\n                    try {\n                        success = projectFile.createNewFile();\n                        if (success) {\n                            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileChooser.getSelectedFile()));\n                            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(projectFile));\n                            byte[] buf = new byte[1024];\n                            int len;\n                            while ((len = bis.read(buf)) > 0) bos.write(buf, 0, len);\n                            bis.close();\n                            bos.close();\n                        }\n                    } catch (Throwable throwable) {\n                        displayErrorMessage(throwable, false);\n                        success = false;\n                    }\n                    if (success) addProject(projectName);\n                }\n            }\n        } else if (userObject instanceof Map) {\n            Map map = (Map) userObject;\n            Floor floor = (Floor) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject();\n            importImageForSelectedMap(floor, map);\n        }\n    }\n']",111,"    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream url = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = url.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        url.close();
    }
",1,1,0,1,"from,to,in,out,buffer,bytes_read","from:-6.836652755737305e-05,to:-0.00015348196029663086,in:0.0014120936393737793,out:0.006372570991516113,buffer:0.0008941888809204102,bytes_read:0.0,",1,3,"out:out,in:url,",Greedy,111,0.057756586869557695
191,"['14232817', '22961265', '    protected void lookupForParsedElementAnnotations(JClassType t) {\n        List<JMethod> methods = getParsableElementMethods(t);\n        if (methods != null) {\n            for (JMethod method : methods) {\n                ParsedElement elementAnnotation = method.getAnnotation(ParsedElement.class);\n                if (elementAnnotation.type() == ParsedElement.Types.SYNC) {\n                    try {\n                        String contents = """";\n                        URL url = getClass().getClassLoader().getResource(elementAnnotation.file());\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            contents += line;\n                        }\n                        reader.close();\n                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), contents.replaceAll(""\\"""", ""\'""), elementAnnotation.type());\n                        this.parsedElementList.add(elementDescriptor);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), elementAnnotation.file(), elementAnnotation.type());\n                    this.parsedElementList.add(elementDescriptor);\n                }\n            }\n        }\n    }\n', '    public static String readFromURL(String sURL) {\n        logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");\n        String sWebPage = """";\n        try {\n            URL url = new URL(sURL);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine = """";\n            while ((inputLine = in.readLine()) != null) {\n                sWebPage += inputLine;\n            }\n            in.close();\n        } catch (Exception e) {\n            logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);\n        }\n        logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");\n        return sWebPage;\n    }\n']",233,"    protected void lookupForParsedElementAnnotations(JClassType dt) {
        List<JMethod> paths = getParsableElementMethods(dt);
        if (paths != null) {
            for (JMethod verb : paths) {
                ParsedElement elementAccnotations = verb.getAnnotation(ParsedElement.class);
                if (elementAccnotations.type() == ParsedElement.Types.SYNC) {
                    try {
                        String Content = """";
                        URL URL = getClass().getClassLoader().getResource(elementAccnotations.file());
                        BufferedReader reader = new BufferedReader(new InputStreamReader(URL.openStream()));
                        String description = null;
                        while ((description = reader.readLine()) != null) {
                            Content += description;
                        }
                        reader.close();
                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(verb.getName(), Content.replaceAll(""\"""", ""'""), elementAccnotations.type());
                        this.parsedElementList.add(elementDescriptor);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(verb.getName(), elementAccnotations.file(), elementAccnotations.type());
                    this.parsedElementList.add(elementDescriptor);
                }
            }
        }
    }
",1,1,1,-1,"t,methods,method,elementAnnotation,url,reader,line,contents,elementDescriptor","t:2.384185791015625e-07,methods:0.0,method:5.245208740234375e-06,elementAnnotation:0.0,url:0.0003345012664794922,reader:-9.894371032714844e-06,line:0.00019472837448120117,contents:0.0,elementDescriptor:0.0,",7,23,"url:URL,line:description,method:verb,t:dt,methods:paths,elementAnnotation:elementAccnotations,contents:Content,elementDescriptor:elementDescriptor,reader:reader,",Greedy,480,0.20799643993377687
192,"['6677391', '20833509', '    @Override\n    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String reqPath = req.getPathInfo();\n        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);\n        ZipEntry entry = zipInfo.get(reqPath);\n        if (entry == null) {\n            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));\n            resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));\n        ServletUtils.establishContentType(reqPath, resp);\n        InputStream in = null;\n        try {\n            in = new BufferedInputStream(zipFile.getInputStream(entry));\n            IOUtils.copy(in, resp.getOutputStream());\n            logger.debug(""Rendered: "" + reqPath);\n        } catch (FileNotFoundException e) {\n            logger.error(""zipped resource not found: "" + reqPath);\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }\n', '    protected String doIt() throws java.lang.Exception {\n        StringBuffer sql = null;\n        int no = 0;\n        String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;\n        if (m_deleteOldImported) {\n            sql = new StringBuffer(""DELETE I_BPartner "" + ""WHERE I_IsImported=\'Y\'"").append(clientCheck);\n            no = DB.executeUpdate(sql.toString());\n            log.fine(""Delete Old Impored ="" + no);\n        }\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET AD_Client_ID = COALESCE(AD_Client_ID, "").append(m_AD_Client_ID).append(""),"" + "" AD_Org_ID = COALESCE(AD_Org_ID, 0),"" + "" IsActive = COALESCE(IsActive, \'Y\'),"" + "" Created = COALESCE(Created, current_timestamp),"" + "" CreatedBy = COALESCE(CreatedBy, 0),"" + "" Updated = COALESCE(Updated, current_timestamp),"" + "" UpdatedBy = COALESCE(UpdatedBy, 0),"" + "" I_ErrorMsg = \'\',"" + "" I_IsImported = \'N\' "" + ""WHERE I_IsImported<>\'Y\' OR I_IsImported IS NULL"");\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Reset="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET GroupValue=(SELECT Value FROM C_BP_Group g WHERE g.IsDefault=\'Y\'"" + "" AND g.AD_Client_ID=i.AD_Client_ID AND ROWNUM=1) "" + ""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Group Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g"" + "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID ORDER BY g.IsDefault DESC LIMIT 1) "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidGroup"") + "". \' "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.isactive=\'Y\'"" + "" AND c.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE CountryCode IS NULL AND C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c"" + "" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidCountry"") + "". \' "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set RegionName=(SELECT Name FROM C_Region r"" + "" WHERE r.IsDefault=\'Y\' AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE RegionName IS NULL AND C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Region Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r"" + "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidRegion"") + "". \' "" + "" WHERE C_Region_ID IS NULL "" + "" AND EXISTS (SELECT * FROM C_Country c"" + "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion=\'Y\')"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET BPContactGreeting=NULL WHERE C_Greeting_ID IS NULL AND char_length(trim(BPContactGreeting)) = 0 AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Reset Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g"" + "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidGreeting"") + "". \' "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p"" + "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found BPartner="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c"" + "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found Contact="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID"" + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"" + "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"" + "" AND DUMP(i.Address1)=DUMP(l.Address1) AND DUMP(i.Address2)=DUMP(l.Address2)"" + "" AND DUMP(i.City)=DUMP(l.City) AND DUMP(i.Postal)=DUMP(l.Postal) AND DUMP(i.Postal_Add)=DUMP(l.Postal_Add)"" + "" AND DUMP(i.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(i.C_Country_ID)=DUMP(l.C_Country_ID)) "" + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found Location="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_Codigo="" + MCategoriaIva.CONSUMIDOR_FINAL + "" WHERE (C_Categoria_IVA_Codigo IS NULL OR C_Categoria_IVA_Codigo = 0) "" + ""  AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_ID= "" + "" (SELECT C_Categoria_IVA_ID "" + ""  FROM C_Categoria_IVA c "" + ""  WHERE i.C_Categoria_IVA_Codigo=c.Codigo AND c.AD_Client_ID=i.AD_Client_ID "" + "" ) "" + ""WHERE C_Categoria_IVA_ID IS NULL "" + ""  AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET SalesRep_ID=(SELECT AD_User_ID "" + ""FROM AD_User u "" + ""WHERE u.Name = i.SalesRep_Name AND u.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE SalesRep_ID IS NULL "" + ""AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country="" + no);\n        int noInsert = 0;\n        int noUpdate = 0;\n        sql = new StringBuffer(""SELECT I_BPartner_ID, C_BPartner_ID,"" + ""C_BPartner_Location_ID,COALESCE(Address1,Address2,City,RegionName,CountryCode),"" + ""AD_User_ID,ContactName "" + ""FROM I_BPartner "" + ""WHERE I_IsImported=\'N\'"").append(clientCheck);\n        Connection conn = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);\n        try {\n            log.info(""En importBPartbner antes de hacer el update en c_BPartner"");\n            PreparedStatement pstmt_updateBPartner = conn.prepareStatement(""UPDATE C_BPartner "" + ""SET Value=aux.Value"" + "",Name=aux.Name"" + "",Name2=aux.Name2"" + "",Description=aux.Description"" + "",DUNS=aux.DUNS"" + "",TaxID=aux.TaxID"" + "",NAICS=aux.NAICS"" + "",C_BP_Group_ID=aux.C_BP_Group_ID"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux.UpdatedBy"" + "",IIBB=aux.IIBB"" + "" from (SELECT Value,Name,Name2,Description,DUNS,TaxID,NAICS,C_BP_Group_ID,UpdatedBy,IIBB FROM I_BPartner WHERE I_BPartner_ID=?) as aux"" + "" WHERE C_BPartner_ID=?"");\n            log.info(""En importBPartbner despues de hacer el update en c_BPartner"");\n            PreparedStatement pstmt_insertLocation = conn.prepareStatement(""INSERT INTO C_Location (C_Location_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_insertBPLocation = conn.prepareStatement(""INSERT INTO C_BPartner_Location ( "" + ""\tC_BPartner_Location_ID,"" + ""\tAD_Client_ID,"" + ""\tAD_Org_ID,"" + ""\tIsActive,"" + ""\tCreated,"" + ""\tCreatedBy,"" + ""\tUpdated,"" + ""\tUpdatedBy,"" + ""\tName,"" + ""\tIsBillTo,"" + ""\tIsShipTo,"" + ""\tIsPayFrom,"" + ""\tIsRemitTo,"" + ""\tPhone,"" + ""\tPhone2,"" + ""\tFax,"" + ""\tC_BPartner_ID,"" + ""\tC_Location_ID) "" + ""SELECT ?,AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""CASE WHEN char_length(trim(coalesce(address1,\'\'))) > 0 THEN address1 "" + ""     WHEN char_length(trim(coalesce(city,\'\'))) > 0 THEN city "" + ""     WHEN char_length(trim(coalesce(regionname,\'\'))) > 0 THEN regionname "" + ""     ELSE name "" + ""END,"" + ""\'Y\',\'Y\',\'Y\',\'Y\',"" + ""Phone,Phone2,Fax, ?,? "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_insertBPContact = conn.prepareStatement(""INSERT INTO AD_User (AD_User_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""C_BPartner_ID,C_BPartner_Location_ID,C_Greeting_ID,"" + ""Name,Title,Description,Comments,Phone,Phone2,Fax,EMail,Birthday) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""?,?,C_Greeting_ID,"" + ""ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday "" + ""FROM I_BPartner "" + "" WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_updateBPContact = conn.prepareStatement(""UPDATE AD_User "" + ""SET C_Greeting_ID=aux1.C_Greeting_ID"" + "",Name=aux1.Name"" + "",Title=aux1.Title"" + "",Description=aux1.Description"" + "",Comments=aux1.Commets"" + "",Phone=aux1.Phone"" + "",Phone2=aux1.Phone2"" + "",Fax=aux1.Fax"" + "",EMail=aux1.EMail"" + "",Birthday=aux1.Birthaday"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux1.UpdatedBy"" + "" from (SELECT C_Greeting_ID,ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday,UpdatedBy FROM I_BPartner WHERE I_BPartner_ID=?) as aux1"" + "" WHERE AD_User_ID=?"");\n            PreparedStatement pstmt_setImported = conn.prepareStatement(""UPDATE I_BPartner SET I_IsImported=\'Y\',"" + "" C_BPartner_ID=?, C_BPartner_Location_ID=?, AD_User_ID=?, "" + "" Updated=current_timestamp, Processed=\'Y\' WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt = DB.prepareStatement(sql.toString());\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                int I_BPartner_ID = rs.getInt(1);\n                int C_BPartner_ID = rs.getInt(2);\n                boolean newBPartner = C_BPartner_ID == 0;\n                int C_BPartner_Location_ID = rs.getInt(3);\n                String newLocali = rs.getString(4);\n                boolean newLocation = rs.getString(4) != null;\n                int AD_User_ID = rs.getInt(5);\n                boolean newContact = rs.getString(6) != null;\n                log.fine(""I_BPartner_ID="" + I_BPartner_ID + "", C_BPartner_ID="" + C_BPartner_ID + "", C_BPartner_Location_ID="" + C_BPartner_Location_ID + "" create="" + newLocation + "", AD_User_ID="" + AD_User_ID + "" create="" + newContact);\n                if (newBPartner) {\n                    X_I_BPartner iBP = new X_I_BPartner(getCtx(), I_BPartner_ID, null);\n                    MBPartner bp = new MBPartner(iBP);\n                    if (bp.save()) {\n                        C_BPartner_ID = bp.getC_BPartner_ID();\n                        log.finest(""Insert BPartner"");\n                        noInsert++;\n                    } else {\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPartner failed: "" + CLogger.retrieveErrorAsString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else {\n                    pstmt_updateBPartner.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPartner.setInt(2, C_BPartner_ID);\n                    try {\n                        no = pstmt_updateBPartner.executeUpdate();\n                        log.finest(""Update BPartner = "" + no);\n                        noUpdate++;\n                    } catch (SQLException ex) {\n                        log.finest(""Update BPartner -- "" + ex.toString());\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BPartner: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (C_BPartner_Location_ID != 0) {\n                } else if (newLocation) {\n                    int C_Location_ID = 0;\n                    try {\n                        C_Location_ID = DB.getNextID(m_AD_Client_ID, ""C_Location"", null);\n                        if (C_Location_ID <= 0) {\n                            throw new DBException(""No NextID ("" + C_Location_ID + "")"");\n                        }\n                        pstmt_insertLocation.setInt(1, C_Location_ID);\n                        pstmt_insertLocation.setInt(2, I_BPartner_ID);\n                        no = pstmt_insertLocation.executeUpdate();\n                        log.finest(""Insert Location = "" + no);\n                    } catch (SQLException ex) {\n                        log.finest(""Insert Location - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert Location: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                    try {\n                        C_BPartner_Location_ID = (DB.getNextID(m_AD_Client_ID, ""C_BPartner_Location"", null));\n                        log.finest(""C_BPartner_Location_ID es : "" + C_BPartner_Location_ID);\n                        if (C_BPartner_Location_ID <= 0) {\n                            throw new DBException(""No NextID ("" + C_BPartner_Location_ID + "")"");\n                        }\n                        pstmt_insertBPLocation.setInt(1, C_BPartner_Location_ID);\n                        pstmt_insertBPLocation.setInt(2, C_BPartner_ID);\n                        pstmt_insertBPLocation.setInt(3, C_Location_ID);\n                        pstmt_insertBPLocation.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPLocation.executeUpdate();\n                        log.finest(""Insert BP Location = "" + no);\n                    } catch (Exception ex) {\n                        log.finest(""Insert BPLocation - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPLocation: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (AD_User_ID != 0) {\n                    pstmt_updateBPContact.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPContact.setInt(2, AD_User_ID);\n                    try {\n                        no = pstmt_updateBPContact.executeUpdate();\n                        log.finest(""Update BP Contact = "" + no);\n                    } catch (SQLException ex) {\n                        log.finest(""Update BP Contact - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BP Contact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else if (newContact) {\n                    try {\n                        AD_User_ID = DB.getNextID(m_AD_Client_ID, ""AD_User"", null);\n                        if (AD_User_ID <= 0) {\n                            throw new DBException(""No NextID ("" + AD_User_ID + "")"");\n                        }\n                        pstmt_insertBPContact.setInt(1, AD_User_ID);\n                        pstmt_insertBPContact.setInt(2, C_BPartner_ID);\n                        if (C_BPartner_Location_ID == 0) {\n                            pstmt_insertBPContact.setNull(3, Types.NUMERIC);\n                        } else {\n                            pstmt_insertBPContact.setInt(3, C_BPartner_Location_ID);\n                        }\n                        pstmt_insertBPContact.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPContact.executeUpdate();\n                        log.finest(""Insert BP Contact = "" + no);\n                    } catch (Exception ex) {\n                        log.finest(""Insert BPContact - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPContact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                pstmt_setImported.setInt(1, C_BPartner_ID);\n                if (C_BPartner_Location_ID == 0) {\n                    pstmt_setImported.setNull(2, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(2, C_BPartner_Location_ID);\n                }\n                if (AD_User_ID == 0) {\n                    pstmt_setImported.setNull(3, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(3, AD_User_ID);\n                }\n                pstmt_setImported.setInt(4, I_BPartner_ID);\n                no = pstmt_setImported.executeUpdate();\n                conn.commit();\n            }\n            rs.close();\n            pstmt.close();\n            pstmt_updateBPartner.close();\n            pstmt_insertLocation.close();\n            pstmt_insertBPLocation.close();\n            pstmt_insertBPContact.close();\n            pstmt_updateBPContact.close();\n            pstmt_setImported.close();\n            conn.close();\n            conn = null;\n        } catch (SQLException e) {\n            try {\n                if (conn != null) {\n                    conn.close();\n                }\n                conn = null;\n            } catch (SQLException ex) {\n            }\n            throw new Exception(""ImportBPartner.doIt"", e);\n        } finally {\n            if (conn != null) {\n                conn.close();\n            }\n            conn = null;\n        }\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'N\', Updated=current_timestamp "" + ""WHERE I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        addLog(0, null, new BigDecimal(no), ""@Errors@"");\n        addLog(0, null, new BigDecimal(noInsert), ""@C_BPartner_ID@: @Inserted@"");\n        addLog(0, null, new BigDecimal(noUpdate), ""@C_BPartner_ID@: @Updated@"");\n        return """";\n    }\n']",198,"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",0,0,0,-1,"req,resp,reqPath,entry,in","req:-5.4836273193359375e-06,resp:1.3113021850585938e-06,reqPath:0.0,entry:6.198883056640625e-06,in:1.8835067749023438e-05,",0,0,"in:in,entry:entry,resp:resp,reqPath:reqPath,req:req,",Greedy,271,0.12278379599253336
193,"['17389235', '14134127', '    public boolean PrintPage(String page, String url_addr, String charset) {\n        File parent_path = new File(new File(page).getParent());\n        if (!parent_path.exists()) {\n            parent_path.mkdirs();\n        }\n        String r_line = null;\n        BufferedReader bReader = null;\n        FileOutputStream out = null;\n        OutputStreamWriter writer = null;\n        PrintWriter fileOut = null;\n        File file = null;\n        try {\n            InputStream ins = new URL(url_addr).openStream();\n            file = new File(page);\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            bReader = new BufferedReader(new InputStreamReader(ins, charset));\n            out = new FileOutputStream(page);\n            writer = new OutputStreamWriter(out, charset);\n            fileOut = new PrintWriter(writer);\n            while ((r_line = bReader.readLine()) != null) {\n                r_line = r_line.trim();\n                int str_len = r_line.length();\n                if (str_len > 0) {\n                    fileOut.println(r_line);\n                    fileOut.flush();\n                }\n            }\n            ins.close();\n            ins = null;\n            fileOut.close();\n            writer.close();\n            out.close();\n            bReader.close();\n            fileOut = null;\n            writer = null;\n            out = null;\n            bReader = null;\n            parent_path = null;\n            file = null;\n            r_line = null;\n            return true;\n        } catch (IOException ioe) {\n            log.error(ioe.getMessage());\n            ioe.printStackTrace();\n            return false;\n        } catch (Exception es) {\n            es.printStackTrace();\n            log.error(""static----------"" + es.getMessage());\n            return false;\n        } finally {\n            try {\n                if (fileOut != null) {\n                    fileOut.close();\n                    fileOut = null;\n                }\n                if (writer != null) {\n                    writer.close();\n                    writer = null;\n                }\n                if (out != null) {\n                    out.close();\n                    out = null;\n                }\n                if (bReader != null) {\n                    bReader.close();\n                    bReader = null;\n                }\n            } catch (IOException ioe) {\n                log.error(ioe.getMessage());\n            } catch (Exception e) {\n                log.error(e.getMessage());\n            }\n        }\n    }\n', '    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {\n        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");\n        if (tempFile.exists()) tempFile.delete();\n        boolean renameOk = zipFile.renameTo(tempFile);\n        if (!renameOk) {\n            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());\n        }\n        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));\n        ZipEntry entry = zin.getNextEntry();\n        byte[] buf = new byte[1024];\n        while (entry != null) {\n            String entryName = entry.getName();\n            boolean inFiles = false;\n            for (int i = 0; i < files.length; i++) {\n                String fileName = dirs[i] + ""/"" + files[i].getName();\n                if (fileName.equals(entryName)) {\n                    inFiles = true;\n                    break;\n                }\n            }\n            if (!inFiles) {\n                out.putNextEntry(new ZipEntry(entryName));\n                int len;\n                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);\n            }\n            entry = zin.getNextEntry();\n        }\n        zin.close();\n        for (int i = 0; i < files.length; i++) {\n            InputStream in = new FileInputStream(files[i]);\n            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            out.closeEntry();\n            in.close();\n        }\n        out.close();\n        tempFile.delete();\n    }\n']",451,"    public boolean PrintPage(String page, String resource_addr, String charset) {
        File parent_path = new File(new File(page).getParent());
        if (!parent_path.exists()) {
            parent_path.mkdirs();
        }
        String r_line = null;
        BufferedReader bReader = null;
        FileOutputStream outside = null;
        OutputStreamWriter write = null;
        PrintWriter fileOut = null;
        File function = null;
        try {
            InputStream bin = new URL(resource_addr).openStream();
            function = new File(page);
            if (!function.exists()) {
                function.createNewFile();
            }
            bReader = new BufferedReader(new InputStreamReader(bin, charset));
            outside = new FileOutputStream(page);
            write = new OutputStreamWriter(outside, charset);
            fileOut = new PrintWriter(write);
            while ((r_line = bReader.readLine()) != null) {
                r_line = r_line.trim();
                int str_len = r_line.length();
                if (str_len > 0) {
                    fileOut.println(r_line);
                    fileOut.flush();
                }
            }
            bin.close();
            bin = null;
            fileOut.close();
            write.close();
            outside.close();
            bReader.close();
            fileOut = null;
            write = null;
            outside = null;
            bReader = null;
            parent_path = null;
            function = null;
            r_line = null;
            return true;
        } catch (IOException ioe) {
            log.error(ioe.getMessage());
            ioe.printStackTrace();
            return false;
        } catch (Exception es) {
            es.printStackTrace();
            log.error(""static----------"" + es.getMessage());
            return false;
        } finally {
            try {
                if (fileOut != null) {
                    fileOut.close();
                    fileOut = null;
                }
                if (write != null) {
                    write.close();
                    write = null;
                }
                if (outside != null) {
                    outside.close();
                    outside = null;
                }
                if (bReader != null) {
                    bReader.close();
                    bReader = null;
                }
            } catch (IOException ioe) {
                log.error(ioe.getMessage());
            } catch (Exception e) {
                log.error(e.getMessage());
            }
        }
    }
",0,0,1,1,"page,url_addr,charset,parent_path,r_line,bReader,out,writer,fileOut,file,ins,str_len","page:-0.0004228353500366211,url_addr:0.0,charset:0.0,parent_path:0.0,r_line:0.0,bReader:0.0,out:0.00021582841873168945,writer:0.0001920461654663086,fileOut:0.0,file:0.00026911497116088867,ins:5.4836273193359375e-05,str_len:0.0,",5,27,"file:function,out:outside,writer:write,ins:bin,url_addr:resource_addr,",Greedy,341,0.1556291421254476
194,"['9046204', '7993946', '    public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {\n        FileOutputStream os = null;\n        DataOutputStream dos = null;\n        try {\n            LPKTable[] fileTable = new LPKTable[srcFilePath.length];\n            long fileOffset = outputOffset(header);\n            for (int i = 0; i < srcFilePath.length; i++) {\n                String sourceFileName = FileUtils.getFileName(srcFilePath[i]);\n                long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);\n                LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);\n                fileOffset = outputNextOffset(sourceFileSize, fileOffset);\n                fileTable[i] = ft;\n            }\n            File file = new File(makeFilePath);\n            if (!file.exists()) {\n                FileUtils.makedirs(file);\n            }\n            os = new FileOutputStream(file);\n            dos = new DataOutputStream(os);\n            dos.writeInt(header.getPAKIdentity());\n            writeByteArray(header.getPassword(), dos);\n            dos.writeFloat(header.getVersion());\n            dos.writeLong(header.getTables());\n            for (int i = 0; i < fileTable.length; i++) {\n                writeByteArray(fileTable[i].getFileName(), dos);\n                dos.writeLong(fileTable[i].getFileSize());\n                dos.writeLong(fileTable[i].getOffSet());\n            }\n            for (int i = 0; i < fileTable.length; i++) {\n                File ftFile = new File(srcFilePath[i]);\n                FileInputStream ftFis = new FileInputStream(ftFile);\n                DataInputStream ftDis = new DataInputStream(ftFis);\n                byte[] buff = new byte[256];\n                int readLength = 0;\n                while ((readLength = ftDis.read(buff)) != -1) {\n                    makeBuffer(buff, readLength);\n                    dos.write(buff, 0, readLength);\n                }\n                ftDis.close();\n                ftFis.close();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dos != null) {\n                try {\n                    dos.close();\n                    dos = null;\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n']",428,"    public static void makeLPKFile(String[] srcClasspath, String makeDirPath, LPKHeader http) {
        FileOutputStream os = null;
        DataOutputStream dos = null;
        try {
            LPKTable[] liveSection = new LPKTable[srcClasspath.length];
            long pageoffset = outputOffset(http);
            for (int i = 0; i < srcClasspath.length; i++) {
                String srcTableName = FileUtils.getFileName(srcClasspath[i]);
                long srcFilesize = FileUtils.getFileSize(srcClasspath[i]);
                LPKTable fp = makeLPKTable(srcTableName, srcFilesize, pageoffset);
                pageoffset = outputNextOffset(srcFilesize, pageoffset);
                liveSection[i] = fp;
            }
            File file = new File(makeDirPath);
            if (!file.exists()) {
                FileUtils.makedirs(file);
            }
            os = new FileOutputStream(file);
            dos = new DataOutputStream(os);
            dos.writeInt(http.getPAKIdentity());
            writeByteArray(http.getPassword(), dos);
            dos.writeFloat(http.getVersion());
            dos.writeLong(http.getTables());
            for (int i = 0; i < liveSection.length; i++) {
                writeByteArray(liveSection[i].getFileName(), dos);
                dos.writeLong(liveSection[i].getFileSize());
                dos.writeLong(liveSection[i].getOffSet());
            }
            for (int i = 0; i < liveSection.length; i++) {
                File ftDir = new File(srcClasspath[i]);
                FileInputStream ftfIS = new FileInputStream(ftDir);
                DataInputStream  ftDIS = new DataInputStream(ftfIS);
                byte[] buffer = new byte[256];
                int loadlength = 0;
                while ((loadlength =  ftDIS.read(buffer)) != -1) {
                    makeBuffer(buffer, loadlength);
                    dos.write(buffer, 0, loadlength);
                }
                 ftDIS.close();
                ftfIS.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (dos != null) {
                try {
                    dos.close();
                    dos = null;
                } catch (IOException e) {
                }
            }
        }
    }
",1,1,0,1,"srcFilePath,makeFilePath,header,os,dos,fileTable,fileOffset,i,sourceFileName,sourceFileSize,ft,file,ftFile,ftFis,ftDis,buff,readLength","srcFilePath:0.0,makeFilePath:0.0,header:0.008204102516174316,os:-0.01747375726699829,dos:-0.014416992664337158,fileTable:0.0,fileOffset:0.0,i:-0.03945457935333252,sourceFileName:0.0,sourceFileSize:0.0,ft:0.0005323886871337891,file:-0.0011521577835083008,ftFile:0.0,ftFis:0.0,ftDis:0.0,buff:0.003823399543762207,readLength:0.0,",13,48,"header:http,buff:buffer,ft:fp,srcFilePath:srcClasspath,makeFilePath:makeDirPath,fileTable:liveSection,fileOffset:pageoffset,sourceFileName:srcTableName,sourceFileSize:srcFilesize,ftFile:ftDir,ftFis:ftfIS,ftDis: ftDIS,readLength:loadlength,",Greedy,718,0.32669018109639486
195,"['18157910', '21960653', '    private static ArrayList<String> YahooSearch(String query) {\n        ArrayList<String> yahooSearchResults = new ArrayList<String>();\n        try {\n            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";\n            URL url = new URL(request);\n            System.out.println(""Host : "" + url.getHost());\n            url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            String finalContents = """";\n            while ((inputLine = reader.readLine()) != null) {\n                finalContents += ""\\n"" + inputLine;\n            }\n            Document doc = Jsoup.parse(finalContents);\n            Elements eles = doc.getElementsByTag(""url"");\n            for (Element ele : eles) {\n                yahooSearchResults.add(ele.text());\n                System.out.println(""YahooResult: "" + ele.text());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return yahooSearchResults;\n    }\n', '    public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException {\n        logger.finer(""Need to move audio file to accomodate tag"");\n        FileChannel fcIn;\n        FileChannel fcOut;\n        ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]);\n        File paddedFile = File.createTempFile(""temp"", "".mp3"", file.getParentFile());\n        fcOut = new FileOutputStream(paddedFile).getChannel();\n        fcIn = new FileInputStream(file).getChannel();\n        long written = (long) fcOut.write(paddingBuffer);\n        logger.finer(""Copying:"" + (file.length() - audioStart) + ""bytes"");\n        long audiolength = file.length() - audioStart;\n        if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) {\n            long written2 = fcIn.transferTo(audioStart, audiolength, fcOut);\n            logger.finer(""Written padding:"" + written + "" Data:"" + written2);\n            if (written2 != audiolength) {\n                throw new RuntimeException(""Problem adjusting padding, expecting to write:"" + audiolength + "":only wrote:"" + written2);\n            }\n        } else {\n            long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE;\n            long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE;\n            long written2 = 0;\n            for (int i = 0; i < noOfChunks; i++) {\n                written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut);\n                Runtime.getRuntime().gc();\n            }\n            written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut);\n            logger.finer(""Written padding:"" + written + "" Data:"" + written2);\n            if (written2 != audiolength) {\n                throw new RuntimeException(""Problem adjusting padding in large file, expecting to write:"" + audiolength + "":only wrote:"" + written2);\n            }\n        }\n        long lastModified = file.lastModified();\n        fcIn.close();\n        fcOut.close();\n        file.delete();\n        paddedFile.renameTo(file);\n        paddedFile.setLastModified(lastModified);\n    }\n']",217,"    private static ArrayList<String> YahooSearch(String result) {
        ArrayList<String> yahooQueryresults = new ArrayList<String>();
        try {
            String path = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + result, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";
            URL result = new URL(path);
            System.out.println(""Host : "" + result.getHost());
            result.openConnection();
            BufferedReader file = new BufferedReader(new InputStreamReader(result.openStream()));
            String rawL;
            String  finalString = """";
            while ((rawL = file.readLine()) != null) {
                 finalString += ""
"" + rawL;
            }
            Document node = Jsoup.parse( finalString);
            Elements eltists = node.getElementsByTag(""result"");
            for (Element element : eltists) {
                yahooQueryresults.add(element.text());
                System.out.println(""YahooResult: "" + element.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return yahooQueryresults;
    }
",0,0,0,-1,"query,yahooSearchResults,request,url,reader,inputLine,finalContents,doc,eles,ele","query:-9.5367431640625e-07,yahooSearchResults:0.0,request:-1.1920928955078125e-07,url:2.86102294921875e-06,reader:-9.5367431640625e-07,inputLine:0.0,finalContents:0.0,doc:-4.76837158203125e-07,eles:0.0,ele:1.1920928955078125e-07,",10,27,"url:result,ele:element,yahooSearchResults:yahooQueryresults,inputLine:rawL,finalContents: finalString,eles:eltists,request:path,doc:node,query:result,reader:file,",Greedy,443,0.20895041624704996
196,"['21028028', '17568209', '    public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) {\n        if (newInventory == null || newInventory.equals("""")) return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        Category log = ThreadCategory.getInstance(getClass());\n        try {\n            log.debug(newInventory);\n            init(newInventory);\n        } catch (ValidationException ve) {\n            log.error(""Unable to parse new Inventory."");\n            log.error(ve);\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        } catch (MarshalException me) {\n            log.error(""Unable to parse new Inventory."");\n            log.error(me);\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration();\n        String directory_repository = iConfig.getFileRepository();\n        String path = (String) parameters.get(""path"");\n        if (path == null) {\n            log.error(""Parameter \'path\' not found."");\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        java.sql.Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n            dbConn.setAutoCommit(false);\n        } catch (SQLException s) {\n            log.error(""Unable to connect to DB"");\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        } catch (Exception s) {\n            log.error(""Unable to connect to DB"");\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        String nodeDirectory_repository = """";\n        String file_repository = """";\n        String oldPathToFile = """";\n        String newPathToFile = """";\n        boolean renameFile = false;\n        ResultSet rs = null;\n        try {\n            PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE);\n            stmt.setString(1, ipAddress);\n            rs = stmt.executeQuery();\n            while (rs.next()) {\n                nodeId = rs.getInt(1);\n            }\n            if (directory_repository.endsWith(""/"") == false && directory_repository.endsWith(File.separator) == false) {\n                directory_repository += File.separator;\n            }\n            nodeDirectory_repository = directory_repository + nodeId;\n        } catch (SQLException s) {\n            try {\n                dbConn.rollback();\n            } catch (SQLException sqle) {\n                log.error(""Unable to rollback on db. "" + sqle);\n            }\n            log.error(""Unable to read from DB"");\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        rs = null;\n        try {\n            PreparedStatement stmt = dbConn.prepareStatement(SELECT_PATHTOFILE);\n            stmt.setInt(1, nodeId);\n            stmt.setString(2, inventoryType);\n            stmt.setString(3, ""A"");\n            rs = stmt.executeQuery();\n            while (rs.next()) {\n                oldPathToFile = rs.getString(1);\n            }\n            String newDirRep = nodeDirectory_repository;\n            if (path.startsWith(""/"") == false && path.startsWith(File.separator) == false) {\n                newDirRep += File.separator;\n            }\n            long time = System.currentTimeMillis();\n            Timestamp currTime = new Timestamp(time);\n            java.util.Date currTimeDate = new java.util.Date(currTime.getTime());\n            SimpleDateFormat ObjectformatDate = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");\n            newPathToFile = newDirRep + path + ""["" + ObjectformatDate.format(currTimeDate) + ""]"";\n        } catch (SQLException s) {\n            log.error(""Unable to read from DB"");\n            try {\n                dbConn.rollback();\n            } catch (SQLException sqle) {\n                log.error(""Unable to rollback on db. "" + sqle);\n            }\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        int returnValue = InventoryMonitor.CONFIGURATION_SAVED;\n        rs = null;\n        int found = -1;\n        try {\n            PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_CONFIGURATION_NAME);\n            stmt.setInt(1, nodeId);\n            stmt.setString(2, inventoryType);\n            rs = stmt.executeQuery();\n            while (rs.next()) {\n                found = rs.getInt(1);\n            }\n        } catch (SQLException s) {\n            log.error(""Unable to read from DB"");\n            log.error(s);\n            try {\n                dbConn.rollback();\n            } catch (SQLException sqle) {\n                log.error(""Unable to rollback on db. "" + sqle);\n            }\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        long time = System.currentTimeMillis();\n        Timestamp currentTime = new Timestamp(time);\n        if (found > 0) {\n            if (compareResult == InventoryMonitor.CONFIGURATION_CHANGED || compareResult == InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD) {\n                try {\n                    log.debug(""FOUND="" + found + "" row/s in configuration, UPDATE it"");\n                    PreparedStatement stmt = dbConn.prepareStatement(UPDATE_CONFIGURATION_TO_STATUS_N);\n                    stmt.setInt(1, nodeId);\n                    stmt.setString(2, inventoryType);\n                    stmt.executeUpdate();\n                } catch (SQLException s) {\n                    log.error(""Unable to update DB"" + s);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.error(""Unable to rollback on db. "" + sqle);\n                    }\n                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n                }\n                try {\n                    PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION);\n                    stmt.setInt(1, nodeId);\n                    stmt.setTimestamp(2, currentTime);\n                    stmt.setTimestamp(3, currentTime);\n                    stmt.setString(4, inventoryType);\n                    stmt.setString(5, newPathToFile);\n                    stmt.execute();\n                } catch (SQLException s) {\n                    log.error(""Unable to insert in DB"");\n                    log.error(s);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.error(""Unable to rollback on db. "" + sqle);\n                    }\n                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n                }\n            } else {\n                try {\n                    log.debug(""FOUND="" + found + "" row/s in configuration, UPDATE it"");\n                    PreparedStatement stmt = dbConn.prepareStatement(UPDATE_LASTPOLLTIME_PATHTOFILE);\n                    stmt.setTimestamp(1, currentTime);\n                    stmt.setString(2, newPathToFile);\n                    stmt.setInt(3, nodeId);\n                    stmt.setString(4, inventoryType);\n                    stmt.executeUpdate();\n                    renameFile = true;\n                } catch (SQLException s) {\n                    log.error(""Unable to update DB"");\n                    log.error(s);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.error(""Unable to rollback on db. "" + sqle);\n                    }\n                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n                }\n            }\n            try {\n                dbConn.commit();\n            } catch (SQLException s) {\n                log.error(""Unable to commit to DB "" + s);\n                try {\n                    dbConn.rollback();\n                } catch (SQLException sqle) {\n                    log.error(""Unable to rollback on db. "" + sqle);\n                }\n                return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n            }\n        } else {\n            try {\n                PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION);\n                stmt.setInt(1, nodeId);\n                stmt.setTimestamp(2, currentTime);\n                stmt.setTimestamp(3, currentTime);\n                stmt.setString(4, inventoryType);\n                stmt.setString(5, newPathToFile);\n                stmt.execute();\n            } catch (SQLException s) {\n                log.error(""Unable to insert in DB"");\n                log.error(s);\n                try {\n                    dbConn.rollback();\n                } catch (SQLException sqle) {\n                    log.error(""Unable to rollback on db. "" + sqle);\n                }\n                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n            }\n        }\n        rs = null;\n        found = -1;\n        try {\n            PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_IN_ASSET);\n            stmt.setInt(1, nodeId);\n            rs = stmt.executeQuery();\n            while (rs.next()) {\n                found = rs.getInt(1);\n            }\n        } catch (SQLException s) {\n            log.error(""Unable to write into DB"");\n            log.error(s);\n            try {\n                dbConn.rollback();\n            } catch (SQLException sqle) {\n                log.error(""Unable to rollback on db. "" + sqle);\n            }\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        time = System.currentTimeMillis();\n        currentTime = new Timestamp(time);\n        if (found > 0) {\n            try {\n                log.debug(""Found "" + found + "" rows in table assets: UPDATE it"");\n                Iterator dbColumnIter = asset.keySet().iterator();\n                String queryParam = """";\n                int counter = 0;\n                while (dbColumnIter.hasNext()) {\n                    counter++;\n                    String currDbColumn = (String) dbColumnIter.next();\n                    String dataItem = (String) asset.get(currDbColumn);\n                    dataItem = dataItem.replaceAll(""[ \\t]+"", "" "");\n                    queryParam += currDbColumn + ""=\'"" + dataItem + ""\',"";\n                }\n                if (counter > 0) {\n                    String updateAssets = ""UPDATE assets SET  "" + queryParam + "" lastmodifieddate=? WHERE nodeID =?"";\n                    PreparedStatement stmt = dbConn.prepareStatement(updateAssets);\n                    stmt.setTimestamp(1, currentTime);\n                    stmt.setInt(2, nodeId);\n                    log.debug(""UPDATEQUERY "" + updateAssets);\n                    stmt.executeUpdate();\n                }\n            } catch (SQLException s) {\n                log.error(""Unable to update DB"" + s);\n                try {\n                    dbConn.rollback();\n                } catch (SQLException sqle) {\n                    log.error(""Unable to rollback on db. "" + sqle);\n                }\n                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n            }\n        } else {\n            try {\n                log.debug(""row not found. INSERT into assets"");\n                InsertIntoAssets(dbConn);\n            } catch (SQLException s) {\n                log.error(""Unable to insert in DB"");\n                log.error(s);\n                try {\n                    dbConn.rollback();\n                } catch (SQLException sqle) {\n                    log.error(""Unable to rollback on db. "" + sqle);\n                }\n                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n            }\n        }\n        try {\n            dbConn.commit();\n        } catch (SQLException sqle) {\n            log.error(""Unable to save into DB"" + sqle);\n            try {\n                dbConn.rollback();\n            } catch (SQLException sqlex) {\n                log.error(""Unable to rollback on db. "" + sqlex);\n            }\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        }\n        try {\n            boolean exists = (new File(directory_repository)).exists();\n            if (!exists) {\n                log.warn(""file-repository \'"" + directory_repository + ""\' not found: trying to create it."");\n                boolean success = (new File(directory_repository)).mkdir();\n                if (!success) {\n                    log.error(""Directory creation failed"");\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException s) {\n                        log.error(""Unable to rollback DB"");\n                    }\n                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n                }\n                log.warn(""file-repository \'"" + directory_repository + ""\' created."");\n            }\n            exists = (new File(nodeDirectory_repository)).exists();\n            if (!exists) {\n                boolean success = (new File(nodeDirectory_repository)).mkdir();\n                if (!success) {\n                    log.error(""Node Directory \'"" + nodeDirectory_repository + ""\' creation failed."");\n                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException s) {\n                        log.error(""Unable to rollback DB"");\n                    }\n                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n                }\n            }\n            exists = (new File(oldPathToFile)).exists();\n            log.debug(oldPathToFile + "" exists="" + exists);\n            if (!exists) {\n                if (renameCorruptedFile) {\n                    log.warn(""renameCorruptedFile=true and old configuration doesn\'t exist."");\n                }\n                returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD;\n            }\n            if (renameCorruptedFile) {\n                File f = new File(oldPathToFile);\n                String oldConfigurationFileDestination = oldPathToFile + ""_Corrupted"";\n                File dest = new File(oldConfigurationFileDestination);\n                dest.createNewFile();\n                f.renameTo(dest);\n                FileWriter fileout = new FileWriter(newPathToFile);\n                BufferedWriter filebufwri = new BufferedWriter(fileout);\n                PrintWriter printout = new PrintWriter(filebufwri);\n                printout.println(newInventory);\n                printout.close();\n            } else {\n                if (renameFile) {\n                    File f = new File(oldPathToFile);\n                    File dest = new File(newPathToFile);\n                    dest.createNewFile();\n                    f.renameTo(dest);\n                } else {\n                    FileWriter fileout = new FileWriter(newPathToFile);\n                    BufferedWriter filebufwri = new BufferedWriter(fileout);\n                    PrintWriter printout = new PrintWriter(filebufwri);\n                    printout.print(newInventory);\n                    printout.close();\n                }\n            }\n        } catch (IOException ioex) {\n            try {\n                dbConn.rollback();\n            } catch (SQLException s) {\n                log.error(""Unable to rollback DB"");\n            }\n            log.error(""Failed writing to file \'"" + newPathToFile + ""\'."");\n            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";\n            return InventoryMonitor.CONFIGURATION_NOT_SAVED;\n        } finally {\n            try {\n                dbConn.close();\n            } catch (SQLException s) {\n                log.error(""Unable to close connection to DB"");\n            }\n        }\n        saveMessage = ""inventory "" + inventoryType + "" success.<br>"";\n        log.debug("""" + returnValue);\n        return returnValue;\n    }\n', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n']",2579,"    public int save(String newINuration, String inventoryType, int compareResult, boolean renameCorruptedFile) {
        if (newINuration == null || newINuration.equals("""")) return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        Category og = ThreadCategory.getInstance(getClass());
        try {
            og.debug(newINuration);
            init(newINuration);
        } catch (ValidationException ve) {
            og.error(""Unable to parse new Inventory."");
            og.error(ve);
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        } catch (MarshalException me) {
            og.error(""Unable to parse new Inventory."");
            og.error(me);
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration();
        String directory_repository = iConfig.getFileRepository();
        String file = (String) parameters.get(""file"");
        if (file == null) {
            og.error(""Parameter 'path' not found."");
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        java.sql.Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            dbConn.setAutoCommit(false);
        } catch (SQLException s) {
            og.error(""Unable to connect to DB"");
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        } catch (Exception s) {
            og.error(""Unable to connect to DB"");
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        String nodeDirectory_repository = """";
        String file_repository = """";
        String oldPathToFile = """";
        String newPathToFile = """";
        boolean renameFile = false;
        ResultSet rs = null;
        try {
            PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE);
            stmt.setString(1, ipAddress);
            rs = stmt.executeQuery();
            while (rs.next()) {
                nodeId = rs.getInt(1);
            }
            if (directory_repository.endsWith(""/"") == false && directory_repository.endsWith(File.separator) == false) {
                directory_repository += File.separator;
            }
            nodeDirectory_repository = directory_repository + nodeId;
        } catch (SQLException s) {
            try {
                dbConn.rollback();
            } catch (SQLException sqle) {
                og.error(""Unable to rollback on db. "" + sqle);
            }
            og.error(""Unable to read from DB"");
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        rs = null;
        try {
            PreparedStatement stmt = dbConn.prepareStatement(SELECT_PATHTOFILE);
            stmt.setInt(1, nodeId);
            stmt.setString(2, inventoryType);
            stmt.setString(3, ""A"");
            rs = stmt.executeQuery();
            while (rs.next()) {
                oldPathToFile = rs.getString(1);
            }
            String newDirRep = nodeDirectory_repository;
            if (file.startsWith(""/"") == false && file.startsWith(File.separator) == false) {
                newDirRep += File.separator;
            }
            long time = System.currentTimeMillis();
            Timestamp currTime = new Timestamp(time);
            java.util.Date currTimeDate = new java.util.Date(currTime.getTime());
            SimpleDateFormat ObjectformatDate = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
            newPathToFile = newDirRep + file + ""["" + ObjectformatDate.format(currTimeDate) + ""]"";
        } catch (SQLException s) {
            og.error(""Unable to read from DB"");
            try {
                dbConn.rollback();
            } catch (SQLException sqle) {
                og.error(""Unable to rollback on db. "" + sqle);
            }
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        int returnValue = InventoryMonitor.CONFIGURATION_SAVED;
        rs = null;
        int found = -1;
        try {
            PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_CONFIGURATION_NAME);
            stmt.setInt(1, nodeId);
            stmt.setString(2, inventoryType);
            rs = stmt.executeQuery();
            while (rs.next()) {
                found = rs.getInt(1);
            }
        } catch (SQLException s) {
            og.error(""Unable to read from DB"");
            og.error(s);
            try {
                dbConn.rollback();
            } catch (SQLException sqle) {
                og.error(""Unable to rollback on db. "" + sqle);
            }
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        long time = System.currentTimeMillis();
        Timestamp currentTime = new Timestamp(time);
        if (found > 0) {
            if (compareResult == InventoryMonitor.CONFIGURATION_CHANGED || compareResult == InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD) {
                try {
                    og.debug(""FOUND="" + found + "" row/s in configuration, UPDATE it"");
                    PreparedStatement stmt = dbConn.prepareStatement(UPDATE_CONFIGURATION_TO_STATUS_N);
                    stmt.setInt(1, nodeId);
                    stmt.setString(2, inventoryType);
                    stmt.executeUpdate();
                } catch (SQLException s) {
                    og.error(""Unable to update DB"" + s);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        og.error(""Unable to rollback on db. "" + sqle);
                    }
                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;
                }
                try {
                    PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION);
                    stmt.setInt(1, nodeId);
                    stmt.setTimestamp(2, currentTime);
                    stmt.setTimestamp(3, currentTime);
                    stmt.setString(4, inventoryType);
                    stmt.setString(5, newPathToFile);
                    stmt.execute();
                } catch (SQLException s) {
                    og.error(""Unable to insert in DB"");
                    og.error(s);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        og.error(""Unable to rollback on db. "" + sqle);
                    }
                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;
                }
            } else {
                try {
                    og.debug(""FOUND="" + found + "" row/s in configuration, UPDATE it"");
                    PreparedStatement stmt = dbConn.prepareStatement(UPDATE_LASTPOLLTIME_PATHTOFILE);
                    stmt.setTimestamp(1, currentTime);
                    stmt.setString(2, newPathToFile);
                    stmt.setInt(3, nodeId);
                    stmt.setString(4, inventoryType);
                    stmt.executeUpdate();
                    renameFile = true;
                } catch (SQLException s) {
                    og.error(""Unable to update DB"");
                    og.error(s);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        og.error(""Unable to rollback on db. "" + sqle);
                    }
                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;
                }
            }
            try {
                dbConn.commit();
            } catch (SQLException s) {
                og.error(""Unable to commit to DB "" + s);
                try {
                    dbConn.rollback();
                } catch (SQLException sqle) {
                    og.error(""Unable to rollback on db. "" + sqle);
                }
                return InventoryMonitor.CONFIGURATION_NOT_SAVED;
            }
        } else {
            try {
                PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION);
                stmt.setInt(1, nodeId);
                stmt.setTimestamp(2, currentTime);
                stmt.setTimestamp(3, currentTime);
                stmt.setString(4, inventoryType);
                stmt.setString(5, newPathToFile);
                stmt.execute();
            } catch (SQLException s) {
                og.error(""Unable to insert in DB"");
                og.error(s);
                try {
                    dbConn.rollback();
                } catch (SQLException sqle) {
                    og.error(""Unable to rollback on db. "" + sqle);
                }
                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                return InventoryMonitor.CONFIGURATION_NOT_SAVED;
            }
        }
        rs = null;
        found = -1;
        try {
            PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_IN_ASSET);
            stmt.setInt(1, nodeId);
            rs = stmt.executeQuery();
            while (rs.next()) {
                found = rs.getInt(1);
            }
        } catch (SQLException s) {
            og.error(""Unable to write into DB"");
            og.error(s);
            try {
                dbConn.rollback();
            } catch (SQLException sqle) {
                og.error(""Unable to rollback on db. "" + sqle);
            }
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        time = System.currentTimeMillis();
        currentTime = new Timestamp(time);
        if (found > 0) {
            try {
                og.debug(""Found "" + found + "" rows in table assets: UPDATE it"");
                Iterator dbColumnIter = asset.keySet().iterator();
                String queryParam = """";
                int counter = 0;
                while (dbColumnIter.hasNext()) {
                    counter++;
                    String currDbColumn = (String) dbColumnIter.next();
                    String dataItem = (String) asset.get(currDbColumn);
                    dataItem = dataItem.replaceAll(""[ \t]+"", "" "");
                    queryParam += currDbColumn + ""='"" + dataItem + ""',"";
                }
                if (counter > 0) {
                    String updateAssets = ""UPDATE assets SET  "" + queryParam + "" lastmodifieddate=? WHERE nodeID =?"";
                    PreparedStatement stmt = dbConn.prepareStatement(updateAssets);
                    stmt.setTimestamp(1, currentTime);
                    stmt.setInt(2, nodeId);
                    og.debug(""UPDATEQUERY "" + updateAssets);
                    stmt.executeUpdate();
                }
            } catch (SQLException s) {
                og.error(""Unable to update DB"" + s);
                try {
                    dbConn.rollback();
                } catch (SQLException sqle) {
                    og.error(""Unable to rollback on db. "" + sqle);
                }
                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                return InventoryMonitor.CONFIGURATION_NOT_SAVED;
            }
        } else {
            try {
                og.debug(""row not found. INSERT into assets"");
                InsertIntoAssets(dbConn);
            } catch (SQLException s) {
                og.error(""Unable to insert in DB"");
                og.error(s);
                try {
                    dbConn.rollback();
                } catch (SQLException sqle) {
                    og.error(""Unable to rollback on db. "" + sqle);
                }
                saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                return InventoryMonitor.CONFIGURATION_NOT_SAVED;
            }
        }
        try {
            dbConn.commit();
        } catch (SQLException sqle) {
            og.error(""Unable to save into DB"" + sqle);
            try {
                dbConn.rollback();
            } catch (SQLException sqlex) {
                og.error(""Unable to rollback on db. "" + sqlex);
            }
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        }
        try {
            boolean exists = (new File(directory_repository)).exists();
            if (!exists) {
                og.warn(""file-repository '"" + directory_repository + ""' not found: trying to create it."");
                boolean success = (new File(directory_repository)).mkdir();
                if (!success) {
                    og.error(""Directory creation failed"");
                    try {
                        dbConn.rollback();
                    } catch (SQLException s) {
                        og.error(""Unable to rollback DB"");
                    }
                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;
                }
                og.warn(""file-repository '"" + directory_repository + ""' created."");
            }
            exists = (new File(nodeDirectory_repository)).exists();
            if (!exists) {
                boolean success = (new File(nodeDirectory_repository)).mkdir();
                if (!success) {
                    og.error(""Node Directory '"" + nodeDirectory_repository + ""' creation failed."");
                    saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
                    try {
                        dbConn.rollback();
                    } catch (SQLException s) {
                        og.error(""Unable to rollback DB"");
                    }
                    return InventoryMonitor.CONFIGURATION_NOT_SAVED;
                }
            }
            exists = (new File(oldPathToFile)).exists();
            og.debug(oldPathToFile + "" exists="" + exists);
            if (!exists) {
                if (renameCorruptedFile) {
                    og.warn(""renameCorruptedFile=true and old configuration doesn't exist."");
                }
                returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD;
            }
            if (renameCorruptedFile) {
                File f = new File(oldPathToFile);
                String oldConfigurationFileDestination = oldPathToFile + ""_Corrupted"";
                File dest = new File(oldConfigurationFileDestination);
                dest.createNewFile();
                f.renameTo(dest);
                FileWriter fileout = new FileWriter(newPathToFile);
                BufferedWriter filebufwri = new BufferedWriter(fileout);
                PrintWriter printout = new PrintWriter(filebufwri);
                printout.println(newINuration);
                printout.close();
            } else {
                if (renameFile) {
                    File f = new File(oldPathToFile);
                    File dest = new File(newPathToFile);
                    dest.createNewFile();
                    f.renameTo(dest);
                } else {
                    FileWriter fileout = new FileWriter(newPathToFile);
                    BufferedWriter filebufwri = new BufferedWriter(fileout);
                    PrintWriter printout = new PrintWriter(filebufwri);
                    printout.print(newINuration);
                    printout.close();
                }
            }
        } catch (IOException ioex) {
            try {
                dbConn.rollback();
            } catch (SQLException s) {
                og.error(""Unable to rollback DB"");
            }
            og.error(""Failed writing to file '"" + newPathToFile + ""'."");
            saveMessage = ""Unable to save "" + inventoryType + "" configuration.<br>"";
            return InventoryMonitor.CONFIGURATION_NOT_SAVED;
        } finally {
            try {
                dbConn.close();
            } catch (SQLException s) {
                og.error(""Unable to close connection to DB"");
            }
        }
        saveMessage = ""inventory "" + inventoryType + "" success.<br>"";
        og.debug("""" + returnValue);
        return returnValue;
    }
",0,0,1,1,"newInventory,inventoryType,compareResult,renameCorruptedFile,log,iConfig,directory_repository,path,saveMessage,dbConn,nodeDirectory_repository,oldPathToFile,newPathToFile,renameFile","newInventory:0.0,inventoryType:0.0,compareResult:0.0,renameCorruptedFile:0.0,log:8.344650268554688e-07,iConfig:0.0,directory_repository:0.0,path:2.384185791015625e-07,saveMessage:0.0,dbConn:0.0,nodeDirectory_repository:0.0,oldPathToFile:0.0,newPathToFile:0.0,renameFile:0.0,",3,69,"log:og,path:file,newInventory:newINuration,",Greedy,358,0.3103203852971395
197,"['20150442', '3257108', '    public String accessURL_Post(String url, Map<String, String> keyValue, String encoding) throws Throwable {\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        for (String key : keyValue.keySet()) {\n            formparams.add(new BasicNameValuePair(key, keyValue.get(key)));\n        }\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, encoding);\n        HttpPost httpPost = new HttpPost(url);\n        httpPost.setEntity(entity);\n        HttpResponse response = client.execute(httpPost);\n        String entuity = EntityUtils.toString(response.getEntity());\n        handleHeaders(response.getAllHeaders());\n        return entuity;\n    }\n', '    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(s.getBytes(), 0, s.length());\n            s = new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return s;\n    }\n']",130,"    public String accessURL_Post(String entry, Map<String, String> linkMap, String ecoded) throws Throwable {
        List<NameValuePair> formargs = new ArrayList<NameValuePair>();
        for (String resource : linkMap.keySet()) {
            formargs.add(new BasicNameValuePair(resource, linkMap.get(resource)));
        }
        UrlEncodedFormEntity document = new UrlEncodedFormEntity(formargs, ecoded);
        HttpPost HttpCreate = new HttpPost(entry);
        HttpCreate.setEntity(document);
        HttpResponse result = client.execute(HttpCreate);
        String ENTuation = EntityUtils.toString(result.getEntity());
        handleHeaders(result.getAllHeaders());
        return ENTuation;
    }
",0,0,0,-1,"url,keyValue,encoding,formparams,key,entity,httpPost,response,entuity","url:0.0002232193946838379,keyValue:0.0,encoding:0.0,formparams:0.0,key:-5.7220458984375e-06,entity:8.821487426757812e-06,httpPost:0.0,response:0.00023406744003295898,entuity:0.0,",9,23,"response:result,url:entry,entity:document,keyValue:linkMap,encoding:ecoded,formparams:formargs,httpPost:HttpCreate,entuity:ENTuation,key:resource,",Greedy,322,0.15935298204421997
198,"['4209026', '8014777', '    public Collection<Module> loadModules() {\n        URL url = getClass().getResource(""/modules.xml"");\n        if (url == null) {\n            java.util.logging.Logger.getLogger(ModuleLoader.class.getName()).log(java.util.logging.Level.SEVERE, ""Cannot find modules.xml file in classpath"");\n            return Collections.<Module>emptyList();\n        }\n        DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();\n        Document document = null;\n        InputStream input = null;\n        try {\n            input = url.openStream();\n            DocumentBuilder bui = fac.newDocumentBuilder();\n            document = bui.parse(url.openStream());\n        } catch (SAXException ex) {\n            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IOException ex) {\n            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (ParserConfigurationException ex) {\n            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);\n        } finally {\n            if (input != null) {\n                try {\n                    input.close();\n                } catch (IOException ex) {\n                    Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        }\n        if (document == null) {\n            return Collections.<Module>emptyList();\n        }\n        List<Module> modules = new LinkedList<Module>();\n        NodeList moduleListNodes = document.getElementsByTagName(""module-list"");\n        for (int i = 0; i < moduleListNodes.getLength(); i++) {\n            Element moduleListNode = (Element) moduleListNodes.item(i);\n            NodeList moduleNodes = moduleListNode.getElementsByTagName(""module"");\n            for (int j = 0; j < moduleNodes.getLength(); j++) {\n                Element moduleNode = (Element) moduleNodes.item(j);\n                String moduleClass = moduleNode.getAttribute(""class"");\n                if (moduleClass != null) {\n                    instantiateModule(moduleClass, modules);\n                }\n            }\n        }\n        return modules;\n    }\n', '    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {\n        Properties list = new Properties();\n        list.load(new FileInputStream(fileWithListOfImages));\n        long current = 0;\n        long startTime = System.currentTimeMillis();\n        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);\n        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");\n        System.out.println(""Images with the same size as the \'no-image\' image are ignored and not displayed"");\n        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {\n            String urlString = it.next().toString().replace(\'\\\\\', \'/\');\n            if (urlString.contains(""="")) throw new Exception(""Symbol \'=\' found in file names, while it is reserved for denoting \'/\' in flat-file names"");\n        }\n        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {\n            String urlString = it.next().toString().replace(\'\\\\\', \'/\');\n            URL url = new URL(uriPrefix + urlString);\n            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));\n            current++;\n            if (!file.exists()) {\n                try {\n                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);\n                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);\n                    int c;\n                    while ((c = in.read()) != -1) {\n                        out.write(c);\n                    }\n                    out.close();\n                    in.close();\n                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");\n                    System.out.println(""saved"");\n                } catch (Exception e) {\n                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());\n                }\n            } else {\n                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");\n                System.out.println(""already exists"");\n            }\n            if (current / 100 == current / 100.0) {\n                long delta = (System.currentTimeMillis() - startTime);\n                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");\n            }\n        }\n        long delta = (System.currentTimeMillis() - startTime);\n        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");\n    }\n']",426,"    public Collection<Module> loadModules() {
        URL connection = getClass().getResource(""/modules.xml"");
        if (connection == null) {
            java.util.logging.Logger.getLogger(ModuleLoader.class.getName()).log(java.util.logging.Level.SEVERE, ""Cannot find modules.xml file in classpath"");
            return Collections.<Module>emptyList();
        }
        DocumentBuilderFactory cos = DocumentBuilderFactory.newInstance();
        Document database = null;
        InputStream inc = null;
        try {
            inc = connection.openStream();
            DocumentBuilder  buli = cos.newDocumentBuilder();
            database =  buli.parse(connection.openStream());
        } catch (SAXException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (inc != null) {
                try {
                    inc.close();
                } catch (IOException ex) {
                    Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (database == null) {
            return Collections.<Module>emptyList();
        }
        List<Module> modules = new LinkedList<Module>();
        NodeList moduleListNodeows = database.getElementsByTagName(""module-list"");
        for (int ie = 0; ie < moduleListNodeows.getLength(); ie++) {
            Element moduleStreamBlock = (Element) moduleListNodeows.item(ie);
            NodeList moduleCNNlements = moduleStreamBlock.getElementsByTagName(""module"");
            for (int out = 0; out < moduleCNNlements.getLength(); out++) {
                Element modelElement = (Element) moduleCNNlements.item(out);
                String moduleClass = modelElement.getAttribute(""class"");
                if (moduleClass != null) {
                    instantiateModule(moduleClass, modules);
                }
            }
        }
        return modules;
    }
",0,0,0,-1,"url,fac,document,input,bui,modules,moduleListNodes,i,moduleListNode,moduleNodes,j,moduleNode,moduleClass","url:4.756450653076172e-05,fac:7.152557373046875e-07,document:-4.172325134277344e-06,input:-9.894371032714844e-06,bui:0.0,modules:4.172325134277344e-06,moduleListNodes:0.0,i:-3.0994415283203125e-06,moduleListNode:0.0,moduleNodes:0.0,j:4.291534423828125e-06,moduleNode:0.0,moduleClass:0.0,",11,34,"url:connection,j:out,modules:modules,fac:cos,bui: buli,moduleListNodes:moduleListNodeows,moduleListNode:moduleStreamBlock,moduleNodes:moduleCNNlements,moduleNode:modelElement,moduleClass:moduleClass,i:ie,document:database,input:inc,",Greedy,571,0.305758011341095
199,"['460892', '19592942', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public Fen_Download_FlameRobin() {\n        super();\n        initialize();\n        long HeureDebut = System.currentTimeMillis();\n        long HeureActuelle;\n        String urlsetup = ""http://downloads.sourceforge.net/project/autobackupbysim/tools/flamerobin-0.9.2-1-setup.exe"";\n        int erreurOuverture = 0;\n        InputStream input = null;\n        String cheminFichier = """";\n        File fichier;\n        FileOutputStream writeFile = null;\n        try {\n            URL url = new URL(urlsetup);\n            URLConnection connection = url.openConnection();\n            final int fileLength = connection.getContentLength();\n            if ((fileLength == -1) || (fileLength == 0)) {\n                System.out.println(""Invalide URL or file."");\n                erreurOuverture++;\n            }\n            input = connection.getInputStream();\n            String fileName = url.getFile().substring(url.getFile().lastIndexOf(\'/\') + 1);\n            if (fileName.contains(""%20"") == true) {\n                fileName = fileName.replaceAll(""%20"", "" "");\n            }\n            if (fileName.contains(""&amp;"") == true) {\n                fileName = fileName.replaceAll(""&amp;"", "" and "");\n            }\n            cheminFichier = GestionRepertoire.RecupRepTravail() + ""\\\\"" + fileName;\n            jLabel1.setText("" Fichier en cours : "" + fileName);\n            fichier = new File(cheminFichier);\n            writeFile = new FileOutputStream(cheminFichier);\n            byte[] buffer = new byte[4096 * 1024];\n            int read;\n            while ((read = input.read(buffer)) > 0) {\n                writeFile.write(buffer, 0, read);\n                long TailleEncours = fichier.length();\n                int progressionEnCours = (int) ((100 * (TailleEncours + 1)) / fileLength);\n                HeureActuelle = System.currentTimeMillis();\n                long Vitesse = (long) (TailleEncours / (HeureActuelle - HeureDebut));\n                jLabel1.setText(""T�l�chargement du fichier , Vitesse Actuelle : "" + Vitesse + "" Ko/s"");\n                jProgressBar.setValue(progressionEnCours);\n                jProgressBar.setString(progressionEnCours + "" %"");\n            }\n            writeFile.flush();\n        } catch (IOException e) {\n            System.out.println(""Error while trying to download the file."");\n            e.printStackTrace();\n        } finally {\n            try {\n                if (erreurOuverture == 0) {\n                    writeFile.close();\n                    input.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        String cmdExecuteSetup = (""cmd /c \\"""" + cheminFichier + ""\\"" /silent"");\n        Runtime r = Runtime.getRuntime();\n        Process p = null;\n        try {\n            p = r.exec(cmdExecuteSetup);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        try {\n            p.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n']",764,"    public void convert(File url, File dest) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser py = pfact.newDcmParser(login);
        Dataset ils = fact.newDataset();
        py.setDcmHandler(ils.getDcmHandler());
        try {
            FileFormat url = py.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.post.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            py.parseDcmFile(url, Tags.PixelData);
            if (ils.contains(Tags.StudyInstanceUID) || ils.contains(Tags.SeriesInstanceUID) || ils.contains(Tags.SOPInstanceUID) || ils.contains(Tags.SOPClassUID)) {
                System.post.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPicturedata = py.getReadTag() == Tags.PixelData;
            boolean inflate = hasPicturedata && ils.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = py.getReadLength();
            if (hasPicturedata) {
                if (inflate) {
                    ils.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ils.getInt(Tags.BitsAllocated, 0) >>> 3) * ils.getInt(Tags.Rows, 0) * ils.getInt(Tags.Columns, 0) * ils.getInt(Tags.NumberOfFrames, 1) * ils.getInt(Tags.NumberOfSamples, 1)) {
                    System.post.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ils.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ils.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ils.putUI(Tags.SOPInstanceUID, uid(instUID));
            ils.putUI(Tags.SOPClassUID, classUID);
            if (!ils.contains(Tags.NumberOfSamples)) {
                ils.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ils.contains(Tags.PhotometricInterpretation)) {
                ils.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ils.setFileMetaInfo(fact.newFileMetaInfo(ils, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream post = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ils.writeFile(post, encodeParam());
                if (hasPicturedata) {
                    if (!skipGroupLen) {
                        post.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        post.write((byte) grlen);
                        post.write((byte) (grlen >> 8));
                        post.write((byte) (grlen >> 16));
                        post.write((byte) (grlen >> 24));
                    }
                    post.write(PXDATA_TAG);
                    post.write((byte) pxlen);
                    post.write((byte) (pxlen >> 8));
                    post.write((byte) (pxlen >> 16));
                    post.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        post.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        post.write(b2 & 0x0f);
                        post.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        post.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        post.write(login.read());
                    }
                }
                post.close();
            }
            System.post.print('.');
        } finally {
            login.close();
        }
    }
",0,0,0,-1,"src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","src:-1.1920928955078125e-07,dest:-1.1920928955078125e-06,in:2.384185791015625e-07,p:1.1920928955078125e-07,ds:2.384185791015625e-07,format:0.0,hasPixelData:0.0,inflate:0.0,pxlen:0.0,out:-2.384185791015625e-07,",7,71,"in:login,ds:ils,p:py,format:url,hasPixelData:hasPicturedata,inflate:inflate,pxlen:pxlen,src:url,out:post,dest:dest,",Greedy,569,0.3159271597862244
200,"['623042', '5410594', '    public RepositoryHandler(String[] args) {\n        if (args.length < 2) return;\n        System.out.println(""param 1: "" + args[0] + ""\\r\\n"");\n        System.out.println(""param 2: "" + args[1] + ""\\r\\n"");\n        try {\n            URL url = new URL(args[0]);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setFollowRedirects(true);\n            connection.connect();\n            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());\n            FileOutputStream out = new FileOutputStream(args[1]);\n            int c = -1;\n            while ((c = in.read()) >= 0) {\n                out.write(c);\n            }\n            out.close();\n            in.close();\n        } catch (Exception e) {\n            System.err.println(""Error: "" + e + ""\\r\\n"");\n        }\n    }\n', '    @Override\n    public void insert(Connection conn) throws SQLException {\n        PreparedStatement objectInsert = null;\n        String sqlString = null;\n        int newID = 0;\n        try {\n            conn.setAutoCommit(false);\n            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";\n            objectInsert = conn.prepareStatement(sqlString);\n            ResultSet r = objectInsert.executeQuery(sqlString);\n            newID = r.getInt(""NEXTVAL"");\n            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";\n            objectInsert = conn.prepareStatement(sqlString);\n            objectInsert.setInt(1, newID);\n            objectInsert.setString(2, getRoomKey());\n            objectInsert.setString(3, ""ROOM"");\n            objectInsert.executeUpdate();\n            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";\n            conn.commit();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            if (conn != null) {\n                try {\n                    System.err.print(""Transaction is being rolled back"");\n                    conn.rollback();\n                } catch (SQLException excep) {\n                    excep.printStackTrace();\n                }\n            }\n        } finally {\n            if (objectInsert != null) {\n                objectInsert.close();\n            }\n            conn.setAutoCommit(true);\n        }\n    }\n']",194,"    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.doc.println(""param 1: "" + args[0] + ""\r
"");
        System.doc.println(""param 2: "" + args[1] + ""\r
"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection cond = (HttpURLConnection) url.openConnection();
            cond.setFollowRedirects(true);
            cond.connect();
            BufferedInputStream is = new BufferedInputStream(cond.getInputStream());
            FileOutputStream doc = new FileOutputStream(args[1]);
            int id = -1;
            while ((id = is.read()) >= 0) {
                doc.write(id);
            }
            doc.close();
            is.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r
"");
        }
    }
",0,0,0,-1,"url,connection,in,out,c","url:-6.401538848876953e-05,connection:-2.9921531677246094e-05,in:1.239776611328125e-05,out:-1.9669532775878906e-05,c:-9.179115295410156e-06,",4,15,"in:is,c:id,out:doc,connection:cond,url:url,",Greedy,256,0.11690609057744344
201,"['323592', '20068372', '    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {\n        System.out.println(""GestorPedido.elimina()"");\n        int id = pe.getId();\n        String sql;\n        Statement stmt = null;\n        try {\n            gd.begin();\n            sql = ""DELETE FROM pedido WHERE id="" + id;\n            System.out.println(""Ejecutando: "" + sql);\n            stmt = gd.getConexion().createStatement();\n            stmt.executeUpdate(sql);\n            System.out.println(""executeUpdate"");\n            gd.commit();\n            System.out.println(""commit"");\n            stmt.close();\n        } catch (SQLException e) {\n            gd.rollback();\n            throw new errorSQL(e.toString());\n        } catch (errorConexionBD e) {\n            System.err.println(""Error en GestorPedido.elimina(): "" + e);\n        } catch (errorSQL e) {\n            System.err.println(""Error en GestorPedido.elimina(): "" + e);\n        }\n    }\n', '    @Override\n    public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException {\n        validateUserIsSignedOn(authToken);\n        DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>();\n        HttpSession session = getSession();\n        if (record != null) {\n            Connection connection = null;\n            boolean updated = false;\n            try {\n                connection = DatabaseConnector.getConnection();\n                connection.setAutoCommit(false);\n                recordUpdateResult.setMessage(messages.server_record_update_success(""""));\n                recordUpdateResult.setSuccessful(true);\n                long userId = getSignedOnUser(authToken).getUserId();\n                AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session);\n                if (record.isTopicsChanged()) {\n                    ArrayList<Topic> currentTopics = TopicRetrievalServiceImpl.getTopics(record.getRecordid(), getSession(), authToken);\n                    TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid());\n                    TopicUpdateServiceImpl.insertRecordTopics(connection, record.getTopics(), record.getRecordid());\n                }\n                ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes();\n                if (recordAttributes != null && recordAttributes.size() > 0) {\n                    Iterator<RecordAttribute> rItr = recordAttributes.iterator();\n                    while (rItr.hasNext()) {\n                        RecordAttribute r = rItr.next();\n                        if (r.getRecordattributeid() > 0) {\n                            if (r.getArchivedtimestamp() == null) {\n                                String rAtSql = ""update tms.recordattributes set chardata = ? "" + ""where recordattributeid = ?"";\n                                PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql);\n                                updateRecordAttribute.setString(1, r.getChardata());\n                                updateRecordAttribute.setLong(2, r.getRecordattributeid());\n                                updateRecordAttribute.executeUpdate();\n                                AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session);\n                            } else {\n                                String rAtSql = ""update tms.recordattributes set archivedtimestamp = now() where  recordattributeid = ?"";\n                                PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql);\n                                updateRecordAttribute.setLong(1, r.getRecordattributeid());\n                                updateRecordAttribute.executeUpdate();\n                                AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session);\n                            }\n                        } else {\n                            String rAtSql = ""insert into tms.recordattributes "" + ""(inputmodelfieldid, chardata, recordid) "" + ""values (?, ?, ?) returning recordattributeid"";\n                            PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql);\n                            insertRecordAttribute.setLong(1, r.getInputmodelfieldid());\n                            insertRecordAttribute.setString(2, r.getChardata());\n                            insertRecordAttribute.setLong(3, record.getRecordid());\n                            ResultSet result = insertRecordAttribute.executeQuery();\n                            if (result.next()) {\n                                long recordattributeid = result.getLong(""recordattributeid"");\n                                r.setRecordattributeid(recordattributeid);\n                                AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session);\n                            }\n                        }\n                    }\n                }\n                ArrayList<Term> terms = record.getTerms();\n                Iterator<Term> termsItr = terms.iterator();\n                while (termsItr.hasNext()) {\n                    Term term = termsItr.next();\n                    if (term.getTermid() != -1) TermUpdater.updateTerm(connection, term, userId, authToken, getSession()); else {\n                        TermAdditionServiceImpl termAdder = new TermAdditionServiceImpl();\n                        termAdder.addTerm(connection, term, userId, authToken, session);\n                    }\n                }\n                connection.commit();\n                updated = true;\n                if (filter != null) RecordIdTracker.refreshRecordIdsInSessionByFilter(session, connection, true, filter, sourceField, authToken); else RecordIdTracker.refreshRecordIdsInSession(session, connection, false, authToken);\n                RecordRetrievalServiceImpl retriever = new RecordRetrievalServiceImpl();\n                Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), session, false, inputmodel, authToken);\n                recordUpdateResult.setResult(updatedRecord);\n            } catch (Exception e) {\n                if (!updated && connection != null) {\n                    try {\n                        connection.rollback();\n                    } catch (SQLException e1) {\n                        LogUtility.log(Level.SEVERE, session, messages.log_db_rollback(""""), e1, authToken);\n                        e1.printStackTrace();\n                    }\n                }\n                recordUpdateResult.setFailed(true);\n                if (updated) {\n                    recordUpdateResult.setMessage(messages.server_record_update_retrieve(""""));\n                    recordUpdateResult.setException(e);\n                    LogUtility.log(Level.SEVERE, session, messages.server_record_update_retrieve(""""), e, authToken);\n                } else {\n                    recordUpdateResult.setMessage(messages.server_record_update_fail(""""));\n                    recordUpdateResult.setException(new PersistenceException(e));\n                    LogUtility.log(Level.SEVERE, session, messages.server_record_update_fail(""""), e, authToken);\n                }\n                GWT.log(recordUpdateResult.getMessage(), e);\n            } finally {\n                try {\n                    if (connection != null) {\n                        connection.setAutoCommit(true);\n                        connection.close();\n                    }\n                } catch (Exception e) {\n                    LogUtility.log(Level.SEVERE, session, messages.log_db_close(""""), e, authToken);\n                }\n            }\n        }\n        return recordUpdateResult;\n    }\n']",188,"    public void elimina(Pedido pei) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int url = pei.getId();
        String http;
        Statement estmb = null;
        try {
            gd.begin();
            http = ""DELETE FROM pedido WHERE id="" + url;
            System.out.println(""Ejecutando: "" + http);
            estmb = gd.getConexion().createStatement();
            estmb.executeUpdate(http);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            estmb.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
",1,1,1,-1,"pe,id,sql,stmt","pe:4.5299530029296875e-06,id:1.1920928955078125e-06,sql:-4.0531158447265625e-06,stmt:0.0,",4,12,"pe:pei,id:url,stmt:estmb,sql:http,",Greedy,202,0.10237132708231608
202,"['18570187', '3177725', '    public ClassifiedCandidate postToClassifiedCandidate(ClassifiedCandidate cand, RawCandidateMatched basic) throws BookKeeprCommunicationException {\n        try {\n            synchronized (httpClient) {\n                HttpPost req = new HttpPost(remoteHost.getUrl() + ""/cand/"" + Long.toHexString(cand.getId()));\n                req.setHeader(""Accept-Encoding"", ""gzip"");\n                ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n                XMLWriter.write(out, basic);\n                ByteArrayInputStream in2 = new ByteArrayInputStream(out.toByteArray());\n                req.setEntity(new InputStreamEntity(in2, -1));\n                HttpResponse resp = httpClient.execute(req);\n                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    try {\n                        InputStream in = resp.getEntity().getContent();\n                        Header hdr = resp.getFirstHeader(""Content-Encoding"");\n                        String enc = """";\n                        if (hdr != null) {\n                            enc = resp.getFirstHeader(""Content-Encoding"").getValue();\n                        }\n                        if (enc.equals(""gzip"")) {\n                            in = new GZIPInputStream(in);\n                        }\n                        XMLAble xmlable = XMLReader.read(in);\n                        in.close();\n                        if (xmlable instanceof ClassifiedCandidate) {\n                            ClassifiedCandidate p = (ClassifiedCandidate) xmlable;\n                            return p;\n                        } else {\n                            resp.getEntity().consumeContent();\n                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for ClassifiedCandidate"");\n                        }\n                    } catch (SAXException ex) {\n                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);\n                        throw new BookKeeprCommunicationException(ex);\n                    }\n                } else {\n                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");\n                }\n            }\n        } catch (HttpException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (IOException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (URISyntaxException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        }\n    }\n', '    public DBAccess(String pathToDb) {\n        if (instance != null) {\n            throw new IllegalStateException();\n        }\n        System.setProperty(""derby.system.home"", pathToDb);\n        try {\n            boolean exists = new File(pathToDb).exists();\n            new EmbeddedDriver();\n            Properties props = new Properties();\n            if (exists) {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);\n                connection.setAutoCommit(true);\n                Statement statement = connection.createStatement();\n                try {\n                } finally {\n                    statement.close();\n                }\n            } else {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);\n                connection.setAutoCommit(true);\n                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                StringBuilder query = new StringBuilder();\n                for (String s = reader.readLine(); s != null; s = reader.readLine()) {\n                    if (query.length() > 0) {\n                        query.append(\'\\n\');\n                    }\n                    query.append(s);\n                }\n                reader.close();\n                Statement statement = connection.createStatement();\n                try {\n                    String[] statements = query.toString().split("";(\\\\s)*"");\n                    for (String s : statements) {\n                        statement.execute(s);\n                    }\n                } finally {\n                    statement.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        instance = this;\n    }\n']",380,"    public ClassifiedCandidate postToClassifiedCandidate(ClassifiedCandidate my, RawCandidateMatched pattern) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpPost requ = new HttpPost(remoteHost.getUrl() + ""/cand/"" + Long.toHexString(my.getId()));
                requ.setHeader(""Accept-Encoding"", ""gzip"");
                ByteArrayOutputStream buffer = new ByteArrayOutputStream(1024);
                XMLWriter.write(buffer, pattern);
                ByteArrayInputStream out1 = new ByteArrayInputStream(buffer.toByteArray());
                requ.setEntity(new InputStreamEntity(out1, -1));
                HttpResponse resp = httpClient.execute(requ);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        InputStream min = resp.getEntity().getContent();
                        Header hdr = resp.getFirstHeader(""Content-Encoding"");
                        String inc = """";
                        if (hdr != null) {
                            inc = resp.getFirstHeader(""Content-Encoding"").getValue();
                        }
                        if (inc.equals(""gzip"")) {
                            min = new GZIPInputStream(min);
                        }
                        XMLAble semability = XMLReader.read(min);
                        min.close();
                        if (semability instanceof ClassifiedCandidate) {
                            ClassifiedCandidate P = (ClassifiedCandidate) semability;
                            return P;
                        } else {
                            resp.getEntity().consumeContent();
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for ClassifiedCandidate"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",0,0,0,-1,"cand,basic,req,out,in2,resp,in,hdr,enc,xmlable,p","cand:6.4373016357421875e-06,basic:-6.556510925292969e-06,req:2.47955322265625e-05,out:2.3603439331054688e-05,in2:0.0,resp:9.775161743164062e-06,in:1.5974044799804688e-05,hdr:0.0,enc:4.410743713378906e-06,xmlable:0.0,p:3.933906555175781e-06,",9,26,"req:requ,out:buffer,in:min,resp:resp,cand:my,enc:inc,p:P,in2:out1,hdr:hdr,xmlable:semability,basic:pattern,",Greedy,525,0.2568871061007182
203,"['8731413', '12728035', '    public ImportFromFile() {\n        JFrame jf = new JFrame();\n        JFileChooser fc = new JFileChooser(KTH.data._path);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fc.showOpenDialog(jf);\n        File file = null;\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            file = fc.getSelectedFile();\n            KTH.data._path = file.getParent();\n            System.out.println(file.getAbsolutePath() + ""\\n"");\n        } else {\n        }\n        if (file != null) {\n            File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);\n            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));\n            if (f.exists() && !IOUtils.isNewerContent(file, f)) {\n            } else {\n                try {\n                    IOUtils.copyFile(file, f, true);\n                } catch (Exception e) {\n                    KTH.out.err(e);\n                }\n            }\n            KTH.dc2.removeDc(""Import"");\n        } else {\n        }\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",227,"    public ImportFromFile() {
        JFrame jjcf = new JFrame();
        JFileChooser fm = new JFileChooser(SKCH.site._location);
        fm.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int openTx = fm.showOpenDialog(jjcf);
        File url = null;
        if (openTx == JFileChooser.APPROVE_OPTION) {
            url = fm.getSelectedFile();
            SKCH.site._location = url.getParent();
            System.out.println(url.getAbsolutePath() + ""
"");
        } else {
        }
        if (url != null) {
            File fen = new File(SKCH.site.getHomeDir() + File.separator + SKCH.site.katalogName);
            System.out.println(fen + (fen.exists() ? "" is found "" : "" is missing ""));
            if (fen.exists() && !IOUtils.isNewerContent(url, fen)) {
            } else {
                try {
                    IOUtils.copyFile(url, fen, true);
                } catch (Exception e) {
                    SKCH.out.err(e);
                }
            }
            SKCH.dc2.removeDc(""Import"");
        } else {
        }
    }
",1,1,1,-1,"jf,fc,returnVal,file,KTH,data,_path,f","jf:0.0,fc:2.384185791015625e-06,returnVal:0.0,file:0.00011140108108520508,KTH:0.0,data:2.300739288330078e-05,_path:0.0,f:8.696317672729492e-05,",8,33,"file:url,f:fen,data:site,fc:fm,jf:jjcf,returnVal:openTx,KTH:SKCH,_path:_location,",Greedy,382,0.1610779047012329
204,"['2640244', '22961265', '    public DocumentDialog(Frame frame, String title, String document) {\n        setTitle(title);\n        textArea = new JTextArea();\n        textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        textArea.setEditable(false);\n        getContentPane().add(textPane);\n        URL url = DocumentDialog.class.getClassLoader().getResource(document);\n        try {\n            StringBuilder sb = new StringBuilder();\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));\n            String buildNumber = MessageBundle.getBuildNumber();\n            String releaseNumber = MessageBundle.getReleaseNumber();\n            String tmp;\n            while ((tmp = in.readLine()) != null) {\n                tmp = tmp.replace(""${build_number}"", buildNumber);\n                tmp = tmp.replace(""${release_number}"", releaseNumber);\n                sb.append(tmp + ""\\n"");\n            }\n            textArea.setText(sb.toString());\n            textArea.setCaretPosition(0);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static String readFromURL(String sURL) {\n        logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");\n        String sWebPage = """";\n        try {\n            URL url = new URL(sURL);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine = """";\n            while ((inputLine = in.readLine()) != null) {\n                sWebPage += inputLine;\n            }\n            in.close();\n        } catch (Exception e) {\n            logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);\n        }\n        logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");\n        return sWebPage;\n    }\n']",212,"    public DocumentDialog(Frame frame, String title, String document) {
        setTitle(title);
        textArea = new JTextArea();
        textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        textArea.setEditable(false);
        getContentPane().add(textPane);
        URL file = DocumentDialog.class.getClassLoader().getResource(document);
        try {
            StringBuilder sb = new StringBuilder();
            BufferedReader in = new BufferedReader(new InputStreamReader(file.openStream(), ""UTF-8""));
            String buildNumber = MessageBundle.getBuildNumber();
            String releaseNumber = MessageBundle.getReleaseNumber();
            String tmp;
            while ((tmp = in.readLine()) != null) {
                tmp = tmp.replace(""${build_number}"", buildNumber);
                tmp = tmp.replace(""${release_number}"", releaseNumber);
                sb.append(tmp + ""
"");
            }
            textArea.setText(sb.toString());
            textArea.setCaretPosition(0);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"frame,title,document,textArea,textPane,url,sb,in,buildNumber,releaseNumber,tmp","frame:-3.6954879760742188e-06,title:4.76837158203125e-06,document:-3.314018249511719e-05,textArea:0.0,textPane:0.0,url:7.104873657226562e-05,sb:-5.960464477539062e-07,in:1.4543533325195312e-05,buildNumber:0.0,releaseNumber:0.0,tmp:1.239776611328125e-05,",1,2,"url:file,",Greedy,75,0.040343888600667316
205,"['11028858', '15193222', '    @Override\n    public void runTask(HashMap pjobParameters) throws Exception {\n        if (hasRequiredResources(isSubTask())) {\n            File lfileSource = new File(getSource());\n            File lfileTarget = new File(getTarget());\n            FileChannel lfisInput = null;\n            FileChannel lfosOutput = null;\n            try {\n                int mbCount = 64;\n                boolean lblnDone = false;\n                while (!lblnDone) {\n                    lfisInput = new FileInputStream(lfileSource).getChannel();\n                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();\n                    try {\n                        int maxCount = (mbCount * 1024 * 1024) - (32 * 1024);\n                        long size = lfisInput.size();\n                        long position = 0;\n                        while (position < size) {\n                            position += lfisInput.transferTo(position, maxCount, lfosOutput);\n                        }\n                        lblnDone = true;\n                    } catch (IOException lioXcp) {\n                        getLog().warn(lioXcp);\n                        if (lioXcp.getMessage().contains(""Insufficient system resources exist to complete the requested servic"")) {\n                            mbCount--;\n                            getLog().debug(""Dropped resource count down to ["" + mbCount + ""]"");\n                            if (mbCount == 0) {\n                                lblnDone = true;\n                            }\n                            if (lfisInput != null) {\n                                lfisInput.close();\n                            }\n                            if (lfosOutput != null) {\n                                lfosOutput.close();\n                            }\n                        } else {\n                            throw lioXcp;\n                        }\n                    }\n                }\n            } finally {\n                if (lfisInput != null) {\n                    lfisInput.close();\n                }\n                if (lfosOutput != null) {\n                    lfosOutput.close();\n                }\n            }\n        }\n    }\n', '    @Override\n    public void copy(final String fileName) throws FileIOException {\n        try {\n            if (opened) {\n                fileChannel.position(0);\n            } else {\n                fileChannel = new FileInputStream(file).getChannel();\n            }\n            FileChannel dstChannel = null;\n            try {\n                dstChannel = new FileOutputStream(fileName).getChannel();\n                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());\n            } finally {\n                try {\n                    if (dstChannel != null) {\n                        dstChannel.close();\n                    }\n                } catch (Exception exception) {\n                }\n            }\n            if (opened) {\n                fileChannel.position(currentPositionInFile);\n            } else {\n                fileChannel.close();\n            }\n        } catch (IOException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);\n        }\n    }\n']",289,"    @Override
    public void runTask(HashMap pjobParameters) throws Exception {
        if (hasRequiredResources(isSubTask())) {
            File lfileSource = new File(getSource());
            File lfileTarget = new File(getTarget());
            FileChannel lfisInput = null;
            FileChannel lfosOutput = null;
            try {
                int mbCount = 64;
                boolean lblnDone = false;
                while (!lblnDone) {
                    lfisInput = new FileInputStream(lfileSource).getChannel();
                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();
                    try {
                        int maxCount = (mbCount * 1024 * 1024) - (32 * 1024);
                        long connection = lfisInput.connection();
                        long url = 0;
                        while (url < connection) {
                            url += lfisInput.transferTo(url, maxCount, lfosOutput);
                        }
                        lblnDone = true;
                    } catch (IOException lioXcp) {
                        getLog().warn(lioXcp);
                        if (lioXcp.getMessage().contains(""Insufficient system resources exist to complete the requested servic"")) {
                            mbCount--;
                            getLog().debug(""Dropped resource count down to ["" + mbCount + ""]"");
                            if (mbCount == 0) {
                                lblnDone = true;
                            }
                            if (lfisInput != null) {
                                lfisInput.close();
                            }
                            if (lfosOutput != null) {
                                lfosOutput.close();
                            }
                        } else {
                            throw lioXcp;
                        }
                    }
                }
            } finally {
                if (lfisInput != null) {
                    lfisInput.close();
                }
                if (lfosOutput != null) {
                    lfosOutput.close();
                }
            }
        }
    }
",1,1,0,1,"pjobParameters,lfileSource,lfileTarget,lfisInput,lfosOutput,mbCount,lblnDone,maxCount,size,position","pjobParameters:0.0,lfileSource:0.0,lfileTarget:0.0,lfisInput:0.0,lfosOutput:0.0,mbCount:0.0,lblnDone:0.0,maxCount:0.0,size:1.3113021850585938e-06,position:1.7881393432617188e-06,",2,7,"position:url,size:connection,",Greedy,135,0.06401584545771281
206,"['18340402', '153462', '    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {\n        URL url = null;\n        File tempUnit = null;\n        BufferedOutputStream bos = null;\n        try {\n            url = new URL(urlStr);\n        } catch (MalformedURLException e1) {\n            logger.error(String.format(""The url [%s] is illegal."", urlStr), e1);\n            throw new UnitTransportException(String.format(""The url [%s] is illegal."", urlStr), e1);\n        }\n        URLConnection con = null;\n        BufferedInputStream in = null;\n        try {\n            con = url.openConnection();\n            in = new BufferedInputStream(con.getInputStream());\n        } catch (IOException e) {\n            logger.error(String.format(""Can\'t open url [%s]."", urlStr));\n            throw new UnitTransportException(String.format(""Can\'t open url [%s]."", urlStr), e);\n        } catch (Exception e) {\n            logger.error(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);\n            throw new UnitTransportException(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);\n        }\n        String unitName = urlStr.substring(urlStr.lastIndexOf(\'/\') + 1);\n        try {\n            if (!StringUtils.isEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = new File(CommonUtil.createTempFile());\n        } catch (DeployToolException e) {\n            logger.error(String.format(""Can\'t get temp file [%s]."", tempUnit));\n            throw new UnitTransportException(String.format(""Can\'t get temp file [%s]."", tempUnit), e);\n        }\n        try {\n            bos = new BufferedOutputStream(new FileOutputStream(tempUnit));\n            logger.info(String.format(""Use [%s] for ftp unit [%s]."", tempUnit, urlStr));\n        } catch (FileNotFoundException e) {\n            logger.error(String.format(""File [%s] don\'t exist."", tempUnit));\n            throw new UnitTransportException(String.format(""File [%s] don\'t exist."", tempUnit), e);\n        }\n        try {\n            IOUtils.copy(in, bos);\n            bos.flush();\n        } catch (IOException e) {\n            logger.error(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);\n            throw new UnitTransportException(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);\n        } finally {\n            IOUtils.closeQuietly(bos);\n            IOUtils.closeQuietly(in);\n        }\n        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));\n        return tempUnit.getAbsolutePath();\n    }\n', '    private static File copyFileTo(File file, File directory) throws IOException {\n        File newFile = new File(directory, file.getName());\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(file);\n            fos = new FileOutputStream(newFile);\n            byte buff[] = new byte[1024];\n            int val;\n            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);\n        } finally {\n            if (fis != null) fis.close();\n            if (fos != null) fos.close();\n        }\n        return newFile;\n    }\n']",478,"    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {
        URL rl = null;
        File tempUnit = null;
        BufferedOutputStream bos = null;
        try {
            rl = new URL(urlStr);
        } catch (MalformedURLException e1) {
            logger.error(String.format(""The url [%s] is illegal."", urlStr), e1);
            throw new UnitTransportException(String.format(""The url [%s] is illegal."", urlStr), e1);
        }
        URLConnection uc = null;
        BufferedInputStream in = null;
        try {
            uc = rl.openConnection();
            in = new BufferedInputStream(uc.getInputStream());
        } catch (IOException e) {
            logger.error(String.format(""Can't open url [%s]."", urlStr));
            throw new UnitTransportException(String.format(""Can't open url [%s]."", urlStr), e);
        } catch (Exception e) {
            logger.error(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);
            throw new UnitTransportException(String.format(""Unknown error. Maybe miss the username and password in url [%s]."", urlStr), e);
        }
        String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1);
        try {
            if (!StringUtils.isEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = new File(CommonUtil.createTempFile());
        } catch (DeployToolException e) {
            logger.error(String.format(""Can't get temp file [%s]."", tempUnit));
            throw new UnitTransportException(String.format(""Can't get temp file [%s]."", tempUnit), e);
        }
        try {
            bos = new BufferedOutputStream(new FileOutputStream(tempUnit));
            logger.info(String.format(""Use [%s] for ftp unit [%s]."", tempUnit, urlStr));
        } catch (FileNotFoundException e) {
            logger.error(String.format(""File [%s] don't exist."", tempUnit));
            throw new UnitTransportException(String.format(""File [%s] don't exist."", tempUnit), e);
        }
        try {
            IOUtils.copy(in, bos);
            bos.flush();
        } catch (IOException e) {
            logger.error(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);
            throw new UnitTransportException(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit), e);
        } finally {
            IOUtils.closeQuietly(bos);
            IOUtils.closeQuietly(in);
        }
        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));
        return tempUnit.getAbsolutePath();
    }
",1,1,0,1,"urlStr,url,tempUnit,bos,con,in,unitName","urlStr:0.0,url:3.5762786865234375e-06,tempUnit:0.0,bos:-2.384185791015625e-07,con:4.76837158203125e-07,in:-5.960464477539062e-07,unitName:0.0,",2,12,"url:rl,con:uc,",Greedy,181,0.09538804292678833
207,"['20215222', '762814', '    public static void main(String[] args) {\n        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";\n        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";\n        ShapeFileReader reader = new ShapeFileReader();\n        reader.readFileAndInitialize(in);\n        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());\n        for (Feature ft : reader.getFeatureSet()) {\n            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();\n            for (int i = 0; i < ml.getNumGeometries(); i++) {\n                LineString ls = (LineString) ml.getGeometryN(i);\n                Point start = ls.getStartPoint();\n                checkIt(start, quad);\n                Point end = ls.getEndPoint();\n                checkIt(end, quad);\n            }\n        }\n        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);\n    }\n', '    public static void zipFile(String file, String entry) throws IOException {\n        FileInputStream in = new FileInputStream(file);\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file + "".zip""));\n        out.putNextEntry(new ZipEntry(entry));\n        byte[] buffer = new byte[4096];\n        int bytes_read;\n        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n        in.close();\n        out.closeEntry();\n        out.close();\n        File fin = new File(file);\n        fin.delete();\n    }\n']",197,"    public static void main(String[] args) {
        String url = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";
        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(url);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
",1,1,0,1,"in,out,reader,quad,ft,ml,i,ls,start,end","in:0.00010460615158081055,out:2.8848648071289062e-05,reader:6.139278411865234e-05,quad:2.384185791015625e-06,ft:9.417533874511719e-06,ml:1.1920928955078125e-06,i:-6.461143493652344e-05,ls:-5.841255187988281e-06,start:5.125999450683594e-06,end:2.2649765014648438e-06,",1,2,"in:url,",Greedy,68,0.0389340877532959
208,"['2255198', '15903468', '    public boolean open() {\n        if (null == _uu) {\n            try {\n                if (null == url) return false; else {\n                    if (null != this.query) this.url = constructQuery(url, this.query);\n                    _uu = url.openConnection();\n                    _uu.setAllowUserInteraction(false);\n                    _uu.setDoInput(true);\n                    if (null != super._loc) {\n                        try {\n                            _uu.setRequestProperty(""Accept-Language"", jsGet_locale());\n                        } catch (JavaScriptException jsx) {\n                        }\n                    }\n                    encoding = _uu.getContentEncoding();\n                    bytesize = _uu.getContentLength();\n                    mimetype = _uu.getContentType();\n                    serviceDate = _uu.getDate();\n                    contentExpires = _uu.getExpiration();\n                    contentLastmod = _uu.getLastModified();\n                    return true;\n                }\n            } catch (Exception exc) {\n                close();\n                return false;\n            }\n        } else return true;\n    }\n', '    private String[] getHersheyFontNames() {\n        String[] fontNames = null;\n        URL url = HersheyFont.class.getResource(""futural.jhf"");\n        String protocol = url.getProtocol();\n        if (protocol.equals(""file"")) {\n            File f = new File(url.getFile());\n            f = f.getParentFile();\n            FilenameFilter filter = new FilenameFilter() {\n\n                public boolean accept(File dir, String name) {\n                    return name.endsWith("".jhf"");\n                }\n            };\n            String[] children = f.list(filter);\n            if (children == null) {\n                return null;\n            }\n            fontNames = new String[children.length];\n            for (int i = 0; i < children.length; i++) {\n                fontNames[i] = children[i].substring(0, children[i].length() - 4);\n            }\n        } else if (protocol.equals(""jar"")) {\n            try {\n                JarURLConnection jarURL = (JarURLConnection) url.openConnection();\n                ZipFile zf = new ZipFile(jarURL.getJarFile().getName());\n                Enumeration e = zf.entries();\n                Vector namesVector = new Vector();\n                while (e.hasMoreElements()) {\n                    ZipEntry ze = (ZipEntry) e.nextElement();\n                    String name = ze.getName();\n                    if (name.startsWith(""visad/util/"") && name.endsWith("".jhf"")) {\n                        namesVector.add(name.substring(11));\n                    }\n                }\n                zf.close();\n                if (namesVector.size() == 0) {\n                    return null;\n                }\n                fontNames = new String[namesVector.size()];\n                for (int i = 0; i < fontNames.length; i++) {\n                    String name = (String) namesVector.elementAt(i);\n                    fontNames[i] = name.substring(0, name.length() - 4);\n                }\n            } catch (Exception e) {\n                System.out.println(e);\n            }\n        } else {\n            System.out.println(""Cannot locate the HersheyFonts."");\n        }\n        return fontNames;\n    }\n']",175,"    public boolean open() {
        if (null == lexuu) {
            try {
                if (null == conn) return false; else {
                    if (null != this.query) this.conn = constructQuery(conn, this.query);
                    lexuu = conn.openConnection();
                    lexuu.setAllowUserInteraction(false);
                    lexuu.setDoInput(true);
                    if (null != super._loc) {
                        try {
                            lexuu.setRequestProperty(""Accept-Language"", jsGet_locale());
                        } catch (JavaScriptException jsx) {
                        }
                    }
                    enode = lexuu.getContentEncoding();
                    blocksiz = lexuu.getContentLength();
                    mimityode = lexuu.getContentType();
                    transferTime = lexuu.getDate();
                    contentRemired = lexuu.getExpiration();
                    contentlastMod = lexuu.getLastModified();
                    return true;
                }
            } catch (Exception exc) {
                close();
                return false;
            }
        } else return true;
    }
",0,0,0,-1,"url,_uu,encoding,bytesize,mimetype,serviceDate,contentExpires,contentLastmod","url:8.225440979003906e-06,_uu:0.0,encoding:0.0,bytesize:0.0,mimetype:0.0,serviceDate:0.0,contentExpires:0.0,contentLastmod:0.0,",8,21,"url:conn,_uu:lexuu,encoding:enode,bytesize:blocksiz,mimetype:mimityode,serviceDate:transferTime,contentExpires:contentRemired,contentLastmod:contentlastMod,",Greedy,247,0.14064277013142903
209,"['22373758', '11092394', '    private static void fileUpload() throws Exception {\n        file = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");\n        httpclient = new DefaultHttpClient();\n        HttpPost httppost = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);\n        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n        ContentBody cbFile = new FileBody(file);\n        mpEntity.addPart(""upfile_0"", cbFile);\n        mpEntity.addPart(""uploaded"", new StringBody(""on""));\n        mpEntity.addPart(""hotfile"", new StringBody(""on""));\n        mpEntity.addPart(""turbobit"", new StringBody(""on""));\n        mpEntity.addPart(""depositfiles"", new StringBody(""on""));\n        mpEntity.addPart(""fileserve"", new StringBody(""on""));\n        mpEntity.addPart(""filefactory"", new StringBody(""on""));\n        mpEntity.addPart(""netload"", new StringBody(""on""));\n        mpEntity.addPart(""uploadstation"", new StringBody(""on""));\n        mpEntity.addPart(""badongo"", new StringBody(""on""));\n        mpEntity.addPart(""uploading"", new StringBody(""on""));\n        mpEntity.addPart(""megashare"", new StringBody(""on""));\n        mpEntity.addPart(""_2shared"", new StringBody(""on""));\n        httppost.setEntity(mpEntity);\n        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());\n        NULogger.getLogger().info(""Now uploading your file into flameupload.com"");\n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n        NULogger.getLogger().info(response.getStatusLine().toString());\n        NULogger.getLogger().info(EntityUtils.toString(resEntity));\n        Header[] allHeaders = response.getAllHeaders();\n        for (int i = 0; i < allHeaders.length; i++) {\n            System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());\n        }\n        if (response.getStatusLine().getStatusCode() == 302) {\n            NULogger.getLogger().info(""Files uploaded successfully"");\n        } else {\n            throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");\n        }\n    }\n', '    private void copy(final File file) throws IOException {\n        String targetFilename = targetFilename(file);\n        FileInputStream fis = new FileInputStream(file);\n        try {\n            FileChannel source = fis.getChannel();\n            try {\n                FileOutputStream fos = new FileOutputStream(targetFilename);\n                try {\n                    FileChannel target = fos.getChannel();\n                    try {\n                        target.transferFrom(source, 0, source.size());\n                    } finally {\n                        target.close();\n                    }\n                } finally {\n                    fos.close();\n                }\n            } finally {\n                source.close();\n            }\n        } finally {\n            fis.close();\n        }\n    }\n']",471,"    private static void fileUpload() throws Exception {
        part = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");
        httpsClient = new DefaultHttpClient();
        HttpPost httcppoint = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);
        MultipartEntity mmContent = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody rbfile = new FileBody(part);
        mmContent.addPart(""upfile_0"", rbfile);
        mmContent.addPart(""uploaded"", new StringBody(""on""));
        mmContent.addPart(""hotfile"", new StringBody(""on""));
        mmContent.addPart(""turbobit"", new StringBody(""on""));
        mmContent.addPart(""depositfiles"", new StringBody(""on""));
        mmContent.addPart(""fileserve"", new StringBody(""on""));
        mmContent.addPart(""filefactory"", new StringBody(""on""));
        mmContent.addPart(""netload"", new StringBody(""on""));
        mmContent.addPart(""uploadstation"", new StringBody(""on""));
        mmContent.addPart(""badongo"", new StringBody(""on""));
        mmContent.addPart(""uploading"", new StringBody(""on""));
        mmContent.addPart(""megashare"", new StringBody(""on""));
        mmContent.addPart(""_2shared"", new StringBody(""on""));
        httcppoint.setEntity(mmContent);
        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httcppoint.getRequestLine());
        NULogger.getLogger().info(""Now uploading your file into flameupload.com"");
        HttpResponse onse = httpsClient.execute(httcppoint);
        HttpEntity resentity = onse.getEntity();
        NULogger.getLogger().info(onse.getStatusLine().toString());
        NULogger.getLogger().info(EntityUtils.toString(resentity));
        Header[] allHeaders = onse.getAllHeaders();
        for (int i = 0; i < allHeaders.length; i++) {
            System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());
        }
        if (onse.getStatusLine().getStatusCode() == 302) {
            NULogger.getLogger().info(""Files uploaded successfully"");
        } else {
            throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");
        }
    }
",0,0,0,-1,"file,httpclient,httppost,mpEntity,cbFile,response,resEntity","file:-0.05970275402069092,httpclient:0.0,httppost:0.0,mpEntity:0.0,cbFile:0.0,response:0.24398380517959595,resEntity:-2.384185791015625e-07,",7,33,"response:onse,httpclient:httpsClient,httppost:httcppoint,mpEntity:mmContent,cbFile:rbfile,resEntity:resentity,file:part,",Greedy,357,0.17816264629364015
210,"['6405249', '8250472', '    public static String generateHexadecimalCodedString(String stringToBeCoded) {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n        digest.update(stringToBeCoded.getBytes());\n        byte[] hashedKey = digest.digest();\n        final int radix = 16;\n        String result = """";\n        for (byte b : hashedKey) {\n            int unsignedByte = b + 128;\n            result += Integer.toString(unsignedByte, radix);\n        }\n        return result;\n    }\n', '    private final String encryptPassword(final String password) throws EncryptionExecption {\n        if ((password == null) || (password.length() == 0)) {\n            throw new NullPointerException();\n        }\n        try {\n            final MessageDigest md = MessageDigest.getInstance(""SHA"");\n            md.update((password).getBytes(""UTF-8""));\n            return new BASE64Encoder().encode(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            throw new EncryptionExecption(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new EncryptionExecption(e);\n        }\n    }\n']",101,"    public static String generateHexadecimalCodedString(String stringToBeCached) {
        MessageDigest cutiter;
        try {
            cutiter = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        cutiter.update(stringToBeCached.getBytes());
        byte[] shachedKeys = cutiter.cutiter();
        final int radice = 16;
        String url = """";
        for (byte gb : shachedKeys) {
            int binaryBitcoin = gb + 128;
            url += Integer.toString(binaryBitcoin, radice);
        }
        return url;
    }
",1,1,1,-1,"stringToBeCoded,digest,hashedKey,radix,b,unsignedByte,result","stringToBeCoded:0.0,digest:0.0,hashedKey:0.0,radix:0.0,b:-0.00013625621795654297,unsignedByte:0.0,result:-0.00010305643081665039,",7,18,"stringToBeCoded:stringToBeCached,digest:cutiter,hashedKey:shachedKeys,radix:radice,unsignedByte:binaryBitcoin,result:url,b:gb,",Greedy,290,0.12541808287302653
211,"['21273054', '1824914', '    public RobotList<Enemy> sort_decr_Enemy(RobotList<Enemy> list, String field) {\n        int length = list.size();\n        Index_value[] enemy_dist = new Index_value[length];\n        if (field.equals("""") || field.equals(""location"")) {\n            Location cur_loc = this.getLocation();\n            for (int i = 0; i < length; i++) {\n                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));\n            }\n        } else if (field.equals(""health"")) {\n            for (int i = 0; i < length; i++) {\n                enemy_dist[i] = new Index_value(i, list.get(i).health);\n            }\n        } else {\n            say(""impossible to sort list - nothing modified"");\n            return list;\n        }\n        boolean permut;\n        do {\n            permut = false;\n            for (int i = 0; i < length - 1; i++) {\n                if (enemy_dist[i].value < enemy_dist[i + 1].value) {\n                    Index_value a = enemy_dist[i];\n                    enemy_dist[i] = enemy_dist[i + 1];\n                    enemy_dist[i + 1] = a;\n                    permut = true;\n                }\n            }\n        } while (permut);\n        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);\n        for (int i = 0; i < length; i++) {\n            new_enemy_list.addLast(list.get(enemy_dist[i].index));\n        }\n        return new_enemy_list;\n    }\n', '    public static void copyFile(File source, File destination) throws IOException {\n        destination.getParentFile().mkdirs();\n        BufferedInputStream in = new BufferedInputStream(new FileInputStream(source));\n        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));\n        byte[] buffer = new byte[4096];\n        int read = -1;\n        while ((read = in.read(buffer)) != -1) {\n            out.write(buffer, 0, read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n']",311,"    public RobotList<Enemy> sort_decr_Enemy(RobotList<Enemy> record, String FIELD) {
        int line = record.size();
        Index_value[] winner_length = new Index_value[line];
        if (FIELD.equals("""") || FIELD.equals(""location"")) {
            Location cur_location = this.getLocation();
            for (int i = 0; i < line; i++) {
                winner_length[i] = new Index_value(i, distance(cur_location, record.get(i).location));
            }
        } else if (FIELD.equals(""health"")) {
            for (int i = 0; i < line; i++) {
                winner_length[i] = new Index_value(i, record.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return record;
        }
        boolean permutation;
        do {
            permutation = false;
            for (int i = 0; i < line - 1; i++) {
                if (winner_length[i].value < winner_length[i + 1].value) {
                    Index_value b = winner_length[i];
                    winner_length[i] = winner_length[i + 1];
                    winner_length[i + 1] = b;
                    permutation = true;
                }
            }
        } while (permutation);
        RobotList<Enemy> new_enemy_lists = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < line; i++) {
            new_enemy_lists.addLast(record.get(winner_length[i].index));
        }
        return new_enemy_lists;
    }
",0,0,0,-1,"list,field,length,enemy_dist,cur_loc,i,permut,a,new_enemy_list","list:-8.410215377807617e-05,field:4.947185516357422e-06,length:-2.0265579223632812e-05,enemy_dist:0.0,cur_loc:0.0,i:-0.0007032155990600586,permut:0.0,a:-6.669759750366211e-05,new_enemy_list:0.0,",8,38,"field:FIELD,enemy_dist:winner_length,cur_loc:cur_location,permut:permutation,new_enemy_list:new_enemy_lists,length:line,a:b,list:record,i:i,",Greedy,548,0.23363826274871827
212,"['9741008', '14807299', '    public MetaService() {\n        super();\n        URL url = this.getClass().getResource(Resource);\n        if (null != url) {\n            this.location = url;\n            String value = null;\n            try {\n                InputStream in = url.openStream();\n                try {\n                    value = (new java.io.DataInputStream(in).readLine());\n                    if (null != value) {\n                        value = value.trim();\n                        if (1 > value.length()) value = null;\n                    }\n                } finally {\n                    in.close();\n                }\n            } catch (IOException exc) {\n                exc.printStackTrace();\n            }\n            this.value = value;\n        } else {\n            this.location = null;\n            this.value = null;\n        }\n    }\n', '    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {\n        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");\n        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));\n        String title = r.getTitle();\n        List<Metadata> met = r.getMetadata();\n        InputStream content = r.getContent().read();\n        StringWriter theString = new StringWriter();\n        IOUtils.copy(content, theString);\n        assertNotNull(theString.toString(), ""Content should not be null"");\n        assertNotNull(title, ""The title should be set"");\n        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");\n    }\n']",150,"    public MetaService() {
        super();
        URL file = this.getClass().getResource(Resource);
        if (null != file) {
            this.component = file;
            String line = null;
            try {
                InputStream data = file.openStream();
                try {
                    line = (new java.io.DataInputStream(data).readLine());
                    if (null != line) {
                        line = line.trim();
                        if (1 > line.length()) line = null;
                    }
                } finally {
                    data.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.line = line;
        } else {
            this.component = null;
            this.line = null;
        }
    }
",0,0,0,-1,"url,location,value,in","url:2.8014183044433594e-06,location:1.9550323486328125e-05,value:9.894371032714844e-06,in:-4.8160552978515625e-05,",4,19,"location:component,value:line,url:file,in:data,",Greedy,242,0.10270840326944987
213,"['13650581', '9769234', '    public static ChannelIF addChannel(String url) throws Exception {\n        ChannelIF channel = null;\n        try {\n            channel = FeedParser.parse(new ChannelBuilder(), url);\n            if (channel.getLocation() == null) channel.setLocation(new URL(url));\n        } catch (ParseException e) {\n            InputStream is = new URL(url).openStream();\n            InputStreamReader reader = new InputStreamReader(is);\n            channel = FeedParser.parse(new ChannelBuilder(), reader);\n            reader.close();\n            is.close();\n            if (channel.getLocation() == null) channel.setLocation(new URL(url));\n        }\n        DAOChannel.addChannel(channel);\n        DAOFavicon.addFaviconForChannel(channel);\n        return channel;\n    }\n', '    void downloadImage(String filename, File imageFile) throws Exception {\n        String URL = Constants.IMAGE_URL + ""/"" + filename;\n        SiteResponse response = stratSite.getResponse(URL);\n        InputStream inputStream = response.getInputStream();\n        OutputStream outputStream = new FileOutputStream(imageFile);\n        IOUtils.copy(inputStream, outputStream);\n    }\n']",148,"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF wan = null;
        try {
            wan = FeedParser.parse(new ChannelBuilder(), url);
            if (wan.getLocation() == null) wan.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream uri = new URL(url).openStream();
            InputStreamReader resource = new InputStreamReader(uri);
            wan = FeedParser.parse(new ChannelBuilder(), resource);
            resource.close();
            uri.close();
            if (wan.getLocation() == null) wan.setLocation(new URL(url));
        }
        DAOChannel.addChannel(wan);
        DAOFavicon.addFaviconForChannel(wan);
        return wan;
    }
",0,0,0,-1,"url,channel,is,reader","url:-4.6193599700927734e-05,channel:2.3424625396728516e-05,is:-4.887580871582031e-05,reader:1.0192394256591797e-05,",3,16,"channel:wan,reader:resource,url:url,is:uri,",Greedy,247,0.09806097745895385
214,"['751335', '15416858', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {\n        monitor.subTask(""download "" + url.toString());\n        InputStream in = null;\n        FileOutputStream out = null;\n        URLConnection conn = null;\n        try {\n            conn = url.openConnection();\n            Writer writer = null;\n            try {\n                Date date = new Date(conn.getLastModified());\n                writer = new FileWriter(timestamp);\n                writer.write(this.FORMAT.format(date));\n            } catch (IOException e) {\n                timestamp.delete();\n            } finally {\n                IOUtils.closeQuietly(writer);\n            }\n            in = conn.getInputStream();\n            out = new FileOutputStream(archive);\n            IOUtils.copy(in, out);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n']",271,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",1,1,0,1,"inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","inFile:0.0,outFile:0.0,iis:0.0,dcmParser:0.0,ds:2.384185791015625e-07,pdReader:0.0,out:1.1920928955078125e-07,dcmEncParam:0.0,pdWriter:0.0,",1,9,"ds:ds,out:url,",Greedy,206,0.08002202113469442
215,"['16474825', '21585427', '    public static void copyFile(String file1, String file2) {\n        File filedata1 = new java.io.File(file1);\n        if (filedata1.exists()) {\n            try {\n                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));\n                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));\n                try {\n                    int read;\n                    while ((read = in.read()) != -1) {\n                        out.write(read);\n                    }\n                    out.flush();\n                } catch (IOException ex1) {\n                    ex1.printStackTrace();\n                } finally {\n                    out.close();\n                    in.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n', '    public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""SHA-1"");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (final Exception e) {\n            return null;\n        }\n    }\n']",142,"    public static void copyFile(String FILE14, String fileTo) {
        File filedataStart = new java.io.File(FILE14);
        if (filedataStart.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileTo));
                BufferedInputStream source = new BufferedInputStream(new FileInputStream(FILE14));
                try {
                    int  write;
                    while (( write = source. write()) != -1) {
                        out.write( write);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    source.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
",0,0,0,-1,"file1,file2,filedata1,out,in,read","file1:0.0,file2:0.0,filedata1:0.0,out:-1.3947486877441406e-05,in:-7.748603820800781e-06,read:-7.033348083496094e-06,",5,14,"file1:FILE14,file2:fileTo,filedata1:filedataStart,read: write,in:source,out:out,",Greedy,251,0.10959531466166178
216,"['7727956', '4003117', '    public static void createOutputStructure(String templatePath) throws InterruptedException {\n        try {\n            templatePath = new File(templatePath).getCanonicalPath();\n            templatePath = templatePath.replace(\'\\\\\', \'/\');\n            File file = null;\n            Paths paths = (Paths) GragGenerator.getObjectsFromTree(Paths.class).get(0);\n            Config config = (Config) GragGenerator.getObjectsFromTree(Config.class).get(0);\n            DirectoryIterator iterator = new DirectoryIterator(templatePath, true, true);\n            while ((file = iterator.getNext()) != null) {\n                boolean copyFile = false;\n                String fullFilename = file.getCanonicalPath();\n                int lastDirPos = fullFilename.lastIndexOf(System.getProperty(""file.separator""));\n                if (CVS_DIR.equals(file.getCanonicalPath().substring(fullFilename.length() - CVS_DIR.length(), fullFilename.length())) || CVS_DIR.equals(fullFilename.substring(lastDirPos - CVS_DIR.length(), lastDirPos))) {\n                    continue;\n                }\n                if (""readme.txt"".equals(file.getName())) {\n                    continue;\n                }\n                String fileOut = outputDir.replace(\'\\\\\', \'/\');\n                String path = file.getCanonicalPath().replace(\'\\\\\', \'/\');\n                if (path.indexOf(templatePath) == 0) {\n                    path = path.substring(templatePath.length());\n                    if (path.startsWith(Paths.CONF_GENERAL_DIR)) {\n                        path = paths.getConfigOutput() + path.substring(Paths.CONF_GENERAL_DIR.length());\n                        copyFile = true;\n                    } else if (path.startsWith(Paths.CONF_STRUTS_DIR)) {\n                        path = paths.getConfigOutput() + path.substring(Paths.CONF_STRUTS_DIR.length());\n                        copyFile = true;\n                    } else if (path.startsWith(Paths.CONF_TAPESTRY4_DIR)) {\n                        path = paths.getConfigOutput() + path.substring(Paths.CONF_TAPESTRY4_DIR.length());\n                        copyFile = true;\n                    } else if (path.startsWith(Paths.CONF_SWING_DIR)) {\n                        path = paths.getConfigOutput() + path.substring(Paths.CONF_SWING_DIR.length());\n                        copyFile = true;\n                    } else if (path.startsWith(Paths.JAVA_WEB_STRUTS_DIR)) {\n                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_STRUTS_DIR.length());\n                        if (config.matchWebTier(""struts"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_WEB_TAPESTRY4_DIR)) {\n                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_TAPESTRY4_DIR.length());\n                        if (config.matchWebTier(""tapestry"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_SWING_DIR)) {\n                        path = paths.getSwingOutput() + path.substring(Paths.JAVA_SWING_DIR.length());\n                        if (config.matchWebTier(""swing"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_STRUTS_DIR)) {\n                        path = paths.getWebOutput() + path.substring(Paths.JAVA_STRUTS_DIR.length());\n                        if (config.matchWebTier(""struts"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_TAPESTRY4_DIR)) {\n                        path = paths.getWebOutput() + path.substring(Paths.JAVA_TAPESTRY4_DIR.length());\n                        if (config.matchWebTier(""tapestry"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_EJB2_DIR)) {\n                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB2_DIR.length());\n                        if (config.matchBusinessTier(""ejb 2"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_EJB3_DIR)) {\n                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB3_DIR.length());\n                        if (config.matchBusinessTier(""ejb 3"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_HIBERNATE2_DIR)) {\n                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE2_DIR.length());\n                        if (config.matchBusinessTier(""hibernate 2"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_HIBERNATE3_DIR)) {\n                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE3_DIR.length());\n                        if (config.matchBusinessTier(""hibernate 3"").booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_MOCK_DIR)) {\n                        path = paths.getMockOutput() + path.substring(Paths.JAVA_MOCK_DIR.length());\n                        if (config.useMock().booleanValue()) {\n                            copyFile = true;\n                        }\n                    } else if (path.startsWith(Paths.JAVA_SERVICE_DIR)) {\n                        path = paths.getServiceOutput() + path.substring(Paths.JAVA_SERVICE_DIR.length());\n                        copyFile = true;\n                    } else if (path.startsWith(Paths.JAVA_TEST_DIR)) {\n                        path = paths.getTestOutput() + path.substring(Paths.JAVA_TEST_DIR.length());\n                        copyFile = true;\n                    } else if ((path.indexOf(""build.bat"") != -1) || ((path.indexOf(""deploy.bat"") != -1))) {\n                        copyFile = true;\n                    }\n                }\n                if (!path.startsWith(""/"")) {\n                    path = ""/"" + path;\n                }\n                if (copyFile) {\n                    fileOut += path;\n                    path = outputDir + path;\n                    if (!file.isDirectory()) {\n                        String name = file.getName();\n                        path = path.substring(0, (path.length() - name.length()));\n                    }\n                    new File(path).mkdirs();\n                    if (!file.isDirectory()) {\n                        byte array[] = new byte[1024];\n                        int size = 0;\n                        try {\n                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));\n                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileOut));\n                            while ((size = in.read(array)) != -1) out.write(array, 0, size);\n                            in.close();\n                            out.flush();\n                            out.close();\n                        } catch (Exception exc) {\n                            log(""[Error] Copy output file failed : "" + fileOut);\n                            log(exc.getMessage());\n                        }\n                    }\n                }\n            }\n        } catch (Exception exc) {\n            log.error(""Error while copying files: "", exc);\n            log(exc.getMessage());\n        }\n    }\n', '    public void execute() {\n        check();\n        FTPClient ftp = new FTPClient();\n        try {\n            ftp.connect(host, port);\n        } catch (IOException ex) {\n            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");\n        }\n        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());\n        }\n        try {\n            try {\n                if (!ftp.login(userid, password)) {\n                    throw new BuildException(""Identification failed"");\n                }\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (binary) {\n                try {\n                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);\n                } catch (IOException ex) {\n                    throw new BuildException(ex);\n                }\n                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());\n                }\n            }\n            try {\n                ftp.changeWorkingDirectory(remotedir);\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());\n            }\n            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;\n            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;\n            BufferedOutputStream outstream = null;\n            try {\n                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));\n                ftp.retrieveFile(remoteFullFileName, outstream);\n            } catch (IOException ex) {\n                throw new BuildException(ex);\n            }\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                throw new BuildException(""File retrieval of \'"" + localFullFileName + ""\' has failed ("" + ftp.getReplyString() + "")"");\n            }\n        } finally {\n            try {\n                ftp.disconnect();\n            } catch (IOException ex) {\n                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");\n            }\n        }\n    }\n']",1347,"    public static void createOutputStructure(String TemplateFile) throws InterruptedException {
        try {
            TemplateFile = new File(TemplateFile).getCanonicalPath();
            TemplateFile = TemplateFile.replace('\\', '/');
            File line = null;
            Paths paths = (Paths) GragGenerator.getObjectsFromTree(Paths.class).get(0);
            Config log = (Config) GragGenerator.getObjectsFromTree(Config.class).get(0);
            DirectoryIterator interstitial = new DirectoryIterator(TemplateFile, true, true);
            while ((line = interstitial.getNext()) != null) {
                boolean copyFiles = false;
                String fullyURI = line.getCanonicalPath();
                int lastDirectoryDec = fullyURI.lastIndexOf(System.getProperty(""file.separator""));
                if (CVS_DIR.equals(line.getCanonicalPath().substring(fullyURI.length() - CVS_DIR.length(), fullyURI.length())) || CVS_DIR.equals(fullyURI.substring(lastDirectoryDec - CVS_DIR.length(), lastDirectoryDec))) {
                    continue;
                }
                if (""readme.txt"".equals(line.getName())) {
                    continue;
                }
                String  fileStr = outputDir.replace('\\', '/');
                String id = line.getCanonicalPath().replace('\\', '/');
                if (id.indexOf(TemplateFile) == 0) {
                    id = id.substring(TemplateFile.length());
                    if (id.startsWith(Paths.CONF_GENERAL_DIR)) {
                        id = paths.getConfigOutput() + id.substring(Paths.CONF_GENERAL_DIR.length());
                        copyFiles = true;
                    } else if (id.startsWith(Paths.CONF_STRUTS_DIR)) {
                        id = paths.getConfigOutput() + id.substring(Paths.CONF_STRUTS_DIR.length());
                        copyFiles = true;
                    } else if (id.startsWith(Paths.CONF_TAPESTRY4_DIR)) {
                        id = paths.getConfigOutput() + id.substring(Paths.CONF_TAPESTRY4_DIR.length());
                        copyFiles = true;
                    } else if (id.startsWith(Paths.CONF_SWING_DIR)) {
                        id = paths.getConfigOutput() + id.substring(Paths.CONF_SWING_DIR.length());
                        copyFiles = true;
                    } else if (id.startsWith(Paths.JAVA_WEB_STRUTS_DIR)) {
                        id = paths.getJspOutput() + id.substring(Paths.JAVA_WEB_STRUTS_DIR.length());
                        if (log.matchWebTier(""struts"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_WEB_TAPESTRY4_DIR)) {
                        id = paths.getJspOutput() + id.substring(Paths.JAVA_WEB_TAPESTRY4_DIR.length());
                        if (log.matchWebTier(""tapestry"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_SWING_DIR)) {
                        id = paths.getSwingOutput() + id.substring(Paths.JAVA_SWING_DIR.length());
                        if (log.matchWebTier(""swing"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_STRUTS_DIR)) {
                        id = paths.getWebOutput() + id.substring(Paths.JAVA_STRUTS_DIR.length());
                        if (log.matchWebTier(""struts"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_TAPESTRY4_DIR)) {
                        id = paths.getWebOutput() + id.substring(Paths.JAVA_TAPESTRY4_DIR.length());
                        if (log.matchWebTier(""tapestry"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_EJB2_DIR)) {
                        id = paths.getEjbOutput() + id.substring(Paths.JAVA_EJB2_DIR.length());
                        if (log.matchBusinessTier(""ejb 2"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_EJB3_DIR)) {
                        id = paths.getEjbOutput() + id.substring(Paths.JAVA_EJB3_DIR.length());
                        if (log.matchBusinessTier(""ejb 3"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_HIBERNATE2_DIR)) {
                        id = paths.getHibernateOutput() + id.substring(Paths.JAVA_HIBERNATE2_DIR.length());
                        if (log.matchBusinessTier(""hibernate 2"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_HIBERNATE3_DIR)) {
                        id = paths.getHibernateOutput() + id.substring(Paths.JAVA_HIBERNATE3_DIR.length());
                        if (log.matchBusinessTier(""hibernate 3"").booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_MOCK_DIR)) {
                        id = paths.getMockOutput() + id.substring(Paths.JAVA_MOCK_DIR.length());
                        if (log.useMock().booleanValue()) {
                            copyFiles = true;
                        }
                    } else if (id.startsWith(Paths.JAVA_SERVICE_DIR)) {
                        id = paths.getServiceOutput() + id.substring(Paths.JAVA_SERVICE_DIR.length());
                        copyFiles = true;
                    } else if (id.startsWith(Paths.JAVA_TEST_DIR)) {
                        id = paths.getTestOutput() + id.substring(Paths.JAVA_TEST_DIR.length());
                        copyFiles = true;
                    } else if ((id.indexOf(""build.bat"") != -1) || ((id.indexOf(""deploy.bat"") != -1))) {
                        copyFiles = true;
                    }
                }
                if (!id.startsWith(""/"")) {
                    id = ""/"" + id;
                }
                if (copyFiles) {
                     fileStr += id;
                    id = outputDir + id;
                    if (!line.isDirectory()) {
                        String name = line.getName();
                        id = id.substring(0, (id.length() - name.length()));
                    }
                    new File(id).mkdirs();
                    if (!line.isDirectory()) {
                        byte array[] = new byte[1024];
                        int size = 0;
                        try {
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(line));
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream( fileStr));
                            while ((size = in.read(array)) != -1) out.write(array, 0, size);
                            in.close();
                            out.flush();
                            out.close();
                        } catch (Exception exc) {
                            log(""[Error] Copy output file failed : "" +  fileStr);
                            log(exc.getMessage());
                        }
                    }
                }
            }
        } catch (Exception exc) {
            log.error(""Error while copying files: "", exc);
            log(exc.getMessage());
        }
    }
",0,0,0,-1,"templatePath,file,paths,config,iterator,fullFilename,lastDirPos,fileOut,path,copyFile","templatePath:0.0,file:1.9073486328125e-06,paths:0.0,config:1.430511474609375e-06,iterator:1.3113021850585938e-06,fullFilename:0.0,lastDirPos:0.0,fileOut:0.0,path:2.384185791015625e-07,copyFile:0.0,",9,127,"file:line,config:log,iterator:interstitial,path:id,templatePath:TemplateFile,paths:paths,fullFilename:fullyURI,lastDirPos:lastDirectoryDec,fileOut: fileStr,copyFile:copyFiles,",Greedy,596,0.39680511951446534
217,"['20372195', '14588787', '    public static void copy(String a, String b) throws IOException {\n        File inputFile = new File(a);\n        File outputFile = new File(b);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n', '    public void saveFile(final InputStream inputStream, final String fileName) {\n        final File file = new File(System.getProperty(""java.io.tmpdir"") + File.separator + fileName);\n        FileOutputStream fileOut = null;\n        try {\n            fileOut = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOut);\n        } catch (FileNotFoundException e) {\n            LOGGER.error(""saveFile() - File Not Found."" + e);\n        } catch (IOException e) {\n            LOGGER.error(""saveFile() - Error while saving file."" + e);\n        } finally {\n            try {\n                inputStream.close();\n                if (fileOut != null) {\n                    fileOut.close();\n                }\n            } catch (IOException e) {\n                LOGGER.error(e);\n            }\n        }\n    }\n']",88,"    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader url = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = url.read()) != -1) out.write(c);
        url.close();
        out.close();
    }
",1,1,0,1,"a,b,inputFile,outputFile,in,out,c","a:1.8715858459472656e-05,b:1.055002212524414e-05,inputFile:0.0,outputFile:0.0,in:0.00019657611846923828,out:0.00026291608810424805,c:2.9921531677246094e-05,",1,3,"out:out,in:url,",Greedy,107,0.047780168056488034
218,"['2687277', '10895680', '    @Override\n    protected void copy(Reader reader, OutputStream outputs) throws IOException {\n        if (outputs == null) {\n            throw new NullPointerException();\n        }\n        if (reader == null) {\n            throw new NullPointerException();\n        }\n        ZipOutputStream zipoutputs = null;\n        try {\n            zipoutputs = new ZipOutputStream(outputs);\n            zipoutputs.putNextEntry(new ZipEntry(""default""));\n            IOUtils.copy(reader, zipoutputs);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            if (zipoutputs != null) {\n                zipoutputs.close();\n            }\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }\n', '    private DefaultMutableTreeNode parseTree() {\n        try {\n            DefaultMutableTreeNode root;\n            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");\n            InputStream is = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setIgnoringComments(true);\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(is);\n            NodeList elements = document.getElementsByTagName(""help"");\n            Element element = (Element) elements.item(0);\n            root = createTreeContent(element);\n            is.close();\n            return root;\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n            return null;\n        } catch (ParserConfigurationException e1) {\n            System.out.println(e1.getMessage());\n            return null;\n        } catch (org.xml.sax.SAXException e2) {\n            System.out.println(e2.getMessage());\n            return null;\n        }\n    }\n']",129,"    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
",0,0,0,-1,"reader,outputs,zipoutputs","reader:1.1801719665527344e-05,outputs:0.0,zipoutputs:0.0,",0,0,"reader:reader,outputs:outputs,zipoutputs:zipoutputs,",Greedy,197,0.08224124908447265
219,"['8172652', '8075979', '    @Test\n    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })\n    public void testTestServlet() throws Exception {\n        TestServlet.reset();\n        HttpClient client = new DefaultHttpClient();\n        HttpEntity entity = new StringEntity(xml);\n        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");\n        method.setEntity(entity);\n        HttpResponse response = client.execute(method);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        assertEquals(xml, TestServlet.getPosted());\n    }\n', '    private URLConnection tryOpenConnection(String url) throws RuntimeException {\n        URLConnection connection = null;\n        try {\n            connection = new URL(""https://"" + url).openConnection();\n            connection.getInputStream();\n            connection = new URL(""https://"" + url).openConnection();\n            return connection;\n        } catch (Exception e) {\n            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);\n        }\n        try {\n            connection = new URL(""http://"" + url).openConnection();\n            connection.getInputStream();\n            connection = new URL(""http://"" + url).openConnection();\n            return connection;\n        } catch (Exception e) {\n            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);\n        }\n        return null;\n    }\n']",119,"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient app = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost end = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        end.setEntity(entity);
        HttpResponse page = app.execute(end);
        assertEquals(200, page.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
",0,0,0,-1,"client,entity,method,response","client:3.5762786865234375e-07,entity:3.5762786865234375e-07,method:2.384185791015625e-07,response:3.2186508178710938e-06,",3,7,"response:page,client:app,entity:entity,method:end,",Greedy,173,0.07709165811538696
220,"['16030263', '12631774', '    public static String md5(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(text.getBytes());\n            return ForumUtil.bufferToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n', '    public static String getMd5Hash(String plaintext) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(plaintext.getBytes());\n            byte[] digest = md5.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = ""0"" + hashtext;\n            }\n            return hashtext;\n        } catch (final NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return """";\n    }\n']",64,"    public static String md5(String image) {
        try {
            MessageDigest kg = MessageDigest.getInstance(""MD5"");
            kg.update(image.getBytes());
            return ForumUtil.bufferToHex(kg.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",1,1,1,-1,"text,md","text:-3.7550926208496094e-05,md:0.0006034970283508301,",2,5,"md:kg,text:image,",Greedy,96,0.048217769463857016
221,"['4540202', '411630', '    public void myClickHandler(View view) {\n        switch(view.getId()) {\n            case R.id.ReadWebPage:\n                try {\n                    textView.setText("""");\n                    URL url = new URL(urlText.getText().toString());\n                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));\n                    String line = """";\n                    while ((line = rd.readLine()) != null) {\n                        textView.append(line);\n                    }\n                } catch (Exception e) {\n                    System.out.println(""Nay, did not work"");\n                    textView.setText(e.getMessage());\n                }\n                break;\n        }\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",131,"    public void myClickHandler(View index) {
        switch(index.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL service = new URL(urlText.getText().toString());
                    BufferedReader ird = new BufferedReader(new InputStreamReader(service.openStream()));
                    String key = """";
                    while ((key = ird.readLine()) != null) {
                        textView.append(key);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
",0,0,0,-1,"view,url,rd,line","view:-2.5510787963867188e-05,url:5.447864532470703e-05,rd:5.364418029785156e-06,line:-4.470348358154297e-06,",4,9,"url:service,rd:ird,line:key,view:index,",Greedy,187,0.08297674258550009
222,"['11270196', '14356579', '    public static String encipherAMessage(String message) {\n        try {\n            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));\n            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));\n            byte[] digest = sha1.digest();\n            BASE64Encoder base64encoder = new BASE64Encoder();\n            String cipherTextB64 = base64encoder.encode(digest);\n            return cipherTextB64;\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return """";\n    }\n', '    public String getRandomGUID() {\n        MessageDigest md5 = null;\n        String valueBeforeMD5 = """";\n        String retValue = """";\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            InetAddress id = InetAddress.getLocalHost();\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            rand = random.nextLong();\n            sbValueBeforeMD5.append(id.toString());\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            retValue = sb.toString();\n        } catch (UnknownHostException e) {\n            System.out.println(""Error:"" + e);\n        }\n        return retValue;\n    }\n']",169,"    public static String encipherAMessage(String url) {
        try {
            MessageDigest a64 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            a64.update(url.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] signEST = a64.signEST();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String ciphertextA64 = base64encoder.encode(signEST);
            return ciphertextA64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
",1,1,1,-1,"message,sha1,digest,base64encoder,cipherTextB64","message:-0.06492221355438232,sha1:0.0,digest:0.0,base64encoder:0.0,cipherTextB64:0.0,",4,10,"sha1:a64,digest:signEST,base64encoder:base64encoder,cipherTextB64:ciphertextA64,message:url,",Greedy,186,0.0946402112642924
223,"['20004216', '11902597', '        public boolean check(Object credentials) {\n            String password = (credentials instanceof String) ? (String) credentials : credentials.toString();\n            try {\n                MessageDigest md = MessageDigest.getInstance(""MD5"");\n                byte[] ha1;\n                if (credentials instanceof Credential.MD5) {\n                    ha1 = ((Credential.MD5) credentials).getDigest();\n                } else {\n                    md.update(username.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(realm.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    ha1 = md.digest();\n                }\n                md.reset();\n                md.update(method.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(uri.getBytes(StringUtil.__ISO_8859_1));\n                byte[] ha2 = md.digest();\n                md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nc.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(qop.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));\n                byte[] digest = md.digest();\n                return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));\n            } catch (Exception e) {\n                log.warn(LogSupport.EXCEPTION, e);\n            }\n            return false;\n        }\n', '    public static void main(String[] args) {\n        System.out.println(""Start filtering zgps..."");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = ""GPSFilterZGPS"";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));\n        System.out.println(""Start reading selected stages..."");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");\n        System.out.println(""Start reading and writing zgps..."");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(""\\t"");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(""Could not find source file for selected stages."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""IO Exception while reading or writing zgps."");\n            e.printStackTrace();\n        }\n        System.out.println(""Done."");\n    }\n']",399,"        public boolean check(Object credentials) {
            String user = (credentials instanceof String) ? (String) credentials : credentials.toString();
            try {
                MessageDigest hm = MessageDigest.getInstance(""MD5"");
                byte[] yaOne;
                if (credentials instanceof Credential.MD5) {
                    yaOne = ((Credential.MD5) credentials).getDigest();
                } else {
                    hm.update(username.getBytes(StringUtil.__ISO_8859_1));
                    hm.update((byte) ':');
                    hm.update(realm.getBytes(StringUtil.__ISO_8859_1));
                    hm.update((byte) ':');
                    hm.update(user.getBytes(StringUtil.__ISO_8859_1));
                    yaOne = hm.Digert();
                }
                hm.reset();
                hm.update(method.getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(uri.getBytes(StringUtil.__ISO_8859_1));
                byte[] wa0 = hm.Digert();
                hm.update(TypeUtil.toString(yaOne, 16).getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(nonce.getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(nc.getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(cnonce.getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(qop.getBytes(StringUtil.__ISO_8859_1));
                hm.update((byte) ':');
                hm.update(TypeUtil.toString(wa0, 16).getBytes(StringUtil.__ISO_8859_1));
                byte[] Digert = hm.Digert();
                return (TypeUtil.toString(Digert, 16).equalsIgnoreCase(response));
            } catch (Exception e) {
                log.warn(LogSupport.EXCEPTION, e);
            }
            return false;
        }
",0,0,0,-1,"credentials,password,md,ha1,ha2,digest","credentials:0.0,password:5.4836273193359375e-06,md:-4.6372413635253906e-05,ha1:0.0,ha2:0.0,digest:0.0,",5,37,"password:user,credentials:credentials,ha1:yaOne,ha2:wa0,digest:Digert,md:hm,",Greedy,340,0.16713951031366983
224,"['11129960', '18760096', '    public static String getGoGl(final String urlPath, String key) {\n        log.debug(""getGoGl url "" + urlPath);\n        log.debug(""getGoGl key "" + key);\n        String shortUrl = null;\n        URL simpleURL = null;\n        HttpsURLConnection url = null;\n        BufferedInputStream bStream = null;\n        StringBuffer resultString = new StringBuffer("""");\n        String inputString = ""{\\""longUrl\\"":\\"""" + urlPath + ""\\""}"";\n        log.debug(""getGoGl inputString "" + inputString);\n        try {\n            simpleURL = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + key);\n            url = (HttpsURLConnection) simpleURL.openConnection();\n            url.setDoOutput(true);\n            url.setRequestProperty(""content-type"", ""application/json"");\n            PrintWriter pw = new PrintWriter(url.getOutputStream());\n            pw.print(inputString);\n            pw.close();\n        } catch (Exception ex) {\n            log.error(ex);\n            shortUrl = urlPath;\n        }\n        try {\n            bStream = new BufferedInputStream(url.getInputStream());\n            int i;\n            while ((i = bStream.read()) >= 0) {\n                resultString.append((char) i);\n            }\n        } catch (Exception ex) {\n            SocialUtils.log.error(ex);\n            shortUrl = urlPath;\n        }\n        return shortUrl;\n    }\n', '    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {\n        InputStream is = null;\n        try {\n            URL url = new URL(jad.getJarURL());\n            URLConnection conn = url.openConnection();\n            if (url.getUserInfo() != null) {\n                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes(""UTF-8"")));\n                conn.setRequestProperty(""Authorization"", ""Basic "" + userInfo);\n            }\n            is = conn.getInputStream();\n            File tmpDir = null;\n            String systemTmpDir = MIDletSystemProperties.getSystemProperty(""java.io.tmpdir"");\n            if (systemTmpDir != null) {\n                tmpDir = new File(systemTmpDir, ""microemulator-apps"");\n                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {\n                    tmpDir = null;\n                }\n            }\n            File tmp = File.createTempFile(""me2-app-"", "".jar"", tmpDir);\n            tmp.deleteOnExit();\n            IOUtils.copyToFile(is, tmp);\n            return IOUtils.getCanonicalFileClassLoaderURL(tmp);\n        } catch (IOException e) {\n            if (reportError) {\n                Message.error(""Unable to open jar "" + jarUrl, e);\n            }\n            return null;\n        } finally {\n            IOUtils.closeQuietly(is);\n        }\n    }\n']",253,"    public static String getGoGl(final String workInfo, String ace) {
        log.debug(""getGoGl url "" + workInfo);
        log.debug(""getGoGl key "" + ace);
        String rawURL = null;
        URL SimpleHTTP = null;
        HttpsURLConnection url = null;
        BufferedInputStream bStream = null;
        StringBuffer outputBuffer = new StringBuffer("""");
        String InputStream = ""{\""longUrl\"":\"""" + workInfo + ""\""}"";
        log.debug(""getGoGl inputString "" + InputStream);
        try {
            SimpleHTTP = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + ace);
            url = (HttpsURLConnection) SimpleHTTP.openConnection();
            url.setDoOutput(true);
            url.setRequestProperty(""content-type"", ""application/json"");
            PrintWriter Pwa = new PrintWriter(url.getOutputStream());
            Pwa.print(InputStream);
            Pwa.close();
        } catch (Exception ex) {
            log.error(ex);
            rawURL = workInfo;
        }
        try {
            bStream = new BufferedInputStream(url.getInputStream());
            int limit;
            while ((limit = bStream.read()) >= 0) {
                outputBuffer.append((char) limit);
            }
        } catch (Exception ex) {
            SocialUtils.log.error(ex);
            rawURL = workInfo;
        }
        return rawURL;
    }
",0,0,0,-1,"urlPath,key,shortUrl,simpleURL,url,bStream,resultString,inputString,pw,i","urlPath:0.0,key:3.5762786865234375e-07,shortUrl:0.0,simpleURL:0.0,url:1.2755393981933594e-05,bStream:0.0,resultString:0.0,inputString:0.0,pw:0.0,i:1.1920928955078125e-07,",8,28,"url:url,key:ace,i:limit,urlPath:workInfo,shortUrl:rawURL,simpleURL:SimpleHTTP,bStream:bStream,resultString:outputBuffer,inputString:InputStream,pw:Pwa,",Greedy,507,0.2254663109779358
225,"['19388622', '8581121', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n', '    public static String hexHash(Object obj) {\n        String toHash = obj.toString();\n        try {\n            MessageDigest dg = MessageDigest.getInstance(""MD5"");\n            dg.update(toHash.getBytes(""UTF-8""));\n            return bytesToHex(dg.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(""Error while hashing string: "" + toHash, e);\n        }\n    }\n']",268,"    private void getRandomGUID(boolean protect) {
        MessageDigest mand85 = null;
        StringBuffer sbValueBeforeMC512 = new StringBuffer();
        try {
            mand85 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long ime = System.currentTimeMillis();
            long rar = 0;
            if (protect) {
                rar = mySecureRand.nextLong();
            } else {
                rar = myRand.nextLong();
            }
            sbValueBeforeMC512.append(s_id);
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(ime));
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(rar));
            valueBeforeMC3 = sbValueBeforeMC512.toString();
            mand85.update(valueBeforeMC3.getBytes());
            byte[] audio = mand85.digest();
            StringBuffer kb = new StringBuffer();
            for (int dy = 0; dy < audio.length; ++dy) {
                int lb = audio[dy] & 0xFF;
                if (lb < 0x10) {
                    kb.append('0');
                }
                kb.append(Integer.toHexString(lb));
            }
            valueAfterAMD4 = kb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1,1,1,-1,"secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","secure:0.0010398030281066895,md5:0.0,sbValueBeforeMD5:0.0,time:-0.0012241601943969727,rand:0.010873198509216309,valueBeforeMD5:0.0,array:-0.01866447925567627,sb:0.030244886875152588,j:-0.09479612112045288,b:0.02636641263961792,valueAfterMD5:0.0,",11,36,"sb:kb,b:lb,rand:rar,secure:protect,md5:mand85,sbValueBeforeMD5:sbValueBeforeMC512,valueBeforeMD5:valueBeforeMC3,valueAfterMD5:valueAfterAMD4,time:ime,array:audio,j:dy,",Greedy,571,0.24128524462381998
226,"['15826301', '11028858', '    public static int getContentLength(String address) {\n        URLConnection conn = null;\n        int contentLength = 0;\n        try {\n            URL url = new URL(address);\n            conn = url.openConnection();\n            contentLength = conn.getContentLength();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return contentLength;\n    }\n', '    @Override\n    public void runTask(HashMap pjobParameters) throws Exception {\n        if (hasRequiredResources(isSubTask())) {\n            File lfileSource = new File(getSource());\n            File lfileTarget = new File(getTarget());\n            FileChannel lfisInput = null;\n            FileChannel lfosOutput = null;\n            try {\n                int mbCount = 64;\n                boolean lblnDone = false;\n                while (!lblnDone) {\n                    lfisInput = new FileInputStream(lfileSource).getChannel();\n                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();\n                    try {\n                        int maxCount = (mbCount * 1024 * 1024) - (32 * 1024);\n                        long size = lfisInput.size();\n                        long position = 0;\n                        while (position < size) {\n                            position += lfisInput.transferTo(position, maxCount, lfosOutput);\n                        }\n                        lblnDone = true;\n                    } catch (IOException lioXcp) {\n                        getLog().warn(lioXcp);\n                        if (lioXcp.getMessage().contains(""Insufficient system resources exist to complete the requested servic"")) {\n                            mbCount--;\n                            getLog().debug(""Dropped resource count down to ["" + mbCount + ""]"");\n                            if (mbCount == 0) {\n                                lblnDone = true;\n                            }\n                            if (lfisInput != null) {\n                                lfisInput.close();\n                            }\n                            if (lfosOutput != null) {\n                                lfosOutput.close();\n                            }\n                        } else {\n                            throw lioXcp;\n                        }\n                    }\n                }\n            } finally {\n                if (lfisInput != null) {\n                    lfisInput.close();\n                }\n                if (lfosOutput != null) {\n                    lfosOutput.close();\n                }\n            }\n        }\n    }\n']",64,"    public static int getContentLength(String config) {
        URLConnection con = null;
        int paddingLength = 0;
        try {
            URL url = new URL(config);
            con = url.openConnection();
            paddingLength = con.getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return paddingLength;
    }
",0,0,0,-1,"address,conn,contentLength,url","address:9.5367431640625e-07,conn:5.960464477539062e-07,contentLength:0.0,url:4.76837158203125e-07,",3,8,"address:config,conn:con,url:url,contentLength:paddingLength,",Greedy,177,0.07979231278101603
227,"['12097100', '14647876', '    public void getStation(String prefecture, String line) {\n        HttpClient httpclient = null;\n        try {\n            httpclient = new DefaultHttpClient();\n            List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n            qparams.add(new BasicNameValuePair(""method"", ""getStations""));\n            qparams.add(new BasicNameValuePair(""prefecture"", prefecture));\n            qparams.add(new BasicNameValuePair(""line"", line));\n            URI uri = URIUtils.createURI(""http"", ""express.heartrails.com"", -1, ""/api/xml"", URLEncodedUtils.format(qparams, ""UTF-8""), null);\n            HttpGet httpget = new HttpGet(uri);\n            HttpResponse response = httpclient.execute(httpget);\n            HttpEntity entity = response.getEntity();\n            InputStream instream = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(instream, ""UTF-8""));\n            StringBuffer buf = new StringBuffer();\n            String str;\n            while ((str = reader.readLine()) != null) {\n                buf.append(str);\n                buf.append(""\\n"");\n            }\n            reader.close();\n            stationRes = new StationResponse(buf.toString());\n        } catch (URISyntaxException ex) {\n            ex.printStackTrace();\n        } catch (ClientProtocolException ex) {\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } catch (SAXException ex) {\n            ex.printStackTrace();\n        } catch (ParserConfigurationException ex) {\n            ex.printStackTrace();\n        } finally {\n            mSearchStation.setEnabled(true);\n        }\n    }\n', '    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {\n        File fromFile = fromFileName.toFile();\n        File toFile = toFileName.toFile();\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFileName);\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        }\n        InputStream from = null;\n        OutputStream to = null;\n        try {\n            from = new BufferedInputStream(new FileInputStream(fromFile));\n            to = new BufferedOutputStream(new FileOutputStream(toFile));\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",314,"    public void getStation(String pofecture, String lines) {
        HttpClient httpsapi = null;
        try {
            httpsapi = new DefaultHttpClient();
            List<NameValuePair> quwords = new ArrayList<NameValuePair>();
            quwords.add(new BasicNameValuePair(""method"", ""getStations""));
            quwords.add(new BasicNameValuePair(""pofecture"", pofecture));
            quwords.add(new BasicNameValuePair(""lines"", lines));
            URI uri = URIUtils.createURI(""http"", ""express.heartrails.com"", -1, ""/api/xml"", URLEncodedUtils.format(quwords, ""UTF-8""), null);
            HttpGet httpshow = new HttpGet(uri);
            HttpResponse status = httpsapi.execute(httpshow);
            HttpEntity eme = status.getEntity();
            InputStream outchannel = eme.getContent();
            BufferedReader read = new BufferedReader(new InputStreamReader(outchannel, ""UTF-8""));
            StringBuffer db = new StringBuffer();
            String i;
            while ((i = read.readLine()) != null) {
                db.append(i);
                db.append(""
"");
            }
            read.close();
            StationResp = new StationResponse(db.toString());
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
        } catch (ClientProtocolException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SAXException ex) {
            ex.printStackTrace();
        } catch (ParserConfigurationException ex) {
            ex.printStackTrace();
        } finally {
            mSearchStation.setEnabled(true);
        }
    }
",0,0,0,-1,"prefecture,line,httpclient,qparams,uri,httpget,response,entity,instream,reader,buf,str,stationRes","prefecture:0.0,line:-9.5367431640625e-07,httpclient:0.0,qparams:0.0,uri:3.5762786865234375e-06,httpget:0.0,response:-3.5762786865234375e-07,entity:1.5497207641601562e-06,instream:0.0,reader:-9.5367431640625e-07,buf:1.0728836059570312e-06,str:-7.152557373046875e-07,stationRes:0.0,",12,33,"uri:uri,entity:eme,buf:db,prefecture:pofecture,httpclient:httpsapi,qparams:quwords,httpget:httpshow,instream:outchannel,stationRes:StationResp,response:status,str:i,line:lines,reader:read,",Greedy,560,0.28377450704574586
228,"['1863214', '15988143', '    public static final void copyFile(File source, File target) {\n        try {\n            FileChannel srcChannel = new FileInputStream(source).getChannel();\n            FileChannel dstChannel = new FileOutputStream(target).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (java.io.IOException e) {\n        }\n    }\n', '    public static List getUrlData(URL url) throws IOException {\n        List beans = new ArrayList(256);\n        System.out.println(""Retreiving content for: "" + url);\n        StringBuffer content = new StringBuffer(4096);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String str;\n        while ((str = in.readLine()) != null) {\n            if (str.startsWith(""#"")) {\n                continue;\n            }\n            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\\t"");\n            String InteractionAc = stringTokenizer.nextToken();\n            String reactomeId = stringTokenizer.nextToken();\n            ReactomeBean reactomeBean = new ReactomeBean();\n            reactomeBean.setReactomeID(reactomeId);\n            reactomeBean.setInteractionAC(InteractionAc);\n            beans.add(reactomeBean);\n        }\n        in.close();\n        return beans;\n    }\n']",81,"    public static final void copyFile(File url, File database) {
        try {
            FileChannel srcChannel = new FileInputStream(url).getChannel();
            FileChannel dstChannel = new FileOutputStream(database).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (java.io.IOException e) {
        }
    }
",0,0,0,-1,"source,target,srcChannel,dstChannel","source:-4.76837158203125e-07,target:1.1920928955078125e-07,srcChannel:0.0,dstChannel:0.0,",2,4,"target:database,srcChannel:srcChannel,dstChannel:dstChannel,source:url,",Greedy,180,0.08247627814610799
229,"['21459233', '19332849', '    private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception {\n        pm.beginTask(""Creating temp project"", 1);\n        IPath destination = new Path(pName);\n        IJavaProject oldJavaproj = JavaCore.create(project);\n        IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();\n        IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName);\n        newProject.create(null);\n        newProject.open(null);\n        IProjectDescription desc = newProject.getDescription();\n        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n        newProject.setDescription(desc, null);\n        List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();\n        for (IClasspathEntry cEntry : classPath) {\n            switch(cEntry.getEntryKind()) {\n                case IClasspathEntry.CPE_SOURCE:\n                    System.out.println(""Source folder "" + cEntry.getPath());\n                    newClassPath.add(copySourceFolder(project, newProject, cEntry, destination));\n                    break;\n                case IClasspathEntry.CPE_LIBRARY:\n                    System.out.println(""library folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_PROJECT:\n                    System.out.println(""project folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_VARIABLE:\n                    System.out.println(""variable folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                default:\n                    System.out.println(""container folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n            }\n        }\n        copyDir(project.getLocation().toString(), ""/translator"", newProject.getLocation().toString(), """", new ArrayList<String>() {\n\n            {\n                add(""generated"");\n                add(""classes"");\n                add("".svn"");\n            }\n        });\n        newProject.refreshLocal(IResource.DEPTH_INFINITE, pm);\n        newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm);\n        newProject.touch(pm);\n        IJavaProject javaproj = JavaCore.create(newProject);\n        javaproj.setOutputLocation(new Path(""/"" + newProject.getName() + ""/classes/bin""), null);\n        javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm);\n        Map opts = oldJavaproj.getOptions(true);\n        javaproj.setOptions(opts);\n        javaproj.makeConsistent(pm);\n        javaproj.save(pm, true);\n        return newProject;\n    }\n', '    public String getResponse(String URLstring) {\n        String str = """";\n        try {\n            URL url = new URL(URLstring);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String st = """";\n            while ((st = in.readLine()) != null) {\n                str += ""\\n"" + st;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return str;\n    }\n']",504,"    private static IProject createCopyProject(IProject command, String gNAME, IWorkspace ww, IProgressMonitor rpm) throws Exception {
        rpm.beginTask(""Creating temp project"", 1);
        IPath contribution = new Path(gNAME);
        IJavaProject oldJavarrijo = JavaCore.create(command);
        IClasspathEntry[] packageList = oldJavarrijo.getRawClasspath();
        IProject newsproject = ResourcesPlugin.getWorkspace().getRoot().getProject(gNAME);
        newsproject.create(null);
        newsproject.open(null);
        IProjectDescription de = newsproject.getDescription();
        de.setNatureIds(new String[] { JavaCore.NATURE_ID });
        newsproject.setDescription(de, null);
        List<IClasspathEntry> newclassArray = new ArrayList<IClasspathEntry>();
        for (IClasspathEntry cResource : packageList) {
            switch(cResource.getEntryKind()) {
                case IClasspathEntry.CPE_SOURCE:
                    System.out.println(""Source folder "" + cResource.getPath());
                    newclassArray.add(copySourceFolder(command, newsproject, cResource, contribution));
                    break;
                case IClasspathEntry.CPE_LIBRARY:
                    System.out.println(""library folder "" + cResource.getPath());
                    newclassArray.add(cResource);
                    break;
                case IClasspathEntry.CPE_PROJECT:
                    System.out.println(""project folder "" + cResource.getPath());
                    newclassArray.add(cResource);
                    break;
                case IClasspathEntry.CPE_VARIABLE:
                    System.out.println(""variable folder "" + cResource.getPath());
                    newclassArray.add(cResource);
                    break;
                default:
                    System.out.println(""container folder "" + cResource.getPath());
                    newclassArray.add(cResource);
            }
        }
        copyDir(command.getLocation().toString(), ""/translator"", newsproject.getLocation().toString(), """", new ArrayList<String>() {

            {
                add(""generated"");
                add(""classes"");
                add("".svn"");
            }
        });
        newsproject.refreshLocal(IResource.DEPTH_INFINITE, rpm);
        newsproject.build(IncrementalProjectBuilder.AUTO_BUILD, rpm);
        newsproject.touch(rpm);
        IJavaProject javaproj = JavaCore.create(newsproject);
        javaproj.setOutputLocation(new Path(""/"" + newsproject.getName() + ""/classes/bin""), null);
        javaproj.setRawClasspath(newclassArray.toArray(new IClasspathEntry[newclassArray.size()]), rpm);
        Map opts = oldJavarrijo.getOptions(true);
        javaproj.setOptions(opts);
        javaproj.makeConsistent(rpm);
        javaproj.save(rpm, true);
        return newsproject;
    }
",0,0,0,-1,"project,pName,ws,pm,destination,oldJavaproj,classPath,newProject,desc,newClassPath,cEntry","project:-1.3470649719238281e-05,pName:0.0,ws:1.1920928955078125e-07,pm:-3.6954879760742188e-06,destination:0.0,oldJavaproj:0.0,classPath:0.0,newProject:0.0,desc:2.5033950805664062e-06,newClassPath:0.0,cEntry:0.0,",11,61,"desc:de,ws:ww,pName:gNAME,destination:contribution,oldJavaproj:oldJavarrijo,classPath:packageList,newProject:newsproject,newClassPath:newclassArray,cEntry:cResource,pm:rpm,project:command,",Greedy,560,0.2945817510286967
230,"['268806', '8988243', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    private static void extractSOUNDFILES() throws Exception {\n        ArrayList<File> soundFiles = new ArrayList<File>();\n        File soundsFolder = new File(""/var/lib/asterisk/sounds/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        soundsFolder = new File(""/opt/jboss/server/default/deploy/Tobe.war/WEB-INF/lib/"");\n        if (soundsFolder.exists()) {\n            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (NullStatus.isNull(name)) {\n                        return false;\n                    }\n                    if (name.endsWith(""-sounds.jar"")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            for (int i = 0; i < soundFiles1.length; i++) {\n                soundFiles.add(soundFiles1[i]);\n            }\n        }\n        for (int i = 0; i < soundFiles.size(); i++) {\n            ZipFile zipFile = new ZipFile(soundFiles.get(i));\n            InputStream inputStream = null;\n            Enumeration<? extends ZipEntry> oEnum = zipFile.entries();\n            while (oEnum.hasMoreElements()) {\n                ZipEntry zipEntry = oEnum.nextElement();\n                File file = new File(""/var/lib/asterisk/sounds/"", zipEntry.getName());\n                if (zipEntry.isDirectory()) {\n                    file.mkdirs();\n                } else {\n                    inputStream = zipFile.getInputStream(zipEntry);\n                    FileOutputStream fos = new FileOutputStream(file);\n                    IOUtils.copy(inputStream, fos);\n                    fos.close();\n                }\n            }\n        }\n    }\n']",764,"    public void convert(File url, File source) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ils = fact.newDataset();
        p.setDcmHandler(ils.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.post.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ils.contains(Tags.StudyInstanceUID) || ils.contains(Tags.SeriesInstanceUID) || ils.contains(Tags.SOPInstanceUID) || ils.contains(Tags.SOPClassUID)) {
                System.post.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ils.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ils.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ils.getInt(Tags.BitsAllocated, 0) >>> 3) * ils.getInt(Tags.Rows, 0) * ils.getInt(Tags.Columns, 0) * ils.getInt(Tags.NumberOfFrames, 1) * ils.getInt(Tags.NumberOfSamples, 1)) {
                    System.post.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ils.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ils.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ils.putUI(Tags.SOPInstanceUID, uid(instUID));
            ils.putUI(Tags.SOPClassUID, classUID);
            if (!ils.contains(Tags.NumberOfSamples)) {
                ils.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ils.contains(Tags.PhotometricInterpretation)) {
                ils.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ils.setFileMetaInfo(fact.newFileMetaInfo(ils, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream post = new BufferedOutputStream(new FileOutputStream(source));
            try {
            } finally {
                ils.writeFile(post, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        post.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        post.write((byte) grlen);
                        post.write((byte) (grlen >> 8));
                        post.write((byte) (grlen >> 16));
                        post.write((byte) (grlen >> 24));
                    }
                    post.write(PXDATA_TAG);
                    post.write((byte) pxlen);
                    post.write((byte) (pxlen >> 8));
                    post.write((byte) (pxlen >> 16));
                    post.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        post.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        post.write(b2 & 0x0f);
                        post.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        post.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        post.write(in.read());
                    }
                }
                post.close();
            }
            System.post.print('.');
        } finally {
            in.close();
        }
    }
",1,1,0,1,"src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","src:2.110004425048828e-05,dest:0.0006126761436462402,in:-5.602836608886719e-06,p:1.7464160919189453e-05,ds:6.461143493652344e-05,format:2.0205974578857422e-05,hasPixelData:0.0,inflate:0.0,pxlen:0.0,out:3.606081008911133e-05,",4,53,"dest:source,ds:ils,out:post,src:url,",Greedy,311,0.17629356781641642
231,"['15257300', '3109015', '    private String readFile(String urlFileString) throws IOException {\n        URL url = new URL(urlFileString);\n        VizDebugUtils.debug(""url: "" + url.toString());\n        InputStream stream = url.openStream();\n        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");\n        StringWriter writer = new StringWriter();\n        StreamUtils.transfer(reader, writer);\n        stream.close();\n        return writer.toString();\n    }\n', '    private void copy(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n']",87,"    private String readFile(String urlClassSingle) throws IOException {
        URL url = new URL(urlClassSingle);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream user = url.openStream();
        Reader rar = new InputStreamReader(user, ""iso-8859-1"");
        StringWriter wrapper = new StringWriter();
        StreamUtils.transfer(rar, wrapper);
        user.close();
        return wrapper.toString();
    }
",0,0,0,-1,"urlFileString,url,stream,reader,writer","urlFileString:0.0,url:7.152557373046875e-07,stream:0.0,reader:2.384185791015625e-07,writer:1.1920928955078125e-07,",4,10,"url:url,reader:rar,writer:wrapper,urlFileString:urlClassSingle,stream:user,",Greedy,237,0.10516272783279419
232,"['9413061', '17526811', '    @Override\n    public void run() {\n        try {\n            FileChannel out = new FileOutputStream(outputfile).getChannel();\n            long pos = 0;\n            status.setText(""Slučovač: Proces slučování spuštěn.. Prosím čekejte.."");\n            for (int i = 1; i <= noofparts; i++) {\n                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + String.format(""%03d"", i)).getChannel();\n                status.setText(""Slučovač: Slučuji část "" + i + "".."");\n                this.splitsize = in.size();\n                out.transferFrom(in, pos, splitsize);\n                pos += splitsize;\n                in.close();\n                if (deleteOnFinish) new File(originalfilename + String.format("".%03d"", i)).delete();\n                pb.setValue(100 * i / noofparts);\n            }\n            out.close();\n            status.setText(""Slučovač: Hotovo.."");\n            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);\n        } catch (Exception e) {\n        }\n    }\n', '    private String getDocumentAsString(URL url) throws IOException {\n        StringBuffer result = new StringBuffer();\n        InputStream in = url.openStream();\n        int c;\n        while ((c = in.read()) != -1) result.append((char) c);\n        return result.toString();\n    }\n']",210,"    @Override
    public void run() {
        try {
            FileChannel password = new FileOutputStream(outputfile).getChannel();
            long pos = 0;
            status.setText(""Slučovač: Proces slučování spuštěn.. Prosím čekejte.."");
            for (int i = 1; i <= noofparts; i++) {
                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + String.format(""%03d"", i)).getChannel();
                status.setText(""Slučovač: Slučuji část "" + i + "".."");
                this.splitsize = in.size();
                password.transferFrom(in, pos, splitsize);
                pos += splitsize;
                in.close();
                if (deleteOnFinish) new File(originalfilename + String.format("".%03d"", i)).delete();
                pb.setValue(100 * i / noofparts);
            }
            password.close();
            status.setText(""Slučovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        }
    }
",0,0,0,-1,"out,pos,i,in,splitsize","out:1.0013580322265625e-05,pos:-1.5497207641601562e-06,i:-3.337860107421875e-06,in:8.344650268554688e-07,splitsize:0.0,",1,3,"out:password,in:in,splitsize:splitsize,pos:pos,i:i,",Greedy,284,0.1174158493677775
233,"['9796809', '19515832', '    @Override\n    protected byte[] computeHash() {\n        try {\n            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");\n            inputHash.update(bufferFileData().getBytes());\n            return inputHash.digest();\n        } catch (final NoSuchAlgorithmException nsae) {\n            lastException = nsae;\n            return new byte[0];\n        } catch (final IOException ioe) {\n            lastException = ioe;\n            return new byte[0];\n        }\n    }\n', '    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        String text = new String();\n        byte[] sha1hash = new byte[20];\n        text = key + GUUI;\n        md.update(text.getBytes(), 0, text.length());\n        sha1hash = md.digest();\n        return (Helper.getBASE64(sha1hash));\n    }\n']",85,"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest InputBuild = MessageDigest.getInstance(""SHA"");
            InputBuild.update(bufferFileData().getBytes());
            return InputBuild.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            firstExc = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            firstExc = ioe;
            return new byte[0];
        }
    }
",1,1,1,-1,"inputHash,lastException","inputHash:0.0,lastException:0.0,",2,5,"inputHash:InputBuild,lastException:firstExc,",Greedy,55,0.037290894985198976
234,"['11953289', '5600261', '    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(p.getBytes(""iso-8859-1""), 0, p.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '    private String calculateMD5(String value) {\n        String finalString = new String("""");\n        try {\n            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");\n            md5Alg.reset();\n            md5Alg.update(value.getBytes());\n            byte messageDigest[] = md5Alg.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                String hex = Integer.toHexString(0xFF & messageDigest[i]);\n                if (hex.length() == 1) {\n                    hexString.append(\'0\');\n                }\n                hexString.append(hex);\n            }\n            finalString = hexString.toString();\n        } catch (NoSuchAlgorithmException exc) {\n            throw new RuntimeException(""Hashing error happened:"", exc);\n        }\n        return finalString;\n    }\n']",75,"    private static String hashPass(String path) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest ld;
        ld = MessageDigest.getInstance(""SHA-1"");
        byte[] sha512sha = new byte[40];
        ld.update(path.getBytes(""iso-8859-1""), 0, path.length());
        sha512sha = ld.digest();
        return convertToHex(sha512sha);
    }
",1,1,1,-1,"p,md,sha1hash","p:0.001363992691040039,md:0.8704221844673157,sha1hash:0.0,",3,10,"md:ld,p:path,sha1hash:sha512sha,",Greedy,179,0.07035877704620361
235,"['6907994', '20109501', '        void copy(String source_name, String dest_name) throws IOException {\n            File source_file = new File(source_name);\n            File destination_file = new File(dest_name);\n            FileInputStream source = null;\n            FileOutputStream destination = null;\n            byte[] buffer;\n            int bytes_read;\n            try {\n                if (!source_file.exists() || !source_file.isFile()) {\n                    throw new FileCopyException(""FileCopy: no such source file: "" + source_name);\n                }\n                if (!source_file.canRead()) {\n                    throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);\n                }\n                if (!destination_file.exists()) {\n                    File parentdir = parent(destination_file);\n                    if (!parentdir.exists()) {\n                        throw new FileCopyException(""FileCopy: destination "" + ""directory doesn\'t exist: "" + dest_name);\n                    }\n                    if (!parentdir.canWrite()) {\n                        throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);\n                    }\n                }\n                source = new FileInputStream(source_file);\n                destination = new FileOutputStream(destination_file);\n                buffer = new byte[1024];\n                while (true) {\n                    bytes_read = source.read(buffer);\n                    if (bytes_read == -1) {\n                        break;\n                    }\n                    destination.write(buffer, 0, bytes_read);\n                }\n            } finally {\n                if (source != null) {\n                    try {\n                        source.close();\n                    } catch (IOException e) {\n                    }\n                }\n                if (destination != null) {\n                    try {\n                        destination.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n        }\n', '    private void native2ascii(LanguageInfo info) {\n        if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");\n        InputStream in = null;\n        OutputStream out = null;\n        print(""\\tConverting to ASCII... "");\n        try {\n            in = new BufferedInputStream(new FileInputStream(info.getFileName()));\n            in.mark(3);\n            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));\n            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));\n            String read;\n            while ((read = reader.readLine()) != null) {\n                writer.write(ascii(read));\n                writer.newLine();\n            }\n            writer.flush();\n            out.flush();\n            println(""... done!"");\n        } catch (IOException ignored) {\n            println(""... error! ("" + ignored.getMessage() + "")"");\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (IOException ignored) {\n            }\n            if (out != null) try {\n                out.close();\n            } catch (IOException ignored) {\n            }\n        }\n    }\n']",290,"        void copy(String ource_path, String destacfile) throws IOException {
            File source___name = new File(ource_path);
            File destination_file = new File(destacfile);
            FileInputStream project = null;
            FileOutputStream destination = null;
            byte[] url;
            int bytes_read;
            try {
                if (!source___name.exists() || !source___name.isFile()) {
                    throw new FileCopyException(""FileCopy: no such source file: "" + ource_path);
                }
                if (!source___name.canRead()) {
                    throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + ource_path);
                }
                if (!destination_file.exists()) {
                    File parentdir = parent(destination_file);
                    if (!parentdir.exists()) {
                        throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + destacfile);
                    }
                    if (!parentdir.canWrite()) {
                        throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + destacfile);
                    }
                }
                project = new FileInputStream(source___name);
                destination = new FileOutputStream(destination_file);
                url = new byte[1024];
                while (true) {
                    bytes_read = project.read(url);
                    if (bytes_read == -1) {
                        break;
                    }
                    destination.write(url, 0, bytes_read);
                }
            } finally {
                if (project != null) {
                    try {
                        project.close();
                    } catch (IOException e) {
                    }
                }
                if (destination != null) {
                    try {
                        destination.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
",1,1,0,1,"source_name,dest_name,source_file,destination_file,source,destination,buffer,bytes_read,parentdir","source_name:0.0,dest_name:0.0,source_file:0.0,destination_file:0.0,source:2.0444393157958984e-05,destination:0.0,buffer:1.4781951904296875e-05,bytes_read:0.0,parentdir:0.0,",5,24,"source:project,buffer:url,source_name:ource_path,dest_name:destacfile,source_file:source___name,",Greedy,255,0.12764132022857666
236,"['10277959', '7099534', '    private static String scramble(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA-1"");\n            md.update(text.getBytes(""UTF-8""));\n            StringBuffer sb = new StringBuffer();\n            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));\n            return sb.toString();\n        } catch (UnsupportedEncodingException e) {\n            return null;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n', '    private static String genRandomGUID(boolean secure) {\n        String valueBeforeMD5 = """";\n        String valueAfterMD5 = """";\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n            return valueBeforeMD5;\n        }\n        long time = System.currentTimeMillis();\n        long rand = 0;\n        if (secure) {\n            rand = mySecureRand.nextLong();\n        } else {\n            rand = myRand.nextLong();\n        }\n        sbValueBeforeMD5.append(s_id);\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(time));\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString();\n        md5.update(valueBeforeMD5.getBytes());\n        byte[] array = md5.digest();\n        String strTemp = """";\n        for (int i = 0; i < array.length; i++) {\n            strTemp = (Integer.toHexString(array[i] & 0XFF));\n            if (strTemp.length() == 1) {\n                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;\n            } else {\n                valueAfterMD5 = valueAfterMD5 + strTemp;\n            }\n        }\n        return valueAfterMD5.toUpperCase();\n    }\n']",101,"    private static String scramble(String ext) {
        try {
            MessageDigest grad = MessageDigest.getInstance(""SHA-1"");
            grad.update(ext.getBytes(""UTF-8""));
            StringBuffer usb = new StringBuffer();
            for (byte bf : grad.digest()) usb.append(Integer.toString(bf & 0xFF, 16));
            return usb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",1,1,1,-1,"text,md,sb,b","text:1.049041748046875e-05,md:0.0002594590187072754,sb:-2.8014183044433594e-05,b:-3.7670135498046875e-05,",4,10,"md:grad,text:ext,sb:usb,b:bf,",Greedy,183,0.08734491268793741
237,"['17972560', '15262412', '    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {\n        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {\n            File selectedFolder = folderFileChooser.getSelectedFile();\n            File collectionCopyFile;\n            String newDocumentName;\n            Document newDocument;\n            StringBuilder distinguisherReplacer = new StringBuilder();\n            int matchingFilenameDistinguisher;\n            String nextToken;\n            Term newTerm;\n            String userHome;\n            String fileSeparator;\n            int userOption;\n            ArrayList<File> folderTextFiles = new ArrayList<File>();\n            ArrayList<File> folderRejectedFiles = new ArrayList<File>();\n            HashSet<File> ignoredFiles = new HashSet<File>();\n            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");\n            Scanner tokenizer = null;\n            FileChannel fileSource = null;\n            FileChannel collectionDestination = null;\n            HashMap<String, Integer> termHashMap = null;\n            Index collectionIndex = activeCollection.getIndex();\n            int documentTermMaxFrequency;\n            int currentTermFrequency;\n            for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);\n            for (File selectedFile : folderTextFiles) {\n                newDocumentName = selectedFile.getName();\n                newDocument = new Document(newDocumentName);\n                if (activeCollection.containsDocument(newDocument)) {\n                    matchingFilenameDistinguisher = 1;\n                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");\n                    newDocument.setDocumentName(newDocumentName);\n                    while (activeCollection.containsDocument(newDocument)) {\n                        matchingFilenameDistinguisher++;\n                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();\n                        newDocument.setDocumentName(newDocumentName);\n                    }\n                }\n                termHashMap = new HashMap<String, Integer>();\n                try {\n                    tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));\n                    tokenizer.useDelimiter(Pattern.compile(""\\\\p{Space}|\\\\p{Punct}|\\\\p{Cntrl}""));\n                    while (tokenizer.hasNext()) {\n                        nextToken = tokenizer.next().toLowerCase();\n                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);\n                    }\n                    documentTermMaxFrequency = 0;\n                    for (String term : termHashMap.keySet()) {\n                        newTerm = new Term(term);\n                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);\n                        currentTermFrequency = termHashMap.get(term);\n                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;\n                        collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);\n                    }\n                    newDocument.setTermMaxFrequency(documentTermMaxFrequency);\n                    activeCollection.addDocument(newDocument);\n                    userHome = System.getProperty(""user.home"");\n                    fileSeparator = System.getProperty(""file.separator"");\n                    collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);\n                    collectionCopyFile.createNewFile();\n                    fileSource = new FileInputStream(selectedFile).getChannel();\n                    collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();\n                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());\n                } catch (FileNotFoundException e) {\n                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");\n                    return;\n                } catch (IOException e) {\n                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\n                    if (userOption == JOptionPane.NO_OPTION) {\n                        activeCollection.removeDocument(newDocument);\n                        for (String term : termHashMap.keySet()) {\n                            collectionIndex.removeAllOccurences(new Term(term), newDocument);\n                        }\n                        folderTextFiles.add(selectedFile);\n                    } else ignoredFiles.add(selectedFile);\n                } finally {\n                    try {\n                        if (tokenizer != null) tokenizer.close();\n                        if (fileSource != null) fileSource.close();\n                        if (collectionDestination != null) collectionDestination.close();\n                    } catch (IOException e) {\n                        System.err.println(e.getMessage());\n                    }\n                }\n            }\n            if (ignoredFiles.size() > 0) {\n                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);\n                ignoredFilesDialog.setVisible(true);\n            }\n            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n    }\n', '    String fetch_m3u(String m3u) {\n        InputStream pstream = null;\n        if (m3u.startsWith(""http://"")) {\n            try {\n                URL url = null;\n                if (running_as_applet) {\n                    url = new URL(getCodeBase(), m3u);\n                } else {\n                    url = new URL(m3u);\n                }\n                URLConnection urlc = url.openConnection();\n                pstream = urlc.getInputStream();\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        if (pstream == null && !running_as_applet) {\n            try {\n                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        String line = null;\n        while (true) {\n            try {\n                line = readline(pstream);\n            } catch (Exception e) {\n            }\n            if (line == null) {\n                break;\n            }\n            return line;\n        }\n        return null;\n    }\n']",879,"    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File currentArea = folderFileChooser.getSelectedFile();
            File collectionActiveSourceFile;
            String newDocumentName;
            Document viewdocument;
            StringBuilder distinguisherReplacer = new StringBuilder();
            int matchingFilenameDistinguished;
            String nextToken;
            Term newTerm;
            String userHome;
            String fileSeparator;
            int userOption;
            ArrayList<File> folderTextFiles = new ArrayList<File>();
            ArrayList<File> folderRejectedFiles = new ArrayList<File>();
            HashSet<File> ignoredFiles = new HashSet<File>();
            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");
            Scanner tokenized = null;
            FileChannel fileSource = null;
            FileChannel collectionDestination = null;
            HashMap<String, Integer> termHashMap = null;
            Index collectionIndex = activeCollection.getIndex();
            int documentTermMaxFrequency;
            int currentTermFrequency;
            for (File folderFile : currentArea.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);
            for (File selectedFile : folderTextFiles) {
                newDocumentName = selectedFile.getName();
                viewdocument = new Document(newDocumentName);
                if (activeCollection.containsDocument(viewdocument)) {
                    matchingFilenameDistinguished = 1;
                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguished + "")"");
                    viewdocument.setDocumentName(newDocumentName);
                    while (activeCollection.containsDocument(viewdocument)) {
                        matchingFilenameDistinguished++;
                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguished).toString()).toString();
                        viewdocument.setDocumentName(newDocumentName);
                    }
                }
                termHashMap = new HashMap<String, Integer>();
                try {
                    tokenized = new Scanner(new BufferedReader(new FileReader(selectedFile)));
                    tokenized.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                    while (tokenized.hasNext()) {
                        nextToken = tokenized.next().toLowerCase();
                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);
                    }
                    documentTermMaxFrequency = 0;
                    for (String term : termHashMap.keySet()) {
                        newTerm = new Term(term);
                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);
                        currentTermFrequency = termHashMap.get(term);
                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;
                        collectionIndex.addOccurence(newTerm, viewdocument, currentTermFrequency);
                    }
                    viewdocument.setTermMaxFrequency(documentTermMaxFrequency);
                    activeCollection.addDocument(viewdocument);
                    userHome = System.getProperty(""user.home"");
                    fileSeparator = System.getProperty(""file.separator"");
                    collectionActiveSourceFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);
                    collectionActiveSourceFile.createNewFile();
                    fileSource = new FileInputStream(selectedFile).getChannel();
                    collectionDestination = new FileOutputStream(collectionActiveSourceFile).getChannel();
                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());
                } catch (FileNotFoundException e) {
                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                    return;
                } catch (IOException e) {
                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (userOption == JOptionPane.NO_OPTION) {
                        activeCollection.removeDocument(viewdocument);
                        for (String term : termHashMap.keySet()) {
                            collectionIndex.removeAllOccurences(new Term(term), viewdocument);
                        }
                        folderTextFiles.add(selectedFile);
                    } else ignoredFiles.add(selectedFile);
                } finally {
                    try {
                        if (tokenized != null) tokenized.close();
                        if (fileSource != null) fileSource.close();
                        if (collectionDestination != null) collectionDestination.close();
                    } catch (IOException e) {
                        System.err.println(e.getMessage());
                    }
                }
            }
            if (ignoredFiles.size() > 0) {
                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);
                ignoredFilesDialog.setVisible(true);
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
",0,0,0,-1,"evt,selectedFolder,collectionCopyFile,newDocumentName,newDocument,distinguisherReplacer,matchingFilenameDistinguisher,nextToken,newTerm,userHome,fileSeparator,userOption,folderTextFiles,folderRejectedFiles,ignoredFiles,textFileFilter,tokenizer,fileSource,collectionDestination,termHashMap,collectionIndex,documentTermMaxFrequency,currentTermFrequency,folderFile,selectedFile","evt:0.0,selectedFolder:0.0,collectionCopyFile:0.0,newDocumentName:0.0,newDocument:0.0,distinguisherReplacer:0.0,matchingFilenameDistinguisher:0.0,nextToken:0.0,newTerm:0.0,userHome:0.0,fileSeparator:0.0,userOption:0.0,folderTextFiles:0.0,folderRejectedFiles:0.0,ignoredFiles:0.0,textFileFilter:0.0,tokenizer:0.0,fileSource:0.0,collectionDestination:0.0,termHashMap:0.0,collectionIndex:0.0,documentTermMaxFrequency:0.0,currentTermFrequency:0.0,folderFile:0.0,selectedFile:0.0,",5,29,"evt:evt,selectedFolder:currentArea,collectionCopyFile:collectionActiveSourceFile,newDocumentName:newDocumentName,newDocument:viewdocument,distinguisherReplacer:distinguisherReplacer,matchingFilenameDistinguisher:matchingFilenameDistinguished,nextToken:nextToken,newTerm:newTerm,userHome:userHome,fileSeparator:fileSeparator,userOption:userOption,folderTextFiles:folderTextFiles,folderRejectedFiles:folderRejectedFiles,ignoredFiles:ignoredFiles,textFileFilter:textFileFilter,tokenizer:tokenized,fileSource:fileSource,collectionDestination:collectionDestination,termHashMap:termHashMap,collectionIndex:collectionIndex,documentTermMaxFrequency:documentTermMaxFrequency,currentTermFrequency:currentTermFrequency,folderFile:folderFile,selectedFile:selectedFile,",Greedy,927,0.6167618076006571
238,"['458662', '7427550', '    public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(""Could not load configuration from "" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }\n', '    public void process(int branch, int level) {\n        Pattern p1 = Pattern.compile(""<DIV class=\\""treeline\\"">([^<]*)"");\n        Pattern p = Pattern.compile(""<a href=\\""javascript:checkBranch\\\\(([0-9]+), \'true\'\\\\)\\"">([^<]*)</a>"");\n        Matcher m, m1;\n        URL url;\n        HttpURLConnection conn;\n        try {\n            url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(""GET"");\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            conn.setRequestProperty(""Cookie"", sessionId);\n            BufferedReader i = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            boolean doAdd = false;\n            while ((line = i.readLine()) != null) {\n                m1 = p1.matcher(line);\n                m = p.matcher(line);\n                if (m1.find()) {\n                    if (m1.group(1).equals(createIdent(level))) {\n                        doAdd = true;\n                    } else {\n                        doAdd = false;\n                    }\n                }\n                if (m.find()) {\n                    if (doAdd) {\n                        trainee.add(new Node(Integer.parseInt(m.group(1)), m.group(2)));\n                        System.out.println(m.group(1) + "" - "" + m.group(2));\n                    }\n                }\n            }\n            url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");\n        } catch (Exception e2) {\n            e2.printStackTrace();\n        }\n    }\n']",75,"    public Configuration(URL file) {
        InputStream reader = null;
        try {
            load(reader = file.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + file, e);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",0,0,0,-1,"url,in","url:-1.0251998901367188e-05,in:-2.9802322387695312e-06,",2,7,"in:reader,url:file,",Greedy,108,0.04656441609064738
239,"['14677081', '15814327', '    protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {\n        Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);\n        while (resources.hasMoreElements()) {\n            URL url = resources.nextElement();\n            String path = url.getPath();\n            if (!visitedURIs.contains(path)) {\n                visitedURIs.add(path);\n                LOG.debug(""Loading file {} to retrieve list of packages, from url: {}"", META_INF_SERVICES, url);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                try {\n                    while (true) {\n                        String line = reader.readLine();\n                        if (line == null) {\n                            break;\n                        }\n                        line = line.trim();\n                        if (line.startsWith(""#"") || line.length() == 0) {\n                            continue;\n                        }\n                        tokenize(packages, line);\n                    }\n                } finally {\n                    IOHelper.close(reader, null, LOG);\n                }\n            }\n        }\n    }\n', '    private static void loadParentProperties(Properties props, ClassLoader cl) throws IOException {\n        String pName = props.getProperty(PARENT_PROPERTIES);\n        if (pName == null) {\n            return;\n        }\n        URL url = cl.getResource(pName);\n        if (url == null) {\n            return;\n        }\n        InputStream is = url.openStream();\n        if (is != null) {\n            Properties tmpProps = new Properties();\n            tmpProps.load(is);\n            is.close();\n            loadParentProperties(tmpProps, cl);\n            Iterator itr = tmpProps.entrySet().iterator();\n            while (itr.hasNext()) {\n                Map.Entry entry = (Map.Entry) itr.next();\n                if (!props.containsKey(entry.getKey())) {\n                    props.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n    }\n']",187,"    protected void findPackages(Set<String> ids, ClassLoader baseloader) throws IOException {
        Enumeration<URL> events = baseloader.getResources(META_INF_SERVICES);
        while (events.hasMoreElements()) {
            URL file = events.nextElement();
            String file = file.getPath();
            if (!visitedURIs.contains(file)) {
                visitedURIs.add(file);
                LOG.debug(""Loading file {} to retrieve list of packages, from url: {}"", META_INF_SERVICES, file);
                BufferedReader reader = new BufferedReader(new InputStreamReader(file.openStream()));
                try {
                    while (true) {
                        String Line = reader.readLine();
                        if (Line == null) {
                            break;
                        }
                        Line = Line.trim();
                        if (Line.startsWith(""#"") || Line.length() == 0) {
                            continue;
                        }
                        tokenize(ids, Line);
                    }
                } finally {
                    IOHelper.close(reader, null, LOG);
                }
            }
        }
    }
",0,0,0,-1,"packages,classLoader,resources,url,path,reader,line","packages:2.384185791015625e-07,classLoader:0.0,resources:7.152557373046875e-07,url:7.510185241699219e-06,path:2.2649765014648438e-06,reader:-9.775161743164062e-06,line:-1.239776611328125e-05,",6,21,"url:file,path:file,resources:events,packages:ids,classLoader:baseloader,reader:reader,line:Line,",Greedy,332,0.14319169521331787
240,"['19515832', '20409303', '    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        String text = new String();\n        byte[] sha1hash = new byte[20];\n        text = key + GUUI;\n        md.update(text.getBytes(), 0, text.length());\n        sha1hash = md.digest();\n        return (Helper.getBASE64(sha1hash));\n    }\n', '    private String md5(String input) {\n        MessageDigest md5Digest;\n        try {\n            md5Digest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new UserException(""could not get a md5 message digest"", e);\n        }\n        md5Digest.update(input.getBytes());\n        return new String(md5Digest.digest());\n    }\n']",90,"    private static String calcReturnKey(String path) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest od;
        od = MessageDigest.getInstance(""SHA-1"");
        String url = new String();
        byte[] alpha1block = new byte[20];
        url = path + GUUI;
        od.update(url.getBytes(), 0, url.length());
        alpha1block = od.digest();
        return (Helper.getBASE64(alpha1block));
    }
",1,1,1,-1,"key,md,text,sha1hash","key:0.024582982063293457,md:0.14444607496261597,text:0.010311603546142578,sha1hash:0.0,",4,13,"md:od,key:path,text:url,sha1hash:alpha1block,",Greedy,210,0.08550529479980469
241,"['22975613', '5936410', '    public ZipViewdataReader(ZipInputStream stream) throws IOException {\n        ZipEntry ze;\n        while ((ze = stream.getNextEntry()) != null) {\n            File temp = File.createTempFile(""spool."", "".synu"");\n            temp.deleteOnExit();\n            FileOutputStream fos = new FileOutputStream(temp);\n            byte[] buffer = new byte[1024 * 1024];\n            int length;\n            while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);\n            fos.close();\n            String name = ze.getName();\n            String[] parts = name.split(""[\\\\\\\\/]"");\n            this._file_hash.put(parts[parts.length - 1], temp);\n        }\n        stream.close();\n        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {\n            File f = this._file_hash.get(key);\n            FileReader fr = new FileReader(f);\n            this._viewdata = new BufferedReader(fr);\n            break;\n        }\n        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");\n    }\n', '    public void run() {\n        try {\n            String getter = null;\n            String str, targetHost = """", httpHeader = """";\n            int targetPort = 80;\n            while (true) {\n                str = fromBrowser.readLine();\n                if (str.startsWith(""GET"") || str.startsWith(""DESCRIBE"") || str.startsWith(""POST"") || str.startsWith(""HEAD"")) {\n                    getter = str;\n                }\n                if (str.startsWith(""Accept-Encoding: gzip"")) {\n                    str = ""Accept-Encoding: identity"";\n                }\n                httpHeader += str + ""\\r\\n"";\n                if (str.startsWith(""Host: "")) {\n                    targetHost = str.substring(6);\n                } else if (str.startsWith(""DESCRIBE"")) {\n                    targetPort = 554;\n                    targetHost = str.substring(str.indexOf(""//"") + 2);\n                    targetHost = targetHost.substring(0, targetHost.indexOf(""/""));\n                }\n                if (str.length() == 0) {\n                    break;\n                }\n            }\n            String target = targetHost;\n            if (targetHost.indexOf("":"") > -1) {\n                try {\n                    targetPort = Integer.parseInt(targetHost.substring(targetHost.indexOf("":"") + 1));\n                } catch (NumberFormatException nfe) {\n                }\n                target = targetHost.substring(0, targetHost.indexOf("":""));\n            }\n            logger.trace(""[PROXY] Connect to: "" + target + "" and port: "" + targetPort);\n            socketToWeb = new Socket(InetAddress.getByName(target), targetPort);\n            InputStream sockWebInputStream = socketToWeb.getInputStream();\n            toWeb = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socketToWeb.getOutputStream())), true);\n            toWeb.println(httpHeader);\n            toWeb.flush();\n            StringTokenizer st = new StringTokenizer(getter, "" "");\n            st.nextToken();\n            String askedResource = st.nextToken();\n            askedResource = askedResource.substring(askedResource.indexOf(targetHost) + targetHost.length());\n            logger.trace(""[PROXY] Asked resource: "" + askedResource);\n            String directoryResource = askedResource.substring(0, askedResource.lastIndexOf(""/""));\n            directoryResource = getWritableFileName(directoryResource);\n            String fileResource = askedResource.substring(askedResource.lastIndexOf(""/"") + 1);\n            fileResource = getWritableFileName(fileResource);\n            fileResource = fileResource + "".cached"";\n            String fileN = ""proxycache/"" + target + ""/"" + directoryResource;\n            File directoryResourceFile = new File(fileN);\n            if (writeCache) {\n                directoryResourceFile.mkdirs();\n            }\n            File cachedResource = new File(directoryResourceFile, fileResource);\n            byte[] buffer = new byte[8192];\n            boolean resourceExists = cachedResource.exists() || this.getClass().getResource(""/"" + fileN) != null;\n            boolean inMemory = writeCache && !resourceExists;\n            FileOutputStream fOUT = null;\n            if (resourceExists) {\n                logger.trace(""[PROXY] File is cached: "" + cachedResource.getAbsolutePath());\n                sockWebInputStream.close();\n                if (cachedResource.exists()) {\n                    sockWebInputStream = new FileInputStream(cachedResource);\n                } else {\n                    sockWebInputStream = this.getClass().getResourceAsStream(""/"" + fileN);\n                }\n            } else if (writeCache) {\n                logger.trace(""[PROXY] File is not cached / Writing in it: "" + cachedResource.getAbsolutePath());\n                fOUT = new FileOutputStream(cachedResource, false);\n            }\n            OutputStream baos = null;\n            if (inMemory) {\n                baos = new ByteArrayOutputStream();\n            } else {\n                baos = toBrowser;\n            }\n            long total_read = 0;\n            int bytes_read;\n            long CL = 10000000000L;\n            while (total_read < CL && (bytes_read = sockWebInputStream.read(buffer)) != -1) {\n                if (!resourceExists) {\n                    if (10000000000L == CL) {\n                        String s = new String(buffer, 0, bytes_read);\n                        int clPos = s.indexOf(""Content-Length: "");\n                        if (clPos > -1) {\n                            CL = Integer.parseInt(s.substring(clPos + 16, s.indexOf(""\\n"", clPos)).trim());\n                            logger.trace(""Found Content Length: "" + CL);\n                        }\n                    }\n                    if (bytes_read >= 7) {\n                        byte end[] = new byte[7];\n                        System.arraycopy(buffer, bytes_read - 7, end, 0, 7);\n                        if (new String(end).equals(""\\r\\n0\\r\\n\\r\\n"")) {\n                            System.out.println(""end of transfer chunked"");\n                            CL = -1;\n                        }\n                    }\n                    if (writeCache) {\n                        fOUT.write(buffer, 0, bytes_read);\n                    }\n                }\n                baos.write(buffer, 0, bytes_read);\n                total_read += bytes_read;\n            }\n            if (inMemory) {\n                baos.close();\n                toBrowser.write(((ByteArrayOutputStream) baos).toByteArray());\n            }\n            if (writeCache && fOUT != null) {\n                fOUT.close();\n            }\n            socketToWeb.close();\n            toBrowser.close();\n        } catch (IOException e) {\n        } finally {\n            try {\n                if (toWeb != null) {\n                    toWeb.close();\n                }\n                if (toBrowser != null) {\n                    toBrowser.close();\n                }\n                socket.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",236,"    public ZipViewdataReader(ZipInputStream url) throws IOException {
        ZipEntry ne;
        while ((ne = url.getNextEntry()) != null) {
            File fp = File.createTempFile(""spool."", "".synu"");
            fp.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(fp);
            byte[] read = new byte[1024 * 1024];
            int length;
            while ((length = url.read(read)) != -1) fos.write(read, 0, length);
            fos.close();
            String name = ne.getName();
            String[] parts = name.split(""[\\\\/]"");
            this._file_hash.put(parts[parts.length - 1], fp);
        }
        url.close();
        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {
            File fd = this._file_hash.get(key);
            FileReader fp = new FileReader(fd);
            this._viewdata = new BufferedReader(fp);
            break;
        }
        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");
    }
",1,1,0,1,"stream,ze,temp,fos,buffer,length,name,parts,key,f,fr,_viewdata","stream:1.6689300537109375e-05,ze:3.790855407714844e-05,temp:0.0005081892013549805,fos:0.0,buffer:3.820657730102539e-05,length:-3.212690353393555e-05,name:6.443262100219727e-05,parts:0.00010979175567626953,key:1.1205673217773438e-05,f:0.0003255009651184082,fr:0.00023752450942993164,_viewdata:0.0,",6,18,"temp:fp,f:fd,fr:fp,parts:parts,name:name,buffer:read,ze:ne,stream:url,",Greedy,394,0.18348409334818522
242,"['22237326', '19002156', '    public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException {\n        codebase = url;\n        InputStream in;\n        if (connect != null) {\n            in = connect.getInputStream();\n        } else {\n            in = url.openStream();\n        }\n        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        InputSource source = new InputSource(in);\n        Document document = builder.parse(source);\n        in.close();\n        QDataSet result = null;\n        NodeList kids = document.getChildNodes();\n        for (int i = 0; i < kids.getLength(); i++) {\n            Node n = kids.item(i);\n            if (n.getNodeName().equals(""netcdf"")) {\n                result = netcdf(n);\n            }\n        }\n        return result;\n    }\n', '    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {\n        File home = new File(System.getProperty(""user.home""));\n        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);\n        FileOutputStream fos = new FileOutputStream(jar_file);\n        JarOutputStream jos = new JarOutputStream(fos);\n        ZipEntry ze = new ZipEntry(""Exception"");\n        jos.putNextEntry(ze);\n        PrintStream ps = new PrintStream(jos);\n        throwable.printStackTrace(ps);\n        for (File file : files) if ((file != null) && file.exists()) {\n            ze = new ZipEntry(file.getName());\n            jos.putNextEntry(ze);\n            byte[] buffer = new byte[65536];\n            FileInputStream fis = new FileInputStream(file);\n            int len;\n            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);\n            fis.close();\n        }\n        jos.close();\n        return jar_file.getPath();\n    }\n']",161,"    public QDataSet doRead(URL file, URLConnection bind) throws IOException, ParserConfigurationException, SAXException {
        Codeline = file;
        InputStream in;
        if (bind != null) {
            in = bind.getInputStream();
        } else {
            in = file.openStream();
        }
        DocumentBuilder Builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputSource file = new InputSource(in);
        Document directory = Builder.parse(file);
        in.close();
        QDataSet result = null;
        NodeList kids = directory.getChildNodes();
        for (int i = 0; i < kids.getLength(); i++) {
            Node nu = kids.item(i);
            if (nu.getNodeName().equals(""netcdf"")) {
                result = netcdf(nu);
            }
        }
        return result;
    }
",0,0,1,1,"url,connect,codebase,in,builder,source,document,result,kids,i,n","url:3.2186508178710938e-06,connect:4.76837158203125e-07,codebase:0.0,in:-3.5762786865234375e-07,builder:2.384185791015625e-07,source:3.5762786865234375e-07,document:5.960464477539062e-07,result:-2.384185791015625e-07,kids:-7.152557373046875e-07,i:-2.2649765014648438e-06,n:2.384185791015625e-07,",7,16,"url:file,document:directory,connect:bind,source:file,builder:Builder,n:nu,codebase:Codeline,",Greedy,291,0.13205097516377767
243,"['5159006', '4265804', '    public InputStream start(String classname, String jarFileURI, String... params) throws IOException {\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n\n            @Override\n            public void run() {\n                terminate();\n            }\n        });\n        System.out.println(""loading jar file "" + jarFileURI + "" ..."");\n        URL url = new URL(jarFileURI);\n        InputStream is = url.openStream();\n        jarFile = QAUtil.createTempfile();\n        FileOutputStream fos = new FileOutputStream(jarFile);\n        byte[] buffer = new byte[4096];\n        int bytes_read;\n        while ((bytes_read = is.read(buffer)) != -1) {\n            fos.write(buffer, 0, bytes_read);\n        }\n        fos.close();\n        is.close();\n        String[] args = new String[params.length + 4];\n        args[0] = ""java"";\n        args[1] = ""-cp"";\n        args[2] = jarFile.getAbsolutePath();\n        args[3] = classname;\n        System.arraycopy(params, 0, args, 4, params.length);\n        StringBuilder sb = new StringBuilder();\n        for (String arg : args) {\n            sb.append(arg + "" "");\n        }\n        System.out.println(""execute "" + sb);\n        ProcessBuilder pb = new ProcessBuilder(args);\n        p = pb.start();\n        return p.getInputStream();\n    }\n', '    private static ArrayList<String> YahooSearch(String query) {\n        ArrayList<String> yahooSearchResults = new ArrayList<String>();\n        try {\n            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";\n            URL url = new URL(request);\n            System.out.println(""Host : "" + url.getHost());\n            url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            String finalContents = """";\n            while ((inputLine = reader.readLine()) != null) {\n                finalContents += ""\\n"" + inputLine;\n            }\n            Document doc = Jsoup.parse(finalContents);\n            Elements eles = doc.getElementsByTag(""url"");\n            for (Element ele : eles) {\n                yahooSearchResults.add(ele.text());\n                System.out.println(""YahooResult: "" + ele.text());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return yahooSearchResults;\n    }\n']",287,"    public InputStream start(String  className, String jarFilesURL, String... words) throws IOException {
        Runtime.getRuntime().addShutdownHook(new Thread() {

            @Override
            public void run() {
                terminate();
            }
        });
        System.out.println(""loading jar file "" + jarFilesURL + "" ..."");
        URL http = new URL(jarFilesURL);
        InputStream ios = http.openStream();
        jarfile = QAUtil.createTempfile();
        FileOutputStream fos = new FileOutputStream(jarfile);
        byte[] wave = new byte[4096];
        int bytes64reads;
        while ((bytes64reads = ios.read(wave)) != -1) {
            fos.write(wave, 0, bytes64reads);
        }
        fos.close();
        ios.close();
        String[] args = new String[words.length + 4];
        args[0] = ""java"";
        args[1] = ""-cp"";
        args[2] = jarfile.getAbsolutePath();
        args[3] =  className;
        System.arraycopy(words, 0, args, 4, words.length);
        StringBuilder abb = new StringBuilder();
        for (String arg : args) {
            abb.append(arg + "" "");
        }
        System.out.println(""execute "" + abb);
        ProcessBuilder pkg = new ProcessBuilder(args);
        pa = pkg.start();
        return pa.getInputStream();
    }
",0,0,0,-1,"classname,jarFileURI,params,url,is,jarFile,fos,buffer,bytes_read,sb,arg,pb,p","classname:0.0,jarFileURI:0.0,params:3.5762786865234375e-06,url:0.00013059377670288086,is:-2.9802322387695312e-05,jarFile:0.0,fos:0.0,buffer:-1.1205673217773438e-05,bytes_read:0.0,sb:3.337860107421875e-06,arg:-2.0265579223632812e-06,pb:1.1324882507324219e-05,p:5.841255187988281e-06,",11,30,"url:http,pb:pkg,p:pa,params:words,sb:abb,classname: className,jarFileURI:jarFilesURL,jarFile:jarfile,fos:fos,bytes_read:bytes64reads,arg:arg,buffer:wave,is:ios,",Greedy,501,0.23771960735321046
244,"['10839253', '15605423', '    public static String getWebContent(String remoteUrl, String encoding) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            java.net.URL url = new java.net.URL(remoteUrl);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));\n            String line;\n            while ((line = in.readLine()) != null) {\n                sb.append(line);\n            }\n            in.close();\n        } catch (Exception e) {\n            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);\n        }\n        return sb.toString();\n    }\n', '    private static void generateGIF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {\n        System.out.println(""ImageCropper.generateGIF begin"");\n        MapContext map_context = new MapContext(""test"", new Configuration());\n        try {\n            Map map = new Map(map_context, area_label, new Configuration());\n            map.setCoordSys(ProjectionCategories.default_coordinate_system);\n            map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));\n            String type = null;\n            RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));\n            map.addLayer(rlayer, true);\n            map.setBounds2DImage(bounds, true);\n            Dimension image_dim = null;\n            image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);\n            if (output_maximum_size > 0) {\n                double width_factor = image_dim.getWidth() / output_maximum_size;\n                double height_factor = image_dim.getHeight() / output_maximum_size;\n                double factor = Math.max(width_factor, height_factor);\n                if (factor > 1.0) {\n                    image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);\n                }\n            }\n            map.setImageDimension(image_dim);\n            map.scale();\n            image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());\n            Image image = null;\n            Graphics gr = null;\n            image = ImageCreator.getImage(image_dim);\n            gr = image.getGraphics();\n            try {\n                map.paint(gr);\n            } catch (Exception e) {\n                Debug.println(""map.paint error: "" + e.getMessage());\n            }\n            String gif_filename = """";\n            try {\n                gif_filename = formatPath(category, timeseries, output_filename);\n                new File(new_filename).mkdirs();\n                new GifEncoder(image, new FileOutputStream(gif_filename)).encode();\n            } catch (IOException e) {\n                Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());\n                throw new IOException(""GenerateGIF.IOException: "" + e);\n            }\n            PreparedStatement pstmt = null;\n            try {\n                String delete_raster = ""delete raster_layer where "" + ""label=\'"" + gif_name.trim() + ""\' and category=\'"" + category.trim() + ""\' and area_code=\' "" + area_code.trim() + ""\'"";\n                pstmt = con.prepareStatement(delete_raster);\n                boolean del = pstmt.execute();\n                pstmt.close();\n                String insert_raster = ""insert into RASTER_LAYER "" + ""values(RASTER_LAYER_ID.nextval, ?, ?, ?, "" + ""?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "" + ""SYSDATE, ?)"";\n                pstmt = con.prepareStatement(insert_raster);\n                pstmt.setString(1, gif_name);\n                pstmt.setString(2, category);\n                pstmt.setString(3, area_code);\n                pstmt.setString(4, topic_code);\n                if (time == null) {\n                    pstmt.setNull(5, java.sql.Types.DATE);\n                } else {\n                    pstmt.setDate(5, new java.sql.Date(time.getTimeInMillis()));\n                }\n                pstmt.setString(6, timeseries);\n                pstmt.setString(7, gif_filename);\n                pstmt.setNull(8, java.sql.Types.INTEGER);\n                pstmt.setNull(9, java.sql.Types.INTEGER);\n                pstmt.setDouble(10, raster_bounds.getX());\n                pstmt.setDouble(11, raster_bounds.getY());\n                pstmt.setDouble(12, raster_bounds.getWidth());\n                pstmt.setDouble(13, raster_bounds.getHeight());\n                pstmt.setString(14, note);\n                int sequence = 0;\n                if (gif_name.endsWith(""DP"")) {\n                    sequence = 1;\n                } else if (gif_name.endsWith(""DY"")) {\n                    sequence = 2;\n                } else if (gif_name.endsWith(""DA"")) {\n                    sequence = 3;\n                }\n                pstmt.setInt(15, sequence);\n                pstmt.executeUpdate();\n            } catch (SQLException e) {\n                Debug.println(""SQLException occurred e: "" + e.getMessage());\n                con.rollback();\n                throw new SQLException(""GenerateGIF.SQLException: "" + e);\n            } finally {\n                pstmt.close();\n            }\n        } catch (Exception e) {\n            Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());\n        }\n        System.out.println(""ImageCropper.generateGIF end"");\n    }\n']",119,"    public static String getWebContent(String RemoteURL, String Encoding) {
        StringBuffer bps = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(RemoteURL);
            BufferedReader rin = new BufferedReader(new InputStreamReader(url.openStream(), Encoding));
            String line;
            while ((line = rin.readLine()) != null) {
                bps.append(line);
            }
            rin.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return bps.toString();
    }
",0,0,0,-1,"remoteUrl,encoding,sb,url,in,line","remoteUrl:0.0,encoding:0.0,sb:1.3470649719238281e-05,url:-1.430511474609375e-05,in:1.1682510375976562e-05,line:3.218650817871094e-05,",4,10,"line:line,sb:bps,in:rin,remoteUrl:RemoteURL,encoding:Encoding,url:url,",Greedy,261,0.12388043403625489
245,"['6812441', '10447014', '    Bitmap downloadBitmap(String url) {\n        final int IO_BUFFER_SIZE = 4 * 1024;\n        final HttpClient client = (mode == Mode.NO_ASYNC_TASK) ? new DefaultHttpClient() : AndroidHttpClient.newInstance(""Android"");\n        final HttpGet getRequest = new HttpGet(url);\n        try {\n            HttpResponse response = client.execute(getRequest);\n            final int statusCode = response.getStatusLine().getStatusCode();\n            if (statusCode != HttpStatus.SC_OK) {\n                Log.w(""ImageDownloader"", ""Error "" + statusCode + "" while retrieving bitmap from "" + url);\n                return null;\n            }\n            final HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                InputStream inputStream = null;\n                try {\n                    inputStream = entity.getContent();\n                    return BitmapFactory.decodeStream(new FlushedInputStream(inputStream));\n                } finally {\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                    entity.consumeContent();\n                }\n            }\n        } catch (IOException e) {\n            getRequest.abort();\n            Log.w(LOG_TAG, ""I/O error while retrieving bitmap from "" + url, e);\n        } catch (IllegalStateException e) {\n            getRequest.abort();\n            Log.w(LOG_TAG, ""Incorrect URL: "" + url);\n        } catch (Exception e) {\n            getRequest.abort();\n            Log.w(LOG_TAG, ""Error while retrieving bitmap from "" + url, e);\n        } finally {\n            if ((client instanceof AndroidHttpClient)) {\n                ((AndroidHttpClient) client).close();\n            }\n        }\n        return null;\n    }\n', '    public void chmod(String remoteFile, String mode) {\n        String remotePath = connector.getRemoteDirectory();\n        remotePath += PATH_SEPARATOR + remoteFile;\n        FTPClient ftp = new FTPClient();\n        try {\n            String hostname = connector.getUrl().getHost();\n            ftp.connect(hostname);\n            log.info(""Connected to "" + hostname);\n            log.info(ftp.getReplyString());\n            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());\n            if (loggedIn) {\n                String parameters = ""chmod "" + mode + "" "" + remotePath;\n                ftp.site(parameters);\n                ftp.logout();\n            }\n            ftp.disconnect();\n        } catch (SocketException e) {\n            log.error(""File chmod failed with message: "" + e.getMessage());\n        } catch (IOException e) {\n            log.error(""File chmod failed with message: "" + e.getMessage());\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n']",291,"    Bitmap downloadBitmap(String request) {
        final int IO_BUFFERECSize = 4 * 1024;
        final HttpClient request = (mode == Mode.NO_ASYNC_TASK) ? new DefaultHttpClient() : AndroidHttpClient.newInstance(""Android"");
        final HttpGet pullResponse = new HttpGet(request);
        try {
            HttpResponse message = request.execute(pullResponse);
            final int  statusType = message.getStatusLine().getStatusCode();
            if ( statusType != HttpStatus.SC_OK) {
                Log.w(""ImageDownloader"", ""Error "" +  statusType + "" while retrieving bitmap from "" + request);
                return null;
            }
            final HttpEntity ity = message.getEntity();
            if (ity != null) {
                InputStream InputContent = null;
                try {
                    InputContent = ity.getContent();
                    return BitmapFactory.decodeStream(new FlushedInputStream(InputContent));
                } finally {
                    if (InputContent != null) {
                        InputContent.close();
                    }
                    ity.consumeContent();
                }
            }
        } catch (IOException e) {
            pullResponse.abort();
            Log.w(LOG_TAG, ""I/O error while retrieving bitmap from "" + request, e);
        } catch (IllegalStateException e) {
            pullResponse.abort();
            Log.w(LOG_TAG, ""Incorrect URL: "" + request);
        } catch (Exception e) {
            pullResponse.abort();
            Log.w(LOG_TAG, ""Error while retrieving bitmap from "" + request, e);
        } finally {
            if ((request instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) request).close();
            }
        }
        return null;
    }
",0,0,0,-1,"url,IO_BUFFER_SIZE,client,getRequest,response,statusCode,entity,inputStream","url:-1.895427703857422e-05,IO_BUFFER_SIZE:0.0,client:-3.844499588012695e-05,getRequest:0.0,response:1.2814998626708984e-05,statusCode:0.0,entity:6.377696990966797e-06,inputStream:0.0,",8,31,"response:message,entity:ity,IO_BUFFER_SIZE:IO_BUFFERECSize,getRequest:pullResponse,statusCode: statusType,inputStream:InputContent,url:request,client:request,",Greedy,376,0.18048734267552693
246,"['23115934', '18208567', '    private String fetch(URL url) {\n        StringBuilder body = new StringBuilder();\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                body.append(inputLine);\n            }\n            in.close();\n            return body.toString();\n        } catch (Exception e) {\n            debug(""Error: fetch: Exception reading URL: "" + e);\n        }\n        return null;\n    }\n', '    public void createPdf(final String eventURI) throws IOException, DocumentException {\n        createSections(eventURI);\n        even = false;\n        final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX));\n        final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));\n        writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);\n        writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX));\n        writer.setBoxSize(""trim"", Dimensions.getDimension(even, Dimension.TRIMBOX));\n        writer.setBoxSize(""bleed"", Dimensions.getDimension(even, Dimension.BLEEDBOX));\n        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();\n        writer.setPageEvent(event);\n        document.open();\n        final PdfContentByte content = writer.getDirectContent();\n        event.setTabs(Index.INFO.getTab());\n        importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());\n        importPages(document, content, MyProperties.getBefore(), event);\n        addAdPage(document, content);\n        PdfReader reader = new PdfReader(Presentations.INFO.getOutput());\n        String[] titles = { """", """" };\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            titles = index.getSubtitle(titles, i);\n            event.setTabs(titles[0].toLowerCase());\n            addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE);\n            addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        addAdPage(document, content);\n        importPages(document, content, MyProperties.getAfter(), event);\n        int total = writer.getPageNumber() - 1;\n        event.setNoMorePageNumbers();\n        event.setTabs(Schedules.INFO.getTab());\n        reader = new PdfReader(Schedules.INFO.getOutput());\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        document.close();\n        final File file = new File(MyProperties.getOutput());\n        final byte[] original = new byte[(int) file.length()];\n        final FileInputStream f = new FileInputStream(file);\n        f.read(original);\n        reader = new PdfReader(original);\n        final List<Integer> ranges = new ArrayList<Integer>();\n        for (int i = 1; i <= total; i++) {\n            ranges.add(i);\n            if (i == total / 2) {\n                for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {\n                    ranges.add(j);\n                }\n            }\n        }\n        reader.selectPages(ranges);\n        final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));\n        stamper.close();\n    }\n']",95,"    private String fetch(URL object) {
        StringBuilder file = new StringBuilder();
        try {
            BufferedReader is = new BufferedReader(new InputStreamReader(object.openStream()));
            String rawFile;
            while ((rawFile = is.readLine()) != null) {
                file.append(rawFile);
            }
            is.close();
            return file.toString();
        } catch (Exception e) {
            debug(""Error: fetch: Exception reading URL: "" + e);
        }
        return null;
    }
",0,0,0,-1,"url,body,in,inputLine","url:7.164478302001953e-05,body:-1.0371208190917969e-05,in:1.8596649169921875e-05,inputLine:0.0,",4,11,"url:object,in:is,inputLine:rawFile,body:file,",Greedy,172,0.08483210802078248
247,"['7990228', '615902', '    public static InputStream gzip(final InputStream inputStream) throws IOException {\n        Assert.notNull(inputStream, ""inputStream"");\n        InputOutputStream inputOutputStream = new InputOutputStream();\n        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);\n        IOUtils.copy(inputStream, gzipOutputStream);\n        gzipOutputStream.close();\n        return inputOutputStream.getInputStream();\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",63,"    public static InputStream gzip(final InputStream outputSteam) throws IOException {
        Assert.notNull(outputSteam, ""outputSteam"");
        InputOutputStream inputOutputStream = new InputOutputStream();
        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);
        IOUtils.copy(outputSteam, gzipOutputStream);
        gzipOutputStream.close();
        return inputOutputStream.getInputStream();
    }
",1,1,1,-1,"inputStream,inputOutputStream,gzipOutputStream","inputStream:0.0,inputOutputStream:0.0,gzipOutputStream:0.0,",1,4,"inputStream:outputSteam,inputOutputStream:inputOutputStream,gzipOutputStream:gzipOutputStream,",Greedy,142,0.07294960419336954
248,"['6795580', '19395766', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n', '    public static String encodePassword(String password) {\n        try {\n            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");\n            messageDiegest.update(password.getBytes(""UTF-8""));\n            return Base64.encodeToString(messageDiegest.digest(), false);\n        } catch (NoSuchAlgorithmException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        } catch (UnsupportedEncodingException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        }\n    }\n']",266,"    private void getRandomGUID(boolean active) {
        MessageDigest mp64 = null;
        StringBuffer sbValueBeforeMC512 = new StringBuffer();
        try {
            mp64 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long id = System.currentTimeMillis();
            long rar = 0;
            if (active) {
                rar = mySecureRand.nextLong();
            } else {
                rar = myRand.nextLong();
            }
            sbValueBeforeMC512.append(s_id);
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(id));
            sbValueBeforeMC512.append("":"");
            sbValueBeforeMC512.append(Long.toString(rar));
            valueBeforeMC3 = sbValueBeforeMC512.toString();
            mp64.update(valueBeforeMC3.getBytes());
            byte[] image = mp64.digest();
            StringBuffer bj = new StringBuffer();
            for (int ij = 0; ij < image.length; ++ij) {
                int mb = image[ij] & 0xFF;
                if (mb < 0x10) bj.append('0');
                bj.append(Integer.toHexString(mb));
            }
            valueAfterAMD5 = bj.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1,1,1,-1,"secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","secure:7.152557373046875e-07,md5:0.0,sbValueBeforeMD5:0.0,time:2.384185791015625e-07,rand:5.9604644775390625e-06,valueBeforeMD5:0.0,array:-4.410743713378906e-06,sb:1.537799835205078e-05,j:-4.029273986816406e-05,b:1.5854835510253906e-05,valueAfterMD5:0.0,",11,36,"b:mb,sb:bj,rand:rar,secure:active,time:id,md5:mp64,sbValueBeforeMD5:sbValueBeforeMC512,valueBeforeMD5:valueBeforeMC3,valueAfterMD5:valueAfterAMD5,array:image,j:ij,",Greedy,548,0.2490767240524292
249,"['17044784', '473797', '    private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException {\n        ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true);\n        if (list.size() == 0) {\n            if (!quiet) {\n                printNoDatabaseFilesFound(directory, db);\n            }\n            return;\n        }\n        zipFileName = FileUtils.normalize(zipFileName);\n        if (FileUtils.exists(zipFileName)) {\n            FileUtils.delete(zipFileName);\n        }\n        OutputStream fileOut = null;\n        try {\n            fileOut = FileUtils.openFileOutputStream(zipFileName, false);\n            ZipOutputStream zipOut = new ZipOutputStream(fileOut);\n            String base = """";\n            for (String fileName : list) {\n                if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) {\n                    base = FileUtils.getParent(fileName);\n                    break;\n                } else if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) {\n                    base = FileUtils.getParent(fileName);\n                    break;\n                }\n            }\n            for (String fileName : list) {\n                String f = FileUtils.getAbsolutePath(fileName);\n                if (!f.startsWith(base)) {\n                    Message.throwInternalError(f + "" does not start with "" + base);\n                }\n                if (FileUtils.isDirectory(fileName)) {\n                    continue;\n                }\n                f = f.substring(base.length());\n                f = BackupCommand.correctFileName(f);\n                ZipEntry entry = new ZipEntry(f);\n                zipOut.putNextEntry(entry);\n                InputStream in = null;\n                try {\n                    in = FileUtils.openFileInputStream(fileName);\n                    IOUtils.copyAndCloseInput(in, zipOut);\n                } catch (FileNotFoundException e) {\n                } finally {\n                    IOUtils.closeSilently(in);\n                }\n                zipOut.closeEntry();\n                if (!quiet) {\n                    out.println(""Processed: "" + fileName);\n                }\n            }\n            zipOut.closeEntry();\n            zipOut.close();\n        } catch (IOException e) {\n            throw Message.convertIOException(e, zipFileName);\n        } finally {\n            IOUtils.closeSilently(fileOut);\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",385,"    private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException {
        ArrayList<String> source = FileLister.getDatabaseFiles(directory, db, true);
        if (source.size() == 0) {
            if (!quiet) {
                printNoDatabaseFilesFound(directory, db);
            }
            return;
        }
        zipFileName = FileUtils.normalize(zipFileName);
        if (FileUtils.exists(zipFileName)) {
            FileUtils.delete(zipFileName);
        }
        OutputStream fileOut = null;
        try {
            fileOut = FileUtils.openFileOutputStream(zipFileName, false);
            ZipOutputStream zipOut = new ZipOutputStream(fileOut);
            String base = """";
            for (String fileName : source) {
                if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                } else if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                }
            }
            for (String fileName : source) {
                String f = FileUtils.getAbsolutePath(fileName);
                if (!f.startsWith(base)) {
                    Message.throwInternalError(f + "" does not start with "" + base);
                }
                if (FileUtils.isDirectory(fileName)) {
                    continue;
                }
                f = f.substring(base.length());
                f = BackupCommand.correctFileName(f);
                ZipEntry entry = new ZipEntry(f);
                zipOut.putNextEntry(entry);
                InputStream in = null;
                try {
                    in = FileUtils.openFileInputStream(fileName);
                    IOUtils.copyAndCloseInput(in, zipOut);
                } catch (FileNotFoundException e) {
                } finally {
                    IOUtils.closeSilently(in);
                }
                zipOut.closeEntry();
                if (!quiet) {
                    out.println(""Processed: "" + fileName);
                }
            }
            zipOut.closeEntry();
            zipOut.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(fileOut);
        }
    }
",1,1,1,-1,"zipFileName,directory,db,quiet,list,fileOut,zipOut,fileName,base,f,entry,in","zipFileName:0.0,directory:5.9604644775390625e-06,db:2.1457672119140625e-06,quiet:-6.079673767089844e-06,list:1.6927719116210938e-05,fileOut:0.0,zipOut:0.0,fileName:0.0,base:4.76837158203125e-07,f:-5.841255187988281e-06,entry:4.291534423828125e-06,in:4.410743713378906e-06,",1,4,"list:source,directory:directory,in:in,entry:entry,db:db,base:base,zipFileName:zipFileName,fileOut:fileOut,zipOut:zipOut,fileName:fileName,f:f,quiet:quiet,",Greedy,724,0.3373172918955485
250,"['11608926', '21462052', '    void ProcessRequests(DataInputStream in, PrintStream out) {\n        String sQuery;\n        while (true) {\n            try {\n                sQuery = in.readLine();\n                if (sQuery == null) return;\n                if (sQuery.startsWith(""select"")) {\n                    ProcessQuery(sQuery, out);\n                } else if (sQuery.startsWith(""insert"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""update"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""commit"")) {\n                    con.commit();\n                } else if (sQuery.startsWith(""autocommit true"")) {\n                    con.setAutoCommit(true);\n                } else if (sQuery.startsWith(""autocommit false"")) {\n                    con.setAutoCommit(false);\n                } else if (sQuery.startsWith(""delete"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""rollback"")) {\n                    con.rollback();\n                } else {\n                    out.println(""What ?"");\n                }\n                out.println("">"");\n            } catch (SQLException ex) {\n                out.println(""\\n*** SQLException caught ***\\n"");\n                while (ex != null) {\n                    out.println(""SQLState: "" + ex.getSQLState());\n                    out.println(""Message:  "" + ex.getMessage());\n                    out.println(""Vendor:   "" + ex.getErrorCode());\n                    ex = ex.getNextException();\n                    out.println("""");\n                }\n            } catch (java.lang.Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n', '    public int deleteRecord(String uuid) throws SQLException, CatalogIndexException {\n        Connection con = null;\n        boolean autoCommit = true;\n        PreparedStatement st = null;\n        ResultSet rs = null;\n        int nRows = 0;\n        boolean cancelTask = false;\n        StringSet fids = new StringSet();\n        if (cswRemoteRepository.isActive()) {\n            StringSet uuids = new StringSet();\n            uuids.add(uuid);\n            fids = queryFileIdentifiers(uuids);\n        }\n        try {\n            con = returnConnection().getJdbcConnection();\n            autoCommit = con.getAutoCommit();\n            con.setAutoCommit(false);\n            String sSql = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>\'\'"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            rs = st.executeQuery();\n            if (rs.next()) {\n                cancelTask = rs.getInt(1) > 0;\n            }\n            closeStatement(st);\n            sSql = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            nRows = st.executeUpdate();\n            closeStatement(st);\n            sSql = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";\n            logExpression(sSql);\n            st = con.prepareStatement(sSql);\n            st.setString(1, uuid);\n            st.executeUpdate();\n            CollectionDao colDao = new CollectionDao(this.getRequestContext());\n            if (colDao.getUseCollections()) {\n                closeStatement(st);\n                sSql = ""DELETE FROM "" + colDao.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";\n                logExpression(sSql);\n                st = con.prepareStatement(sSql);\n                st.setString(1, uuid);\n                st.executeUpdate();\n            }\n            con.commit();\n        } catch (SQLException ex) {\n            if (con != null) {\n                con.rollback();\n            }\n            throw ex;\n        } finally {\n            closeResultSet(rs);\n            closeStatement(st);\n            if (con != null) {\n                con.setAutoCommit(autoCommit);\n            }\n        }\n        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();\n        if (indexAdapter != null) {\n            indexAdapter.deleteDocument(uuid);\n            if (cswRemoteRepository.isActive()) {\n                if (fids.size() > 0) cswRemoteRepository.onRecordsDeleted(fids);\n            }\n        }\n        if (cancelTask && getRequestContext() != null) {\n            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), uuid);\n        }\n        return nRows;\n    }\n']",354,"    void ProcessRequests(DataInputStream url, PrintStream off) {
        String pQ;
        while (true) {
            try {
                pQ = url.readLine();
                if (pQ == null) return;
                if (pQ.startsWith(""select"")) {
                    ProcessQuery(pQ, off);
                } else if (pQ.startsWith(""insert"")) {
                    Statement playmt = con.createStatement();
                    playmt.executeUpdate(pQ);
                } else if (pQ.startsWith(""update"")) {
                    Statement playmt = con.createStatement();
                    playmt.executeUpdate(pQ);
                } else if (pQ.startsWith(""commit"")) {
                    con.commit();
                } else if (pQ.startsWith(""autocommit true"")) {
                    con.setAutoCommit(true);
                } else if (pQ.startsWith(""autocommit false"")) {
                    con.setAutoCommit(false);
                } else if (pQ.startsWith(""delete"")) {
                    Statement playmt = con.createStatement();
                    playmt.executeUpdate(pQ);
                } else if (pQ.startsWith(""rollback"")) {
                    con.rollback();
                } else {
                    off.println(""What ?"");
                }
                off.println("">"");
            } catch (SQLException hex) {
                off.println(""
*** SQLException caught ***
"");
                while (hex != null) {
                    off.println(""SQLState: "" + hex.getSQLState());
                    off.println(""Message:  "" + hex.getMessage());
                    off.println(""Vendor:   "" + hex.getErrorCode());
                    hex = hex.getNextException();
                    off.println("""");
                }
            } catch (java.lang.Exception hex) {
                hex.printStackTrace();
            }
        }
    }
",1,1,1,-1,"in,out,sQuery,stmt,ex","in:2.9802322387695312e-06,out:4.410743713378906e-06,sQuery:0.0,stmt:0.0,ex:1.430511474609375e-06,",5,41,"out:off,in:url,ex:hex,sQuery:pQ,stmt:playmt,",Greedy,398,0.16347007751464843
251,"['13510171', '7767320', '        private String readCreditsHtml(IApplication app) {\n            final URL url = app.getResources().getCreditsURL();\n            StringBuffer buf = new StringBuffer(2048);\n            if (url != null) {\n                try {\n                    BufferedReader rdr = new BufferedReader(new InputStreamReader(url.openStream()));\n                    try {\n                        String line = null;\n                        while ((line = rdr.readLine()) != null) {\n                            String internationalizedLine = Utilities.replaceI18NSpanLine(line, s_stringMgr);\n                            buf.append(internationalizedLine);\n                        }\n                    } finally {\n                        rdr.close();\n                    }\n                } catch (IOException ex) {\n                    String errorMsg = s_stringMgr.getString(""AboutBoxDialog.error.creditsfile"");\n                    s_log.error(errorMsg, ex);\n                    buf.append(errorMsg + "": "" + ex.toString());\n                }\n            } else {\n                String errorMsg = s_stringMgr.getString(""AboutBoxDialog.error.creditsfileurl"");\n                s_log.error(errorMsg);\n                buf.append(errorMsg);\n            }\n            return buf.toString();\n        }\n', '    private String executeUpload(String urlStr, String specification, String filename, String sessionHandle) {\n        StringBuffer result = new StringBuffer();\n        try {\n            URL url = new URL(urlStr);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setRequestMethod(""POST"");\n            connection.setRequestProperty(""YAWLSessionHandle"", sessionHandle);\n            connection.setRequestProperty(""filename"", filename);\n            connection.setRequestProperty(""Content-Type"", ""text/xml"");\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            out.print(specification);\n            out.flush();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                result.append(inputLine);\n            }\n            in.close();\n            out.close();\n            connection.disconnect();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            InterfaceBWebsideController.logContactError(e, _backEndURIStr);\n        }\n        String msg = result.toString();\n        return stripOuterElement(msg);\n    }\n']",193,"        private String readCreditsHtml(IApplication db) {
            final URL connection = db.getResources().getCreditsURL();
            StringBuffer uf = new StringBuffer(2048);
            if (connection != null) {
                try {
                    BufferedReader RDn = new BufferedReader(new InputStreamReader(connection.openStream()));
                    try {
                        String row = null;
                        while ((row = RDn.readLine()) != null) {
                            String internationalizeCode = Utilities.replaceI18NSpanLine(row, s_stringMgr);
                            uf.append(internationalizeCode);
                        }
                    } finally {
                        RDn.close();
                    }
                } catch (IOException ex) {
                    String rorMessage = s_stringMgr.getString(""AboutBoxDialog.error.creditsfile"");
                    s_log.error(rorMessage, ex);
                    uf.append(rorMessage + "": "" + ex.toString());
                }
            } else {
                String rorMessage = s_stringMgr.getString(""AboutBoxDialog.error.creditsfileurl"");
                s_log.error(rorMessage);
                uf.append(rorMessage);
            }
            return uf.toString();
        }
",1,1,1,-1,"app,url,buf,rdr,line,internationalizedLine,errorMsg","app:6.556510925292969e-06,url:1.0251998901367188e-05,buf:-6.9141387939453125e-06,rdr:0.0,line:-1.7762184143066406e-05,internationalizedLine:0.0,errorMsg:0.0,",7,24,"url:connection,app:db,rdr:RDn,internationalizedLine:internationalizeCode,errorMsg:rorMessage,buf:uf,line:row,",Greedy,335,0.15618727604548135
252,"['14807299', '23413733', '    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {\n        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");\n        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));\n        String title = r.getTitle();\n        List<Metadata> met = r.getMetadata();\n        InputStream content = r.getContent().read();\n        StringWriter theString = new StringWriter();\n        IOUtils.copy(content, theString);\n        assertNotNull(theString.toString(), ""Content should not be null"");\n        assertNotNull(title, ""The title should be set"");\n        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");\n    }\n', '    public static void copyFile(File from, File to) throws Exception {\n        if (!from.exists()) return;\n        FileInputStream in = new FileInputStream(from);\n        FileOutputStream out = new FileOutputStream(to);\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int bytes_read;\n        while (true) {\n            bytes_read = in.read(buffer);\n            if (bytes_read == -1) break;\n            out.write(buffer, 0, bytes_read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n']",141,"    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
",1,1,1,-1,"man,r,title,met,content,theString","man:8.106231689453125e-06,r:7.152557373046875e-07,title:2.86102294921875e-06,met:1.3113021850585938e-06,content:-2.1457672119140625e-06,theString:0.0,",0,0,"man:man,title:title,met:met,r:r,theString:theString,content:content,",Greedy,270,0.11760720411936441
253,"['7990228', '10895680', '    public static InputStream gzip(final InputStream inputStream) throws IOException {\n        Assert.notNull(inputStream, ""inputStream"");\n        InputOutputStream inputOutputStream = new InputOutputStream();\n        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);\n        IOUtils.copy(inputStream, gzipOutputStream);\n        gzipOutputStream.close();\n        return inputOutputStream.getInputStream();\n    }\n', '    private DefaultMutableTreeNode parseTree() {\n        try {\n            DefaultMutableTreeNode root;\n            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");\n            InputStream is = url.openStream();\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setIgnoringComments(true);\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            Document document = parser.parse(is);\n            NodeList elements = document.getElementsByTagName(""help"");\n            Element element = (Element) elements.item(0);\n            root = createTreeContent(element);\n            is.close();\n            return root;\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n            return null;\n        } catch (ParserConfigurationException e1) {\n            System.out.println(e1.getMessage());\n            return null;\n        } catch (org.xml.sax.SAXException e2) {\n            System.out.println(e2.getMessage());\n            return null;\n        }\n    }\n']",63,"    public static InputStream gzip(final InputStream inputStream) throws IOException {
        Assert.notNull(inputStream, ""inputStream"");
        InputOutputStream inputOutputStream = new InputOutputStream();
        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);
        IOUtils.copy(inputStream, gzipOutputStream);
        gzipOutputStream.close();
        return inputOutputStream.getInputStream();
    }
",0,0,0,-1,"inputStream,inputOutputStream,gzipOutputStream","inputStream:0.0,inputOutputStream:0.0,gzipOutputStream:0.0,",0,0,"inputStream:inputStream,inputOutputStream:inputOutputStream,gzipOutputStream:gzipOutputStream,",Greedy,142,0.06482909917831421
254,"['3463983', '23190614', '        @Override\n        public long getLastModified(final Resource arg0) {\n            try {\n                final ServletContext context = CContext.getInstance().getContext();\n                final URL url = context.getResource(arg0.getName());\n                final URLConnection conn = url.openConnection();\n                final long lm = conn.getLastModified();\n                try {\n                    conn.getInputStream().close();\n                } catch (final Exception ignore) {\n                    ;\n                }\n                return lm;\n            } catch (final Exception e) {\n                return 0;\n            }\n        }\n', '    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {\n        PageContext pageContext = null;\n        HttpSession session = null;\n        ServletContext application = null;\n        ServletConfig config = null;\n        JspWriter out = null;\n        Object page = this;\n        JspWriter _jspx_out = null;\n        PageContext _jspx_page_context = null;\n        try {\n            response.setContentType(""text/html;charset=UTF-8"");\n            pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true);\n            _jspx_page_context = pageContext;\n            application = pageContext.getServletContext();\n            config = pageContext.getServletConfig();\n            session = pageContext.getSession();\n            out = pageContext.getOut();\n            _jspx_out = out;\n            _jspx_resourceInjector = (org.apache.jasper.runtime.ResourceInjector) application.getAttribute(""com.sun.appserv.jsp.resource.injector"");\n            out.write(""\\n"");\n            out.write(""\\n"");\n            out.write(""\\n"");\n            String username = ""test"";\n            String password = ""test"";\n            int providerId = 1;\n            if (request.getParameter(""providerId"") != null) providerId = Integer.parseInt(request.getParameter(""providerId""));\n            String thisPageContextAddress = ""http://localhost:8080/"" + request.getContextPath();\n            String thisPageServingAddress = thisPageContextAddress + ""/index.jsp"";\n            String token = """";\n            String token_timeout = (String) request.getParameter(""token_timeout"");\n            String referer = request.getHeader(""Referer"");\n            if (token_timeout != null && token_timeout.equals(""true"")) {\n                System.out.println(""token timeout for referer"" + referer);\n                if (referer != null) {\n                    if (request.getSession().getServletContext().getAttribute(""token_timeout_processing_lock"") == null) {\n                        request.getSession().getServletContext().setAttribute(""token_timeout_processing_lock"", true);\n                        byte[] buff = null;\n                        BufferedInputStream bis = null;\n                        URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);\n                        URLConnection urlc = url.openConnection();\n                        int length = urlc.getContentLength();\n                        InputStream in = urlc.getInputStream();\n                        buff = new byte[length];\n                        int bytesRead = 0;\n                        while (bytesRead < length) {\n                            bytesRead += in.read(buff, bytesRead, in.available());\n                        }\n                        token = new String(buff);\n                        token = token.replaceAll(""[\\\\r\\\\f]"", """");\n                        token = token.trim();\n                        request.getSession().getServletContext().setAttribute(""token"", token);\n                        out.println(token);\n                        request.getSession().getServletContext().removeAttribute(""token_timeout_processing_lock"");\n                    } else out.println(""token_timeout_processing_lock"");\n                }\n            } else {\n                if (request.getSession().getServletContext().getAttribute(""token"") == null || request.getSession().getServletContext().getAttribute(""token"").equals("""")) {\n                    byte[] buff = null;\n                    BufferedInputStream bis = null;\n                    URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);\n                    URLConnection urlc = url.openConnection();\n                    int length = urlc.getContentLength();\n                    InputStream in = urlc.getInputStream();\n                    buff = new byte[length];\n                    int bytesRead = 0;\n                    while (bytesRead < length) {\n                        bytesRead += in.read(buff, bytesRead, in.available());\n                    }\n                    token = new String(buff);\n                    token = token.replaceAll(""[\\\\r\\\\f]"", """");\n                    token = token.trim();\n                    request.getSession().getServletContext().setAttribute(""token"", token);\n                }\n                out.write(""<html>\\n"");\n                out.write(""  <head>\\n"");\n                out.write(""    <title>AJAX test </title>\\n"");\n                out.write(""    <script type=\\""text/javascript\\"" src=\\""OpenLayers-2.8/OpenLayers.js\\""></script>\\n"");\n                out.write(""    <script type=\\""text/javascript\\"">\\n"");\n                out.write(""\\n"");\n                out.write(""        function init(){\\n"");\n                out.write(""\\n"");\n                out.write(""            var token = \\"""");\n                out.print(request.getSession().getServletContext().getAttribute(""token""));\n                out.write(""\\"";\\n"");\n                out.write(""\\n"");\n                out.write(""            var options = {\\n"");\n                out.write(""                            maxExtent: new OpenLayers.Bounds(-600, -300, 0, 400),\\n"");\n                out.write(""                            maxResolution: 4.77730, minRezolution: 78271.517, numZoomLevels: 15, units: \'m\'\\n"");\n                out.write(""                          }\\n"");\n                out.write(""\\n"");\n                out.write(""\\n"");\n                out.write(""            var map = new OpenLayers.Map(\'map\', options);\\n"");\n                out.write(""            var layer = new OpenLayers.Layer.TMS(\\""TMS\\"", \\""/WebGISTileServer/TMSServletProxy/\\"" + token + \\""/7/\\"",\\n"");\n                out.write(""                                                { layername: \'TMS\', type: \'png\' });\\n"");\n                out.write(""            map.addLayer(layer);\\n"");\n                out.write(""            map.addControl(new OpenLayers.Control.MousePosition());\\n"");\n                out.write(""            map.setCenter(new OpenLayers.LonLat(-300, 120), 4);\\n"");\n                out.write(""        }\\n"");\n                out.write(""    </script>\\n"");\n                out.write(""  </head>\\n"");\n                out.write(""  <body onload=\\""init()\\"">\\n"");\n                out.write(""      <H1>TeleAtlas map with TMS</H1>\\n"");\n                out.write(""      <div id=\\""map\\"" style=\\""width:100%; height:90%\\""></div>\\n"");\n                out.write(""  </body>\\n"");\n                out.write(""</html>"");\n            }\n        } catch (Throwable t) {\n            if (!(t instanceof SkipPageException)) {\n                out = _jspx_out;\n                if (out != null && out.getBufferSize() != 0) out.clearBuffer();\n                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n            }\n        } finally {\n            _jspxFactory.releasePageContext(_jspx_page_context);\n        }\n    }\n']",100,"        @Override
        public long getLastModified(final Resource args0) {
            try {
                final ServletContext path = CContext.getInstance().getContext();
                final URL gl = path.getResource(args0.getName());
                final URLConnection cli = gl.openConnection();
                final long lM = cli.getLastModified();
                try {
                    cli.getInputStream().close();
                } catch (final Exception ignore) {
                    ;
                }
                return lM;
            } catch (final Exception e) {
                return 0;
            }
        }
",0,0,0,-1,"arg0,context,url,conn,lm","arg0:0.0,context:7.152557373046875e-07,url:1.430511474609375e-05,conn:2.384185791015625e-07,lm:0.0,",5,11,"url:gl,context:path,conn:cli,arg0:args0,lm:lM,",Greedy,182,0.09424849351247151
255,"['6150059', '9307757', '    private void nioBuild() {\n        try {\n            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);\n            final FileChannel out = new FileOutputStream(dest).getChannel();\n            for (File part : parts) {\n                setState(part.getName(), BUILDING);\n                FileChannel in = new FileInputStream(part).getChannel();\n                while (in.read(buffer) > 0) {\n                    buffer.flip();\n                    written += out.write(buffer);\n                    buffer.clear();\n                }\n                in.close();\n            }\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            clearTables(stmt);\n            stmt.executeQuery(""select setval(\'objects_objectid_seq\', 1000)"");\n            stmt.executeQuery(""select setval(\'instructions_instructionid_seq\', 1)"");\n            stmt.executeQuery(""select setval(\'transactions_transactionid_seq\', 1)"");\n            stmt.executeQuery(""select setval(\'verbtransactions_verbid_seq\', 1)"");\n            stmt.executeUpdate(""update SystemProperties set value = \'Minimal Data\' where name = \'DB Data Version\'"");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n']",129,"    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File source : parts) {
                setState(source.getName(), BUILDING);
                FileChannel in = new FileInputStream(source).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"buffer,out,part,in,written","buffer:-2.5033950805664062e-06,out:3.2186508178710938e-06,part:5.364418029785156e-06,in:-2.384185791015625e-07,written:7.152557373046875e-07,",1,3,"part:source,out:out,written:written,in:in,buffer:buffer,",Greedy,240,0.10463066498438517
256,"['21682040', '20215222', '    public void extractFrinika() throws Exception {\n        FileInputStream fis = new FileInputStream(frinikaFile);\n        progressBar.setIndeterminate(true);\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry ze = zis.getNextEntry();\n        while (ze != null) {\n            showMessage(""Extracting: "" + ze.getName());\n            File file = new File(installDirName + ""/"" + ze.getName());\n            if (ze.isDirectory()) file.mkdir(); else {\n                FileOutputStream fos = new FileOutputStream(file);\n                byte[] b = new byte[BUFSIZE];\n                int c;\n                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);\n                fos.close();\n            }\n            ze = zis.getNextEntry();\n        }\n    }\n', '    public static void main(String[] args) {\n        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";\n        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";\n        ShapeFileReader reader = new ShapeFileReader();\n        reader.readFileAndInitialize(in);\n        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());\n        for (Feature ft : reader.getFeatureSet()) {\n            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();\n            for (int i = 0; i < ml.getNumGeometries(); i++) {\n                LineString ls = (LineString) ml.getGeometryN(i);\n                Point start = ls.getStartPoint();\n                checkIt(start, quad);\n                Point end = ls.getEndPoint();\n                checkIt(end, quad);\n            }\n        }\n        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);\n    }\n']",164,"    public void extractFrinika() throws Exception {
        FileInputStream Fiss = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream  zins = new ZipInputStream(Fiss);
        ZipEntry ze =  zins.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File http = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) http.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(http);
                byte[] pb = new byte[BUFSIZE];
                int id;
                while ((id =  zins.read(pb)) != -1) fos.write(pb, 0, id);
                fos.close();
            }
            ze =  zins.getNextEntry();
        }
    }
",1,1,0,1,"fis,zis,ze,file,fos,b,c","fis:0.0,zis:0.0,ze:-1.430511474609375e-06,file:5.125999450683594e-06,fos:0.0,b:1.3113021850585938e-06,c:3.5762786865234375e-07,",5,15,"file:http,b:pb,c:id,fis:Fiss,zis: zins,",Greedy,225,0.09672443469365438
257,"['7495800', '19972831', '    public static void copyFile(File fromFile, File toFile) throws IOException {\n        FileReader from = new FileReader(fromFile);\n        FileWriter to = new FileWriter(toFile);\n        char[] buffer = new char[4096];\n        int bytes_read;\n        while ((bytes_read = from.read(buffer)) != -1) {\n            to.write(buffer, 0, bytes_read);\n        }\n        to.flush();\n        to.close();\n        from.close();\n    }\n', '    public static int[] simplex_reverse_sort(int[] vertices) {\n        if (vertices.length <= 1) return vertices;\n        for (int j = vertices.length - 1; j > 0; j--) {\n            for (int i = 0; i < j; i++) {\n                if (vertices[i + 1] > vertices[i]) {\n                    int dummy = vertices[i];\n                    vertices[i] = vertices[i + 1];\n                    vertices[i + 1] = dummy;\n                }\n            }\n        }\n        return vertices;\n    }\n']",94,"    public static void copyFile(File orFile, File targetDir) throws IOException {
        FileReader get = new FileReader(orFile);
        FileWriter http = new FileWriter(targetDir);
        char[] timeout = new char[4096];
        int bytes_read;
        while ((bytes_read = get.read(timeout)) != -1) {
            http.write(timeout, 0, bytes_read);
        }
        http.flush();
        http.close();
        get.close();
    }
",0,0,0,-1,"fromFile,toFile,from,to,buffer,bytes_read","fromFile:0.0,toFile:0.0,from:0.07916927337646484,to:0.3974377512931824,buffer:0.11978703737258911,bytes_read:0.0,",5,14,"to:http,buffer:timeout,from:get,fromFile:orFile,toFile:targetDir,bytes_read:bytes_read,",Greedy,216,0.10412208636601766
258,"['15171197', '22724697', '    private static Pattern getBotPattern() {\n        StringBuilder sb = new StringBuilder();\n        try {\n            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                InputStream in = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    line = line.trim();\n                    if (!line.startsWith(""#"") && !line.equals("""")) {\n                        if (sb.length() > 0) sb.append(""|"");\n                        sb.append(""("").append(line).append("")"");\n                    }\n                }\n                in.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(""Error reading bot user-agent configuration"", e);\n        }\n        return Pattern.compile(sb.toString());\n    }\n', '    private Bitmap getBitmap(String imageUrl) {\n        URL url;\n        InputStream input = null;\n        try {\n            url = new URL(address + imageUrl);\n            input = url.openStream();\n            return BitmapFactory.decodeStream(input);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (input != null) {\n                try {\n                    input.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n']",209,"    private static Pattern getBotPattern() {
        StringBuilder ssl = new StringBuilder();
        try {
            Enumeration<URL> urlses = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);
            while (urlses.hasMoreElements()) {
                URL ssl = urlses.nextElement();
                InputStream in = ssl.openStream();
                BufferedReader read = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String LINE;
                while ((LINE = read.readLine()) != null) {
                    LINE = LINE.trim();
                    if (!LINE.startsWith(""#"") && !LINE.equals("""")) {
                        if (ssl.length() > 0) ssl.append(""|"");
                        ssl.append(""("").append(LINE).append("")"");
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return Pattern.compile(ssl.toString());
    }
",0,0,0,-1,"sb,urls,url,in,reader,line","sb:-3.606081008911133e-05,urls:0.0,url:0.00014722347259521484,in:-3.516674041748047e-06,reader:-0.0003459453582763672,line:-0.00012093782424926758,",5,19,"url:ssl,urls:urlses,in:in,sb:ssl,line:LINE,reader:read,",Greedy,318,0.1325439453125
259,"['20369681', '746544', '    @Override\n    public InputStream getInputStream() throws IOException {\n        if (dfos == null) {\n            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();\n            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);\n            try {\n                IOUtils.copy(is, dfos);\n            } finally {\n                dfos.close();\n            }\n        }\n        return dfos.getDeferredInputStream();\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",80,"    @Override
    public InputStream getInputStream() throws IOException {
        if (fs == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            fs = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, fs);
            } finally {
                fs.close();
            }
        }
        return fs.getDeferredInputStream();
    }
",1,1,1,-1,"deferredOutputStreamThreshold,dfos","deferredOutputStreamThreshold:0.0,dfos:0.0,",1,5,"deferredOutputStreamThreshold:deferredOutputStreamThreshold,dfos:fs,",Greedy,90,0.047166911760965984
260,"['5317659', '15136801', '    public String hash(String clearPassword) {\n        if (osalt == 0) return null;\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA1"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new AssertionError(""Can\'t find the SHA1 algorithm in the java.security package"");\n        }\n        String saltString = String.valueOf(osalt);\n        md.update(saltString.getBytes());\n        md.update(clearPassword.getBytes());\n        byte[] digestBytes = md.digest();\n        StringBuffer digestSB = new StringBuffer();\n        for (int i = 0; i < digestBytes.length; i++) {\n            int lowNibble = digestBytes[i] & 0x0f;\n            int highNibble = (digestBytes[i] >> 4) & 0x0f;\n            digestSB.append(Integer.toHexString(highNibble));\n            digestSB.append(Integer.toHexString(lowNibble));\n        }\n        String digestStr = digestSB.toString();\n        return digestStr;\n    }\n', '    public static String readUrl(String urlString) {\n        try {\n            java.net.URL url = new java.net.URL(urlString);\n            BufferedReader br = null;\n            if (url != null) {\n                br = new BufferedReader(new InputStreamReader(url.openStream()));\n            }\n            StringBuffer fileString = new StringBuffer();\n            while (true) {\n                String line = br.readLine();\n                if (line == null) {\n                    break;\n                }\n                fileString.append(line + ""\\n"");\n            }\n            return fileString.toString();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n']",182,"    public String hash(String  clearpassword) {
        if (osalt == 0) return null;
        MessageDigest alg = null;
        try {
            alg = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(""Can't find the SHA1 algorithm in the java.security package"");
        }
        String ssaultBuffer = String.valueOf(osalt);
        alg.update(ssaultBuffer.getBytes());
        alg.update( clearpassword.getBytes());
        byte[] digestbytes = alg.digest();
        StringBuffer  digestBuffer = new StringBuffer();
        for (int i = 0; i < digestbytes.length; i++) {
            int lowCNNaffle = digestbytes[i] & 0x0f;
            int highNumeric = (digestbytes[i] >> 4) & 0x0f;
             digestBuffer.append(Integer.toHexString(highNumeric));
             digestBuffer.append(Integer.toHexString(lowCNNaffle));
        }
        String digestStr =  digestBuffer.toString();
        return digestStr;
    }
",0,0,0,-1,"clearPassword,md,saltString,digestBytes,digestSB,i,lowNibble,highNibble,digestStr","clearPassword:0.0,md:6.079673767089844e-06,saltString:0.0,digestBytes:0.0,digestSB:0.0,i:-1.6689300537109375e-06,lowNibble:0.0,highNibble:0.0,digestStr:0.0,",7,21,"md:alg,clearPassword: clearpassword,saltString:ssaultBuffer,digestBytes:digestbytes,digestSB: digestBuffer,lowNibble:lowCNNaffle,highNibble:highNumeric,digestStr:digestStr,i:i,",Greedy,426,0.1780099829037984
261,"['18348099', '10415388', '    public static void copyFileToFile(File srcFile, File dstFile, boolean deleteOriginals, boolean forceDelete) throws FileNotFoundException, IOException {\n        if (srcFile.exists() && srcFile.isFile()) {\n            boolean copied = false;\n            if (deleteOriginals && (!forceDelete || srcFile.canWrite())) {\n                copied = srcFile.renameTo(dstFile);\n            }\n            if (!copied) {\n                Throwable thrownException = null;\n                File parent = dstFile.getParentFile();\n                if (!parent.exists() && !parent.mkdirs()) {\n                    throw new IOException(""Failed to create the directory "" + parent + ""."");\n                }\n                FileInputStream in = new FileInputStream(srcFile);\n                try {\n                    FileChannel srcChannel = in.getChannel();\n                    try {\n                        FileOutputStream out = new FileOutputStream(dstFile);\n                        try {\n                            FileChannel dstChannel = out.getChannel();\n                            try {\n                                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                            } catch (Throwable t) {\n                                thrownException = t;\n                            } finally {\n                                dstChannel.close();\n                            }\n                        } catch (Throwable t) {\n                            if (thrownException == null) {\n                                thrownException = t;\n                            }\n                        } finally {\n                            out.close();\n                        }\n                    } catch (Throwable t) {\n                        if (thrownException == null) {\n                            thrownException = t;\n                        }\n                    } finally {\n                        srcChannel.close();\n                    }\n                } catch (Throwable t) {\n                    if (thrownException == null) {\n                        thrownException = t;\n                    }\n                } finally {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        if (thrownException == null) {\n                            thrownException = e;\n                        }\n                    }\n                }\n                if (deleteOriginals && (srcFile.canWrite() || forceDelete)) {\n                    if (!srcFile.delete()) {\n                        throw new IOException(""Failed to delete "" + srcFile + ""."");\n                    }\n                }\n                if (thrownException != null) {\n                    if (thrownException instanceof IOException) {\n                        throw (IOException) thrownException;\n                    } else if (thrownException instanceof Error) {\n                        throw (Error) thrownException;\n                    } else {\n                        throw (RuntimeException) thrownException;\n                    }\n                }\n            }\n        }\n    }\n', '    public static void copyFileNIO(String src, String dst) {\n        try {\n            FileChannel srcChannel = new FileInputStream(src).getChannel();\n            FileChannel dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",401,"    public static void copyFileToFile(File srcFile, File dstFile, boolean deleteOriginals, boolean forceDelete) throws FileNotFoundException, IOException {
        if (srcFile.exists() && srcFile.isFile()) {
            boolean copied = false;
            if (deleteOriginals && (!forceDelete || srcFile.canWrite())) {
                copied = srcFile.renameTo(dstFile);
            }
            if (!copied) {
                Throwable thrownException = null;
                File connection = dstFile.getParentFile();
                if (!connection.exists() && !connection.mkdirs()) {
                    throw new IOException(""Failed to create the directory "" + connection + ""."");
                }
                FileInputStream url = new FileInputStream(srcFile);
                try {
                    FileChannel srcChannel = url.getChannel();
                    try {
                        FileOutputStream out = new FileOutputStream(dstFile);
                        try {
                            FileChannel dstChannel = out.getChannel();
                            try {
                                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                            } catch (Throwable t) {
                                thrownException = t;
                            } finally {
                                dstChannel.close();
                            }
                        } catch (Throwable t) {
                            if (thrownException == null) {
                                thrownException = t;
                            }
                        } finally {
                            out.close();
                        }
                    } catch (Throwable t) {
                        if (thrownException == null) {
                            thrownException = t;
                        }
                    } finally {
                        srcChannel.close();
                    }
                } catch (Throwable t) {
                    if (thrownException == null) {
                        thrownException = t;
                    }
                } finally {
                    try {
                        url.close();
                    } catch (IOException e) {
                        if (thrownException == null) {
                            thrownException = e;
                        }
                    }
                }
                if (deleteOriginals && (srcFile.canWrite() || forceDelete)) {
                    if (!srcFile.delete()) {
                        throw new IOException(""Failed to delete "" + srcFile + ""."");
                    }
                }
                if (thrownException != null) {
                    if (thrownException instanceof IOException) {
                        throw (IOException) thrownException;
                    } else if (thrownException instanceof Error) {
                        throw (Error) thrownException;
                    } else {
                        throw (RuntimeException) thrownException;
                    }
                }
            }
        }
    }
",1,1,1,-1,"srcFile,dstFile,deleteOriginals,forceDelete,copied,thrownException,parent,in,srcChannel,out,dstChannel","srcFile:0.0,dstFile:0.0,deleteOriginals:0.0,forceDelete:0.0,copied:0.0,thrownException:0.0,parent:3.5762786865234375e-06,in:-8.344650268554688e-07,srcChannel:0.0,out:1.0728836059570312e-06,dstChannel:0.0,",2,7,"parent:connection,out:out,srcFile:srcFile,dstFile:dstFile,deleteOriginals:deleteOriginals,forceDelete:forceDelete,copied:copied,thrownException:thrownException,srcChannel:srcChannel,dstChannel:dstChannel,in:url,",Greedy,731,0.3339225729306539
262,"['22991420', '19434890', '    public void notifyIterationEnds(final IterationEndsEvent event) {\n        log.info(""moving files..."");\n        File source = new File(""deqsim.log"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");\n            }\n        }\n        int parallelCnt = 0;\n        source = new File(""deqsim.log."" + parallelCnt);\n        while (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");\n            }\n            parallelCnt++;\n            source = new File(""deqsim.log."" + parallelCnt);\n        }\n        source = new File(""loads_out.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));\n            try {\n                IOUtils.copyFile(source, destination);\n            } catch (FileNotFoundException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            } catch (IOException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            }\n            destination = new File(""loads_in.txt"");\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");\n            }\n        }\n        source = new File(""linkprocs.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");\n            }\n        }\n    }\n', '    public RequestLogger() {\n        Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {\n\n            public int getScheduleRate() {\n                return 0;\n            }\n\n            public void handle() {\n                if (requestCounter == 0) {\n                    requestCounter++;\n                    return;\n                }\n                requestCounter++;\n                Iterator it = loggerTimeouts.keySet().iterator();\n                while (it.hasNext()) {\n                    String host = (String) it.next();\n                    String timeout = (String) loggerTimeouts.get(host);\n                    int timeoutVal = Integer.parseInt(timeout);\n                    if (timeoutVal > 0) {\n                        timeoutVal /= 10;\n                    }\n                    int timeoutMod = (requestCounter % timeoutVal);\n                    if (timeoutMod == 0) {\n                        Object loggerFile = loggerFiles.get(host);\n                        Object loggerFilenameObject = loggerFilenames.get(host);\n                        Object loggerDestObject = loggerDests.get(host);\n                        Object loggerCompressObject = loggerCompresses.get(host);\n                        Object loggerDayObject = loggerDays.get(host);\n                        Object loggerArchiveObject = loggerArchives.get(host);\n                        Object loggerDeleteObject = loggerDeletes.get(host);\n                        boolean rotateCompress = false;\n                        boolean rotateDelete = false;\n                        String rotateDest = null;\n                        String logFile = null;\n                        String rotateArchive = null;\n                        int rotateDays = 0;\n                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {\n                            rotateCompress = true;\n                        }\n                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {\n                            rotateDelete = true;\n                        }\n                        if (loggerDestObject != null) {\n                            rotateDest = (String) loggerDestObject;\n                        }\n                        if (loggerFilenameObject != null) {\n                            logFile = (String) loggerFilenameObject;\n                        }\n                        if (loggerArchiveObject != null) {\n                            rotateArchive = (String) loggerArchiveObject;\n                        }\n                        if (loggerDayObject != null) {\n                            rotateDays = Integer.parseInt((String) loggerDayObject);\n                        }\n                        FileChannel srcChannel, destChannel;\n                        String destOutFile = logFile + ""."" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(""/"") != -1) {\n                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(""/"") != -1) {\n                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte buf[] = new byte[1024];\n                                int len;\n                                while ((len = in.read(buf)) > 0) {\n                                    out.write(buf, 0, len);\n                                }\n                                in.close();\n                                out.finish();\n                                out.close();\n                                Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFileCompressed + ""\'"");\n                                buf = null;\n                                out = null;\n                                in = null;\n                            } catch (Exception e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\': "" + e);\n                            }\n                        } else {\n                            try {\n                                srcChannel = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to read log file \'"" + logFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                destChannel.close();\n                                destChannel = null;\n                                srcChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to copy data from file \'"" + logFile + ""\' to \'"" + destOutFile + ""\' for file rotation: "" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\'"");\n                        }\n                        if (rotateDelete) {\n                            try {\n                                ((PrintStream) loggerFile).close();\n                            } catch (Exception e) {\n                            }\n                            (new File(logFile)).delete();\n                            loggerFiles.remove(host);\n                            addLogger(host, logFile);\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + "".zip"";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + ""/"" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + ""/"" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            fileList = null;\n                            format1 = null;\n                            archive = null;\n                        }\n                    }\n                }\n                it = null;\n            }\n\n            public String identString() {\n                return ""Request Log Rotator"";\n            }\n        });\n    }\n']",340,"    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info(""moving files..."");
        File source = new File(""deqsim.log"");
        if (source.exists()) {
            File  destinated = new File(Controler.getIterationFilename(""deqsim.log""));
            if (!IOUtils.renameFile(source,  destinated)) {
                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");
            }
        }
        int parallelCnt = 0;
        source = new File(""deqsim.log."" + parallelCnt);
        while (source.exists()) {
            File  destinated = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));
            if (!IOUtils.renameFile(source,  destinated)) {
                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");
            }
            parallelCnt++;
            source = new File(""deqsim.log."" + parallelCnt);
        }
        source = new File(""loads_out.txt"");
        if (source.exists()) {
            File  destinated = new File(Controler.getIterationFilename(""loads_out.txt""));
            try {
                IOUtils.copyFile(source,  destinated);
            } catch (FileNotFoundException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            } catch (IOException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            }
             destinated = new File(""loads_in.txt"");
            if (!IOUtils.renameFile(source,  destinated)) {
                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");
            }
        }
        source = new File(""linkprocs.txt"");
        if (source.exists()) {
            File  destinated = new File(Controler.getIterationFilename(""linkprocs.txt""));
            if (!IOUtils.renameFile(source,  destinated)) {
                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");
            }
        }
    }
",1,1,1,-1,"event,source,destination,parallelCnt","event:8.404254913330078e-06,source:-1.0132789611816406e-05,destination:0.0,parallelCnt:0.0,",1,10,"event:event,destination: destinated,parallelCnt:parallelCnt,source:source,",Greedy,333,0.155269722143809
263,"['19002156', '1274215', '    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {\n        File home = new File(System.getProperty(""user.home""));\n        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);\n        FileOutputStream fos = new FileOutputStream(jar_file);\n        JarOutputStream jos = new JarOutputStream(fos);\n        ZipEntry ze = new ZipEntry(""Exception"");\n        jos.putNextEntry(ze);\n        PrintStream ps = new PrintStream(jos);\n        throwable.printStackTrace(ps);\n        for (File file : files) if ((file != null) && file.exists()) {\n            ze = new ZipEntry(file.getName());\n            jos.putNextEntry(ze);\n            byte[] buffer = new byte[65536];\n            FileInputStream fis = new FileInputStream(file);\n            int len;\n            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);\n            fis.close();\n        }\n        jos.close();\n        return jar_file.getPath();\n    }\n', '    public static void main(String[] args) {\n        try {\n            if (args.length < 2) {\n                System.err.println(""usage: test [src] [dest]"");\n                return;\n            }\n            FileInputStream in = new FileInputStream(args[0]);\n            FileOutputStream out = new FileOutputStream(args[1]);\n            FileChannel src = in.getChannel();\n            FileChannel channel = out.getChannel();\n            long pos = 0, len = src.size(), ret;\n            while (len > 0) {\n                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;\n                len -= ret;\n                pos += ret;\n            }\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",212,"    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {
        File home = new File(System.getProperty(""user.home""));
        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);
        FileOutputStream fos = new FileOutputStream(jar_file);
        JarOutputStream jos = new JarOutputStream(fos);
        ZipEntry ze = new ZipEntry(""Exception"");
        jos.putNextEntry(ze);
        PrintStream ps = new PrintStream(jos);
        throwable.printStackTrace(ps);
        for (File url : files) if ((url != null) && url.exists()) {
            ze = new ZipEntry(url.getName());
            jos.putNextEntry(ze);
            byte[] buffer = new byte[65536];
            FileInputStream fis = new FileInputStream(url);
            int len;
            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);
            fis.close();
        }
        jos.close();
        return jar_file.getPath();
    }
",1,1,0,1,"throwable,files,home,jar_file,fos,jos,ze,ps,file,buffer,fis,len","throwable:0.0,files:-2.3424625396728516e-05,home:0.0001290440559387207,jar_file:0.0,fos:0.0,jos:0.0,ze:-5.4836273193359375e-06,ps:2.4080276489257812e-05,file:0.00012886524200439453,buffer:4.190206527709961e-05,fis:0.0,len:8.58306884765625e-06,",1,5,"home:home,file:url,",Greedy,142,0.06629936695098877
264,"['9830267', '15416858', '            public void run() {\n                final SimpleMessageListener listener = new SimpleMessageListener() {\n\n                    public final boolean accept(final String from, final String recipient) {\n                        return true;\n                    }\n\n                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {\n                        System.out.println(""FROM: "" + from);\n                        System.out.println(""TO: "" + recipient);\n                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));\n                        final File file = new File(tmpDir, recipient);\n                        final FileWriter fw = new FileWriter(file);\n                        try {\n                            IOUtils.copy(data, fw);\n                        } finally {\n                            fw.close();\n                        }\n                    }\n                };\n                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));\n                smtpServer.start();\n                System.out.println(""Started SMTP Server"");\n            }\n', '    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {\n        monitor.subTask(""download "" + url.toString());\n        InputStream in = null;\n        FileOutputStream out = null;\n        URLConnection conn = null;\n        try {\n            conn = url.openConnection();\n            Writer writer = null;\n            try {\n                Date date = new Date(conn.getLastModified());\n                writer = new FileWriter(timestamp);\n                writer.write(this.FORMAT.format(date));\n            } catch (IOException e) {\n                timestamp.delete();\n            } finally {\n                IOUtils.closeQuietly(writer);\n            }\n            in = conn.getInputStream();\n            out = new FileOutputStream(archive);\n            IOUtils.copy(in, out);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n']",176,"            public void run() {
                final SimpleMessageListener listener = new SimpleMessageListener() {

                    public final boolean accept(final String from, final String recipient) {
                        return true;
                    }

                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
                };
                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));
                smtpServer.start();
                System.out.println(""Started SMTP Server"");
            }
",1,1,1,-1,"listener,from,recipient,data,tmpDir,file,fw,smtpServer","listener:0.0,from:-2.384185791015625e-07,recipient:0.0,data:-4.76837158203125e-07,tmpDir:0.0,file:-5.960464477539062e-07,fw:-3.5762786865234375e-07,smtpServer:0.0,",0,0,"listener:listener,recipient:recipient,tmpDir:tmpDir,smtpServer:smtpServer,from:from,fw:fw,data:data,file:file,",Greedy,335,0.14679368336995444
265,"['115129', '7169985', '    public static void bubbleSort(String[] a) {\n        Collator myCollator = Collator.getInstance();\n        boolean switched = true;\n        for (int pass = 0; pass < a.length - 1 && switched; pass++) {\n            switched = false;\n            for (int i = 0; i < a.length - pass - 1; i++) {\n                if (myCollator.compare(a[i], a[i + 1]) > 0) {\n                    switched = true;\n                    String temp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = temp;\n                }\n            }\n        }\n    }\n', '    public static String connRemote(JSONObject jsonObject, String OPCode, List<NameValuePair> nameValuePair) {\n        String retSrc = """";\n        try {\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpPost httpPost = new HttpPost(AZConstants.validateURL);\n            HttpParams httpParams = new BasicHttpParams();\n            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));\n            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));\n            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));\n            httpPost.setParams(httpParams);\n            HttpResponse response = httpClient.execute(httpPost);\n            retSrc = EntityUtils.toString(response.getEntity());\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n        return retSrc;\n    }\n']",130,"    public static void bubbleSort(String[] wa) {
        Collator yourcollate = Collator.getInstance();
        boolean witches = true;
        for (int j = 0; j < wa.length - 1 && witches; j++) {
            witches = false;
            for (int qi = 0; qi < wa.length - j - 1; qi++) {
                if (yourcollate.compare(wa[qi], wa[qi + 1]) > 0) {
                    witches = true;
                    String txt = wa[qi];
                    wa[qi] = wa[qi + 1];
                    wa[qi + 1] = txt;
                }
            }
        }
    }
",0,0,0,-1,"a,myCollator,pass,switched,i,temp","a:-0.00025767087936401367,myCollator:0.0,pass:-3.8564205169677734e-05,switched:0.0,i:-1.3709068298339844e-06,temp:5.811452865600586e-05,",6,30,"temp:txt,myCollator:yourcollate,switched:witches,i:qi,pass:j,a:wa,",Greedy,302,0.1241371194521586
266,"['3023702', '2021569', '    static HashSet<ScriptEngineFactory> lookup(ClassLoader loader, String name) {\n        HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();\n        try {\n            Enumeration<URL> urls = loader.getResources(name);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if ((line = trim(line)) != null) {\n                        try {\n                            Class<ScriptEngineFactory> clazz = (Class<ScriptEngineFactory>) Class.forName(line, true, loader);\n                            ScriptEngineFactory factory = clazz.newInstance();\n                            factories.add(factory);\n                        } catch (java.lang.UnsupportedClassVersionError error) {\n                            if (DEBUG) {\n                                System.err.println(line + "": version mismatch - ignore"");\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new ScriptException(ex);\n        } finally {\n            return factories;\n        }\n    }\n', '    public boolean getFile(String local, String remote) throws IOException {\n        boolean result = false;\n        GridFTP ftp = new GridFTP();\n        ftp.setDefaultPort(port);\n        System.out.println(this + "".getFile "" + remote);\n        try {\n            ftp.connect(host);\n            ftp.login(username, password);\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                System.err.println(""FTP server refused connection."");\n                return false;\n            }\n            ftp.get(local, remote);\n            ftp.logout();\n            result = true;\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        System.out.println(this + "".getFile return "" + result);\n        return result;\n    }\n']",211,"    static HashSet<ScriptEngineFactory> lookup(ClassLoader log, String plugin) {
        HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();
        try {
            Enumeration<URL> urles = log.getResources(plugin);
            while (urles.hasMoreElements()) {
                URL file = urles.nextElement();
                BufferedReader file = new BufferedReader(new InputStreamReader(file.openStream(), ""UTF-8""));
                String write;
                while ((write = file.readLine()) != null) {
                    if ((write = trim(write)) != null) {
                        try {
                            Class<ScriptEngineFactory> Clactory = (Class<ScriptEngineFactory>) Class.forName(write, true, log);
                            ScriptEngineFactory factory = Clactory.newInstance();
                            factories.add(factory);
                        } catch (java.lang.UnsupportedClassVersionError error) {
                            if (DEBUG) {
                                System.err.println(write + "": version mismatch - ignore"");
                            }
                        }
                    }
                }
            }
        } catch (IOException ex) {
            throw new ScriptException(ex);
        } finally {
            return factories;
        }
    }
",0,0,0,-1,"loader,name,factories,urls,url,reader,line,clazz,factory","loader:0.014568626880645752,name:-0.0011640191078186035,factories:0.0,urls:0.0,url:-0.005313575267791748,reader:-0.027825653553009033,line:-0.02639073133468628,clazz:0.0,factory:0.0,",7,20,"loader:log,factories:factories,urls:urles,clazz:Clactory,factory:factory,name:plugin,url:file,line:write,reader:file,",Greedy,357,0.17489462693532307
267,"['9830267', '11750117', '            public void run() {\n                final SimpleMessageListener listener = new SimpleMessageListener() {\n\n                    public final boolean accept(final String from, final String recipient) {\n                        return true;\n                    }\n\n                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {\n                        System.out.println(""FROM: "" + from);\n                        System.out.println(""TO: "" + recipient);\n                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));\n                        final File file = new File(tmpDir, recipient);\n                        final FileWriter fw = new FileWriter(file);\n                        try {\n                            IOUtils.copy(data, fw);\n                        } finally {\n                            fw.close();\n                        }\n                    }\n                };\n                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));\n                smtpServer.start();\n                System.out.println(""Started SMTP Server"");\n            }\n', '    public static LinkedList<String> read(URL url) throws IOException {\n        LinkedList<String> data = new LinkedList<String>();\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String input = """";\n        while (true) {\n            input = br.readLine();\n            if (input == null) break;\n            data.add(input);\n        }\n        br.close();\n        return data;\n    }\n']",176,"            public void run() {
                final SimpleMessageListener listeners = new SimpleMessageListener() {

                    public final boolean accept(final String from, final String recipient) {
                        return true;
                    }

                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpFolder = new File(System.getProperty(""java.io.tmpdir""));
                        final File sf = new File(tmpFolder, recipient);
                        final FileWriter wx = new FileWriter(sf);
                        try {
                            IOUtils.copy(data, wx);
                        } finally {
                            wx.close();
                        }
                    }
                };
                final SMTPServer SMtpService = new SMTPServer(new SimpleMessageListenerAdapter(listeners));
                SMtpService.start();
                System.out.println(""Started SMTP Server"");
            }
",0,0,0,-1,"listener,from,recipient,data,tmpDir,file,fw,smtpServer","listener:0.0,from:-1.1920928955078125e-07,recipient:0.0,data:-5.960464477539062e-07,tmpDir:0.0,file:-7.152557373046875e-07,fw:-3.5762786865234375e-07,smtpServer:0.0,",5,11,"listener:listeners,recipient:recipient,tmpDir:tmpFolder,smtpServer:SMtpService,from:from,fw:wx,data:data,file:sf,",Greedy,335,0.1504817485809326
268,"['11677415', '14710191', '    @Test\n    public void behaveTest() {\n        InputStream is = this.getClass().getResourceAsStream(""safetyCaseTest.mdf"");\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n        } catch (IOException e) {\n            throw new RuntimeException(""Unable to read mdf"", e);\n        }\n        TrafficSimulationEngine engine = new TrafficSimulationEngine();\n        TrafficModelDefinition def = MDFReader.read(out.toByteArray());\n        engine.init(def);\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(0);\n        linkSegments.put(0, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        engine.setFrameProperties(frameProperties);\n        RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next();\n        CompositeDriver driver = (CompositeDriver) vehicle.getDriver();\n        driver.drive(0.1f);\n        SafetyCase safety = new SafetyCase(driver);\n        RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f);\n        HandRange turnRange = ccRange.getTurnRange();\n        HandRange probeRange = new HandRange();\n        probeRange.remove(Hand.Left);\n        assertTrue(turnRange.equals(probeRange));\n        assertTrue(ccRange.getPriority() == Priority.SafetyCase);\n    }\n', '    public void testImageDataField() {\n        PropertySet propertySet = fetchPropertySet();\n        try {\n            ImageDataField dataField = propertySet.getDataField(PropertySetTestStruct.TESTBLOCK_IMAGE, ImageDataField.class);\n            URL url = getClass().getResource(""JFire_Test.gif"");\n            if (url == null) return;\n            InputStream in = url.openStream();\n            try {\n                dataField.loadStream(in, ""JFire_Test.gif"", ""image/gif"");\n            } finally {\n                in.close();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(""Setting image of ImageDataField failed"", e);\n        }\n        try {\n            propertySet.deflate();\n            getPropertyManager().storePropertySet(propertySet, true, FETCH_GROUPS, FETCH_DEPTH);\n        } catch (Exception e) {\n            throw new RuntimeException(""Storing PropertySet with ImageDataField failed"", e);\n        }\n    }\n']",280,"    @Test
    public void behaveTest() {
        InputStream is = this.getClass().getResourceAsStream(""safetyCaseTest.mdf"");
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
        } catch (IOException e) {
            throw new RuntimeException(""Unable to read mdf"", e);
        }
        TrafficSimulationEngine engine = new TrafficSimulationEngine();
        TrafficModelDefinition def = MDFReader.read(out.toByteArray());
        engine.init(def);
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(0);
        linkSegments.put(0, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        engine.setFrameProperties(frameProperties);
        RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next();
        CompositeDriver driver = (CompositeDriver) vehicle.getDriver();
        driver.drive(0.1f);
        SafetyCase safety = new SafetyCase(driver);
        RectangleCCRange mcrange = (RectangleCCRange) safety.behave(0.1f);
        HandRange turnRange = mcrange.getTurnRange();
        HandRange probeRange = new HandRange();
        probeRange.remove(Hand.Left);
        assertTrue(turnRange.equals(probeRange));
        assertTrue(mcrange.getPriority() == Priority.SafetyCase);
    }
",0,0,0,-1,"is,out,engine,def,linkSegments,segments,frameProperties,vehicle,driver,safety,ccRange,turnRange,probeRange","is:-1.1920928955078125e-05,out:-9.5367431640625e-07,engine:2.467632293701172e-05,def:2.6226043701171875e-06,linkSegments:0.0,segments:0.0,frameProperties:0.0,vehicle:0.0,driver:-2.5033950805664062e-06,safety:2.5033950805664062e-06,ccRange:0.0,turnRange:0.0,probeRange:0.0,",1,3,"engine:engine,def:def,safety:safety,linkSegments:linkSegments,segments:segments,frameProperties:frameProperties,vehicle:vehicle,ccRange:mcrange,turnRange:turnRange,probeRange:probeRange,out:out,driver:driver,is:is,",Greedy,566,0.26100831826527915
269,"['5162897', '22958786', '    public void testDefaultHeadersRedirect() throws Exception {\n        String host = ""localhost"";\n        int port = this.localServer.getServicePort();\n        this.localServer.register(""*"", new BasicRedirectService(host, port));\n        DefaultHttpClient client = new DefaultHttpClient();\n        HttpContext context = new BasicHttpContext();\n        List<Header> defaultHeaders = new ArrayList<Header>(1);\n        defaultHeaders.add(new BasicHeader(HTTP.USER_AGENT, ""my-test-client""));\n        client.getParams().setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaders);\n        HttpGet httpget = new HttpGet(""/oldlocation/"");\n        HttpResponse response = client.execute(getServerHttp(), httpget, context);\n        HttpEntity e = response.getEntity();\n        if (e != null) {\n            e.consumeContent();\n        }\n        HttpRequest reqWrapper = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);\n        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n        assertEquals(""/newlocation/"", reqWrapper.getRequestLine().getUri());\n        Header header = reqWrapper.getFirstHeader(HTTP.USER_AGENT);\n        assertEquals(""my-test-client"", header.getValue());\n    }\n', '    public JGroundStationBrowser(Frame parent) {\n        this.parent = parent;\n        initComponents();\n        topTreeNode = new DefaultMutableTreeNode(""Ground Stations"");\n        treeModel = new DefaultTreeModel(topTreeNode);\n        groundStationTree.setModel(treeModel);\n        String currentSecondaryNodeName = null;\n        DefaultMutableTreeNode currentSecondaryNode = null;\n        try {\n            BufferedReader gsReader = null;\n            if (new File(groundStationDB).exists()) {\n                File gsFile = new File(groundStationDB);\n                FileReader gsFileReader = new FileReader(gsFile);\n                gsReader = new BufferedReader(gsFileReader);\n            } else {\n                URL url = new URL(""http://www.gano.name/shawn/JSatTrak/"" + groundStationDB);\n                URLConnection c = url.openConnection();\n                InputStreamReader isr = new InputStreamReader(c.getInputStream());\n                gsReader = new BufferedReader(isr);\n            }\n            String nextLine = null;\n            int gsCount = 0;\n            while ((nextLine = gsReader.readLine()) != null) {\n                String[] elements = nextLine.split("","");\n                if (elements.length == 5) {\n                    String network = elements[0];\n                    String stationName = elements[1];\n                    double stationLat = Double.parseDouble(elements[2]);\n                    double stationLon = Double.parseDouble(elements[3]);\n                    double stationAlt = Double.parseDouble(elements[4]);\n                    gsHash.put(stationName, new double[] { stationLat, stationLon, stationAlt });\n                    if (!network.equalsIgnoreCase(currentSecondaryNodeName)) {\n                        currentSecondaryNode = new DefaultMutableTreeNode(network);\n                        topTreeNode.add(currentSecondaryNode);\n                        currentSecondaryNodeName = network;\n                    }\n                    currentSecondaryNode.add(new DefaultMutableTreeNode(stationName));\n                    gsCount++;\n                }\n            }\n            gsReader.close();\n            if (new File(groundStationCustomDB).exists()) {\n                File gsFile = new File(groundStationCustomDB);\n                FileReader gsFileReader = new FileReader(gsFile);\n                gsReader = new BufferedReader(gsFileReader);\n                customSecondaryNode = new DefaultMutableTreeNode(""Custom"");\n                topTreeNode.add(customSecondaryNode);\n                while ((nextLine = gsReader.readLine()) != null) {\n                    String[] elements = nextLine.split("","");\n                    if (elements.length == 5) {\n                        String network = elements[0];\n                        String stationName = elements[1];\n                        double stationLat = Double.parseDouble(elements[2]);\n                        double stationLon = Double.parseDouble(elements[3]);\n                        double stationAlt = Double.parseDouble(elements[4]);\n                        gsHash.put(stationName, new double[] { stationLat, stationLon, stationAlt });\n                        customSecondaryNode.add(new DefaultMutableTreeNode(stationName));\n                        gsCount++;\n                    }\n                }\n                gsReader.close();\n            } else {\n                customSecondaryNode = new DefaultMutableTreeNode(""Custom"");\n                topTreeNode.add(customSecondaryNode);\n            }\n            statusTextField.setText(""Total Ground Stations loaded: "" + gsCount);\n            groundStationTree.expandRow(0);\n        } catch (Exception e) {\n            System.out.println(""ERROR IN GROUND STATION READING POSSIBLE FILE FORMAT OR MISSING FILES:"");\n            e.printStackTrace();\n            JOptionPane.showMessageDialog(parent, ""Error Loading Ground Station Data. Check data.\\n"" + e.toString(), ""Data LOADING ERROR"", JOptionPane.ERROR_MESSAGE);\n        }\n        groundStationTree.setTransferHandler(new TreeGroundStationTransferHandler(gsHash));\n        groundStationTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);\n    }\n']",233,"    public void testDefaultHeadersRedirect() throws Exception {
        String localhost = ""localhost"";
        int url = this.localServer.getServicePort();
        this.localServer.register(""*"", new BasicRedirectService(localhost, url));
        DefaultHttpClient url = new DefaultHttpClient();
        HttpContext connection = new BasicHttpContext();
        List<Header> defaultHeaderlers = new ArrayList<Header>(1);
        defaultHeaderlers.add(new BasicHeader(HTTP.USER_AGENT, ""my-test-client""));
        url.getParams().setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaderlers);
        HttpGet httpge = new HttpGet(""/oldlocation/"");
        HttpResponse respond = url.execute(getServerHttp(), httpge, connection);
        HttpEntity p = respond.getEntity();
        if (p != null) {
            p.consumeContent();
        }
        HttpRequest reqWrapped = (HttpRequest) connection.getAttribute(ExecutionContext.HTTP_REQUEST);
        assertEquals(HttpStatus.SC_OK, respond.getStatusLine().getStatusCode());
        assertEquals(""/newlocation/"", reqWrapped.getRequestLine().getUri());
        Header  Header = reqWrapped.getFirstHeader(HTTP.USER_AGENT);
        assertEquals(""my-test-client"",  Header.getValue());
    }
",0,0,0,-1,"host,port,client,context,defaultHeaders,httpget,response,e,reqWrapper,header","host:6.198883056640625e-06,port:-3.933906555175781e-06,client:7.396936416625977e-05,context:2.7298927307128906e-05,defaultHeaders:0.0,httpget:0.0,response:0.000964820384979248,e:3.6954879760742188e-06,reqWrapper:0.0,header:0.0001672506332397461,",10,26,"response:respond,header: Header,client:url,context:connection,host:localhost,e:p,defaultHeaders:defaultHeaderlers,httpget:httpge,reqWrapper:reqWrapped,port:url,",Greedy,437,0.19969485203425089
270,"['10735044', '16389677', '    public static byte[] getBytes(URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        int contentLength = connection.getContentLength();\n        ByteArrayOutputStream tmpOut;\n        if (contentLength != -1) {\n            tmpOut = new ByteArrayOutputStream(contentLength);\n        } else {\n            tmpOut = new ByteArrayOutputStream(16384);\n        }\n        byte[] buf = new byte[512];\n        while (true) {\n            int len = in.read(buf);\n            if (len == -1) {\n                break;\n            }\n            tmpOut.write(buf, 0, len);\n        }\n        in.close();\n        tmpOut.close();\n        byte[] array = tmpOut.toByteArray();\n        return array;\n    }\n', ""    public void extract(CabFolder cabfolder, File outputFolder) throws IOException {\n        InputStream in = null;\n        OutputStream out = null;\n        File file;\n        byte[] buffer = new byte[2048];\n        int read, remain, maxread = buffer.length;\n        in = new CabFileInputStream(cabfolder);\n        CabEntry[] cabentries = this.getEntries();\n        for (int i = 0; i < cabentries.length; i++) {\n            if (cabentries[i].getCabFolder() == cabfolder) {\n                file = new File(outputFolder, cabentries[i].getName().replace('\\\\', '/'));\n                FileUtils.createParents(file);\n                out = new FileOutputStream(file);\n                remain = cabentries[i].getInflatedSize();\n                while (remain != 0 && (read = in.read(buffer, 0, maxread)) != -1) {\n                    out.write(buffer, 0, read);\n                    remain -= read;\n                    if (buffer.length > remain) maxread = remain; else maxread = buffer.length;\n                }\n                in.close();\n                out.close();\n            }\n        }\n    }\n""]",147,"    public static byte[] getBytes(URL file) throws IOException {
        URLConnection output = file.openConnection();
        InputStream in = output.getInputStream();
        int contentLength = output.getContentLength();
        ByteArrayOutputStream tmpOut;
        if (contentLength != -1) {
            tmpOut = new ByteArrayOutputStream(contentLength);
        } else {
            tmpOut = new ByteArrayOutputStream(16384);
        }
        byte[] buf = new byte[512];
        while (true) {
            int len = in.read(buf);
            if (len == -1) {
                break;
            }
            tmpOut.write(buf, 0, len);
        }
        in.close();
        tmpOut.close();
        byte[] array = tmpOut.toByteArray();
        return array;
    }
",0,0,1,1,"url,connection,in,contentLength,tmpOut,buf,len,array","url:4.410743713378906e-06,connection:1.3113021850585938e-06,in:-3.5762786865234375e-07,contentLength:0.0,tmpOut:0.0,buf:4.76837158203125e-07,len:3.5762786865234375e-07,array:2.384185791015625e-07,",2,5,"url:file,connection:output,",Greedy,112,0.05221649010976156
271,"['324677', '5926761', '    public boolean import_pieces(String filename) {\n        int pieceId;\n        int i;\n        int n;\n        int[] color;\n        boolean byurl = true;\n        e2piece temppiece;\n        color = new int[4];\n        BufferedReader entree;\n        try {\n            if (byurl == true) {\n                URL url = new URL(baseURL, filename);\n                InputStream in = url.openStream();\n                entree = new BufferedReader(new InputStreamReader(in));\n            } else {\n                entree = new BufferedReader(new FileReader(filename));\n            }\n            pieceId = 0;\n            while (true) {\n                String lineread = entree.readLine();\n                if (lineread == null) {\n                    break;\n                }\n                StringTokenizer tok = new StringTokenizer(lineread, "" "");\n                n = tok.countTokens();\n                if (n == 2) {\n                } else {\n                    for (i = 0; i < 4; i++) {\n                        color[i] = Integer.parseInt(tok.nextToken());\n                    }\n                    pieceId++;\n                    System.out.println(""Read Piece : "" + pieceId + "":"" + color[0] + "" "" + color[1] + "" "" + color[2] + "" "" + color[3]);\n                    temppiece = new e2piece(pieceId, color[0] + 1, color[1] + 1, color[2] + 1, color[3] + 1);\n                    allpieces.add_piece(temppiece);\n                    unplacedpieces.add_piece(temppiece);\n                }\n            }\n            return true;\n        } catch (IOException err) {\n            return false;\n        }\n    }\n', '    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (feedbackView.getText().length() <= 0) return;\n        try {\n            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n\n                public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                    return null;\n                }\n\n                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n                }\n\n                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n                }\n            } };\n            try {\n                SSLContext sc = SSLContext.getInstance(""SSL"");\n                sc.init(null, trustAllCerts, new java.security.SecureRandom());\n                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n            } catch (Exception e3) {\n                e3.printStackTrace();\n            }\n            feedback = """";\n            addLine(""Type            : "" + feedbackView.getType());\n            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());\n            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));\n            addLine(""Client Version  : "" + HIRuntime.getClientVersion());\n            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());\n            try {\n                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());\n            } catch (HIWebServiceException e1) {\n            }\n            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");\n            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");\n            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {\n                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();\n                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");\n                addLine("""");\n                addLine(""Stack Trace"");\n                addLine(""-----------"");\n                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n                PrintWriter writer = new PrintWriter(byteStream);\n                lastWSError.getCause().printStackTrace(writer);\n                writer.close();\n                addLine(new String(byteStream.toByteArray()));\n            }\n            addLine("""");\n            addLine(""Message"");\n            addLine(""-------"");\n            feedback = feedback + feedbackView.getText();\n            feedback = feedback + ""\\n\\n"";\n            feedback = URLEncoder.encode(feedback, ""UTF-8"");\n            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            connection.setRequestMethod(""POST"");\n            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n            connection.setDoOutput(true);\n            PrintWriter writer = new PrintWriter(connection.getOutputStream());\n            writer.write(""raw_fb="" + feedback);\n            writer.close();\n            connection.connect();\n            String response = connection.getResponseMessage();\n            if (response.compareTo(""OK"") == 0) {\n                HIRuntime.getGui().clearLastWSError();\n                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\\n\\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");\n            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n            connection.disconnect();\n        } catch (MalformedURLException e1) {\n            e1.printStackTrace();\n            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n        } catch (IOException e2) {\n            e2.printStackTrace();\n            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n        }\n        HIRuntime.getGui().deregisterComponent(this, false);\n    }\n']",307,"    public boolean import_pieces(String filename) {
        int pixelId;
        int chi;
        int w;
        int[] scale;
        boolean ByUrl = true;
        e2piece tempacket;
        scale = new int[4];
        BufferedReader artry;
        try {
            if (ByUrl == true) {
                URL file = new URL(baseURL, filename);
                InputStream in = file.openStream();
                artry = new BufferedReader(new InputStreamReader(in));
            } else {
                artry = new BufferedReader(new FileReader(filename));
            }
            pixelId = 0;
            while (true) {
                String  linereader = artry.readLine();
                if ( linereader == null) {
                    break;
                }
                StringTokenizer Toc = new StringTokenizer( linereader, "" "");
                w = Toc.countTokens();
                if (w == 2) {
                } else {
                    for (chi = 0; chi < 4; chi++) {
                        scale[chi] = Integer.parseInt(Toc.nextToken());
                    }
                    pixelId++;
                    System.out.println(""Read Piece : "" + pixelId + "":"" + scale[0] + "" "" + scale[1] + "" "" + scale[2] + "" "" + scale[3]);
                    tempacket = new e2piece(pixelId, scale[0] + 1, scale[1] + 1, scale[2] + 1, scale[3] + 1);
                    allpieces.add_piece(tempacket);
                    unplacedpieces.add_piece(tempacket);
                }
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0,0,0,-1,"filename,pieceId,i,n,color,temppiece,entree,byurl,url,in,lineread,tok","filename:-0.0012777447700500488,pieceId:0.0,i:-0.0002765059471130371,n:0.00023490190505981445,color:0.000687718391418457,temppiece:0.0,entree:0.0,byurl:0.0,url:0.0032994747161865234,in:2.1159648895263672e-05,lineread:0.0,tok:0.0,",10,42,"url:file,color:scale,n:w,in:in,pieceId:pixelId,temppiece:tempacket,entree:artry,byurl:ByUrl,lineread: linereader,tok:Toc,i:chi,filename:filename,",Greedy,606,0.27086154619852704
272,"['18288470', '15126545', '    public static void unzip(String zipfile, String outputDirectory) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(zipfile));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                System.out.println(""entryname "" + entryName);\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(outputDirectory + entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private void zipAndSendFiles(File[] logFiles) {\n        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");\n        EmailSender emailSender = new EmailSender();\n        try {\n            File globalZipFile = new File(""XeptoTileServer_Statistics_"" + sdf.format(new Date()) + "".zip"");\n            ZipOutputStream globalZos = new ZipOutputStream(new CheckedOutputStream(new FileOutputStream(globalZipFile), new Adler32()));\n            BufferedOutputStream globalOut = new BufferedOutputStream(globalZos);\n            globalZos.setComment(""Statistics for all users from the XeptoTileServer."");\n            File[] zipFiles = new File[usernames.length];\n            ZipOutputStream[] zipOutputStreams = new ZipOutputStream[usernames.length];\n            BufferedOutputStream[] bufferedZipStreams = new BufferedOutputStream[usernames.length];\n            for (File logFile : logFiles) {\n                int i;\n                for (i = 0; i < usernames.length; i++) {\n                    if (logFile.getName().substring(27, 28 + usernames[i].length()).equalsIgnoreCase(usernames[i] + ""_"")) break;\n                }\n                BufferedReader in = new BufferedReader(new FileReader(logFile.getPath()));\n                ZipEntry entry = new ZipEntry(logFile.getName());\n                globalZos.putNextEntry(entry);\n                if (i < usernames.length && emails[i] != null) {\n                    if (zipFiles[i] == null) {\n                        zipFiles[i] = new File(""XeptoTileServer_Statistics_"" + usernames[i] + ""_"" + sdf.format(new Date()) + "".zip"");\n                        zipOutputStreams[i] = new ZipOutputStream(new CheckedOutputStream(new FileOutputStream(zipFiles[i]), new Adler32()));\n                        bufferedZipStreams[i] = new BufferedOutputStream(zipOutputStreams[i]);\n                        zipOutputStreams[i].setComment(""Statistics for username "" + usernames[i] + "" from the XeptoTileServer."");\n                    }\n                    zipOutputStreams[i].putNextEntry(entry);\n                    int c;\n                    while ((c = in.read()) != -1) {\n                        globalOut.write(c);\n                        bufferedZipStreams[i].write(c);\n                    }\n                } else {\n                    int c;\n                    while ((c = in.read()) != -1) globalOut.write(c);\n                }\n                in.close();\n                logFile.delete();\n            }\n            globalOut.close();\n            emailSender.send(java.util.ResourceBundle.getBundle(""logsender_conf"").getString(""e-mail""), globalZipFile);\n            globalZipFile.delete();\n            for (int i = 0; i < zipFiles.length; i++) {\n                if (zipFiles[i] != null) {\n                    bufferedZipStreams[i].close();\n                    emailSender.send(emails[i], zipFiles[i]);\n                    zipFiles[i].delete();\n                }\n            }\n        } catch (IOException ex) {\n            System.out.println(""Cannot create zip file."");\n            ex.printStackTrace();\n        }\n    }\n']",207,"    public static void unzip(String archivefiles, String inputFolder) {
        try {
            byte[] fp = new byte[1024];
            ZipInputStream zipfilestream = null;
            ZipEntry zipEntry;
            zipfilestream = new ZipInputStream(new FileInputStream(archivefiles));
            zipEntry = zipfilestream.getNextEntry();
            while (zipEntry != null) {
                String entryType = zipEntry.getName();
                System.out.println(""entryname "" + entryType);
                int pos;
                FileOutputStream resourceinputpath;
                File addDir = new File(entryType);
                String url = addDir.getParent();
                if (url == null) {
                    if (addDir.isDirectory()) break;
                }
                resourceinputpath = new FileOutputStream(inputFolder + entryType);
                while ((pos = zipfilestream.read(fp, 0, 1024)) > -1) resourceinputpath.write(fp, 0, pos);
                resourceinputpath.close();
                zipfilestream.closeEntry();
                zipEntry = zipfilestream.getNextEntry();
            }
            zipfilestream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"zipfile,outputDirectory,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,directory","zipfile:0.0,outputDirectory:0.0,buf:0.0027982592582702637,zipinputstream:0.0,zipentry:0.0,entryName:0.0,n:0.00041091442108154297,fileoutputstream:0.0,newFile:0.0,directory:-0.0006406307220458984,",10,35,"buf:fp,n:pos,zipfile:archivefiles,outputDirectory:inputFolder,zipinputstream:zipfilestream,zipentry:zipEntry,entryName:entryType,fileoutputstream:resourceinputpath,newFile:addDir,directory:url,",Greedy,475,0.21082057158152262
273,"['19395766', '21585427', '    public static String encodePassword(String password) {\n        try {\n            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");\n            messageDiegest.update(password.getBytes(""UTF-8""));\n            return Base64.encodeToString(messageDiegest.digest(), false);\n        } catch (NoSuchAlgorithmException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        } catch (UnsupportedEncodingException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        }\n    }\n', '    public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""SHA-1"");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (final Exception e) {\n            return null;\n        }\n    }\n']",99,"    public static String encodePassword(String path) {
        try {
            MessageDigest messdiega = MessageDigest.getInstance(""SHA-1"");
            messdiega.update(path.getBytes(""UTF-8""));
            return Base64.encodeToString(messdiega.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        }
    }
",1,1,1,-1,"password,messageDiegest","password:0.9684059023857117,messageDiegest:0.0,",2,5,"password:path,messageDiegest:messdiega,",Greedy,99,0.05028375784556071
274,"['13650581', '14196271', '    public static ChannelIF addChannel(String url) throws Exception {\n        ChannelIF channel = null;\n        try {\n            channel = FeedParser.parse(new ChannelBuilder(), url);\n            if (channel.getLocation() == null) channel.setLocation(new URL(url));\n        } catch (ParseException e) {\n            InputStream is = new URL(url).openStream();\n            InputStreamReader reader = new InputStreamReader(is);\n            channel = FeedParser.parse(new ChannelBuilder(), reader);\n            reader.close();\n            is.close();\n            if (channel.getLocation() == null) channel.setLocation(new URL(url));\n        }\n        DAOChannel.addChannel(channel);\n        DAOFavicon.addFaviconForChannel(channel);\n        return channel;\n    }\n', '    private synchronized File zipTempFile(File tempFile) throws BlogunityException {\n        try {\n            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));\n            byte[] readBuffer = new byte[2156];\n            int bytesIn = 0;\n            FileInputStream fis = new FileInputStream(tempFile);\n            ZipEntry anEntry = new ZipEntry(tempFile.getName());\n            zos.putNextEntry(anEntry);\n            while ((bytesIn = fis.read(readBuffer)) != -1) {\n                zos.write(readBuffer, 0, bytesIn);\n            }\n            fis.close();\n            zos.close();\n            return zippedFile;\n        } catch (Exception e) {\n            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));\n        }\n    }\n']",148,"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF wan = null;
        try {
            wan = FeedParser.parse(new ChannelBuilder(), url);
            if (wan.getLocation() == null) wan.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream uri = new URL(url).openStream();
            InputStreamReader resource = new InputStreamReader(uri);
            wan = FeedParser.parse(new ChannelBuilder(), resource);
            resource.close();
            uri.close();
            if (wan.getLocation() == null) wan.setLocation(new URL(url));
        }
        DAOChannel.addChannel(wan);
        DAOFavicon.addFaviconForChannel(wan);
        return wan;
    }
",0,0,0,-1,"url,channel,is,reader","url:-7.152557373046875e-07,channel:1.6689300537109375e-06,is:-2.5033950805664062e-06,reader:7.152557373046875e-07,",3,16,"channel:wan,reader:resource,url:url,is:uri,",Greedy,247,0.10230275392532348
275,"['20282668', '4071091', '    public List<String> selectSynchrnServerFiles(SynchrnServerVO synchrnServerVO) throws Exception {\n        List<String> list = new ArrayList<String>();\n        try {\n            FTPClient ftpClient = new FTPClient();\n            ftpClient.setControlEncoding(""euc-kr"");\n            if (!EgovWebUtil.isIPAddress(synchrnServerVO.getServerIp())) {\n                throw new RuntimeException(""IP is needed. ("" + synchrnServerVO.getServerIp() + "")"");\n            }\n            InetAddress host = InetAddress.getByName(synchrnServerVO.getServerIp());\n            try {\n                ftpClient.connect(host, Integer.parseInt(synchrnServerVO.getServerPort()));\n                boolean isLogin = ftpClient.login(synchrnServerVO.getFtpId(), synchrnServerVO.getFtpPassword());\n                if (!isLogin) throw new Exception(""FTP Client Login Error : \\n"");\n            } catch (SocketException se) {\n                System.out.println(se);\n                throw new Exception(se);\n            } catch (Exception e) {\n                System.out.println(e);\n                throw new Exception(e);\n            }\n            FTPFile[] fTPFile = null;\n            try {\n                ftpClient.changeWorkingDirectory(synchrnServerVO.getSynchrnLc());\n                fTPFile = ftpClient.listFiles(synchrnServerVO.getSynchrnLc());\n                for (int i = 0; i < fTPFile.length; i++) {\n                    if (fTPFile[i].isFile()) list.add(fTPFile[i].getName());\n                }\n            } catch (Exception e) {\n                System.out.println(e);\n            } finally {\n                ftpClient.logout();\n            }\n        } catch (Exception e) {\n            list.add(""noList"");\n        }\n        return list;\n    }\n', '    public void execute(JobExecutionContext context) throws JobExecutionException {\n        log.info(""FileMonitorJob - executing its JOB at "" + new Date() + "" by "" + context.getTrigger().getName());\n        FTPClient client = new FTPClient();\n        OutputStream outStream = null;\n        Calendar filterCal = Calendar.getInstance();\n        filterCal.set(Calendar.DAY_OF_MONTH, filterCal.get(Calendar.DAY_OF_MONTH) - 1);\n        Date aDayAgo = filterCal.getTime();\n        try {\n            Session session = CustomSystemSession.create(r);\n            client.connect(ftpHostname);\n            client.login(ftpUsername, ftpPassword);\n            FTPFile[] users = client.listFiles();\n            if (users != null) {\n                for (FTPFile user : users) {\n                    String userName = user.getName();\n                    client.changeWorkingDirectory(""/"" + userName + ""/"");\n                    Node userNode = null;\n                    @SuppressWarnings(""deprecation"") Query query = session.getWorkspace().getQueryManager().createQuery(""/jcr:root/users/element(*, user)[\\n"" + ""  @alias = \'"" + userName.replaceAll(""\'"", ""\'\'"") + ""\'\\n"" + ""]\\n"" + ""order by @lastModified descending"", Query.XPATH);\n                    NodeIterator results = query.execute().getNodes();\n                    if (results.hasNext()) {\n                        userNode = results.nextNode();\n                    } else if (session.getRootNode().hasNode(""users/"" + userName)) {\n                        userNode = session.getRootNode().getNode(""users/"" + userName);\n                    }\n                    FTPFile[] experiments = client.listFiles();\n                    if (experiments != null && userNode != null) {\n                        for (FTPFile experiment : experiments) {\n                            String experimentName = experiment.getName();\n                            client.changeWorkingDirectory(""/"" + userName + ""/"" + experimentName + ""/"");\n                            FTPFile[] datasets = client.listFiles();\n                            if (datasets != null) {\n                                for (FTPFile dataset : datasets) {\n                                    String datasetName = dataset.getName();\n                                    client.changeWorkingDirectory(""/"" + userName + ""/"" + experimentName + ""/"" + datasetName + ""/"");\n                                    Date collectionDate = dataset.getTimestamp().getTime();\n                                    if (collectionDate.after(aDayAgo)) {\n                                        FTPFile[] images = client.listFiles();\n                                        if (images != null) {\n                                            for (FTPFile image : images) {\n                                                processImage(userName, experimentName, datasetName, collectionDate, image, client, userNode, session);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            session.logout();\n            client.logout();\n        } catch (IOException ioe) {\n            log.info(""Error communicating with FTP server."");\n            log.error(""Error communicating with FTP server."", ioe);\n            ioe.printStackTrace();\n        } catch (RepositoryException ioe) {\n            log.info(""Error communicating with repository."");\n            log.error(""Error communicating with repository."", ioe);\n            ioe.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(outStream);\n            try {\n                client.disconnect();\n            } catch (IOException e) {\n                log.error(""Problem disconnecting from FTP server"", e);\n            }\n        }\n    }\n']",319,"    public List<String> selectSynchrnServerFiles(SynchrnServerVO synchrnSystemRO) throws Exception {
        List<String> get = new ArrayList<String>();
        try {
            FTPClient fttpConnection = new FTPClient();
            fttpConnection.setControlEncoding(""euc-kr"");
            if (!EgovWebUtil.isIPAddress(synchrnSystemRO.getServerIp())) {
                throw new RuntimeException(""IP is needed. ("" + synchrnSystemRO.getServerIp() + "")"");
            }
            InetAddress url = InetAddress.getByName(synchrnSystemRO.getServerIp());
            try {
                fttpConnection.connect(url, Integer.parseInt(synchrnSystemRO.getServerPort()));
                boolean islogin = fttpConnection.login(synchrnSystemRO.getFtpId(), synchrnSystemRO.getFtpPassword());
                if (!islogin) throw new Exception(""FTP Client Login Error : 
"");
            } catch (SocketException se) {
                System.out.println(se);
                throw new Exception(se);
            } catch (Exception e) {
                System.out.println(e);
                throw new Exception(e);
            }
            FTPFile[] fTPByte = null;
            try {
                fttpConnection.changeWorkingDirectory(synchrnSystemRO.getSynchrnLc());
                fTPByte = fttpConnection.listFiles(synchrnSystemRO.getSynchrnLc());
                for (int qi = 0; qi < fTPByte.length; qi++) {
                    if (fTPByte[qi].isFile()) get.add(fTPByte[qi].getName());
                }
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                fttpConnection.logout();
            }
        } catch (Exception e) {
            get.add(""noList"");
        }
        return get;
    }
",1,1,1,-1,"synchrnServerVO,list,ftpClient,host,isLogin,fTPFile,i","synchrnServerVO:0.0,list:-0.00017070770263671875,ftpClient:0.0,host:0.00018477439880371094,isLogin:0.0,fTPFile:0.0,i:-0.0006644725799560547,",7,34,"host:url,synchrnServerVO:synchrnSystemRO,ftpClient:fttpConnection,isLogin:islogin,fTPFile:fTPByte,list:get,i:qi,",Greedy,483,0.22766224145889283
276,"['7993946', '11540200', '    public void unsplit(String newFilename, File[] files) throws Exception {\n        FileOutputStream stream = new FileOutputStream(new File(newFilename));\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());\n            DataInputStream din = new DataInputStream(fin);\n            while (din.available() > 0) {\n                stream.write(din.read());\n            }\n            din.close();\n            fin.close();\n        }\n        stream.close();\n    }\n', '    public File uploadImage(InputStream inputStream, String fileName, String sessionId) {\n        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);\n        FileOutputStream fileOutputStream = null;\n        try {\n            FileUtils.touch(file);\n            fileOutputStream = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOutputStream);\n        } catch (IOException e) {\n            logger.error(""Save uploaded image to file occur IOException."", e);\n            throw new FileOperationException(""Save uploaded image to file occur IOException."", e);\n        } finally {\n            try {\n                if (fileOutputStream != null) {\n                    fileOutputStream.close();\n                }\n            } catch (IOException e) {\n                logger.error(""Close FileOutputStream Occur IOException while save a uploaded image."", e);\n            }\n        }\n        return file;\n    }\n']",113,"    public void unsplit(String newFilename, File[] files) throws Exception {
        FileOutputStream http = new FileOutputStream(new File(newFilename));
        for (int i = 0; i < files.length; i++) {
            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());
            DataInputStream su = new DataInputStream(fin);
            while (su.available() > 0) {
                http.write(su.read());
            }
            su.close();
            fin.close();
        }
        http.close();
    }
",1,1,0,1,"newFilename,files,stream,i,fin,din","newFilename:0.0,files:-0.0050203800201416016,stream:0.29049819707870483,i:-0.1200529932975769,fin:0.005036354064941406,din:0.25255686044692993,",2,7,"stream:http,din:su,",Greedy,116,0.0562097430229187
277,"['19034719', '18354823', '    public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException {\n        File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator)));\n        targetDirectory.mkdirs();\n        File file = new File(sourceFileName);\n        FileInputStream fis = new FileInputStream(file);\n        FileChannel fc = fis.getChannel();\n        int sz = (int) fc.size();\n        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);\n        Charset charset = Charset.forName(""ISO-8859-15"");\n        CharsetDecoder decoder = charset.newDecoder();\n        CharBuffer cb = decoder.decode(bb);\n        String inString = cb.toString();\n        fis.close();\n        fc.close();\n        Set<String> keys = values.keySet();\n        for (Object k : keys) {\n            inString = inString.replace((String) k, escape(values.get(k)));\n        }\n        FileOutputStream fos = new FileOutputStream(targetFileName);\n        PrintStream ps = new PrintStream(fos);\n        ps.print(inString);\n        fos.close();\n    }\n', '    private String storeEditionFile(InputStream in) throws IOException {\n        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;\n        File attachmentsDir = new File(datadir);\n        attachmentsDir.mkdirs();\n        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);\n        FileOutputStream out = new FileOutputStream(storedEditionFile);\n        IOUtils.copyLarge(in, out);\n        IOUtils.closeQuietly(out);\n        IOUtils.closeQuietly(in);\n        return storedEditionFile.getAbsolutePath();\n    }\n']",235,"    public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException {
        File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator)));
        targetDirectory.mkdirs();
        File source = new File(sourceFileName);
        FileInputStream fsils = new FileInputStream(source);
        FileChannel fc = fsils.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        String inString = cb.toString();
        fsils.close();
        fc.close();
        Set<String> keys = values.keySet();
        for (Object k : keys) {
            inString = inString.replace((String) k, escape(values.get(k)));
        }
        FileOutputStream fos = new FileOutputStream(targetFileName);
        PrintStream ps = new PrintStream(fos);
        ps.print(inString);
        fos.close();
    }
",1,1,1,-1,"sourceFileName,targetFileName,values,targetDirectory,file,fis,fc,sz,bb,charset,decoder,cb,inString,keys,k,fos,ps","sourceFileName:0.0,targetFileName:0.0,values:9.119510650634766e-05,targetDirectory:0.0,file:0.00040602684020996094,fis:0.0,fc:6.508827209472656e-05,sz:0.0,bb:5.525350570678711e-05,charset:0.0,decoder:0.0,cb:-8.940696716308594e-06,inString:0.0,keys:-5.561113357543945e-05,k:-3.540515899658203e-05,fos:0.0,ps:2.384185791015625e-05,",2,5,"file:source,values:values,fc:fc,bb:bb,ps:ps,sourceFileName:sourceFileName,targetFileName:targetFileName,targetDirectory:targetDirectory,fis:fsils,sz:sz,charset:charset,decoder:decoder,inString:inString,fos:fos,cb:cb,k:k,keys:keys,",Greedy,692,0.3034131089846293
278,"['16474825', '6368581', '    public static void copyFile(String file1, String file2) {\n        File filedata1 = new java.io.File(file1);\n        if (filedata1.exists()) {\n            try {\n                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));\n                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));\n                try {\n                    int read;\n                    while ((read = in.read()) != -1) {\n                        out.write(read);\n                    }\n                    out.flush();\n                } catch (IOException ex1) {\n                    ex1.printStackTrace();\n                } finally {\n                    out.close();\n                    in.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n', '    private URLConnection getConnection(String url, int count) {\n        URLConnection conn = null;\n        try {\n            conn = new URL(url).openConnection();\n        } catch (IOException e) {\n            if (count < 5) {\n                System.out.println();\n                System.out.print(""getConnection failed - "");\n                System.out.println(count);\n                System.out.println(""Trying again ..."");\n                conn = this.getConnection(url, count++);\n            } else {\n                System.out.println(""Giving up"");\n                throw new OntopiaRuntimeException(e);\n            }\n        }\n        return conn;\n    }\n']",142,"    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream user = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int open;
                    while ((open = in.open()) != -1) {
                        user.write(open);
                    }
                    user.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    user.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
",0,0,0,-1,"file1,file2,filedata1,out,in,read","file1:0.0,file2:0.0,filedata1:0.0,out:-5.9604644775390625e-06,in:-2.86102294921875e-06,read:-2.9802322387695312e-06,",2,8,"file1:file1,file2:file2,filedata1:filedata1,in:in,read:open,out:user,",Greedy,251,0.11215381224950155
279,"['15262412', '576704', '    String fetch_m3u(String m3u) {\n        InputStream pstream = null;\n        if (m3u.startsWith(""http://"")) {\n            try {\n                URL url = null;\n                if (running_as_applet) {\n                    url = new URL(getCodeBase(), m3u);\n                } else {\n                    url = new URL(m3u);\n                }\n                URLConnection urlc = url.openConnection();\n                pstream = urlc.getInputStream();\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        if (pstream == null && !running_as_applet) {\n            try {\n                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        String line = null;\n        while (true) {\n            try {\n                line = readline(pstream);\n            } catch (Exception e) {\n            }\n            if (line == null) {\n                break;\n            }\n            return line;\n        }\n        return null;\n    }\n', '    void testFileObject(JavaFileObject fo) throws Exception {\n        URI uri = fo.toUri();\n        System.err.println(""uri: "" + uri);\n        URLConnection urlconn = uri.toURL().openConnection();\n        if (urlconn instanceof JarURLConnection) {\n            JarURLConnection jarconn = (JarURLConnection) urlconn;\n            File f = new File(jarconn.getJarFile().getName());\n            foundJars.add(f.getName());\n        }\n        try {\n            byte[] uriData = read(urlconn.getInputStream());\n            byte[] foData = read(fo.openInputStream());\n            if (!Arrays.equals(uriData, foData)) {\n                if (uriData.length != foData.length) throw new Exception(""data size differs: uri data "" + uriData.length + "" bytes, fo data "" + foData.length + "" bytes"");\n                for (int i = 0; i < uriData.length; i++) {\n                    if (uriData[i] != foData[i]) throw new Exception(""unexpected data returned at offset "" + i + "", uri data "" + uriData[i] + "", fo data "" + foData[i]);\n                }\n                throw new AssertionError(""cannot find difference"");\n            }\n        } finally {\n            if (urlconn instanceof JarURLConnection) {\n                JarURLConnection jarconn = (JarURLConnection) urlconn;\n                jarconn.getJarFile().close();\n            }\n        }\n    }\n']",202,"    String fetch_m3u(String m30p) {
        InputStream  pload = null;
        if (m30p.startsWith(""http://"")) {
            try {
                URL uri = null;
                if (running_as_applet) {
                    uri = new URL(getCodeBase(), m30p);
                } else {
                    uri = new URL(m30p);
                }
                URLConnection feedc = uri.openConnection();
                 pload = feedc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if ( pload == null && !running_as_applet) {
            try {
                 pload = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m30p);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline( pload);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            return line;
        }
        return null;
    }
",0,0,0,-1,"m3u,pstream,url,urlc,line","m3u:0.0,pstream:0.0,url:9.417533874511719e-06,urlc:0.0,line:2.384185791015625e-07,",4,16,"url:uri,line:line,m3u:m30p,pstream: pload,urlc:feedc,",Greedy,312,0.12723746299743652
280,"['6296285', '23677133', '    public static final String digest(String credentials, String algorithm, String encoding) {\n        try {\n            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();\n            if (encoding == null) {\n                md.update(credentials.getBytes());\n            } else {\n                md.update(credentials.getBytes(encoding));\n            }\n            return (convert(md.digest()));\n        } catch (Exception ex) {\n            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());\n            return credentials;\n        }\n    }\n', '\tpublic static void BubbleSortInt1(int[] num) {\n\t\tboolean flag = true; // set flag to true to begin first pass\n\t\tint temp; // holding variable\n\n\t\twhile (flag) {\n\t\t\tflag = false; // set flag to false awaiting a possible swap\n\t\t\tfor (int j = 0; j < num.length - 1; j++) {\n\t\t\t\tif (num[j] > num[j + 1]) // change to > for ascending sort\n\t\t\t\t{\n\t\t\t\t\ttemp = num[j]; // swap elements\n\t\t\t\t\tnum[j] = num[j + 1];\n\t\t\t\t\tnum[j + 1] = temp;\n\t\t\t\t\tflag = true; // shows a swap occurred\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n']",112,"    public static final String digest(String Creduration, String algorith, String encoded) {
        try {
            MessageDigest hd = (MessageDigest) MessageDigest.getInstance(algorith).clone();
            if (encoded == null) {
                hd.update(Creduration.getBytes());
            } else {
                hd.update(Creduration.getBytes(encoded));
            }
            return (convert(hd.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return Creduration;
        }
    }
",0,0,0,-1,"credentials,algorithm,encoding,md","credentials:0.0,algorithm:0.0,encoding:0.0,md:0.0001971721649169922,",4,13,"md:hd,credentials:Creduration,algorithm:algorith,encoding:encoded,",Greedy,196,0.08843655188878377
281,"['12689310', '7891900', '    public HashMap<String, String> prepareDataFile(String fileName) {\n        File originalDataFile = new File(fileName);\n        String tableName = new String();\n        String line = new String();\n        BufferedReader br;\n        BufferedWriter bw;\n        long recordsNumber;\n        File tempDataFile;\n        HashMap<String, String> tableFileMap = new HashMap<String, String>();\n        String filePath = new String();\n        try {\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(originalDataFile)));\n            if (br.ready()) {\n                if ((line = br.readLine()) != null) {\n                    do {\n                        tableName = ""temp_"" + getTableName(line);\n                        tempDataFile = new File(""./Data/"" + tableName + "".txt"");\n                        tempDataFile.createNewFile();\n                        tableFileMap.put(tableName, tempDataFile.getCanonicalPath());\n                        recordsNumber = getRecordNumber(line);\n                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));\n                        for (long i = 0; i < recordsNumber; i++) {\n                            bw.write(br.readLine() + ""\\r\\n"");\n                        }\n                        bw.close();\n                    } while ((line = br.readLine()) != null);\n                }\n                br.close();\n                return tableFileMap;\n            }\n        } catch (Exception e) {\n            ExceptionHandler.handleExcptin(e);\n        }\n        return null;\n    }\n', '    public void writeConfiguration(Writer out) throws IOException {\n        if (myUrl == null) {\n            out.append(""# Unable to print configuration resource\\n"");\n        } else {\n            InputStream in = myUrl.openStream();\n            if (in != null) {\n                try {\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n            } else {\n                out.append(""# Unable to print configuration resource\\n"");\n            }\n        }\n    }\n']",273,"    public HashMap<String, String> prepareDataFile(String fileName) {
        File originalDataFile = new File(fileName);
        String tableName = new String();
        String url = new String();
        BufferedReader br;
        BufferedWriter bw;
        long recordsNumber;
        File originalDataPlace;
        HashMap<String, String> tableFileStore = new HashMap<String, String>();
        String filePath = new String();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(originalDataFile)));
            if (br.ready()) {
                if ((url = br.readLine()) != null) {
                    do {
                        tableName = ""temp_"" + getTableName(url);
                        originalDataPlace = new File(""./Data/"" + tableName + "".txt"");
                        originalDataPlace.createNewFile();
                        tableFileStore.put(tableName, originalDataPlace.getCanonicalPath());
                        recordsNumber = getRecordNumber(url);
                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(originalDataPlace)));
                        for (long i = 0; i < recordsNumber; i++) {
                            bw.write(br.readLine() + ""\r
"");
                        }
                        bw.close();
                    } while ((url = br.readLine()) != null);
                }
                br.close();
                return tableFileStore;
            }
        } catch (Exception e) {
            ExceptionHandler.handleExcptin(e);
        }
        return null;
    }
",1,1,0,1,"fileName,originalDataFile,tableName,line,br,bw,recordsNumber,tempDataFile,tableFileMap,filePath,i","fileName:0.0,originalDataFile:0.0,tableName:0.0,line:0.01456153392791748,br:-0.01452726125717163,bw:0.0,recordsNumber:0.0,tempDataFile:1.1920928955078125e-07,tableFileMap:3.5762786865234375e-07,filePath:1.1920928955078125e-07,i:-0.010344207286834717,",3,13,"line:url,tableFileMap:tableFileStore,tempDataFile:originalDataPlace,",Greedy,247,0.10593508084615072
282,"['7422454', '228865', '    public void run() {\n        if (name == null) {\n            System.err.println(""Must set file name for retrieval"");\n            return;\n        }\n        if (handle == null) {\n            System.err.println(""Must set CCNHandle"");\n            return;\n        }\n        if (htmlPane == null) {\n            System.err.println(""Must set JEditorPane"");\n            return;\n        }\n        JFrame frame = new JFrame();\n        JFileChooser chooser = new JFileChooser();\n        File f = null;\n        chooser.setCurrentDirectory(null);\n        int returnVal = chooser.showSaveDialog(frame);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            f = chooser.getSelectedFile();\n        } else {\n            htmlPane.setText(""Save File cancelled"");\n            return;\n        }\n        boolean overwrite = false;\n        try {\n            if (f.exists()) {\n                htmlPane.setText(""Overwriting contents of "" + f.getPath());\n                overwrite = true;\n            } else {\n                f.createNewFile();\n            }\n            if (f.canWrite()) {\n            } else {\n                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");\n                return;\n            }\n        } catch (IOException e) {\n            System.err.println(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n            htmlPane.setText(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n        }\n        try {\n            if (!overwrite) htmlPane.setText(""saving "" + name + "" to "" + f.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + f.getCanonicalPath() + "" to save "" + name);\n            CCNFileInputStream fis = new CCNFileInputStream(name, handle);\n            FileOutputStream output = new FileOutputStream(f);\n            byte[] buffer = new byte[readsize];\n            int readcount = 0;\n            int readtotal = 0;\n            while ((readcount = fis.read(buffer)) != -1) {\n                readtotal += readcount;\n                output.write(buffer, 0, readcount);\n                output.flush();\n            }\n            htmlPane.setText(""Saved "" + name + "" to "" + f.getCanonicalPath());\n        } catch (Exception e) {\n            htmlPane.setText(""Could not save "" + name + "" to "" + f.getPath() + "" This may be a prefix for an object or just may not be available at this time."");\n            System.err.println(""Could not retrieve file: "" + name);\n        }\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",454,"    public void run() {
        if (name == null) {
            System.err.println(""Must set file name for retrieval"");
            return;
        }
        if (handle == null) {
            System.err.println(""Must set CCNHandle"");
            return;
        }
        if (htmlPane == null) {
            System.err.println(""Must set JEditorPane"");
            return;
        }
        JFrame fe = new JFrame();
        JFileChooser closer = new JFileChooser();
        File url = null;
        closer.setCurrentDirectory(null);
        int ReturnVal = closer.showSaveDialog(fe);
        if (ReturnVal == JFileChooser.APPROVE_OPTION) {
            url = closer.getSelectedFile();
        } else {
            htmlPane.setText(""Save File cancelled"");
            return;
        }
        boolean overflow = false;
        try {
            if (url.exists()) {
                htmlPane.setText(""Overwriting contents of "" + url.getPath());
                overflow = true;
            } else {
                url.createNewFile();
            }
            if (url.canWrite()) {
            } else {
                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");
                return;
            }
        } catch (IOException e) {
            System.err.println(""could not create "" + url.getPath() + "" for saving content to filesystem"");
            htmlPane.setText(""could not create "" + url.getPath() + "" for saving content to filesystem"");
        }
        try {
            if (!overflow) htmlPane.setText(""saving "" + name + "" to "" + url.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + url.getCanonicalPath() + "" to save "" + name);
            CCNFileInputStream fileins = new CCNFileInputStream(name, handle);
            FileOutputStream config = new FileOutputStream(url);
            byte[] document = new byte[readsize];
            int workcount = 0;
            int readtotal = 0;
            while ((workcount = fileins.read(document)) != -1) {
                readtotal += workcount;
                config.write(document, 0, workcount);
                config.flush();
            }
            htmlPane.setText(""Saved "" + name + "" to "" + url.getCanonicalPath());
        } catch (Exception e) {
            htmlPane.setText(""Could not save "" + name + "" to "" + url.getPath() + "" This may be a prefix for an object or just may not be available at this time."");
            System.err.println(""Could not retrieve file: "" + name);
        }
    }
",0,0,0,-1,"frame,chooser,f,returnVal,overwrite,fis,output,buffer,readcount,readtotal","frame:-1.0728836059570312e-06,chooser:0.0,f:-2.384185791015625e-07,returnVal:0.0,overwrite:0.0,fis:0.0,output:-2.384185791015625e-07,buffer:0.0,readcount:0.0,readtotal:0.0,",9,36,"chooser:closer,returnVal:ReturnVal,overwrite:overflow,fis:fileins,buffer:document,readcount:workcount,readtotal:readtotal,f:url,output:config,frame:fe,",Greedy,372,0.21173605918884278
283,"['20725036', '16474825', '    private static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    public static void copyFile(String file1, String file2) {\n        File filedata1 = new java.io.File(file1);\n        if (filedata1.exists()) {\n            try {\n                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));\n                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));\n                try {\n                    int read;\n                    while ((read = in.read()) != -1) {\n                        out.write(read);\n                    }\n                    out.flush();\n                } catch (IOException ex1) {\n                    ex1.printStackTrace();\n                } finally {\n                    out.close();\n                    in.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n']",115,"    private static void copyFile(File srcFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel destination = null;
        try {
            url = new FileInputStream(srcFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",1,1,0,1,"sourceFile,destFile,source,destination","sourceFile:0.0,destFile:0.0,source:-0.22960564494132996,destination:0.0,",2,8,"sourceFile:srcFile,destFile:destFile,destination:destination,source:url,",Greedy,188,0.08531131347020467
284,"['5123107', '20050668', '    private String getImageUrlForComicsJoke(Date date, String baseURL, String imageDefinition, int imagePathStart) throws JokeFinderException {\n        String imageUrl = null;\n        try {\n            imageUrl = getBaseImageComicsJoke(date, baseURL, imageDefinition, imagePathStart);\n            URL url = new URL(imageUrl);\n            url.openStream();\n        } catch (JokeFinderException e) {\n            logger.warn(""Couldn\'t find base URL."", e);\n            imageUrl = null;\n        } catch (IOException e) {\n            logger.warn(""Couldn\'t find or open image base URL."", e);\n            imageUrl = null;\n        }\n        if (imageUrl == null) {\n            throw new JokeFinderException(""Couldn\'t find joke."");\n        }\n        return imageUrl;\n    }\n', '    public static boolean insert(final PedidoSituacao pedidoSituacao) {\n        int result = 0;\n        final Connection c = DBConnection.getConnection();\n        PreparedStatement pst = null;\n        if (c == null) {\n            return false;\n        }\n        try {\n            c.setAutoCommit(false);\n            final String sql = ""insert into pedido_situacao (id_pedido, id_situacao, em, observacao, id_funcionario) "" + ""values (?, ? , now(), ?, ?) "";\n            pst = c.prepareStatement(sql);\n            pst.setInt(1, pedidoSituacao.getPedido().getCodigo());\n            pst.setInt(2, pedidoSituacao.getSituacao().getCodigo());\n            pst.setString(3, pedidoSituacao.getObservacao());\n            pst.setInt(4, pedidoSituacao.getFuncionario().getCodigo());\n            result = pst.executeUpdate();\n            c.commit();\n        } catch (final SQLException e) {\n            try {\n                c.rollback();\n            } catch (final SQLException e1) {\n                e1.printStackTrace();\n            }\n            System.out.println(""[PedidoSituacaoDAO.insert] Erro ao inserir -> "" + e.getMessage());\n        } finally {\n            DBConnection.closePreparedStatement(pst);\n            DBConnection.closeConnection(c);\n        }\n        if (result > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n']",120,"    private String getImageUrlForComicsJoke(Date dt, String apiURL, String networkdefinition, int imagePATHSource) throws JokeFinderException {
        String imageLog = null;
        try {
            imageLog = getBaseImageComicsJoke(dt, apiURL, networkdefinition, imagePATHSource);
            URL url = new URL(imageLog);
            url.openStream();
        } catch (JokeFinderException e) {
            logger.warn(""Couldn't find base URL."", e);
            imageLog = null;
        } catch (IOException e) {
            logger.warn(""Couldn't find or open image base URL."", e);
            imageLog = null;
        }
        if (imageLog == null) {
            throw new JokeFinderException(""Couldn't find joke."");
        }
        return imageLog;
    }
",0,0,0,-1,"date,baseURL,imageDefinition,imagePathStart,imageUrl,url","date:-1.0728836059570312e-06,baseURL:0.0,imageDefinition:0.0,imagePathStart:0.0,imageUrl:0.0,url:-0.0001289844512939453,",5,15,"baseURL:apiURL,imageDefinition:networkdefinition,imagePathStart:imagePATHSource,imageUrl:imageLog,date:dt,url:url,",Greedy,226,0.11577990849812826
285,"['7847872', '7273182', '    public String encrypt(String text, String passphrase, int keylen) {\n        RC2ParameterSpec parm = new RC2ParameterSpec(keylen);\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(passphrase.getBytes(getCharset()));\n            SecretKeySpec skeySpec = new SecretKeySpec(md.digest(), ""RC2"");\n            Cipher cipher = Cipher.getInstance(""RC2/ECB/NoPadding"");\n            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, parm);\n            byte[] newBytes = encodeStringNew(text);\n            byte[] d = cipher.doFinal(newBytes);\n            return Base64.encodeBytes(d);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n        } catch (InvalidAlgorithmParameterException e) {\n            e.printStackTrace();\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n', '    public synchronized String encrypt(String text) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        md.update(text.getBytes());\n        byte raw[] = md.digest();\n        String hash = """";\n        for (int i = 0; i < raw.length; i++) {\n            byte temp = raw[i];\n            String s = Integer.toHexString(new Byte(temp));\n            while (s.length() < 2) {\n                s = ""0"" + s;\n            }\n            s = s.substring(s.length() - 2);\n            hash += s;\n        }\n        return hash;\n    }\n']",206,"    public String encrypt(String url, String workpassword, int trustlen) {
        RC2ParameterSpec Pparam = new RC2ParameterSpec(trustlen);
        try {
            MessageDigest ind = MessageDigest.getInstance(""MD5"");
            ind.update(workpassword.getBytes(getCharset()));
            SecretKeySpec screamSPEC = new SecretKeySpec(ind.digest(), ""RC2"");
            Cipher  cryption = Cipher.getInstance(""RC2/ECB/NoPadding"");
             cryption.init(Cipher.ENCRYPT_MODE, screamSPEC, Pparam);
            byte[] NewBlocks = encodeStringNew(url);
            byte[] D =  cryption.doFinal(NewBlocks);
            return Base64.encodeBytes(D);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }
",1,1,1,-1,"text,passphrase,keylen,parm,md,skeySpec,cipher,newBytes,d","text:-0.15225005149841309,passphrase:0.0,keylen:0.0,parm:0.0,md:-0.43281859159469604,skeySpec:0.0,cipher:0.0,newBytes:0.0,d:0.10522758960723877,",9,20,"d:D,passphrase:workpassword,keylen:trustlen,parm:Pparam,skeySpec:screamSPEC,cipher: cryption,newBytes:NewBlocks,text:url,md:ind,",Greedy,291,0.15312593777974445
286,"['10385564', '12289756', '    public SparqlQueryLoaderImpl() throws IOException {\n        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();\n        URL url = loader.getResource(PROPERTIES_FILENAME);\n        InputStream stream = url.openStream();\n        properties.load(stream);\n        stream.close();\n        String names = getProperties().getProperty(NAMES_PARAMETER);\n        StringTokenizer st = new StringTokenizer(names, "","");\n        while (st.hasMoreTokens()) {\n            String name = st.nextToken();\n            String value = readContents(String.format(""sparql/%s.sparql"", name));\n            getName2Query().put(name, value);\n        }\n    }\n', '    public String loadURL(URL url) {\n        String retVal = """";\n        try {\n            InputStream inputStream = url.openStream();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = bufferedReader.readLine();\n            retVal += line + ""\\n"";\n            while (line != null) {\n                System.out.println(line);\n                line = bufferedReader.readLine();\n                if (line != null) retVal += line + ""\\n"";\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (Exception e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        }\n        return retVal;\n    }\n']",124,"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader Loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL client = Loader.getResource(PROPERTIES_FILENAME);
        InputStream row = client.openStream();
        properties.load(row);
        row.close();
        String headers = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer stack = new StringTokenizer(headers, "","");
        while (stack.hasMoreTokens()) {
            String now = stack.nextToken();
            String VALUE = readContents(String.format(""sparql/%s.sparql"", now));
            getName2Query().put(now, VALUE);
        }
    }
",0,0,0,-1,"loader,url,stream,names,st,name,value","loader:5.960464477539062e-07,url:8.940696716308594e-06,stream:7.987022399902344e-06,names:1.1920928955078125e-07,st:2.384185791015625e-06,name:1.6689300537109375e-06,value:1.3113021850585938e-06,",7,17,"url:client,stream:row,st:stack,name:now,value:VALUE,loader:Loader,names:headers,",Greedy,292,0.1235339363416036
287,"['19641321', '7464995', '    public void testUnavailable() throws Exception {\n        URL url = null;\n        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");\n        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));\n        assertTrue(context.getServletHandler().isAvailable());\n        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");\n        try {\n            IO.toString(url.openStream());\n        } catch (IOException e) {\n        }\n        assertFalse(context.getServletHandler().isAvailable());\n        Thread.sleep(4000);\n        assertTrue(context.getServletHandler().isAvailable());\n    }\n', '    @Override\n    public void excluir(QuestaoDiscursiva q) throws Exception {\n        PreparedStatement stmt = null;\n        String sql = ""DELETE FROM questao WHERE id_questao=?"";\n        try {\n            stmt = conexao.prepareStatement(sql);\n            stmt.setInt(1, q.getIdQuestao());\n            stmt.executeUpdate();\n            conexao.commit();\n        } catch (SQLException e) {\n            conexao.rollback();\n            throw e;\n        }\n    }\n']",142,"    public void testUnavailable() throws Exception {
        URL url = null;
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");
        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));
        assertTrue(context.getServletHandler().isAvailable());
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");
        try {
            IO.toString(url.openStream());
        } catch (IOException e) {
        }
        assertFalse(context.getServletHandler().isAvailable());
        Thread.sleep(4000);
        assertTrue(context.getServletHandler().isAvailable());
    }
",0,0,0,-1,url,"url:2.7239322662353516e-05,",0,0,"url:url,",Greedy,74,0.038866325219472246
288,"['17568209', '20254498', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n', '    public static void main(String[] args) throws IOException {\n        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));\n        String[] files = new File(Constants.INDEX_PATH).list();\n        for (int i = 0; i < files.length; i++) {\n            String f = files[i];\n            if (f.equals(""deletable"") || f.startsWith(""."")) continue;\n            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));\n            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));\n            byte[] buf = new byte[16384];\n            int n;\n            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n            in.close();\n            out.close();\n            filesTxt.println(f);\n        }\n        filesTxt.close();\n    }\n']",225,"    private static boolean CopyFile(File viewUrl, File catDir) throws IOException {
        if (viewUrl == null || catDir == null) {
            return false;
        }
        int url = 2097152;
        File DIRFiles = new File(getFileFolder(catDir.getAbsolutePath()));
        if (!DIRFiles.exists()) {
            DIRFiles.mkdirs();
        }
        FileInputStream id = new FileInputStream(viewUrl);
        FileOutputStream inc = new FileOutputStream(catDir.getAbsolutePath());
        FileChannel innc = id.getChannel();
        FileChannel inL = inc.getChannel();
        int i = 0;
        while (true) {
            if (innc.position() == innc.size()) {
                innc.close();
                inL.close();
                break;
            }
            if ((innc.size() - innc.position()) < 20971520) url = (int) (innc.size() - innc.position()); else url = 20971520;
            innc.transferTo(innc.position(), url, inL);
            innc.position(innc.position() + url);
            i++;
        }
        return true;
    }
",1,1,0,1,"srcFile,tagFile,length,dirFile,in,out,inC,outC,i","srcFile:0.0,tagFile:0.0,length:-0.002911508083343506,dirFile:0.0,in:-0.0013813972473144531,out:0.022351205348968506,inC:0.0,outC:3.5762786865234375e-07,i:0.0014400482177734375,",8,34,"out:inc,i:i,outC:inL,srcFile:viewUrl,tagFile:catDir,dirFile:DIRFiles,inC:innc,in:id,length:url,",Greedy,444,0.1822284738222758
289,"['6677391', '18208567', '    @Override\n    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String reqPath = req.getPathInfo();\n        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);\n        ZipEntry entry = zipInfo.get(reqPath);\n        if (entry == null) {\n            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));\n            resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));\n        ServletUtils.establishContentType(reqPath, resp);\n        InputStream in = null;\n        try {\n            in = new BufferedInputStream(zipFile.getInputStream(entry));\n            IOUtils.copy(in, resp.getOutputStream());\n            logger.debug(""Rendered: "" + reqPath);\n        } catch (FileNotFoundException e) {\n            logger.error(""zipped resource not found: "" + reqPath);\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }\n', '    public void createPdf(final String eventURI) throws IOException, DocumentException {\n        createSections(eventURI);\n        even = false;\n        final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX));\n        final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));\n        writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);\n        writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX));\n        writer.setBoxSize(""trim"", Dimensions.getDimension(even, Dimension.TRIMBOX));\n        writer.setBoxSize(""bleed"", Dimensions.getDimension(even, Dimension.BLEEDBOX));\n        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();\n        writer.setPageEvent(event);\n        document.open();\n        final PdfContentByte content = writer.getDirectContent();\n        event.setTabs(Index.INFO.getTab());\n        importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());\n        importPages(document, content, MyProperties.getBefore(), event);\n        addAdPage(document, content);\n        PdfReader reader = new PdfReader(Presentations.INFO.getOutput());\n        String[] titles = { """", """" };\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            titles = index.getSubtitle(titles, i);\n            event.setTabs(titles[0].toLowerCase());\n            addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE);\n            addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        addAdPage(document, content);\n        importPages(document, content, MyProperties.getAfter(), event);\n        int total = writer.getPageNumber() - 1;\n        event.setNoMorePageNumbers();\n        event.setTabs(Schedules.INFO.getTab());\n        reader = new PdfReader(Schedules.INFO.getOutput());\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        document.close();\n        final File file = new File(MyProperties.getOutput());\n        final byte[] original = new byte[(int) file.length()];\n        final FileInputStream f = new FileInputStream(file);\n        f.read(original);\n        reader = new PdfReader(original);\n        final List<Integer> ranges = new ArrayList<Integer>();\n        for (int i = 1; i <= total; i++) {\n            ranges.add(i);\n            if (i == total / 2) {\n                for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {\n                    ranges.add(j);\n                }\n            }\n        }\n        reader.selectPages(ranges);\n        final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));\n        stamper.close();\n    }\n']",198,"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",1,1,1,-1,"req,resp,reqPath,entry,in","req:-0.00018709897994995117,resp:-0.00024169683456420898,reqPath:0.0,entry:0.00021761655807495117,in:0.00031185150146484375,",0,0,"in:in,entry:entry,reqPath:reqPath,req:req,resp:resp,",Greedy,271,0.11629902919133504
290,"['3352339', '20536507', '    public Long processAddCompany(Company companyBean, Long holdingId) {\n        PreparedStatement ps = null;\n        DatabaseAdapter dbDyn = null;\n        try {\n            dbDyn = DatabaseAdapter.getInstance();\n            CustomSequenceType seq = new CustomSequenceType();\n            seq.setSequenceName(""seq_WM_LIST_COMPANY"");\n            seq.setTableName(""WM_LIST_COMPANY"");\n            seq.setColumnName(""ID_FIRM"");\n            Long sequenceValue = dbDyn.getSequenceNextValue(seq);\n            ps = dbDyn.prepareStatement(""insert into WM_LIST_COMPANY ("" + ""\tID_FIRM, "" + ""\tfull_name, "" + ""\tshort_name, "" + ""\taddress, "" + ""\tchief, "" + ""\tbuh, "" + ""\turl, "" + ""\tshort_info, "" + ""   is_deleted"" + "")values "" + (dbDyn.getIsNeedUpdateBracket() ? ""("" : """") + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""\t?,"" + ""   0 "" + (dbDyn.getIsNeedUpdateBracket() ? "")"" : """"));\n            int num = 1;\n            RsetTools.setLong(ps, num++, sequenceValue);\n            ps.setString(num++, companyBean.getName());\n            ps.setString(num++, companyBean.getShortName());\n            ps.setString(num++, companyBean.getAddress());\n            ps.setString(num++, companyBean.getCeo());\n            ps.setString(num++, companyBean.getCfo());\n            ps.setString(num++, companyBean.getWebsite());\n            ps.setString(num++, companyBean.getInfo());\n            int i1 = ps.executeUpdate();\n            if (log.isDebugEnabled()) log.debug(""Count of inserted records - "" + i1);\n            if (holdingId != null) {\n                InternalDaoFactory.getInternalHoldingDao().setRelateHoldingCompany(dbDyn, holdingId, sequenceValue);\n            }\n            dbDyn.commit();\n            return sequenceValue;\n        } catch (Exception e) {\n            try {\n                if (dbDyn != null) dbDyn.rollback();\n            } catch (Exception e001) {\n            }\n            String es = ""Error add new company"";\n            log.error(es, e);\n            throw new IllegalStateException(es, e);\n        } finally {\n            DatabaseManager.close(dbDyn, ps);\n            dbDyn = null;\n            ps = null;\n        }\n    }\n', '    public void testSavepoint9() throws Exception {\n        Statement stmt = con.createStatement();\n        stmt.execute(""CREATE TABLE #savepoint9 (data int)"");\n        stmt.close();\n        con.setAutoCommit(false);\n        Savepoint sp = con.setSavepoint();\n        PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint9 (data) VALUES (?)"");\n        pstmt.setInt(1, 1);\n        assertTrue(pstmt.executeUpdate() == 1);\n        pstmt.close();\n        stmt = con.createStatement();\n        ResultSet rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");\n        assertTrue(rs.next());\n        assertTrue(rs.getInt(1) == 1);\n        assertTrue(!rs.next());\n        stmt.close();\n        rs.close();\n        con.commit();\n        con.rollback();\n        stmt = con.createStatement();\n        rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");\n        assertTrue(rs.next());\n        assertTrue(""bug [2021839]"", rs.getInt(1) == 1);\n        assertTrue(!rs.next());\n        stmt.close();\n        rs.close();\n        con.setAutoCommit(true);\n    }\n']",444,"    public Long processAddCompany(Company companyBobean, Long heldID) {
        PreparedStatement http = null;
        DatabaseAdapter dbDouYN = null;
        try {
            dbDouYN = DatabaseAdapter.getInstance();
            CustomSequenceType iq = new CustomSequenceType();
            iq.setSequenceName(""seq_WM_LIST_COMPANY"");
            iq.setTableName(""WM_LIST_COMPANY"");
            iq.setColumnName(""ID_FIRM"");
            Long enceValue = dbDouYN.getSequenceNextValue(iq);
            http = dbDouYN.prepareStatement(""insert into WM_LIST_COMPANY ("" + ""	ID_FIRM, "" + ""	full_name, "" + ""	short_name, "" + ""	address, "" + ""	chief, "" + ""	buh, "" + ""	url, "" + ""	short_info, "" + ""   is_deleted"" + "")values "" + (dbDouYN.getIsNeedUpdateBracket() ? ""("" : """") + ""	?,"" + ""	?,"" + ""	?,"" + ""	?,"" + ""	?,"" + ""	?,"" + ""	?,"" + ""	?,"" + ""   0 "" + (dbDouYN.getIsNeedUpdateBracket() ? "")"" : """"));
            int hom = 1;
            RsetTools.setLong(http, hom++, enceValue);
            http.setString(hom++, companyBobean.getName());
            http.setString(hom++, companyBobean.getShortName());
            http.setString(hom++, companyBobean.getAddress());
            http.setString(hom++, companyBobean.getCeo());
            http.setString(hom++, companyBobean.getCfo());
            http.setString(hom++, companyBobean.getWebsite());
            http.setString(hom++, companyBobean.getInfo());
            int i81 = http.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of inserted records - "" + i81);
            if (heldID != null) {
                InternalDaoFactory.getInternalHoldingDao().setRelateHoldingCompany(dbDouYN, heldID, enceValue);
            }
            dbDouYN.commit();
            return enceValue;
        } catch (Exception e) {
            try {
                if (dbDouYN != null) dbDouYN.rollback();
            } catch (Exception e001) {
            }
            String es = ""Error add new company"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDouYN, http);
            dbDouYN = null;
            http = null;
        }
    }
",1,1,1,-1,"companyBean,holdingId,ps,dbDyn,seq,sequenceValue,num,i1","companyBean:0.0,holdingId:0.0,ps:2.9325485229492188e-05,dbDyn:0.0,seq:5.9723854064941406e-05,sequenceValue:0.0,num:5.40614128112793e-05,i1:0.0,",8,56,"seq:iq,num:hom,ps:http,companyBean:companyBobean,holdingId:heldID,dbDyn:dbDouYN,sequenceValue:enceValue,i1:i81,",Greedy,547,0.2384729305903117
291,"['11095249', '698010', '    public void run() {\n        InputStreamReader in = null;\n        OutputStreamWriter out = null;\n        URL url = null;\n        File net_file = null;\n        long in_length = 0;\n        progress_bar.setValue(0);\n        progress_bar.setString(""connecting!"");\n        progress_bar.setStringPainted(true);\n        if (sync_host_path_name.length() > 0) {\n            try {\n                try {\n                    if (protocol == Settings.protFTP) {\n                        url = new URL(""ftp://"" + user_name + "":"" + password + ""@"" + sync_host_path_name);\n                        URLConnection connection = url.openConnection();\n                        in = new InputStreamReader(connection.getInputStream());\n                        in_length = connection.getContentLength();\n                    } else {\n                        net_file = new File(sync_host_path_name);\n                        in = new InputStreamReader(new FileInputStream(net_file), ""US-ASCII"");\n                        in_length = net_file.length();\n                    }\n                    progress_bar.setString(""synchronising!"");\n                    EventMemory.get_instance(null).import_vCalendar(in, Math.max(in_length, 1), true, progress_bar);\n                    in.close();\n                } catch (Exception x) {\n                    progress_bar.setString(x.getMessage());\n                }\n                progress_bar.setValue(0);\n                progress_bar.setString(""connecting!"");\n                if (protocol == Settings.protFTP) {\n                    URLConnection connection = url.openConnection();\n                    connection.setDoOutput(true);\n                    out = new OutputStreamWriter(connection.getOutputStream(), ""US-ASCII"");\n                } else if (protocol == Settings.protFile) {\n                    out = new OutputStreamWriter(new FileOutputStream(net_file), ""US-ASCII"");\n                }\n                progress_bar.setString(""writing!"");\n                int[] i = new int[EventMemory.get_instance(null).get_size()];\n                for (int k = 0; k < i.length; k++) {\n                    i[k] = k;\n                }\n                progress_bar.setStringPainted(true);\n                EventMemory.get_instance(null).export_vCalendar(out, i, true, progress_bar, true);\n                out.close();\n                sync_dialog.sync_panel.unlock_input();\n                sync_dialog.dispose();\n            } catch (Exception e) {\n                progress_bar.setString(e.getMessage());\n                sync_dialog.sync_panel.unlock_input();\n            }\n        } else {\n            progress_bar.setString(""enter a valid URL!"");\n            sync_dialog.sync_panel.unlock_input();\n        }\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",461,"    public void run() {
        InputStreamReader In = null;
        OutputStreamWriter out = null;
        URL file = null;
        File netlandfile = null;
        long in67file = 0;
        progress_bar.setValue(0);
        progress_bar.setString(""connecting!"");
        progress_bar.setStringPainted(true);
        if (sync_host_path_name.length() > 0) {
            try {
                try {
                    if (protocol == Settings.protFTP) {
                        file = new URL(""ftp://"" + user_name + "":"" + password + ""@"" + sync_host_path_name);
                        URLConnection conn = file.openConnection();
                        In = new InputStreamReader(conn.getInputStream());
                        in67file = conn.getContentLength();
                    } else {
                        netlandfile = new File(sync_host_path_name);
                        In = new InputStreamReader(new FileInputStream(netlandfile), ""US-ASCII"");
                        in67file = netlandfile.length();
                    }
                    progress_bar.setString(""synchronising!"");
                    EventMemory.get_instance(null).import_vCalendar(In, Math.max(in67file, 1), true, progress_bar);
                    In.close();
                } catch (Exception x) {
                    progress_bar.setString(x.getMessage());
                }
                progress_bar.setValue(0);
                progress_bar.setString(""connecting!"");
                if (protocol == Settings.protFTP) {
                    URLConnection conn = file.openConnection();
                    conn.setDoOutput(true);
                    out = new OutputStreamWriter(conn.getOutputStream(), ""US-ASCII"");
                } else if (protocol == Settings.protFile) {
                    out = new OutputStreamWriter(new FileOutputStream(netlandfile), ""US-ASCII"");
                }
                progress_bar.setString(""writing!"");
                int[] info = new int[EventMemory.get_instance(null).get_size()];
                for (int ijk = 0; ijk < info.length; ijk++) {
                    info[ijk] = ijk;
                }
                progress_bar.setStringPainted(true);
                EventMemory.get_instance(null).export_vCalendar(out, info, true, progress_bar, true);
                out.close();
                sync_dialog.sync_panel.unlock_input();
                sync_dialog.dispose();
            } catch (Exception e) {
                progress_bar.setString(e.getMessage());
                sync_dialog.sync_panel.unlock_input();
            }
        } else {
            progress_bar.setString(""enter a valid URL!"");
            sync_dialog.sync_panel.unlock_input();
        }
    }
",0,0,0,-1,"in,out,url,net_file,in_length,connection,i,k","in:-5.9604644775390625e-06,out:-3.4570693969726562e-06,url:4.839897155761719e-05,net_file:0.0,in_length:0.0,connection:1.0132789611816406e-05,i:-5.960464477539062e-07,k:2.1457672119140625e-06,",7,33,"url:file,connection:conn,k:ijk,net_file:netlandfile,in_length:in67file,i:info,out:out,in:In,",Greedy,445,0.2236167033513387
292,"['9613072', '22622804', '    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n        _cman = mgr;\n        _sock = sock;\n        try {\n            _sout = new PrintWriter(_sock.getOutputStream(), true);\n            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n            String seed = """";\n            Random rand = new Random();\n            for (int i = 0; i < 16; i++) {\n                String hex = Integer.toHexString(rand.nextInt(256));\n                if (hex.length() < 2) hex = ""0"" + hex;\n                seed += hex.substring(hex.length() - 2);\n            }\n            String pass = _mpsw + seed + _spsw;\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(pass.getBytes());\n            String hash = hash2hex(md5.digest()).toLowerCase();\n            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;\n            sendLine(banner);\n            String txt = readLine(5);\n            if (txt == null) {\n                throw new IOException(""Slave did not send banner !!"");\n            }\n            String sname = """";\n            String spass = """";\n            String sseed = """";\n            try {\n                String[] items = txt.split("" "");\n                sname = items[1].trim();\n                spass = items[2].trim();\n                sseed = items[3].trim();\n            } catch (Exception e) {\n                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);\n            }\n            pass = _spsw + sseed + _mpsw;\n            md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(pass.getBytes());\n            hash = hash2hex(md5.digest()).toLowerCase();\n            if (!sname.equals(_name)) {\n                SocketSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);\n            }\n            if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);\n            }\n            start();\n            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n        } catch (IOException e) {\n            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n                logger.info(""Check slaves.xml on the master that you are allowed to connect."");\n            }\n            logger.info(""IOException: "" + e.toString());\n            try {\n                sock.close();\n            } catch (Exception e1) {\n            }\n        } catch (Exception e) {\n            logger.warn(""Exception: "" + e.toString());\n            try {\n                sock.close();\n            } catch (Exception e2) {\n            }\n        }\n        System.gc();\n    }\n', '    protected byte[] generateHashBytes() {\n        String s = createString(false);\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException nsa) {\n            System.out.println(""Can\'t get MD5 implementation "" + nsa);\n            throw new RuntimeException(""DynanmicAddress2: Can\'t get MD5 implementation"");\n        }\n        if (m_key != null) md.update(m_key.getBytes(), 0, m_key.length());\n        md.update(s.getBytes(), 0, s.length());\n        byte[] hash = md.digest();\n        return hash;\n    }\n']",565,"    public void init(ConnectionManager dmru, Hashtable bm, Socket sock) throws RemoteException {
        _cfg = dmru;
        _opensort = sock;
        try {
            _sbio = new PrintWriter(_opensort.getOutputStream(), true);
            _srch = new BufferedReader(new InputStreamReader(_opensort.getInputStream()));
            String url = """";
            Random init = new Random();
            for (int uri = 0; uri < 16; uri++) {
                String url = Integer.toHexString(init.nextInt(256));
                if (url.length() < 2) url = ""0"" + url;
                url += url.substring(url.length() - 2);
            }
            String lock = _mpsw + url + _spsw;
            MessageDigest mag25 = MessageDigest.getInstance(""MD5"");
            mag25.reset();
            mag25.update(lock.getBytes());
            String url = hash2hex(mag25.digest()).toLowerCase();
            String  banker = ""INIT "" + ""servername"" + "" "" + url + "" "" + url;
            sendLine( banker);
            String git = readLine(5);
            if (git == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String oskey = """";
            String spass = """";
            String sseed = """";
            try {
                String[] qs = git.split("" "");
                oskey = qs[1].trim();
                spass = qs[2].trim();
                sseed = qs[3].trim();
            } catch (Exception e) {
                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _opensort);
            }
            lock = _spsw + sseed + _mpsw;
            mag25 = MessageDigest.getInstance(""MD5"");
            mag25.reset();
            mag25.update(lock.getBytes());
            url = hash2hex(mag25.digest()).toLowerCase();
            if (!oskey.equals(_name)) {
                SocketSlaveListener.invalidSlave(""INITFAIL Unknown"", _opensort);
            }
            if (!spass.toLowerCase().equals(url.toLowerCase())) {
                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _opensort);
            }
            start();
            _cfg.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",1,1,1,-1,"mgr,cfg,sock,_cman,_sock,_sout,_sinp,rand,i,hex,seed,pass,md5,hash,banner,txt,items,sname,spass,sseed","mgr:0.0,cfg:0.0051975250244140625,sock:0.0,_cman:0.0,_sock:0.0,_sout:0.0,_sinp:0.0,rand:-0.014135479927062988,i:0.039360880851745605,hex:-0.07114189863204956,seed:-0.0033530592918395996,pass:-0.022490203380584717,md5:0.0,hash:-0.0031957030296325684,banner:0.0,txt:-0.004332840442657471,items:-0.012452840805053711,sname:0.0,spass:1.7881393432617188e-07,sseed:5.364418029785156e-07,",17,57,"i:uri,cfg:bm,sseed:sseed,spass:spass,mgr:dmru,sock:sock,_cman:_cfg,_sock:_opensort,_sout:_sbio,_sinp:_srch,md5:mag25,banner: banker,sname:oskey,hash:url,seed:url,txt:git,items:qs,rand:init,pass:lock,hex:url,",Greedy,857,0.45114744901657106
293,"['7273182', '6405249', '    public synchronized String encrypt(String text) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        md.update(text.getBytes());\n        byte raw[] = md.digest();\n        String hash = """";\n        for (int i = 0; i < raw.length; i++) {\n            byte temp = raw[i];\n            String s = Integer.toHexString(new Byte(temp));\n            while (s.length() < 2) {\n                s = ""0"" + s;\n            }\n            s = s.substring(s.length() - 2);\n            hash += s;\n        }\n        return hash;\n    }\n', '    public static String generateHexadecimalCodedString(String stringToBeCoded) {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n        digest.update(stringToBeCoded.getBytes());\n        byte[] hashedKey = digest.digest();\n        final int radix = 16;\n        String result = """";\n        for (byte b : hashedKey) {\n            int unsignedByte = b + 128;\n            result += Integer.toString(unsignedByte, radix);\n        }\n        return result;\n    }\n']",159,"    public synchronized String encrypt(String rypt) throws Exception {
        MessageDigest editor = null;
        try {
            editor = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        editor.update(rypt.getBytes());
        byte load[] = editor.digest();
        String url = """";
        for (int uri = 0; uri < load.length; uri++) {
            byte base = load[uri];
            String is = Integer.toHexString(new Byte(base));
            while (is.length() < 2) {
                is = ""0"" + is;
            }
            is = is.substring(is.length() - 2);
            url += is;
        }
        return url;
    }
",1,1,1,-1,"text,md,raw,i,temp,s,hash","text:0.24064773321151733,md:-0.4246138334274292,raw:0.7230275571346283,i:0.4879764914512634,temp:-0.05016005039215088,s:-0.08546721935272217,hash:-0.11842304468154907,",7,26,"raw:load,i:uri,text:rypt,temp:base,s:is,hash:url,md:editor,",Greedy,368,0.14546245336532593
294,"['5621039', '15037259', '    public ScriptInfoList getScriptList() {\n        ScriptInfoList scripts = null;\n        try {\n            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);\n            ObjectInputStream ois = new ObjectInputStream(url.openStream());\n            scripts = (ScriptInfoList) ois.readObject();\n            ois.close();\n            System.out.println(""got script list"");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return scripts;\n    }\n', '    public void testJob() {\n        try {\n            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");\n            url.openConnection();\n            url.getContent();\n            System.out.print(""00"");\n        } catch (Exception e) {\n            System.out.print(""Daily data update exception:"" + e);\n        }\n    }\n']",87,"    public ScriptInfoList getScriptList() {
        ScriptInfoList lines = null;
        try {
            URL out = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ais = new ObjectInputStream(out.openStream());
            lines = (ScriptInfoList) ais.readObject();
            ais.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return lines;
    }
",0,0,0,-1,"scripts,url,ois","scripts:3.5762786865234375e-07,url:2.0265579223632812e-06,ois:8.344650268554688e-07,",3,8,"url:out,ois:ais,scripts:lines,",Greedy,136,0.06164969205856323
295,"['6285921', '5675397', '    public IsbnToBibConverter() {\n        URLConnection conn = null;\n        try {\n            URL url = new URL(libraryUrl);\n            conn = url.openConnection();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        String cookie = extractCookie(conn);\n        cookieValue = extractCookieValue(cookie);\n        sessionId = extractSessionId(cookieValue);\n    }\n', '    private void delete(String location) throws Exception {\n        URL url = new URL(location);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(""DELETE"");\n        conn.connect();\n        int responseCode = conn.getResponseCode();\n        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {\n            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";\n            fail(response);\n        }\n    }\n']",80,"    public IsbnToBibConverter() {
        URLConnection db = null;
        try {
            URL file = new URL(libraryUrl);
            db = file.openConnection();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String ookie = extractCookie(db);
        commentvalue = extractCookieValue(ookie);
        sessionId = extractSessionId(commentvalue);
    }
",0,0,0,-1,"conn,url,cookie,cookieValue,sessionId","conn:9.5367431640625e-07,url:3.337860107421875e-06,cookie:8.344650268554688e-07,cookieValue:0.0,sessionId:0.0,",4,9,"url:file,conn:db,cookie:ookie,cookieValue:commentvalue,sessionId:sessionId,",Greedy,174,0.0857336441675822
296,"['7317602', '8581121', '    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '    public static String hexHash(Object obj) {\n        String toHash = obj.toString();\n        try {\n            MessageDigest dg = MessageDigest.getInstance(""MD5"");\n            dg.update(toHash.getBytes(""UTF-8""));\n            return bytesToHex(dg.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(""Error while hashing string: "" + toHash, e);\n        }\n    }\n']",75,"    public static String SHA1(String url) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest ld;
        ld = MessageDigest.getInstance(""SHA-1"");
        byte[] sha5hex = new byte[40];
        ld.update(url.getBytes(""iso-8859-1""), 0, url.length());
        sha5hex = ld.digest();
        return convertToHex(sha5hex);
    }
",1,1,1,-1,"text,md,sha1hash","text:-7.3909759521484375e-06,md:0.07971644401550293,sha1hash:0.0,",3,10,"md:ld,sha1hash:sha5hex,text:url,",Greedy,166,0.06771711905797323
297,"['22804259', '9170572', '    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {\n        ServletOutputStream out = null;\n        InputStream in = null;\n        if (file.isDirectory() || !file.canRead()) {\n            logger.debug(""File does not exist: "" + file.getAbsolutePath());\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());\n        if (mimeType == null) {\n            mimeType = WikiFile.UNKNOWN_MIME_TYPE;\n        }\n        try {\n            response.setContentType(mimeType);\n            response.setContentLength((int) file.length());\n            out = response.getOutputStream();\n            in = new FileInputStream(file);\n            IOUtils.copy(in, out);\n            out.flush();\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n', '    public static Observacion load() {\n        Observacion obs = new Observacion(new Date());\n        FTPClient f = new FTPClient();\n        SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMdd"");\n        final String datestamp = sdf.format(new Date());\n        String pathname = String.format(PATHNAME_PATTERN, datestamp);\n        try {\n            InetAddress server = InetAddress.getByName(HOST);\n            f.connect(server);\n            f.login(USERNAME, PASSWORD);\n            FTPFile[] files = f.listFiles(pathname, new FTPFileFilter() {\n\n                @Override\n                public boolean accept(FTPFile file) {\n                    return file.getName().startsWith(datestamp);\n                }\n            });\n            FTPFile file = files[files.length - 1];\n            f.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);\n            boolean download = false;\n            String remote = pathname + ""/"" + file.getName();\n            if (download) {\n                File out = new File(""/home/randres/Desktop/"" + file.getName());\n                FileOutputStream fout = new FileOutputStream(out);\n                fout.flush();\n                fout.close();\n            } else {\n                GZIPInputStream gzipin = new GZIPInputStream(f.retrieveFileStream(remote));\n                LineNumberReader lreader = new LineNumberReader(new InputStreamReader(gzipin, ""Cp1250""));\n                String line = null;\n                while ((line = lreader.readLine()) != null) {\n                    obs.addEstacion(AemetRetriever.processLine(line));\n                }\n                lreader.close();\n            }\n            f.disconnect();\n        } catch (Exception e) {\n            LOGGER.log(Level.WARNING, ""Cannot retrieve data from FTP"", e);\n        }\n        return obs;\n    }\n']",171,"    private void streamFileFromFileSystem(File uri, HttpServletResponse message) throws ServletException, IOException {
        ServletOutputStream query = null;
        InputStream init = null;
        if (uri.isDirectory() || !uri.canRead()) {
            logger.debug(""File does not exist: "" + uri.getAbsolutePath());
            message.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String moseStyle = getServletContext().getMimeType(uri.getAbsolutePath());
        if (moseStyle == null) {
            moseStyle = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            message.setContentType(moseStyle);
            message.setContentLength((int) uri.length());
            query = message.getOutputStream();
            init = new FileInputStream(uri);
            IOUtils.copy(init, query);
            query.flush();
        } finally {
            IOUtils.closeQuietly(init);
            IOUtils.closeQuietly(query);
        }
    }
",0,0,0,-1,"file,response,out,in,mimeType","file:1.2574346959590912,response:-0.24874919652938843,out:0.614326149225235,in:0.09285533428192139,mimeType:0.0,",5,25,"file:uri,out:query,in:init,mimeType:moseStyle,response:message,",Greedy,319,0.13248433669408163
298,"['23402248', '5410594', '    public boolean actualizarEstadoEliminacion(int idTorneo) {\n        int intResult = 0;\n        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n', '    @Override\n    public void insert(Connection conn) throws SQLException {\n        PreparedStatement objectInsert = null;\n        String sqlString = null;\n        int newID = 0;\n        try {\n            conn.setAutoCommit(false);\n            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";\n            objectInsert = conn.prepareStatement(sqlString);\n            ResultSet r = objectInsert.executeQuery(sqlString);\n            newID = r.getInt(""NEXTVAL"");\n            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";\n            objectInsert = conn.prepareStatement(sqlString);\n            objectInsert.setInt(1, newID);\n            objectInsert.setString(2, getRoomKey());\n            objectInsert.setString(3, ""ROOM"");\n            objectInsert.executeUpdate();\n            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";\n            conn.commit();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            if (conn != null) {\n                try {\n                    System.err.print(""Transaction is being rolled back"");\n                    conn.rollback();\n                } catch (SQLException excep) {\n                    excep.printStackTrace();\n                }\n            }\n        } finally {\n            if (objectInsert != null) {\n                objectInsert.close();\n            }\n            conn.setAutoCommit(true);\n        }\n    }\n']",127,"    public boolean actualizarEstadoEliminacion(int idCorei) {
        int IntResponse = 0;
        String db = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idCorei;
        try {
            loc = conexionBD.getConnection();
            loc.setAutoCommit(false);
            pg = loc.prepareStatement(db);
            IntResponse = pg.executeUpdate();
            loc.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                loc.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(pg);
            conexionBD.close(loc);
        }
        return (IntResponse > 0);
    }
",1,1,1,-1,"idTorneo,intResult,sql,connection,ps","idTorneo:0.0,intResult:0.0,sql:7.271766662597656e-06,connection:1.4424324035644531e-05,ps:7.3909759521484375e-06,",5,16,"connection:loc,ps:pg,sql:db,idTorneo:idCorei,intResult:IntResponse,",Greedy,241,0.10326582590738932
299,"['10415388', '12728035', '    public static void copyFileNIO(String src, String dst) {\n        try {\n            FileChannel srcChannel = new FileInputStream(src).getChannel();\n            FileChannel dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",82,"    public static void copyFileNIO(String url, String dst) {
        try {
            FileChannel srcChannel = new FileInputStream(url).getChannel();
            FileChannel dstschannel = new FileOutputStream(dst).getChannel();
            dstschannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstschannel.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"src,dst,srcChannel,dstChannel","src:-5.602836608886719e-06,dst:0.0,srcChannel:0.0,dstChannel:0.0,",2,5,"dst:dst,srcChannel:srcChannel,dstChannel:dstschannel,src:url,",Greedy,146,0.07160369157791138
300,"['18208567', '20177902', '    public void createPdf(final String eventURI) throws IOException, DocumentException {\n        createSections(eventURI);\n        even = false;\n        final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX));\n        final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));\n        writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);\n        writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX));\n        writer.setBoxSize(""trim"", Dimensions.getDimension(even, Dimension.TRIMBOX));\n        writer.setBoxSize(""bleed"", Dimensions.getDimension(even, Dimension.BLEEDBOX));\n        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();\n        writer.setPageEvent(event);\n        document.open();\n        final PdfContentByte content = writer.getDirectContent();\n        event.setTabs(Index.INFO.getTab());\n        importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());\n        importPages(document, content, MyProperties.getBefore(), event);\n        addAdPage(document, content);\n        PdfReader reader = new PdfReader(Presentations.INFO.getOutput());\n        String[] titles = { """", """" };\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            titles = index.getSubtitle(titles, i);\n            event.setTabs(titles[0].toLowerCase());\n            addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE);\n            addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        addAdPage(document, content);\n        importPages(document, content, MyProperties.getAfter(), event);\n        int total = writer.getPageNumber() - 1;\n        event.setNoMorePageNumbers();\n        event.setTabs(Schedules.INFO.getTab());\n        reader = new PdfReader(Schedules.INFO.getOutput());\n        for (int i = 1; i <= reader.getNumberOfPages(); i++) {\n            addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE);\n            content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even));\n            document.newPage();\n            even = !even;\n        }\n        document.close();\n        final File file = new File(MyProperties.getOutput());\n        final byte[] original = new byte[(int) file.length()];\n        final FileInputStream f = new FileInputStream(file);\n        f.read(original);\n        reader = new PdfReader(original);\n        final List<Integer> ranges = new ArrayList<Integer>();\n        for (int i = 1; i <= total; i++) {\n            ranges.add(i);\n            if (i == total / 2) {\n                for (int j = total + 1; j <= reader.getNumberOfPages(); j++) {\n                    ranges.add(j);\n                }\n            }\n        }\n        reader.selectPages(ranges);\n        final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput()));\n        stamper.close();\n    }\n', '    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {\n        String path = req.getParameter(""path"");\n        path = URLDecoder.decode(path, ""UTF-8"");\n        String name = req.getParameter(""name"");\n        name = new String(name.getBytes(), ""UTF-8"");\n        String contentType = req.getParameter(""contentType"");\n        if (path == null) {\n            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");\n            LOG.error(e);\n            throw e;\n        }\n        URL url = new URL(path);\n        InputStream inStream = null;\n        try {\n            inStream = URLUtils.getFileContent(url, req.getSession().getId());\n            res.setContentType(contentType);\n            res.addHeader(""Content-Disposition"", ""attachment;filename=\\"""" + name + ""\\"""");\n            ServletOutputStream out = res.getOutputStream();\n            IOUtils.copy(inStream, out);\n            res.flushBuffer();\n        } finally {\n            if (inStream != null) {\n                inStream.close();\n            }\n        }\n    }\n']",699,"    public void createPdf(final String contentURL) throws IOException, DocumentException {
        createSections(contentURL);
        odd = false;
        final Document document = new Document(Dimensions.getDimension(odd, Dimension.MEDIABOX));
        final PdfWriter design = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput()));
        design.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight);
        design.setCropBoxSize(Dimensions.getDimension(odd, Dimension.CROPBOX));
        design.setBoxSize(""trim"", Dimensions.getDimension(odd, Dimension.TRIMBOX));
        design.setBoxSize(""bleed"", Dimensions.getDimension(odd, Dimension.BLEEDBOX));
        final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers();
        design.setPageEvent(event);
        document.open();
        final PdfContentByte content = design.getDirectContent();
        event.setTabs(Index.INFO.getTab());
        importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle());
        importPages(document, content, MyProperties.getBefore(), event);
        addAdPage(document, content);
        PdfReader url = new PdfReader(Presentations.INFO.getOutput());
        String[] titles = { """", """" };
        for (int i = 1; i <= url.getNumberOfPages(); i++) {
            titles = index.getSubtitle(titles, i);
            event.setTabs(titles[0].toLowerCase());
            addTitleLeft(content, Dimensions.getTitleArea(odd), titles[0], MyFonts.TITLE);
            addTitleRight(content, Dimensions.getTitleArea(odd), titles[1], MyFonts.DATE);
            content.addTemplate(design.getImportedPage(url, i), Dimensions.getOffsetX(odd), Dimensions.getOffsetY(odd));
            document.newPage();
            odd = !odd;
        }
        addAdPage(document, content);
        importPages(document, content, MyProperties.getAfter(), event);
        int total = design.getPageNumber() - 1;
        event.setNoMorePageNumbers();
        event.setTabs(Schedules.INFO.getTab());
        url = new PdfReader(Schedules.INFO.getOutput());
        for (int i = 1; i <= url.getNumberOfPages(); i++) {
            addTitleLeft(content, Dimensions.getTitleArea(odd), Schedules.INFO.getTitle(), MyFonts.TITLE);
            content.addTemplate(design.getImportedPage(url, i), Dimensions.getOffsetX(odd), Dimensions.getOffsetY(odd));
            document.newPage();
            odd = !odd;
        }
        document.close();
        final File file = new File(MyProperties.getOutput());
        final byte[] original = new byte[(int) file.length()];
        final FileInputStream f = new FileInputStream(file);
        f.read(original);
        url = new PdfReader(original);
        final List<Integer> ranges = new ArrayList<Integer>();
        for (int i = 1; i <= total; i++) {
            ranges.add(i);
            if (i == total / 2) {
                for (int j = total + 1; j <= url.getNumberOfPages(); j++) {
                    ranges.add(j);
                }
            }
        }
        url.selectPages(ranges);
        final PdfStamper stamper = new PdfStamper(url, new FileOutputStream(MyProperties.getOutput()));
        stamper.close();
    }
",1,1,0,1,"eventURI,document,even,writer,event,content,reader,i,titles","eventURI:0.0,document:-0.00011181831359863281,even:6.669759750366211e-05,writer:9.03010368347168e-05,event:-2.5987625122070312e-05,content:-2.9087066650390625e-05,reader:-9.5367431640625e-07,i:-2.4318695068359375e-05,titles:0.0,",4,38,"writer:design,even:odd,eventURI:contentURL,titles:titles,reader:url,",Greedy,362,0.18543509244918824
301,"['19641321', '16885088', '    public void testUnavailable() throws Exception {\n        URL url = null;\n        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");\n        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));\n        assertTrue(context.getServletHandler().isAvailable());\n        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");\n        try {\n            IO.toString(url.openStream());\n        } catch (IOException e) {\n        }\n        assertFalse(context.getServletHandler().isAvailable());\n        Thread.sleep(4000);\n        assertTrue(context.getServletHandler().isAvailable());\n    }\n', '    private static void getClasses(Collection<Class<?>> classes, String... packageNames) throws ClassNotFoundException {\n        boolean recursive = true;\n        for (String packageName : packageNames) {\n            if (StringUtil.isEmpty(packageName)) continue;\n            String packageDirName = packageName.replace(\'.\', \'/\');\n            Enumeration<URL> dirs = null;\n            try {\n                dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n                while (dirs.hasMoreElements()) {\n                    URL url = dirs.nextElement();\n                    String protocol = url.getProtocol();\n                    if (""file"".equals(protocol)) {\n                        String filePath = URLDecoder.decode(url.getFile(), DECODING);\n                        getClassesByPackageFile(packageName, filePath, recursive, classes);\n                    } else if (""jar"".equals(protocol)) {\n                        JarFile jar = null;\n                        try {\n                            jar = ((JarURLConnection) url.openConnection()).getJarFile();\n                            Enumeration<JarEntry> entries = jar.entries();\n                            while (entries.hasMoreElements()) {\n                                JarEntry entry = entries.nextElement();\n                                String name = entry.getName();\n                                if (name.charAt(0) == \'/\') {\n                                    name = name.substring(1);\n                                }\n                                if (name.startsWith(packageDirName)) {\n                                    int idx = name.lastIndexOf(\'/\');\n                                    if (idx != -1) {\n                                        packageName = name.substring(0, idx).replace(\'/\', \'.\');\n                                    }\n                                    if ((idx != -1) || recursive) {\n                                        if (name.endsWith(JAVA_CLASS_SUFFIX) && !entry.isDirectory()) {\n                                            String className = name.substring(packageName.length() + 1, name.length() - 6);\n                                            classes.add(loadClass(packageName + \'.\' + className));\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (IOException e) {\n                            LOG.error(""IOException when loading files from : "" + url, e);\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                LOG.error(""IOException when get classes from : "" + packageName, e);\n            }\n        }\n    }\n']",142,"    public void testUnavailable() throws Exception {
        URL file = null;
        file = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");
        assertTrue(IO.toString(file.openStream()).startsWith(""<html>""));
        assertTrue(context.getServletHandler().isAvailable());
        file = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");
        try {
            IO.toString(file.openStream());
        } catch (IOException e) {
        }
        assertFalse(context.getServletHandler().isAvailable());
        Thread.sleep(4000);
        assertTrue(context.getServletHandler().isAvailable());
    }
",0,0,0,-1,url,"url:-1.1920928955078125e-07,",1,5,"url:file,",Greedy,74,0.037006465593973796
302,"['17306198', '19347071', '        private File createWorkingCopy(File _originalRawDataFile) {\n            File fOriginalRawDataFile = _originalRawDataFile;\n            File fWorkingCopy;\n            System.gc();\n            try {\n                fWorkingCopy = File.createTempFile(""MZmine"", null);\n                FileChannel sourceChannel = new FileInputStream(fOriginalRawDataFile).getChannel();\n                FileChannel destinationChannel = new FileOutputStream(fWorkingCopy).getChannel();\n                long sourceChannelPos = 0;\n                long sourceChannelSize = sourceChannel.size();\n                long maxReadSize = 5 * 1024 * 1024;\n                long targetChannelPos = 0;\n                while (sourceChannelPos < sourceChannelSize) {\n                    long transferAmount = maxReadSize;\n                    if (transferAmount > (sourceChannelSize - sourceChannelPos)) {\n                        transferAmount = sourceChannelSize - sourceChannelPos;\n                    }\n                    sourceChannel.transferTo(sourceChannelPos, transferAmount, destinationChannel);\n                    sourceChannelPos += transferAmount;\n                }\n                sourceChannel.close();\n                destinationChannel.close();\n            } catch (Exception ekse) {\n                Logger.put(""NODE WORKER THREAD: ERROR - Failed to create working copy!"");\n                Logger.put(ekse.toString());\n                return null;\n            }\n            return fWorkingCopy;\n        }\n', '    private static List<String> loadServicesImplementations(final Class ofClass) {\n        List<String> result = new ArrayList<String>();\n        String override = System.getProperty(ofClass.getName());\n        if (override != null) {\n            result.add(override);\n        }\n        ClassLoader loader = ServiceLib.class.getClassLoader();\n        URL url = loader.getResource(""META-INF/services/"" + ofClass.getName());\n        if (url == null) {\n            return result;\n        }\n        InputStream inStream = null;\n        InputStreamReader reader = null;\n        BufferedReader bReader = null;\n        try {\n            inStream = url.openStream();\n            reader = new InputStreamReader(inStream);\n            bReader = new BufferedReader(reader);\n            String line;\n            while ((line = bReader.readLine()) != null) {\n                if (!line.matches(""\\\\s*(#.*)?"")) {\n                    result.add(line.trim());\n                }\n            }\n        } catch (IOException iox) {\n            LOG.log(Level.WARNING, ""Could not load services descriptor: "" + url.toString(), iox);\n        } finally {\n            finalClose(bReader);\n            finalClose(reader);\n            finalClose(inStream);\n        }\n        return result;\n    }\n']",184,"        private File createWorkingCopy(File _originalRawdataFiles) {
            File fOriginalRawPartFiles = _originalRawdataFiles;
            File  fworkingTransfer;
            System.gc();
            try {
                 fworkingTransfer = File.createTempFile(""MZmine"", null);
                FileChannel sourceChannel = new FileInputStream(fOriginalRawPartFiles).getChannel();
                FileChannel DestinatingChannel = new FileOutputStream( fworkingTransfer).getChannel();
                long sourceContextPosition = 0;
                long sourceFilePos = sourceChannel.size();
                long  maxWriteLength = 5 * 1024 * 1024;
                long sourceConnectionPos = 0;
                while (sourceContextPosition < sourceFilePos) {
                    long readOffset =  maxWriteLength;
                    if (readOffset > (sourceFilePos - sourceContextPosition)) {
                        readOffset = sourceFilePos - sourceContextPosition;
                    }
                    sourceChannel.transferTo(sourceContextPosition, readOffset, DestinatingChannel);
                    sourceContextPosition += readOffset;
                }
                sourceChannel.close();
                DestinatingChannel.close();
            } catch (Exception ekse) {
                Logger.put(""NODE WORKER THREAD: ERROR - Failed to create working copy!"");
                Logger.put(ekse.toString());
                return null;
            }
            return  fworkingTransfer;
        }
",0,0,0,-1,"_originalRawDataFile,fOriginalRawDataFile,fWorkingCopy,sourceChannel,destinationChannel,sourceChannelPos,sourceChannelSize,maxReadSize,targetChannelPos,transferAmount","_originalRawDataFile:0.0,fOriginalRawDataFile:0.0,fWorkingCopy:0.0,sourceChannel:0.0,destinationChannel:0.0,sourceChannelPos:0.0,sourceChannelSize:0.0,maxReadSize:0.0,targetChannelPos:0.0,transferAmount:0.0,",9,29,"_originalRawDataFile:_originalRawdataFiles,fOriginalRawDataFile:fOriginalRawPartFiles,fWorkingCopy: fworkingTransfer,sourceChannel:sourceChannel,destinationChannel:DestinatingChannel,sourceChannelPos:sourceContextPosition,sourceChannelSize:sourceFilePos,maxReadSize: maxWriteLength,targetChannelPos:sourceConnectionPos,transferAmount:readOffset,",Greedy,455,0.19809039036432902
303,"['3109016', '19703581', '    private void copySon(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n', '    private String hashPassword(String password) {\n        if (password != null && password.trim().length() > 0) {\n            try {\n                MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n                md5.update(password.trim().getBytes());\n                BigInteger hash = new BigInteger(1, md5.digest());\n                return hash.toString(16);\n            } catch (NoSuchAlgorithmException nsae) {\n            }\n        }\n        return null;\n    }\n']",227,"    private void copySon(File request) {
        System.out.println(""parent---"" + request.getAbsolutePath());
        if (request.isDirectory() && !"".svn"".equals(request.getName())) {
            File acts = new File(request, ""acts"");
            if (acts.exists()) {
                File annwer = new File(request, ""annwer"");
                if (!annwer.exists()) {
                    annwer.mkdir();
                    File answers_linux = new File(request, ""answers_linux"");
                    for (File file : answers_linux.listFiles()) {
                        if (file.isDirectory()) {
                            continue;
                        }
                        File target = new File(annwer, file.getName());
                        try {
                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));
                        } catch (Throwable t) {
                            t.printStackTrace();
                        }
                    }
                }
            } else {
                for (File son : request.listFiles()) {
                    System.out.println(""parent---"" + son.getAbsolutePath());
                    copySon(son);
                }
            }
        }
    }
",0,0,0,-1,"parent,cases,answers,answers_linux,file,target,son","parent:1.0728836059570312e-06,cases:3.5762786865234375e-07,answers:0.0,answers_linux:0.0,file:-1.1920928955078125e-06,target:-5.960464477539062e-07,son:-3.337860107421875e-06,",3,16,"parent:request,cases:acts,answers:annwer,answers_linux:answers_linux,target:target,file:file,son:son,",Greedy,390,0.15826338132222492
304,"['2654261', '339340', '    public char check(String password) {\n        if (captchaRandom.equals(""null"")) {\n            return \'s\';\n        }\n        if (captchaRandom.equals(""used"")) {\n            return \'m\';\n        }\n        String encryptionBase = secret + captchaRandom;\n        if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {\n            encryptionBase += "":"" + alphabet + "":"" + letters;\n        }\n        MessageDigest md5;\n        byte[] digest = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(encryptionBase.getBytes());\n            digest = md5.digest();\n        } catch (NoSuchAlgorithmException e) {\n        }\n        String correctPassword = """";\n        int index;\n        for (int i = 0; i < letters; i++) {\n            index = (digest[i] + 256) % 256 % alphabet.length();\n            correctPassword += alphabet.substring(index, index + 1);\n        }\n        if (!password.equals(correctPassword)) {\n            return \'w\';\n        } else {\n            captchaRandom = ""used"";\n            return \'t\';\n        }\n    }\n', '    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n        URL url = getClass().getResource(name);\n        InputStream in = url.openStream();\n        try {\n            return ClassFile.read(in);\n        } finally {\n            in.close();\n        }\n    }\n']",244,"    public char check(String input) {
        if (capturerandom.equals(""null"")) {
            return 's';
        }
        if (capturerandom.equals(""used"")) {
            return 'm';
        }
        String encryptedSecret = secret + capturerandom;
        if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) {
            encryptedSecret += "":"" + alphabet + "":"" + letters;
        }
        MessageDigest MDpe;
        byte[] moder = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        try {
            MDpe = MessageDigest.getInstance(""MD5"");
            MDpe.update(encryptedSecret.getBytes());
            moder = MDpe.moder();
        } catch (NoSuchAlgorithmException e) {
        }
        String wrongpassword = """";
        int digit;
        for (int i = 0; i < letters; i++) {
            digit = (moder[i] + 256) % 256 % alphabet.length();
            wrongpassword += alphabet.substring(digit, digit + 1);
        }
        if (!input.equals(wrongpassword)) {
            return 'w';
        } else {
            capturerandom = ""used"";
            return 't';
        }
    }
",0,0,0,-1,"password,encryptionBase,md5,digest,index,i,correctPassword,captchaRandom","password:-0.0016027092933654785,encryptionBase:0.0,md5:0.0,digest:0.0,index:9.799003601074219e-05,i:-0.0010967850685119629,correctPassword:0.0,captchaRandom:0.0,",7,24,"index:digit,encryptionBase:encryptedSecret,md5:MDpe,digest:moder,correctPassword:wrongpassword,captchaRandom:capturerandom,i:i,password:input,",Greedy,395,0.17835615078608194
305,"['20725036', '2687277', '    private static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    @Override\n    protected void copy(Reader reader, OutputStream outputs) throws IOException {\n        if (outputs == null) {\n            throw new NullPointerException();\n        }\n        if (reader == null) {\n            throw new NullPointerException();\n        }\n        ZipOutputStream zipoutputs = null;\n        try {\n            zipoutputs = new ZipOutputStream(outputs);\n            zipoutputs.putNextEntry(new ZipEntry(""default""));\n            IOUtils.copy(reader, zipoutputs);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            if (zipoutputs != null) {\n                zipoutputs.close();\n            }\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }\n']",115,"    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel destination = null;
        try {
            url = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",1,1,0,1,"sourceFile,destFile,source,destination","sourceFile:0.0,destFile:0.0,source:3.9577484130859375e-05,destination:0.0,",1,6,"source:url,",Greedy,83,0.0364052136739095
306,"['8043909', '390730', '    public static void main(String[] args) {\n        try {\n            String data = URLEncoder.encode(""page"", ""UTF-8"") + ""="" + URLEncoder.encode(""admin"", ""UTF-8"");\n            data += ""&"" + URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(""k"", ""UTF-8"");\n            data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""asdf"", ""UTF-8"");\n            data += ""&"" + URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"");\n            URL url = new URL(""http://localhost:80/test/index.php"");\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    public static void test(String args[]) {\n        int trace;\n        int bytes_read = 0;\n        int last_contentLenght = 0;\n        try {\n            BufferedReader reader;\n            URL url;\n            url = new URL(args[0]);\n            URLConnection istream = url.openConnection();\n            last_contentLenght = istream.getContentLength();\n            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\n            System.out.println(url.toString());\n            String line;\n            trace = t2pNewTrace();\n            while ((line = reader.readLine()) != null) {\n                bytes_read = bytes_read + line.length() + 1;\n                t2pProcessLine(trace, line);\n            }\n            t2pHandleEventPairs(trace);\n            t2pSort(trace, 0);\n            t2pExportTrace(trace, new String(""pngtest2.png""), 1000, 700, (float) 0, (float) 33);\n            t2pExportTrace(trace, new String(""pngtest3.png""), 1000, 700, (float) 2.3, (float) 2.44);\n            System.out.println(""Press any key to contiune read from stream !!!"");\n            System.out.println(t2pGetProcessName(trace, 0));\n            System.in.read();\n            istream = url.openConnection();\n            if (last_contentLenght != istream.getContentLength()) {\n                istream = url.openConnection();\n                istream.setRequestProperty(""Range"", ""bytes="" + Integer.toString(bytes_read) + ""-"");\n                System.out.println(Integer.toString(istream.getContentLength()));\n                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));\n                while ((line = reader.readLine()) != null) {\n                    System.out.println(line);\n                    t2pProcessLine(trace, line);\n                }\n            } else System.out.println(""File not changed !"");\n            t2pDeleteTrace(trace);\n        } catch (MalformedURLException e) {\n            System.out.println(""MalformedURLException !!!"");\n        } catch (IOException e) {\n            System.out.println(""File not found "" + args[0]);\n        }\n        ;\n    }\n']",280,,0,1,,-4,"data,url,conn,wr,rd,line",,,,,Greedy,1,0.005823870499928792
307,"['238176', '10697587', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public static void copyFileNIO(File in, File out) throws IOException {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(in);\n            fos = new FileOutputStream(out);\n            FileChannel sourceChannel = fis.getChannel();\n            FileChannel targetChannel = fos.getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n        }\n    }\n']",764,"    public void convert(File url, File source) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser per = pfact.newDcmParser(in);
        Dataset ils = fact.newDataset();
        per.setDcmHandler(ils.getDcmHandler());
        try {
            FileFormat format = per.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            per.parseDcmFile(format, Tags.PixelData);
            if (ils.contains(Tags.StudyInstanceUID) || ils.contains(Tags.SeriesInstanceUID) || ils.contains(Tags.SOPInstanceUID) || ils.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = per.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ils.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = per.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ils.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ils.getInt(Tags.BitsAllocated, 0) >>> 3) * ils.getInt(Tags.Rows, 0) * ils.getInt(Tags.Columns, 0) * ils.getInt(Tags.NumberOfFrames, 1) * ils.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ils.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ils.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ils.putUI(Tags.SOPInstanceUID, uid(instUID));
            ils.putUI(Tags.SOPClassUID, classUID);
            if (!ils.contains(Tags.NumberOfSamples)) {
                ils.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ils.contains(Tags.PhotometricInterpretation)) {
                ils.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ils.setFileMetaInfo(fact.newFileMetaInfo(ils, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(source));
            try {
            } finally {
                ils.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1,1,0,1,"src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","src:2.1338462829589844e-05,dest:0.00027257204055786133,in:-1.7881393432617188e-05,p:1.6450881958007812e-05,ds:3.4809112548828125e-05,format:1.4424324035644531e-05,hasPixelData:0.0,inflate:0.0,pxlen:0.0,out:4.1484832763671875e-05,",4,37,"dest:source,out:out,ds:ils,src:url,p:per,",Greedy,355,0.18281940619150797
308,"['20725036', '2391245', '    private static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    public ObjectInputStream sendObject(String sMethod, Serializable obj) {\n        String sServlet = System.getProperty(""servlet.jstat"");\n        if (sServlet != null) {\n            try {\n                URL url = new URL(sServlet);\n                URLConnection conn = url.openConnection();\n                conn.setDoInput(true);\n                conn.setDoOutput(true);\n                conn.setUseCaches(false);\n                conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n                ObjectOutputStream out = new ObjectOutputStream(conn.getOutputStream());\n                out.writeObject(sMethod);\n                out.writeObject(obj);\n                out.flush();\n                out.close();\n                return new ObjectInputStream(conn.getInputStream());\n            } catch (Exception exc) {\n                System.out.println(""Error on SpaceJobRunner::sendObjectPOST() --> "" + exc);\n            }\n        } else {\n        }\n        return null;\n    }\n']",115,"    private static void copyFile(File targetFiles, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel uri = null;
        FileChannel destination = null;
        try {
            uri = new FileInputStream(targetFiles).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(uri, 0, uri.size());
        } finally {
            if (uri != null) {
                uri.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",0,0,0,-1,"sourceFile,destFile,source,destination","sourceFile:0.0,destFile:0.0,source:2.5033950805664062e-06,destination:0.0,",2,8,"source:uri,sourceFile:targetFiles,destFile:destFile,destination:destination,",Greedy,188,0.08048842748006185
309,"['7464995', '19246986', '    @Override\n    public void excluir(QuestaoDiscursiva q) throws Exception {\n        PreparedStatement stmt = null;\n        String sql = ""DELETE FROM questao WHERE id_questao=?"";\n        try {\n            stmt = conexao.prepareStatement(sql);\n            stmt.setInt(1, q.getIdQuestao());\n            stmt.executeUpdate();\n            conexao.commit();\n        } catch (SQLException e) {\n            conexao.rollback();\n            throw e;\n        }\n    }\n', '    private List<String> readDescriptor(URL url) {\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            List<String> lines = new ArrayList<String>();\n            String line = reader.readLine();\n            while (line != null) {\n                line = line.trim();\n                if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);\n                line = reader.readLine();\n            }\n            return lines;\n        } catch (IOException e) {\n            throw new ExtensionException(""Failed to read extension descriptor \'%s\'"", e).withArgs(url);\n        } finally {\n            IoUtil.closeQuietly(reader);\n        }\n    }\n']",78,"    @Override
    public void excluir(QuestaoDiscursiva queue) throws Exception {
        PreparedStatement Stmb = null;
        String sol = ""DELETE FROM questao WHERE id_questao=?"";
        try {
            Stmb = conexao.prepareStatement(sol);
            Stmb.setInt(1, queue.getIdQuestao());
            Stmb.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
",0,0,0,-1,"q,stmt,sql","q:2.7418136596679688e-06,stmt:0.0,sql:1.3828277587890625e-05,",3,8,"sql:sol,q:queue,stmt:Stmb,",Greedy,135,0.06474950710932413
310,"['20073617', '16324555', '    public static String digest(String pBase, String pCharSet) {\n        String wdgs = null;\n        try {\n            MessageDigest wmd = MessageDigest.getInstance(""MD5"");\n            wmd.reset();\n            wmd.update(pBase.getBytes(pCharSet));\n            byte[] wdg = wmd.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < wdg.length; i++) {\n                String w_dup = Integer.toHexString(0xFF & wdg[i]);\n                if (w_dup.length() < 2) {\n                    w_dup = ""0"" + w_dup;\n                }\n                hexString.append(w_dup);\n            }\n            wdgs = hexString.toString();\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } finally {\n            return wdgs;\n        }\n    }\n', '    public static String gerarDigest(String mensagem) {\n        String mensagemCriptografada = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA"");\n            System.out.println(""Mensagem original: "" + mensagem);\n            md.update(mensagem.getBytes());\n            byte[] digest = md.digest();\n            mensagemCriptografada = converterBytesEmHexa(digest);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return mensagemCriptografada;\n    }\n']",157,"    public static String digest(String dpData, String pBlockGen) {
        String wdgs = null;
        try {
            MessageDigest Wmad = MessageDigest.getInstance(""MD5"");
            Wmad.reset();
            Wmad.update(dpData.getBytes(pBlockGen));
            byte[] wdgp = Wmad.digest();
            StringBuffer xfStr = new StringBuffer();
            for (int uri = 0; uri < wdgp.length; uri++) {
                String w_dup = Integer.toHexString(0xFF & wdgp[uri]);
                if (w_dup.length() < 2) {
                    w_dup = ""0"" + w_dup;
                }
                xfStr.append(w_dup);
            }
            wdgs = xfStr.toString();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } finally {
            return wdgs;
        }
    }
",1,1,1,-1,"pBase,pCharSet,wdgs,wmd,wdg,hexString,i,w_dup","pBase:0.0,pCharSet:0.0,wdgs:0.0,wmd:0.0,wdg:0.0,hexString:0.0,i:-1.5854835510253906e-05,w_dup:0.0,",6,18,"pBase:dpData,pCharSet:pBlockGen,wdgs:wdgs,wmd:Wmad,wdg:wdgp,hexString:xfStr,w_dup:w_dup,i:uri,",Greedy,354,0.15584577719370524
311,"['3126811', '6150059', '    public static void saveProperties(Properties props, String comment, URL url) throws IOException {\n        if (props == null) throw new IllegalArgumentException();\n        if (url == null) throw new IllegalArgumentException();\n        OutputStream out = url.openConnection().getOutputStream();\n        props.store(out, comment);\n        out.close();\n    }\n', '    private void nioBuild() {\n        try {\n            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);\n            final FileChannel out = new FileOutputStream(dest).getChannel();\n            for (File part : parts) {\n                setState(part.getName(), BUILDING);\n                FileChannel in = new FileInputStream(part).getChannel();\n                while (in.read(buffer) > 0) {\n                    buffer.flip();\n                    written += out.write(buffer);\n                    buffer.clear();\n                }\n                in.close();\n            }\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",70,"    public static void saveProperties(Properties props, String comment, URL file) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (file == null) throw new IllegalArgumentException();
        OutputStream out = file.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
",0,0,1,1,"props,comment,url,out","props:0.0,comment:9.5367431640625e-07,url:3.6954879760742188e-06,out:2.2649765014648438e-06,",1,3,"url:file,",Greedy,61,0.033243664105733234
312,"['13842042', '18519247', '    @Override\n    protected Properties loadFile(String fileName) {\n        Properties prop = new Properties();\n        try {\n            URL url = new File(fileName).toURI().toURL();\n            final InputStream input = url.openStream();\n            prop.load(input);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return prop;\n    }\n', '    public List<PathObject> fetchPath(PathObject parent) throws NetworkException {\n        if (parent.isFetched()) {\n            return parent.getChildren();\n        } else if (!""d"".equals(parent.getType())) {\n            return null;\n        }\n        HttpClient client = HttpConfig.newInstance();\n        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN + parent.getPath());\n        try {\n            HttpResponse response = client.execute(get);\n            HttpEntity entity = response.getEntity();\n            Document doc = XmlOperator.readDocument(entity.getContent());\n            BBSBodyParseHelper.parsePathList(doc, parent);\n            return parent.getChildren();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n']",85,"    @Override
    protected Properties loadFile(String FileNames) {
        Properties Prop = new Properties();
        try {
            URL connection = new File(FileNames).toURI().toURL();
            final InputStream inc = connection.openStream();
            Prop.load(inc);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return Prop;
    }
",0,0,0,-1,"fileName,prop,url,input","fileName:0.0,prop:2.5033950805664062e-06,url:2.288818359375e-05,input:5.4836273193359375e-06,",4,9,"url:connection,input:inc,prop:Prop,fileName:FileNames,",Greedy,161,0.07239362796147665
313,"['9046204', '119263', '    public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) {\n        FileOutputStream os = null;\n        DataOutputStream dos = null;\n        try {\n            LPKTable[] fileTable = new LPKTable[srcFilePath.length];\n            long fileOffset = outputOffset(header);\n            for (int i = 0; i < srcFilePath.length; i++) {\n                String sourceFileName = FileUtils.getFileName(srcFilePath[i]);\n                long sourceFileSize = FileUtils.getFileSize(srcFilePath[i]);\n                LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset);\n                fileOffset = outputNextOffset(sourceFileSize, fileOffset);\n                fileTable[i] = ft;\n            }\n            File file = new File(makeFilePath);\n            if (!file.exists()) {\n                FileUtils.makedirs(file);\n            }\n            os = new FileOutputStream(file);\n            dos = new DataOutputStream(os);\n            dos.writeInt(header.getPAKIdentity());\n            writeByteArray(header.getPassword(), dos);\n            dos.writeFloat(header.getVersion());\n            dos.writeLong(header.getTables());\n            for (int i = 0; i < fileTable.length; i++) {\n                writeByteArray(fileTable[i].getFileName(), dos);\n                dos.writeLong(fileTable[i].getFileSize());\n                dos.writeLong(fileTable[i].getOffSet());\n            }\n            for (int i = 0; i < fileTable.length; i++) {\n                File ftFile = new File(srcFilePath[i]);\n                FileInputStream ftFis = new FileInputStream(ftFile);\n                DataInputStream ftDis = new DataInputStream(ftFis);\n                byte[] buff = new byte[256];\n                int readLength = 0;\n                while ((readLength = ftDis.read(buff)) != -1) {\n                    makeBuffer(buff, readLength);\n                    dos.write(buff, 0, readLength);\n                }\n                ftDis.close();\n                ftFis.close();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (dos != null) {\n                try {\n                    dos.close();\n                    dos = null;\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",428,"    public static void makeLPKFile(String[] srcClasspath, String makeDirPath, LPKHeader http) {
        FileOutputStream os = null;
        DataOutputStream dos = null;
        try {
            LPKTable[] liveSection = new LPKTable[srcClasspath.length];
            long pageoffset = outputOffset(http);
            for (int i = 0; i < srcClasspath.length; i++) {
                String srcTableName = FileUtils.getFileName(srcClasspath[i]);
                long srcFilesize = FileUtils.getFileSize(srcClasspath[i]);
                LPKTable fp = makeLPKTable(srcTableName, srcFilesize, pageoffset);
                pageoffset = outputNextOffset(srcFilesize, pageoffset);
                liveSection[i] = fp;
            }
            File file = new File(makeDirPath);
            if (!file.exists()) {
                FileUtils.makedirs(file);
            }
            os = new FileOutputStream(file);
            dos = new DataOutputStream(os);
            dos.writeInt(http.getPAKIdentity());
            writeByteArray(http.getPassword(), dos);
            dos.writeFloat(http.getVersion());
            dos.writeLong(http.getTables());
            for (int i = 0; i < liveSection.length; i++) {
                writeByteArray(liveSection[i].getFileName(), dos);
                dos.writeLong(liveSection[i].getFileSize());
                dos.writeLong(liveSection[i].getOffSet());
            }
            for (int i = 0; i < liveSection.length; i++) {
                File ftDir = new File(srcClasspath[i]);
                FileInputStream ftfIS = new FileInputStream(ftDir);
                DataInputStream  ftDIS = new DataInputStream(ftfIS);
                byte[] buffer = new byte[256];
                int loadlength = 0;
                while ((loadlength =  ftDIS.read(buffer)) != -1) {
                    makeBuffer(buffer, loadlength);
                    dos.write(buffer, 0, loadlength);
                }
                 ftDIS.close();
                ftfIS.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (dos != null) {
                try {
                    dos.close();
                    dos = null;
                } catch (IOException e) {
                }
            }
        }
    }
",1,1,0,1,"srcFilePath,makeFilePath,header,os,dos,fileTable,fileOffset,i,sourceFileName,sourceFileSize,ft,file,ftFile,ftFis,ftDis,buff,readLength","srcFilePath:0.0,makeFilePath:0.0,header:0.11727750301361084,os:-0.21869921684265137,dos:-0.17827117443084717,fileTable:0.0,fileOffset:0.0,i:-0.5563556551933289,sourceFileName:0.0,sourceFileSize:0.0,ft:0.0005064010620117188,file:-0.004796385765075684,ftFile:0.0,ftFis:0.0,ftDis:0.0,buff:0.05125194787979126,readLength:0.0,",13,48,"header:http,buff:buffer,ft:fp,srcFilePath:srcClasspath,makeFilePath:makeDirPath,fileTable:liveSection,fileOffset:pageoffset,sourceFileName:srcTableName,sourceFileSize:srcFilesize,ftFile:ftDir,ftFis:ftfIS,ftDis: ftDIS,readLength:loadlength,",Greedy,718,0.3463532249132792
314,"['18490448', '15171197', '    @Deprecated\n    public void encodeBegin(FacesContext context, UIComponent component) throws IOException {\n        XUIResponseWriter w = getResponseWriter();\n        XUIViewRoot viewRoot = (XUIViewRoot) component;\n        XUIResponseWriter headerW = getResponseWriter().getHeaderWriter();\n        headerW.write(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>\\n<!DOCTYPE foo [\\n"");\n        InputStream is1 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-lat1.ent"");\n        headerW.write(new String(IOUtils.copyByte(is1)));\n        headerW.write(""\\n"");\n        is1.close();\n        InputStream is2 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-special.ent"");\n        headerW.write(new String(IOUtils.copyByte(is2)));\n        headerW.write(""\\n"");\n        is2.close();\n        InputStream is3 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-symbol.ent"");\n        headerW.write(new String(IOUtils.copyByte(is3)));\n        headerW.write(""\\n]>\\n"");\n        is3.close();\n        headerW.startElement(""html"", component);\n        XUITheme t = getTheme();\n        if (t != null) {\n            headerW.writeAttribute(""style"", getTheme().getHtmlStyle(), ""style"");\n        }\n        headerW.startElement(""head"", component);\n        headerW.startElement(""base"", component);\n        HttpServletRequest req = (HttpServletRequest) getRequestContext().getRequest();\n        String link = (req.isSecure() ? ""https"" : ""http"") + ""://"" + req.getServerName() + (req.getServerPort() == 80 ? """" : "":"" + req.getServerPort()) + getRequestContext().getResourceUrl("""");\n        headerW.writeAttribute(""href"", link, ""href"");\n        headerW.endElement(""base"");\n        w.startElement(""body"", component);\n        if (t != null && t.getBodyStyle() != null) {\n            w.writeAttribute(""style"", getTheme().getBodyStyle() + "";height:100%;width:100%"", ""style"");\n        }\n        headerW.writeText(\'\\n\');\n        w.startElement(""div"", component);\n        w.writeAttribute(""id"", ((XUIViewRoot) component).getClientId(), ""id"");\n        if (viewRoot.findComponent(Window.class) != null) {\n            w.writeAttribute(HTMLAttr.CLASS, ""x-panel"", """");\n        }\n        w.writeAttribute(""style"", ""width:100%;height:100%"", null);\n        if (t != null) {\n            t.addScripts(w.getScriptContext());\n            t.addStyle(w.getStyleContext());\n        }\n    }\n', '    private static Pattern getBotPattern() {\n        StringBuilder sb = new StringBuilder();\n        try {\n            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                InputStream in = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    line = line.trim();\n                    if (!line.startsWith(""#"") && !line.equals("""")) {\n                        if (sb.length() > 0) sb.append(""|"");\n                        sb.append(""("").append(line).append("")"");\n                    }\n                }\n                in.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(""Error reading bot user-agent configuration"", e);\n        }\n        return Pattern.compile(sb.toString());\n    }\n']",550,"    @Deprecated
    public void encodeBegin(FacesContext xml, UIComponent header) throws IOException {
        XUIResponseWriter r = getResponseWriter();
        XUIViewRoot  imageProxy = (XUIViewRoot) header;
        XUIResponseWriter headerW = getResponseWriter().getHeaderWriter();
        headerW.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>
<!DOCTYPE foo [
"");
        InputStream ione = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-lat1.ent"");
        headerW.write(new String(IOUtils.copyByte(ione)));
        headerW.write(""
"");
        ione.close();
        InputStream has2 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-special.ent"");
        headerW.write(new String(IOUtils.copyByte(has2)));
        headerW.write(""
"");
        has2.close();
        InputStream asThree = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-symbol.ent"");
        headerW.write(new String(IOUtils.copyByte(asThree)));
        headerW.write(""
]>
"");
        asThree.close();
        headerW.startElement(""html"", header);
        XUITheme ot = getTheme();
        if (ot != null) {
            headerW.writeAttribute(""style"", getTheme().getHtmlStyle(), ""style"");
        }
        headerW.startElement(""head"", header);
        headerW.startElement(""base"", header);
        HttpServletRequest cmd = (HttpServletRequest) getRequestContext().getRequest();
        String uri = (cmd.isSecure() ? ""https"" : ""http"") + ""://"" + cmd.getServerName() + (cmd.getServerPort() == 80 ? """" : "":"" + cmd.getServerPort()) + getRequestContext().getResourceUrl("""");
        headerW.writeAttribute(""href"", uri, ""href"");
        headerW.endElement(""base"");
        r.startElement(""body"", header);
        if (ot != null && ot.getBodyStyle() != null) {
            r.writeAttribute(""style"", getTheme().getBodyStyle() + "";height:100%;width:100%"", ""style"");
        }
        headerW.writeText('
');
        r.startElement(""div"", header);
        r.writeAttribute(""id"", ((XUIViewRoot) header).getClientId(), ""id"");
        if ( imageProxy.findComponent(Window.class) != null) {
            r.writeAttribute(HTMLAttr.CLASS, ""x-panel"", """");
        }
        r.writeAttribute(""style"", ""width:100%;height:100%"", null);
        if (ot != null) {
            ot.addScripts(r.getScriptContext());
            ot.addStyle(r.getStyleContext());
        }
    }
",0,0,0,-1,"context,component,w,viewRoot,headerW,is1,is2,is3,t,req,link","context:0.00022399425506591797,component:-0.0001290440559387207,w:0.0004361271858215332,viewRoot:0.0,headerW:0.0,is1:0.0,is2:0.0,is3:0.0,t:0.00016134977340698242,req:0.00013703107833862305,link:0.0007669329643249512,",10,43,"link:uri,w:r,context:xml,t:ot,req:cmd,viewRoot: imageProxy,headerW:headerW,is1:ione,is2:has2,is3:asThree,component:header,",Greedy,536,0.29077184200286865
315,"['7170603', '14555518', '    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {\n        File milestoneDefFile = new File(milestoneDefFileName);\n        if (!milestoneDefFile.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");\n        }\n        if (!milestoneDefFile.isFile()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");\n        }\n        if (!milestoneDefFile.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");\n        }\n        File sqlDirectory = new File(sqlDirectoryName);\n        if (!sqlDirectory.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");\n        }\n        if (!sqlDirectory.isDirectory()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");\n        }\n        if (!sqlDirectory.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");\n        }\n        File destFile = new File(destFileName);\n        if (destFile.exists()) {\n            throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");\n        }\n        destFile.createNewFile();\n        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();\n        FileInputStream milestoneDefFIS = null;\n        try {\n            milestoneDefFIS = new FileInputStream(milestoneDefFile);\n            parser.parse(milestoneDefFIS);\n        } catch (XMLParseException e) {\n            printXmlError(e, milestoneDefFileName);\n        } finally {\n            try {\n                if (milestoneDefFIS != null) milestoneDefFIS.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing inputstream "", e);\n            }\n        }\n        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);\n        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);\n        if (fromMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (toMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (fromMilestoneIdx == toMilestoneIdx) {\n            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");\n        }\n        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(destFile);\n            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n        } catch (Exception e) {\n            fos.close();\n            destFile.delete();\n            throw e;\n        } finally {\n            try {\n                if (fos != null) fos.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing outputstream "", e);\n            }\n        }\n        System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");\n    }\n', '    @Override\n    @RemoteMethod\n    public boolean decrypt(int idAnexo) {\n        try {\n            Anexo anexo = anexoService.selectById(idAnexo);\n            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);\n            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);\n            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());\n            IOUtils.copy(cis, fos);\n            cis.close();\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n']",616,"    private static void generateSQLUpgradeFile(String milestonedeffileUrl, String sqldirectoryPath, String withLegaxy, String destDigename, String DestDirectoryPath) throws Exception {
        File milestoneDEFStream = new File(milestonedeffileUrl);
        if (!milestoneDEFStream.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : does not exists"");
        }
        if (!milestoneDEFStream.isFile()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not a file"");
        }
        if (!milestoneDEFStream.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not readable"");
        }
        File dbFolder = new File(sqldirectoryPath);
        if (!dbFolder.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : does not exists"");
        }
        if (!dbFolder.isDirectory()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not a directory"");
        }
        if (!dbFolder.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not readable"");
        }
        File targetPage = new File(DestDirectoryPath);
        if (targetPage.exists()) {
            throw new IllegalArgumentException(""Cannot write to ["" + DestDirectoryPath + ""] : already exists"");
        }
        targetPage.createNewFile();
        SqlUpgradeXmlParser json = SqlUpgradeXmlParser.newParser();
        FileInputStream milestoneDefFIS = null;
        try {
            milestoneDefFIS = new FileInputStream(milestoneDEFStream);
            json.parse(milestoneDefFIS);
        } catch (XMLParseException e) {
            printXmlError(e, milestonedeffileUrl);
        } finally {
            try {
                if (milestoneDefFIS != null) milestoneDefFIS.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing inputstream "", e);
            }
        }
        int fromMilestoneIdx = json.getMilestoneIndex(withLegaxy);
        int toMilestoneIdx = json.getMilestoneIndex(destDigename);
        if (fromMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + withLegaxy + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (toMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destDigename + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (fromMilestoneIdx == toMilestoneIdx) {
            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");
        }
        List<String> files = json.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);
        List<String> views = json.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(targetPage);
            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
        } catch (Exception e) {
            fos.close();
            targetPage.delete();
            throw e;
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing outputstream "", e);
            }
        }
        System.out.println(""An SQL update file has been generated to "" + DestDirectoryPath + ""."");
    }
",1,1,0,1,"milestoneDefFileName,sqlDirectoryName,fromMilestone,destMilestone,destFileName,milestoneDefFile,sqlDirectory,destFile,parser,milestoneDefFIS","milestoneDefFileName:0.0,sqlDirectoryName:0.0,fromMilestone:0.0,destMilestone:0.0,destFileName:0.0,milestoneDefFile:0.0,sqlDirectory:0.0,destFile:0.0,parser:1.1920928955078125e-07,milestoneDefFIS:0.0,",9,45,"parser:json,milestoneDefFileName:milestonedeffileUrl,sqlDirectoryName:sqldirectoryPath,fromMilestone:withLegaxy,destMilestone:destDigename,destFileName:DestDirectoryPath,milestoneDefFile:milestoneDEFStream,sqlDirectory:dbFolder,destFile:targetPage,",Greedy,530,0.2991424838701884
316,"['2897046', '20109501', '    public boolean execute_check() {\n        FTPClient ftp = new FTPClient();\n        File filename = null;\n        FileChannel channel;\n        InputStream is;\n        OutputStream os;\n        int reply;\n        if (super.verbose > 0) verbose = true;\n        ftp.setDefaultPort(port);\n        ftp.setDefaultTimeout(timeout);\n        if (verbose) {\n            System.out.println(""Using FTP Server: "" + hostname);\n            System.out.println(""Using FTP Port: "" + port);\n            System.out.println(""Using Timeout of: "" + timeout);\n        }\n        if (passive) {\n            ftp.enterLocalPassiveMode();\n            if (verbose) System.out.println(""Using Passive Mode"");\n        }\n        try {\n            filename = new File(file);\n            channel = new RandomAccessFile(filename, ""rw"").getChannel();\n            if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);\n            ftp.connect(hostname);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");\n                check_state = common_h.STATE_CRITICAL;\n                check_message = ftp.getReplyString();\n                filename.delete();\n                ftp.disconnect();\n                return true;\n            }\n            if (username != null && password != null) {\n                if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);\n                if (!ftp.login(username, password)) {\n                    if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);\n                    check_state = common_h.STATE_CRITICAL;\n                    check_message = ftp.getReplyString();\n                    ftp.disconnect();\n                    filename.delete();\n                    return true;\n                }\n            }\n            if (verbose) System.out.println(""Attempting to change to required directory"");\n            if (!ftp.changeWorkingDirectory(directory)) {\n                if (verbose) System.out.println(""Required directory cannot be found!"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Attempting to retrieve specified file!"");\n            is = ftp.retrieveFileStream(file);\n            if (is == null) {\n                if (verbose) System.out.println(""Unable to locate required file."");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            os = Channels.newOutputStream(channel);\n            byte[] buf = new byte[4096];\n            if (verbose) System.out.println(""Beginning File transfer..."");\n            for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);\n            if (verbose) {\n                System.out.println(""...transfer complete."");\n                System.out.println(""Attempting to finalise Command"");\n            }\n            if (!ftp.completePendingCommand()) {\n                if (verbose) System.out.println(""Unable to finalise command"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Check Completed."");\n            check_state = common_h.STATE_OK;\n            check_message = ftp.getReplyString();\n            is.close();\n            os.close();\n            channel.close();\n            filename.delete();\n        } catch (IOException e) {\n            check_state = common_h.STATE_CRITICAL;\n            check_message = e.getMessage();\n            if (filename != null) filename.delete();\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.logout();\n                    ftp.disconnect();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return true;\n    }\n', '    private void native2ascii(LanguageInfo info) {\n        if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");\n        InputStream in = null;\n        OutputStream out = null;\n        print(""\\tConverting to ASCII... "");\n        try {\n            in = new BufferedInputStream(new FileInputStream(info.getFileName()));\n            in.mark(3);\n            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));\n            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));\n            String read;\n            while ((read = reader.readLine()) != null) {\n                writer.write(ascii(read));\n                writer.newLine();\n            }\n            writer.flush();\n            out.flush();\n            println(""... done!"");\n        } catch (IOException ignored) {\n            println(""... error! ("" + ignored.getMessage() + "")"");\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (IOException ignored) {\n            }\n            if (out != null) try {\n                out.close();\n            } catch (IOException ignored) {\n            }\n        }\n    }\n']",763,"    public boolean execute_check() {
        FTPClient fdport = new FTPClient();
        File slice = null;
        FileChannel connection;
        InputStream isi;
        OutputStream ws;
        int service;
        if (super.combose > 0) combose = true;
        fdport.setDefaultPort(port);
        fdport.setDefaultTimeout(timeout);
        if (combose) {
            System.out.println(""Using FTP Server: "" + hostname);
            System.out.println(""Using FTP Port: "" + port);
            System.out.println(""Using Timeout of: "" + timeout);
        }
        if (passive) {
            fdport.enterLocalPassiveMode();
            if (combose) System.out.println(""Using Passive Mode"");
        }
        try {
            slice = new File(file);
            connection = new RandomAccessFile(slice, ""rw"").getChannel();
            if (combose) System.out.println(""Attempting FTP Connection to "" + hostname);
            fdport.connect(hostname);
            service = fdport.getReplyCode();
            if (!FTPReply.isPositiveCompletion(service)) {
                if (combose) System.out.println(""FTP Connection to "" + hostname + "" failed"");
                checkpremanager = common_h.STATE_CRITICAL;
                block___code = fdport.getReplyString();
                slice.delete();
                fdport.disconnect();
                return true;
            }
            if (username != null && password != null) {
                if (combose) System.out.println(""Attempting to log in into FTP Server "" + hostname);
                if (!fdport.login(username, password)) {
                    if (combose) System.out.println(""Unable to log in to FTP Server "" + hostname);
                    checkpremanager = common_h.STATE_CRITICAL;
                    block___code = fdport.getReplyString();
                    fdport.disconnect();
                    slice.delete();
                    return true;
                }
            }
            if (combose) System.out.println(""Attempting to change to required directory"");
            if (!fdport.changeWorkingDirectory(directory)) {
                if (combose) System.out.println(""Required directory cannot be found!"");
                checkpremanager = common_h.STATE_WARNING;
                block___code = fdport.getReplyString();
                fdport.disconnect();
                slice.delete();
                return true;
            }
            if (combose) System.out.println(""Attempting to retrieve specified file!"");
            isi = fdport.retrieveFileStream(file);
            if (isi == null) {
                if (combose) System.out.println(""Unable to locate required file."");
                checkpremanager = common_h.STATE_WARNING;
                block___code = fdport.getReplyString();
                fdport.disconnect();
                slice.delete();
                return true;
            }
            ws = Channels.newOutputStream(connection);
            byte[] buf = new byte[4096];
            if (combose) System.out.println(""Beginning File transfer..."");
            for (int len = -1; (len = isi.read(buf)) != -1; ) ws.write(buf, 0, len);
            if (combose) {
                System.out.println(""...transfer complete."");
                System.out.println(""Attempting to finalise Command"");
            }
            if (!fdport.completePendingCommand()) {
                if (combose) System.out.println(""Unable to finalise command"");
                checkpremanager = common_h.STATE_WARNING;
                block___code = fdport.getReplyString();
                fdport.disconnect();
                slice.delete();
                return true;
            }
            if (combose) System.out.println(""Check Completed."");
            checkpremanager = common_h.STATE_OK;
            block___code = fdport.getReplyString();
            isi.close();
            ws.close();
            connection.close();
            slice.delete();
        } catch (IOException e) {
            checkpremanager = common_h.STATE_CRITICAL;
            block___code = e.getMessage();
            if (slice != null) slice.delete();
        } finally {
            if (fdport.isConnected()) {
                try {
                    fdport.logout();
                    fdport.disconnect();
                } catch (Exception e) {
                }
            }
        }
        return true;
    }
",0,0,0,-1,"ftp,filename,channel,is,os,reply,verbose,check_state,check_message","ftp:0.0,filename:3.528594970703125e-05,channel:0.0001818537712097168,is:-9.1552734375e-05,os:-8.702278137207031e-06,reply:-5.1140785217285156e-05,verbose:0.0,check_state:0.0,check_message:0.0,",9,81,"channel:connection,filename:slice,ftp:fdport,verbose:combose,check_state:checkpremanager,check_message:block___code,os:ws,reply:service,is:isi,",Greedy,563,0.31911333799362185
317,"['10940445', '5795551', '    protected HttpResponse doGet(String action, String[][] args) throws IOException {\n        long startTime = System.currentTimeMillis();\n        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;\n        if (args != null && args.length != 0) {\n            for (int i = 0; i < args.length; i++) {\n                if (args[i].length != 0) {\n                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);\n                }\n            }\n        }\n        HttpGet httpGet = new HttpGet(getString);\n        HttpResponse response = getHttpClient().execute(httpGet);\n        if (timingsOn) {\n            totalCalls++;\n            long elapsedTime = (System.currentTimeMillis() - startTime);\n            if (totalCalls != 1) {\n                totalTime = totalTime + elapsedTime;\n                minTime = Math.min(minTime, elapsedTime);\n                maxTime = Math.max(maxTime, elapsedTime);\n            } else {\n                minTime = elapsedTime;\n                maxTime = 0L;\n            }\n            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");\n        }\n        return response;\n    }\n', '    public static void main(String[] args) throws Exception {\n        System.setProperty(""debug"", ""debug"");\n        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");\n        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");\n        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");\n        HttpURLConnection request = (HttpURLConnection) url.openConnection();\n        request.setDoOutput(true);\n        request.setRequestMethod(""POST"");\n        HttpParameters para = new HttpParameters();\n        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\\\+"", ""%20""));\n        consumer.setAdditionalParameters(para);\n        consumer.sign(request);\n        OutputStream ot = request.getOutputStream();\n        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\\\+"", ""%20"").getBytes());\n        ot.flush();\n        ot.close();\n        System.out.println(""Sending request..."");\n        request.connect();\n        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n        String b = null;\n        while ((b = reader.readLine()) != null) {\n            System.out.println(b);\n        }\n    }\n']",258,"    protected HttpResponse doGet(String uri, String[][] args) throws IOException {
        long mintime = System.currentTimeMillis();
        String GETString = host + ""?"" + ACTION_PARAMETER + ""="" + uri;
        if (args != null && args.length != 0) {
            for (int ip = 0; ip < args.length; ip++) {
                if (args[ip].length != 0) {
                    GETString = GETString + ""&"" + args[ip][0] + ""="" + encode(args[ip][1]);
                }
            }
        }
        HttpGet ttpPut = new HttpGet(GETString);
        HttpResponse response = getHttpClient().execute(ttpPut);
        if (timingsOn) {
            totalRals++;
            long elandedTIME = (System.currentTimeMillis() - mintime);
            if (totalRals != 1) {
                maxtime = maxtime + elandedTIME;
                mintime = Math.min(mintime, elandedTIME);
                totalSpeed = Math.max(totalSpeed, elandedTIME);
            } else {
                mintime = elandedTIME;
                totalSpeed = 0L;
            }
            System.out.println(""http get took "" + elandedTIME + "" ms., (calls, min, max, av) = ("" + totalRals + "", "" + mintime + "", "" + totalSpeed + "", "" + (maxtime / totalRals) + "")"");
        }
        return response;
    }
",0,0,0,-1,"action,startTime,getString,i,httpGet,response,totalCalls,elapsedTime,totalTime,minTime,maxTime","action:-1.1920928955078125e-07,startTime:0.0,getString:0.0,i:-0.00019496679306030273,httpGet:0.0,response:0.0003681182861328125,totalCalls:0.0,elapsedTime:0.0,totalTime:0.0,minTime:0.0,maxTime:0.0,",10,37,"response:response,startTime:mintime,getString:GETString,httpGet:ttpPut,totalCalls:totalRals,elapsedTime:elandedTIME,totalTime:maxtime,minTime:mintime,maxTime:totalSpeed,action:uri,i:ip,",Greedy,498,0.2376728653907776
318,"['22261730', '2009328', '    public static boolean fileCopy(String sFileSrc, String sFileDst) {\n        boolean ok = true;\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            File fSrc = new File(sFileSrc);\n            int len = 32768;\n            byte[] buff = new byte[(int) Math.min(len, fSrc.length())];\n            fis = new FileInputStream(fSrc);\n            boolean append = false;\n            fos = new FileOutputStream(sFileDst, append);\n            while (0 < (len = fis.read(buff))) fos.write(buff, 0, len);\n            fos.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n            ok = false;\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                    JdxLog.logError(ex);\n                }\n            }\n            if (fis != null) {\n                try {\n                    fis.close();\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                    JdxLog.logError(ex);\n                }\n            }\n        }\n        return ok;\n    }\n', '    private String storeProxy(String proxyPath, String userName) throws IOException {\n        File inputFile = new File(proxyPath);\n        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;\n        File outputFile = new File(outfile);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);\n        try {\n            p.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return outfile;\n    }\n']",222,"    public static boolean fileCopy(String sFileSedr, String sFileDot) {
        boolean id = true;
        FileInputStream lfis = null;
        FileOutputStream haos = null;
        try {
            File  fAsRC = new File(sFileSedr);
            int url = 32768;
            byte[] gz = new byte[(int) Math.min(url,  fAsRC.length())];
            lfis = new FileInputStream( fAsRC);
            boolean cmp = false;
            haos = new FileOutputStream(sFileDot, cmp);
            while (0 < (url = lfis.read(gz))) haos.write(gz, 0, url);
            haos.flush();
        } catch (IOException e) {
            e.printStackTrace();
            id = false;
        } finally {
            if (haos != null) {
                try {
                    haos.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JdxLog.logError(ex);
                }
            }
            if (lfis != null) {
                try {
                    lfis.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JdxLog.logError(ex);
                }
            }
        }
        return id;
    }
",1,1,1,-1,"sFileSrc,sFileDst,fis,fos,fSrc,len,buff,append,ok","sFileSrc:0.0,sFileDst:0.0,fis:0.0,fos:0.0,fSrc:0.0,len:-0.0003898739814758301,buff:0.0003617405891418457,append:-0.000217437744140625,ok:-0.000380098819732666,",9,30,"buff:gz,sFileSrc:sFileSedr,sFileDst:sFileDot,fis:lfis,fos:haos,fSrc: fAsRC,append:cmp,ok:id,len:url,",Greedy,456,0.18566763401031494
319,"['17728719', '2102737', '    private void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    private String getContents(Server server, String uri) throws TechnicalException {\n        try {\n            URL url = new URL(""http://localhost:"" + PORT + uri);\n            return StreamUtils.getStreamContent(url.openStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new TechnicalException(e);\n        }\n    }\n']",84,"    private void copyFile(File inst, File sdst) throws IOException {
        InputStream is = new FileInputStream(inst);
        OutputStream out = new FileOutputStream(sdst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = is.read(buf)) > 0) out.write(buf, 0, len);
        is.close();
        out.close();
    }
",0,0,0,-1,"src,dst,in,out,buf,len","src:-4.291534423828125e-06,dst:0.0,in:-2.2649765014648438e-06,out:-6.794929504394531e-06,buf:-7.152557373046875e-07,len:-1.6689300537109375e-06,",3,7,"dst:sdst,buf:buf,len:len,in:is,src:inst,out:out,",Greedy,260,0.10896680355072022
320,"['6102140', '4623012', '    public static void main(String[] args) {\n        try {\n            boolean readExp = Utils.getFlag(\'l\', args);\n            final boolean writeExp = Utils.getFlag(\'s\', args);\n            final String expFile = Utils.getOption(\'f\', args);\n            if ((readExp || writeExp) && (expFile.length() == 0)) {\n                throw new Exception(""A filename must be given with the -f option"");\n            }\n            Experiment exp = null;\n            if (readExp) {\n                FileInputStream fi = new FileInputStream(expFile);\n                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n                exp = (Experiment) oi.readObject();\n                oi.close();\n            } else {\n                exp = new Experiment();\n            }\n            System.err.println(""Initial Experiment:\\n"" + exp.toString());\n            final JFrame jf = new JFrame(""Weka Experiment Setup"");\n            jf.getContentPane().setLayout(new BorderLayout());\n            final SetupPanel sp = new SetupPanel();\n            jf.getContentPane().add(sp, BorderLayout.CENTER);\n            jf.addWindowListener(new WindowAdapter() {\n\n                public void windowClosing(WindowEvent e) {\n                    System.err.println(""\\nFinal Experiment:\\n"" + sp.m_Exp.toString());\n                    if (writeExp) {\n                        try {\n                            FileOutputStream fo = new FileOutputStream(expFile);\n                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n                            oo.writeObject(sp.m_Exp);\n                            oo.close();\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                            System.err.println(""Couldn\'t write experiment to: "" + expFile + \'\\n\' + ex.getMessage());\n                        }\n                    }\n                    jf.dispose();\n                    System.exit(0);\n                }\n            });\n            jf.pack();\n            jf.setVisible(true);\n            System.err.println(""Short nap"");\n            Thread.currentThread().sleep(3000);\n            System.err.println(""Done"");\n            sp.setExperiment(exp);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.err.println(ex.getMessage());\n        }\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",414,"    public static void main(String[] args) {
        try {
            boolean loadExp = Utils.getFlag('l', args);
            final boolean outputExt = Utils.getFlag('s', args);
            final String xpFolder = Utils.getOption('f', args);
            if ((loadExp || outputExt) && (xpFolder.length() == 0)) {
                throw new Exception(""A filename must be given with the -f option"");
            }
            Experiment jp = null;
            if (loadExp) {
                FileInputStream lli = new FileInputStream(xpFolder);
                ObjectInputStream oxy = new ObjectInputStream(new BufferedInputStream(lli));
                jp = (Experiment) oxy.readObject();
                oxy.close();
            } else {
                jp = new Experiment();
            }
            System.err.println(""Initial Experiment:
"" + jp.toString());
            final JFrame jpb = new JFrame(""Weka Experiment Setup"");
            jpb.getContentPane().setLayout(new BorderLayout());
            final SetupPanel page = new SetupPanel();
            jpb.getContentPane().add(page, BorderLayout.CENTER);
            jpb.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent ep) {
                    System.err.println(""
Final Experiment:
"" + page.m_Exp.toString());
                    if (outputExt) {
                        try {
                            FileOutputStream fo = new FileOutputStream(xpFolder);
                            ObjectOutputStream loo = new ObjectOutputStream(new BufferedOutputStream(fo));
                            loo.writeObject(page.m_Exp);
                            loo.close();
                        } catch (Exception pl) {
                            pl.printStackTrace();
                            System.err.println(""Couldn't write experiment to: "" + xpFolder + '
' + ex.getMessage());
                        }
                    }
                    jpb.dispose();
                    System.exit(0);
                }
            });
            jpb.pack();
            jpb.setVisible(true);
            System.err.println(""Short nap"");
            Thread.currentThread().sleep(3000);
            System.err.println(""Done"");
            page.setExperiment(jp);
        } catch (Exception pl) {
            pl.printStackTrace();
            System.err.println(pl.getMessage());
        }
    }
",1,1,1,-1,"readExp,writeExp,expFile,exp,fi,oi,jf,sp,e,fo,oo,ex","readExp:0.0,writeExp:0.0,expFile:0.0,exp:0.0004648566246032715,fi:9.08970832824707e-05,oi:0.00012683868408203125,jf:0.0,sp:-5.650520324707031e-05,e:-1.823902130126953e-05,fo:0.0013808608055114746,oo:-8.845329284667969e-05,ex:-0.00013321638107299805,",11,42,"fo:fo,exp:jp,oi:oxy,fi:lli,readExp:loadExp,writeExp:outputExt,expFile:xpFolder,jf:jpb,e:ep,sp:page,oo:loo,ex:pl,",Greedy,601,0.28473642269770305
321,"['7257286', '16995204', '    public static void main(String[] args) {\n        if (args.length <= 0) {\n            System.out.println("" *** DML script generator and executor ***"");\n            System.out.println("" You must specify name of the file with SQL script data"");\n            System.out.println("" Fisrt rows of this file must be:"");\n            System.out.println("" 1) JDBC driver class for your DBMS"");\n            System.out.println("" 2) URL for your database instance"");\n            System.out.println("" 3) user in that database (with sufficient priviliges)"");\n            System.out.println("" 4) password of that user"");\n            System.out.println("" Next rows can have:"");\n            System.out.println(""   \'&\' before table to insert into,"");\n            System.out.println(""   \'^\' before table delete from,"");\n            System.out.println(""   \'*\' before table update."");\n            System.out.println("" Other rows contain parameters of these actions:"");\n            System.out.println(""   for & action each parameter is a list of values,"");\n            System.out.println(""   for * action -//- pare of values with 1st PK (will be in where clause),"");\n            System.out.println(""   for ^ (not obligatory) -//- part of where clause or AND or OR"");\n            System.out.println(""    (by depault parts are united with OR)"");\n            System.out.println("" Note: despite SQLScript, 1) list (pare) of values can be separated"");\n            System.out.println(""   by space or tab, not only comma and 2) string values can be not quoted,"");\n            System.out.println(""   but in this (2) case only 2 values allowed (even in insert)"");\n            System.out.println("" \'!\' before row means that it is a comment."");\n            System.out.println("" If some exception is occured, all script is rolled back."");\n            System.out.println("" If you specify 2nd command line argument - file name too -"");\n            System.out.println(""   connection will be established but all statements will"");\n            System.out.println(""   be saved in that output file and not transmitted to DB"");\n            System.out.println("" If you specify 3nd command line argument - connect_string -"");\n            System.out.println(""   connect information will be added to output file"");\n            System.out.println(""   in the form \'connect user/password@connect_string\'"");\n            System.exit(0);\n        }\n        try {\n            String[] info = new String[4];\n            BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));\n            Writer writer = null;\n            try {\n                for (int i = 0; i < info.length; i++) info[i] = reader.readLine();\n                try {\n                    Class.forName(info[0]);\n                    Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);\n                    SQLScript script = new DMLScript(connection);\n                    if (args.length > 1) {\n                        writer = new BufferedWriter(new FileWriter(args[1]));\n                        if (args.length > 2) writer.write(""connect "" + info[2] + ""/"" + info[3] + ""@"" + args[2] + script.statementTerminator);\n                    }\n                    try {\n                        System.out.println(script.executeScript(reader, writer) + "" updates has been performed during script execution"");\n                    } catch (SQLException e4) {\n                        reader.close();\n                        if (writer != null) writer.close();\n                        System.out.println("" Script execution error: "" + e4);\n                    }\n                    connection.close();\n                } catch (Exception e3) {\n                    reader.close();\n                    if (writer != null) writer.close();\n                    System.out.println("" Connection error: "" + e3);\n                }\n            } catch (IOException e2) {\n                System.out.println(""Error in file "" + args[0]);\n            }\n        } catch (FileNotFoundException e1) {\n            System.out.println(""File "" + args[0] + "" not found"");\n        }\n    }\n', '    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        fields.put(item.getFieldName(), item.getString());\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = """";\n                if (fields.get(""taBody"") != null) {\n                    body = (String) fields.get(""taBody"");\n                } else if (fields.get(""taReplyBody"") != null) {\n                    body = (String) fields.get(""taReplyBody"");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(""mid"");\n                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));\n            } else {\n                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));\n                request.setAttribute(""exception"", ""The form is null"");\n                request.setAttribute(""newLocation"", null);\n                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = ""NullPointerException"";\n            }\n            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));\n            request.setAttribute(""exception"", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), ""OK"");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n']",664,"    public static void main(String[] args) {
        if (args.length <= 0) {
            System.out.println("" *** DML script generator and executor ***"");
            System.out.println("" You must specify name of the file with SQL script data"");
            System.out.println("" Fisrt rows of this file must be:"");
            System.out.println("" 1) JDBC driver class for your DBMS"");
            System.out.println("" 2) URL for your database instance"");
            System.out.println("" 3) user in that database (with sufficient priviliges)"");
            System.out.println("" 4) password of that user"");
            System.out.println("" Next rows can have:"");
            System.out.println(""   '&' before table to insert into,"");
            System.out.println(""   '^' before table delete from,"");
            System.out.println(""   '*' before table update."");
            System.out.println("" Other rows contain parameters of these actions:"");
            System.out.println(""   for & action each parameter is a list of values,"");
            System.out.println(""   for * action -//- pare of values with 1st PK (will be in where clause),"");
            System.out.println(""   for ^ (not obligatory) -//- part of where clause or AND or OR"");
            System.out.println(""    (by depault parts are united with OR)"");
            System.out.println("" Note: despite SQLScript, 1) list (pare) of values can be separated"");
            System.out.println(""   by space or tab, not only comma and 2) string values can be not quoted,"");
            System.out.println(""   but in this (2) case only 2 values allowed (even in insert)"");
            System.out.println("" '!' before row means that it is a comment."");
            System.out.println("" If some exception is occured, all script is rolled back."");
            System.out.println("" If you specify 2nd command line argument - file name too -"");
            System.out.println(""   connection will be established but all statements will"");
            System.out.println(""   be saved in that output file and not transmitted to DB"");
            System.out.println("" If you specify 3nd command line argument - connect_string -"");
            System.out.println(""   connect information will be added to output file"");
            System.out.println(""   in the form 'connect user/password@connect_string'"");
            System.exit(0);
        }
        try {
            String[] info = new String[4];
            BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])));
            Writer writer = null;
            try {
                for (int i = 0; i < info.length; i++) info[i] = reader.readLine();
                try {
                    Class.forName(info[0]);
                    Connection connection = DriverManager.getConnection(info[1], info[2], info[3]);
                    SQLScript script = new DMLScript(connection);
                    if (args.length > 1) {
                        writer = new BufferedWriter(new FileWriter(args[1]));
                        if (args.length > 2) writer.write(""connect "" + info[2] + ""/"" + info[3] + ""@"" + args[2] + script.statementTerminator);
                    }
                    try {
                        System.out.println(script.executeScript(reader, writer) + "" updates has been performed during script execution"");
                    } catch (SQLException e4) {
                        reader.close();
                        if (writer != null) writer.close();
                        System.out.println("" Script execution error: "" + e4);
                    }
                    connection.close();
                } catch (Exception e3) {
                    reader.close();
                    if (writer != null) writer.close();
                    System.out.println("" Connection error: "" + e3);
                }
            } catch (IOException e2) {
                System.out.println(""Error in file "" + args[0]);
            }
        } catch (FileNotFoundException e1) {
            System.out.println(""File "" + args[0] + "" not found"");
        }
    }
",1,1,1,-1,script,"script:2.384185791015625e-07,",0,0,"script:script,",Greedy,56,0.043323226769765216
322,"['19434892', '16995204', '            public void handle() {\n                if (requestCounter == 0) {\n                    requestCounter++;\n                    return;\n                }\n                requestCounter++;\n                Iterator it = loggerTimeouts.keySet().iterator();\n                while (it.hasNext()) {\n                    String host = (String) it.next();\n                    String timeout = (String) loggerTimeouts.get(host);\n                    int timeoutVal = Integer.parseInt(timeout);\n                    if (timeoutVal > 0) {\n                        timeoutVal /= 10;\n                    }\n                    int timeoutMod = (requestCounter % timeoutVal);\n                    if (timeoutMod == 0) {\n                        Object loggerFile = loggerFiles.get(host);\n                        Object loggerFilenameObject = loggerFilenames.get(host);\n                        Object loggerDestObject = loggerDests.get(host);\n                        Object loggerCompressObject = loggerCompresses.get(host);\n                        Object loggerDayObject = loggerDays.get(host);\n                        Object loggerArchiveObject = loggerArchives.get(host);\n                        Object loggerDeleteObject = loggerDeletes.get(host);\n                        boolean rotateCompress = false;\n                        boolean rotateDelete = false;\n                        String rotateDest = null;\n                        String logFile = null;\n                        String rotateArchive = null;\n                        int rotateDays = 0;\n                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {\n                            rotateCompress = true;\n                        }\n                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {\n                            rotateDelete = true;\n                        }\n                        if (loggerDestObject != null) {\n                            rotateDest = (String) loggerDestObject;\n                        }\n                        if (loggerFilenameObject != null) {\n                            logFile = (String) loggerFilenameObject;\n                        }\n                        if (loggerArchiveObject != null) {\n                            rotateArchive = (String) loggerArchiveObject;\n                        }\n                        if (loggerDayObject != null) {\n                            rotateDays = Integer.parseInt((String) loggerDayObject);\n                        }\n                        FileChannel srcChannel, destChannel;\n                        String destOutFile = logFile + ""."" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(""/"") != -1) {\n                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(""/"") != -1) {\n                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte buf[] = new byte[1024];\n                                int len;\n                                while ((len = in.read(buf)) > 0) {\n                                    out.write(buf, 0, len);\n                                }\n                                in.close();\n                                out.finish();\n                                out.close();\n                                Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFileCompressed + ""\'"");\n                                buf = null;\n                                out = null;\n                                in = null;\n                            } catch (Exception e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\': "" + e);\n                            }\n                        } else {\n                            try {\n                                srcChannel = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to read log file \'"" + logFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                destChannel.close();\n                                destChannel = null;\n                                srcChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to copy data from file \'"" + logFile + ""\' to \'"" + destOutFile + ""\' for file rotation: "" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\'"");\n                        }\n                        if (rotateDelete) {\n                            try {\n                                ((PrintStream) loggerFile).close();\n                            } catch (Exception e) {\n                            }\n                            (new File(logFile)).delete();\n                            loggerFiles.remove(host);\n                            addLogger(host, logFile);\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + "".zip"";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + ""/"" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + ""/"" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            fileList = null;\n                            format1 = null;\n                            archive = null;\n                        }\n                    }\n                }\n                it = null;\n            }\n', '    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        fields.put(item.getFieldName(), item.getString());\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = """";\n                if (fields.get(""taBody"") != null) {\n                    body = (String) fields.get(""taBody"");\n                } else if (fields.get(""taReplyBody"") != null) {\n                    body = (String) fields.get(""taReplyBody"");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(""mid"");\n                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));\n            } else {\n                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));\n                request.setAttribute(""exception"", ""The form is null"");\n                request.setAttribute(""newLocation"", null);\n                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = ""NullPointerException"";\n            }\n            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));\n            request.setAttribute(""exception"", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), ""OK"");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n']",1144,"            public void handle() {
                if ( requestClock == 0) {
                     requestClock++;
                    return;
                }
                 requestClock++;
                Iterator master = loggerTimeouts.keySet().iterator();
                while (master.hasNext()) {
                    String url = (String) master.next();
                    String connection = (String) loggerTimeouts.get(url);
                    int timeoutLen = Integer.parseInt(connection);
                    if (timeoutLen > 0) {
                        timeoutLen /= 10;
                    }
                    int timeoutNum = ( requestClock % timeoutLen);
                    if (timeoutNum == 0) {
                        Object loggerFiles = loggerFiles.get(url);
                        Object loggerDirectoryObject = loggerFilenames.get(url);
                        Object loggerDestPool = loggerDests.get(url);
                        Object loggercompressFile = loggerCompresses.get(url);
                        Object loggerDaysobject = loggerDays.get(url);
                        Object loggerArchIVEFile = loggerArchives.get(url);
                        Object logerDeleteobject = loggerDeletes.get(url);
                        boolean rotateExpress = false;
                        boolean rotateDelete = false;
                        String polgateRoute = null;
                        String LogRoute = null;
                        String rotateARCHIVE = null;
                        int  rotationWords = 0;
                        if (loggercompressFile != null && ((String) loggercompressFile).equalsIgnoreCase(""true"")) {
                            rotateExpress = true;
                        }
                        if (logerDeleteobject != null && ((String) logerDeleteobject).equalsIgnoreCase(""true"")) {
                            rotateDelete = true;
                        }
                        if (loggerDestPool != null) {
                            polgateRoute = (String) loggerDestPool;
                        }
                        if (loggerDirectoryObject != null) {
                            LogRoute = (String) loggerDirectoryObject;
                        }
                        if (loggerArchIVEFile != null) {
                            rotateARCHIVE = (String) loggerArchIVEFile;
                        }
                        if (loggerDaysobject != null) {
                             rotationWords = Integer.parseInt((String) loggerDaysobject);
                        }
                        FileChannel insFile,  destChan;
                        String srcOutPath = LogRoute + ""."" + System.currentTimeMillis();
                        String destOutFileRepressed = LogRoute + ""."" + System.currentTimeMillis() + "".gz"";
                        if (polgateRoute != null) {
                            (new File(polgateRoute)).mkdirs();
                            if (srcOutPath.indexOf(""/"") != -1) {
                                srcOutPath = polgateRoute + ""/"" + srcOutPath.substring(srcOutPath.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileRepressed.indexOf(""/"") != -1) {
                                destOutFileRepressed = polgateRoute + ""/"" + destOutFileRepressed.substring(destOutFileRepressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateExpress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileRepressed));
                                FileInputStream in = new FileInputStream(LogRoute);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                Debug.debug(""Rotated log file '"" + LogRoute + ""' to '"" + destOutFileRepressed + ""'"");
                                buf = null;
                                out = null;
                                in = null;
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + LogRoute + ""': "" + e);
                            }
                        } else {
                            try {
                                insFile = new FileInputStream(LogRoute).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + LogRoute + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                 destChan = new FileOutputStream(srcOutPath).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file '"" + LogRoute + ""' to '"" + srcOutPath + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                 destChan.transferFrom(insFile, 0, insFile.size());
                                insFile.close();
                                 destChan.close();
                                 destChan = null;
                                insFile = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data from file '"" + LogRoute + ""' to '"" + srcOutPath + ""' for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + LogRoute + ""' to '"" + srcOutPath + ""'"");
                        }
                        if (rotateDelete) {
                            try {
                                ((PrintStream) loggerFiles).close();
                            } catch (Exception e) {
                            }
                            (new File(LogRoute)).delete();
                            loggerFiles.remove(url);
                            addLogger(url, LogRoute);
                        }
                        if (polgateRoute != null) {
                            long comparisonTime =  rotationWords * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(polgateRoute)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateARCHIVE != null) {
                                archiveFile = rotateARCHIVE + ""/"" + archiveFile;
                                (new File(rotateARCHIVE)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateExpress && currentFilename.endsWith("".gz"")) || (!rotateExpress && currentFilename.indexOf(LogRoute + ""."") != -1)) {
                                    if (polgateRoute != null) {
                                        currentFilename = polgateRoute + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            fileList = null;
                            format1 = null;
                            archive = null;
                        }
                    }
                }
                master = null;
            }
",1,1,0,1,"requestCounter,it,host,timeout,timeoutVal,timeoutMod,loggerFile,loggerFilenameObject,loggerDestObject,loggerCompressObject,loggerDayObject,loggerArchiveObject,loggerDeleteObject,rotateDest,logFile,rotateArchive,rotateDays,srcChannel,destChannel,destOutFile,destOutFileCompressed,rotateCompress,rotateDelete","requestCounter:0.0,it:0.0,host:5.960464477539062e-07,timeout:-5.960464477539062e-07,timeoutVal:0.0,timeoutMod:0.0,loggerFile:0.0,loggerFilenameObject:0.0,loggerDestObject:0.0,loggerCompressObject:0.0,loggerDayObject:0.0,loggerArchiveObject:0.0,loggerDeleteObject:0.0,rotateDest:0.0,logFile:0.0,rotateArchive:0.0,rotateDays:0.0,srcChannel:0.0,destChannel:0.0,destOutFile:0.0,destOutFileCompressed:0.0,rotateCompress:0.0,rotateDelete:0.0,",22,112,"host:url,requestCounter: requestClock,it:master,timeoutVal:timeoutLen,timeoutMod:timeoutNum,loggerFile:loggerFiles,loggerFilenameObject:loggerDirectoryObject,loggerDestObject:loggerDestPool,loggerCompressObject:loggercompressFile,loggerDayObject:loggerDaysobject,loggerArchiveObject:loggerArchIVEFile,loggerDeleteObject:logerDeleteobject,rotateDest:polgateRoute,logFile:LogRoute,rotateArchive:rotateARCHIVE,rotateDays: rotationWords,srcChannel:insFile,destChannel: destChan,destOutFile:srcOutPath,destOutFileCompressed:destOutFileRepressed,rotateCompress:rotateExpress,rotateDelete:rotateDelete,timeout:connection,",Greedy,993,0.7209436138470967
323,"['10067028', '1424647', '    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            long size = in.size();\n            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buffer);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n', '    public static void copy(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n']",117,"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel url = null;
        FileChannel out = null;
        try {
            url = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = url.size();
            MappedByteBuffer document = url.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(document);
        } finally {
            if (url != null) {
                url.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
",1,1,0,1,"source,destination,in,out,size,buffer","source:0.0005478858947753906,destination:0.0,in:0.00023555755615234375,out:0.0004826188087463379,size:3.653764724731445e-05,buffer:0.00026786327362060547,",2,8,"source:source,out:out,buffer:document,in:url,",Greedy,212,0.08871015707651773
324,"['9857413', '813913', '    @Override\n    public byte[] readData(byte[] options, boolean transferMetaData) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        long transferredBytesNum = 0;\n        long elapsedTime = 0;\n        Properties opts = PropertiesUtils.deserializeProperties(options);\n        String server = opts.getProperty(TRANSFER_OPTION_SERVER);\n        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);\n        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);\n        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);\n        if (transferMetaData) {\n            int idx = filePath.lastIndexOf(PATH_SEPARATOR);\n            if (idx != -1) {\n                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;\n                filePath = filePath.substring(0, idx);\n                filePath = filePath + PATH_SEPARATOR + fileName;\n            } else {\n                filePath += META_DATA_FILE_SUFIX;\n            }\n        }\n        if (!server.contains(PORT_SEPARATOR)) {\n            server += PORT_SEPARATOR + DEFAULT_PORT;\n        }\n        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");\n        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));\n        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        ByteArrayOutputStream baos = null;\n        try {\n            InputStream is = urlc.getInputStream();\n            baos = new ByteArrayOutputStream();\n            byte[] buffer = new byte[1024];\n            int br;\n            while ((br = is.read(buffer)) > 0) {\n                baos.write(buffer, 0, br);\n                if (!transferMetaData) {\n                    transferredBytesNum += br;\n                    elapsedTime = System.currentTimeMillis() - startTime;\n                    fireOnProgressEvent(transferredBytesNum, elapsedTime);\n                }\n            }\n            baos.close();\n            is.close();\n        } catch (FileNotFoundException fnfe) {\n        }\n        return baos != null ? baos.toByteArray() : null;\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",376,"    @Override
    public byte[] readData(byte[] timeout, boolean writeMetaFlow) throws Throwable {
        long middleTIME = System.currentTimeMillis();
        long transferredByteMsg = 0;
        long eladjustedStream = 0;
        Properties  optts = PropertiesUtils.deserializeProperties(timeout);
        String server =  optts.getProperty(TRANSFER_OPTION_SERVER);
        String host =  optts.getProperty(TRANSFER_OPTION_USERNAME);
        String login =  optts.getProperty(TRANSFER_OPTION_PASSWORD);
        String ileLog =  optts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (writeMetaFlow) {
            int inxs = ileLog.lastIndexOf(PATH_SEPARATOR);
            if (inxs != -1) {
                String FileAddress = ileLog.substring(inxs + 1) + META_DATA_FILE_SUFIX;
                ileLog = ileLog.substring(0, inxs);
                ileLog = ileLog + PATH_SEPARATOR + FileAddress;
            } else {
                ileLog += META_DATA_FILE_SUFIX;
            }
        }
        if (!server.contains(PORT_SEPARATOR)) {
            server += PORT_SEPARATOR + DEFAULT_PORT;
        }
        URL io = new URL(PROTOCOL_PREFIX + host + "":"" + login + ""@"" + server + ileLog + "";type=i"");
        URLConnection webc = io.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        webc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        webc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        ByteArrayOutputStream boo = null;
        try {
            InputStream browser = webc.getInputStream();
            boo = new ByteArrayOutputStream();
            byte[] header = new byte[1024];
            int line;
            while ((line = browser.read(header)) > 0) {
                boo.write(header, 0, line);
                if (!writeMetaFlow) {
                    transferredByteMsg += line;
                    eladjustedStream = System.currentTimeMillis() - middleTIME;
                    fireOnProgressEvent(transferredByteMsg, eladjustedStream);
                }
            }
            boo.close();
            browser.close();
        } catch (FileNotFoundException fnfe) {
        }
        return boo != null ? boo.toByteArray() : null;
    }
",0,0,0,-1,"options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,baos,is,buffer,br","options:2.384185791015625e-07,transferMetaData:0.0,startTime:0.0,transferredBytesNum:0.0,elapsedTime:0.0,opts:0.0,server:-1.1920928955078125e-07,username:-3.5762786865234375e-07,password:-3.5762786865234375e-07,filePath:0.0,idx:0.0,fileName:0.0,url:1.4185905456542969e-05,urlc:0.0,baos:0.0,is:-2.6226043701171875e-06,buffer:-1.1920928955078125e-06,br:7.152557373046875e-07,",17,59,"url:io,br:line,options:timeout,transferMetaData:writeMetaFlow,startTime:middleTIME,transferredBytesNum:transferredByteMsg,elapsedTime:eladjustedStream,opts: optts,filePath:ileLog,idx:inxs,fileName:FileAddress,urlc:webc,baos:boo,server:server,username:host,password:login,buffer:header,is:browser,",Greedy,782,0.39345977306365965
325,"['11840745', '762814', '    public final void close() throws IOException {\n        if (dataStream == null) throw new NullPointerException(""Write stream is null."");\n        dataStream.flush();\n        dataStream.close();\n        dataStream = null;\n        File tmpFile = new File(packPath + "".tmp"");\n        FileOutputStream packStream = new FileOutputStream(packPath);\n        try {\n            String nbFiles = Long.toString(currentNbFiles) + ""\\0"";\n            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));\n            structBufferWriter.flush();\n            structBufferWriter.close();\n            int headerSize = structBuffer.size() + nbFiles.length();\n            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));\n            packStream.write(\'\\0\');\n            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));\n            structBuffer.writeTo(packStream);\n            structBufferWriter = null;\n            structBuffer = null;\n            FileInputStream in = new FileInputStream(tmpFile);\n            try {\n                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];\n                int read;\n                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);\n                packStream.flush();\n                packStream.close();\n            } finally {\n                Utilities.closeStream(in);\n            }\n        } finally {\n            Utilities.closeStream(packStream);\n        }\n        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);\n        packPath = null;\n        structBuffer = null;\n    }\n', '    public static void zipFile(String file, String entry) throws IOException {\n        FileInputStream in = new FileInputStream(file);\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file + "".zip""));\n        out.putNextEntry(new ZipEntry(entry));\n        byte[] buffer = new byte[4096];\n        int bytes_read;\n        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n        in.close();\n        out.closeEntry();\n        out.close();\n        File fin = new File(file);\n        fin.delete();\n    }\n']",283,"    public final void close() throws IOException {
        if (DataReader == null) throw new NullPointerException(""Write stream is null."");
        DataReader.flush();
        DataReader.close();
        DataReader = null;
        File tempLine = new File(packPath + "".tmp"");
        FileOutputStream linkStream = new FileOutputStream(packPath);
        try {
            String nbFiles = Long.toString(currentNbFiles) + ""\0"";
            linkStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));
            structBufferWriter.flush();
            structBufferWriter.close();
            int headerSize = structBuffer.size() + nbFiles.length();
            linkStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));
            linkStream.write('\0');
            linkStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));
            structBuffer.writeTo(linkStream);
            structBufferWriter = null;
            structBuffer = null;
            FileInputStream url = new FileInputStream(tempLine);
            try {
                byte[] result = new byte[FILE_COPY_BUFFER_LEN];
                int read;
                while ((read = url.read(result)) > 0) linkStream.write(result, 0, read);
                linkStream.flush();
                linkStream.close();
            } finally {
                Utilities.closeStream(url);
            }
        } finally {
            Utilities.closeStream(linkStream);
        }
        if (tempLine.isFile()) Utilities.deleteFile(tempLine);
        packPath = null;
        structBuffer = null;
    }
",1,1,1,-1,"dataStream,tmpFile,packStream,nbFiles,headerSize,structBufferWriter,structBuffer,in,buffer,read,packPath","dataStream:0.0,tmpFile:0.0,packStream:0.0,nbFiles:0.0,headerSize:0.0,structBufferWriter:0.0,structBuffer:0.0,in:-6.556510925292969e-06,buffer:-3.2901763916015625e-05,read:7.271766662597656e-06,packPath:0.0,",5,24,"read:read,dataStream:DataReader,tmpFile:tempLine,packStream:linkStream,nbFiles:nbFiles,headerSize:headerSize,structBufferWriter:structBufferWriter,structBuffer:structBuffer,packPath:packPath,in:url,buffer:result,",Greedy,541,0.24080835978190104
326,"['11752189', '8481623', '    public static void main(String[] args) {\n        FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);\n        boolean proceed = true;\n        String input = """";\n        DataInputStream dis;\n        OutputStream out;\n        InputStream in;\n        File out_file, in_file;\n        byte[] buffer = new byte[2048];\n        int bytes_read;\n        while (proceed) {\n            fd.show();\n            if (fd.getFile() != null) {\n                try {\n                    in_file = new File(fd.getDirectory(), fd.getFile());\n                    out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");\n                    out = new FileOutputStream(out_file);\n                    in = new MSZipInputStream(new FileInputStream(in_file));\n                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);\n                    in.close();\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            System.out.println(""Do another (y/n)?"");\n            dis = new DataInputStream(System.in);\n            try {\n                input = dis.readLine();\n            } catch (Exception blah) {\n            }\n            if (input.toLowerCase().startsWith(""n"")) proceed = false;\n        }\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        from_file = checkFile(from_file);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",268,"    public static void main(String[] args) {
        FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);
        boolean proceed = true;
        String input = """";
        DataInputStream dis;
        OutputStream cli;
        InputStream url;
        File out_file, in_file;
        byte[] buffer = new byte[2048];
        int bytes_read;
        while (proceed) {
            fd.show();
            if (fd.getFile() != null) {
                try {
                    in_file = new File(fd.getDirectory(), fd.getFile());
                    out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");
                    cli = new FileOutputStream(out_file);
                    url = new MSZipInputStream(new FileInputStream(in_file));
                    while ((bytes_read = url.read(buffer)) != -1) cli.write(buffer, 0, bytes_read);
                    url.close();
                    cli.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.cli.println(""Do another (y/n)?"");
            dis = new DataInputStream(System.url);
            try {
                input = dis.readLine();
            } catch (Exception blah) {
            }
            if (input.toLowerCase().startsWith(""n"")) proceed = false;
        }
    }
",1,1,0,1,"fd,dis,out,in,out_file,in_file,buffer,bytes_read,proceed,input","fd:3.7670135498046875e-05,dis:-1.9669532775878906e-05,out:0.00023889541625976562,in:4.935264587402344e-05,out_file:0.0,in_file:0.0,buffer:-2.3424625396728516e-05,bytes_read:0.0,proceed:0.0,input:4.6133995056152344e-05,",2,10,"out:cli,in:url,",Greedy,160,0.06868577400843302
327,"['11719103', '492619', '    public static String hash(final String text) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""SHA-1"");\n            byte[] sha1hash = new byte[40];\n            md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n            sha1hash = md.digest();\n            return Sha1.convertToHex(sha1hash);\n        } catch (final Exception e) {\n            return null;\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",88,"    public static String hash(final String hex) {
        try {
            MessageDigest dm;
            dm = MessageDigest.getInstance(""SHA-1"");
            byte[] maonehex = new byte[40];
            dm.update(hex.getBytes(""iso-8859-1""), 0, hex.length());
            maonehex = dm.digest();
            return Sha1.convertToHex(maonehex);
        } catch (final Exception e) {
            return null;
        }
    }
",0,0,0,-1,"text,md,sha1hash","text:-8.344650268554688e-06,md:-4.4345855712890625e-05,sha1hash:0.0,",3,10,"sha1hash:maonehex,text:hex,md:dm,",Greedy,156,0.0741350253423055
328,"['12289756', '17526811', '    public String loadURL(URL url) {\n        String retVal = """";\n        try {\n            InputStream inputStream = url.openStream();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = bufferedReader.readLine();\n            retVal += line + ""\\n"";\n            while (line != null) {\n                System.out.println(line);\n                line = bufferedReader.readLine();\n                if (line != null) retVal += line + ""\\n"";\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (Exception e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        }\n        return retVal;\n    }\n', '    private String getDocumentAsString(URL url) throws IOException {\n        StringBuffer result = new StringBuffer();\n        InputStream in = url.openStream();\n        int c;\n        while ((c = in.read()) != -1) result.append((char) c);\n        return result.toString();\n    }\n']",168,"    public String loadURL(URL lr) {
        String refBu = """";
        try {
            InputStream inputReader = lr.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputReader));
            String line = bufferedReader.readLine();
            refBu += line + ""
"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) refBu += line + ""
"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            refBu = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            refBu = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            refBu = e.getMessage();
        }
        return refBu;
    }
",0,0,0,-1,"url,inputStream,bufferedReader,line,retVal","url:-2.9802322387695312e-06,inputStream:0.0,bufferedReader:0.0,line:-2.7418136596679688e-06,retVal:0.0,",3,11,"inputStream:inputReader,bufferedReader:bufferedReader,retVal:refBu,line:line,url:lr,",Greedy,286,0.11916955312093098
329,"['11902597', '12838273', '    public static void main(String[] args) {\n        System.out.println(""Start filtering zgps..."");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = ""GPSFilterZGPS"";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));\n        System.out.println(""Start reading selected stages..."");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");\n        System.out.println(""Start reading and writing zgps..."");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(""\\t"");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(""Could not find source file for selected stages."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""IO Exception while reading or writing zgps."");\n            e.printStackTrace();\n        }\n        System.out.println(""Done."");\n    }\n', '    public BufferedImage extractUsingCompositor() throws IOException, DjatokaException {\n        boolean useRegion = false;\n        int left = 0;\n        int top = 0;\n        int width = 50;\n        int height = 50;\n        boolean useleftDouble = false;\n        Double leftDouble = 0.0;\n        boolean usetopDouble = false;\n        Double topDouble = 0.0;\n        boolean usewidthDouble = false;\n        Double widthDouble = 0.0;\n        boolean useheightDouble = false;\n        Double heightDouble = 0.0;\n        if (params.getRegion() != null) {\n            StringTokenizer st = new StringTokenizer(params.getRegion(), ""{},"");\n            String token;\n            if ((token = st.nextToken()).contains(""."")) {\n                topDouble = Double.parseDouble(token);\n                usetopDouble = true;\n            } else top = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(""."")) {\n                leftDouble = Double.parseDouble(token);\n                useleftDouble = true;\n            } else left = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(""."")) {\n                heightDouble = Double.parseDouble(token);\n                useheightDouble = true;\n            } else height = Integer.parseInt(token);\n            if ((token = st.nextToken()).contains(""."")) {\n                widthDouble = Double.parseDouble(token);\n                usewidthDouble = true;\n            } else width = Integer.parseInt(token);\n            useRegion = true;\n        }\n        if (is != null) {\n            File f = File.createTempFile(""tmp"", "".jp2"");\n            f.deleteOnExit();\n            FileOutputStream fos = new FileOutputStream(f);\n            sourceFile = f.getAbsolutePath();\n            IOUtils.copyStream(is, fos);\n        }\n        Kdu_simple_file_source raw_src = null;\n        Jp2_family_src family_src = new Jp2_family_src();\n        Jpx_source wrapped_src = new Jpx_source();\n        Kdu_region_compositor compositor = null;\n        BufferedImage image = null;\n        try {\n            family_src.Open(sourceFile);\n            int success = wrapped_src.Open(family_src, true);\n            if (success < 0) {\n                family_src.Close();\n                wrapped_src.Close();\n                raw_src = new Kdu_simple_file_source(sourceFile);\n            }\n            compositor = new Kdu_region_compositor();\n            if (raw_src != null) compositor.Create(raw_src); else compositor.Create(wrapped_src);\n            Kdu_dims imageDimensions = new Kdu_dims();\n            compositor.Get_total_composition_dims(imageDimensions);\n            Kdu_coords imageSize = imageDimensions.Access_size();\n            Kdu_coords imagePosition = imageDimensions.Access_pos();\n            if (useleftDouble) left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x());\n            if (usetopDouble) top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y());\n            if (useheightDouble) height = (int) Math.round(heightDouble * imageSize.Get_y());\n            if (usewidthDouble) width = (int) Math.round(widthDouble * imageSize.Get_x());\n            if (useRegion) {\n                imageSize.Set_x(width);\n                imageSize.Set_y(height);\n                imagePosition.Set_x(left);\n                imagePosition.Set_y(top);\n            }\n            int reduce = 1 << params.getLevelReductionFactor();\n            imageSize.Set_x(imageSize.Get_x());\n            imageSize.Set_y(imageSize.Get_y());\n            imagePosition.Set_x(imagePosition.Get_x() / reduce - (1 / reduce - 1) / 2);\n            imagePosition.Set_y(imagePosition.Get_y() / reduce - (1 / reduce - 1) / 2);\n            Kdu_dims viewDims = new Kdu_dims();\n            viewDims.Assign(imageDimensions);\n            viewDims.Access_size().Set_x(imageSize.Get_x());\n            viewDims.Access_size().Set_y(imageSize.Get_y());\n            compositor.Add_compositing_layer(0, viewDims, viewDims);\n            if (params.getRotationDegree() == 90) compositor.Set_scale(true, false, true, 1.0F); else if (params.getRotationDegree() == 180) compositor.Set_scale(false, true, true, 1.0F); else if (params.getRotationDegree() == 270) compositor.Set_scale(true, true, false, 1.0F); else compositor.Set_scale(false, false, false, 1.0F);\n            compositor.Get_total_composition_dims(viewDims);\n            Kdu_coords viewSize = viewDims.Access_size();\n            compositor.Set_buffer_surface(viewDims);\n            int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()];\n            Kdu_compositor_buf compositorBuffer = compositor.Get_composition_buffer(viewDims);\n            int regionBufferSize = 0;\n            int[] kduBuffer = null;\n            Kdu_dims newRegion = new Kdu_dims();\n            while (compositor.Process(100000, newRegion)) {\n                Kdu_coords newOffset = newRegion.Access_pos();\n                Kdu_coords newSize = newRegion.Access_size();\n                newOffset.Subtract(viewDims.Access_pos());\n                int newPixels = newSize.Get_x() * newSize.Get_y();\n                if (newPixels == 0) continue;\n                if (newPixels > regionBufferSize) {\n                    regionBufferSize = newPixels;\n                    kduBuffer = new int[regionBufferSize];\n                }\n                compositorBuffer.Get_region(newRegion, kduBuffer);\n                int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x();\n                int kduBufferIdx = 0;\n                int xDiff = viewSize.Get_x() - newSize.Get_x();\n                for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) {\n                    for (int i = 0; i < newSize.Get_x(); i++) {\n                        imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++];\n                    }\n                }\n            }\n            if (params.getRotationDegree() == 90 || params.getRotationDegree() == 270) image = new BufferedImage(imageSize.Get_y(), imageSize.Get_x(), BufferedImage.TYPE_INT_RGB); else image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB);\n            image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x());\n            if (compositor != null) compositor.Native_destroy();\n            wrapped_src.Native_destroy();\n            family_src.Native_destroy();\n            if (raw_src != null) raw_src.Native_destroy();\n            return image;\n        } catch (KduException e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new DjatokaException(e);\n        }\n    }\n']",370,"    public static void main(String[] args) {
        System.out.println(""Start filtering zgps..."");
        final Config url = Gbl.createConfig(args);
        final String CONFIG_MODULE = ""GPSFilterZGPS"";
        File sourceFileSelectedstores = new File(url.findParam(CONFIG_MODULE, ""sourceFileSelectedstores""));
        File sourceFileZGPS = new File(url.findParam(CONFIG_MODULE, ""sourceFileZGPS""));
        File targetFile = new File(url.findParam(CONFIG_MODULE, ""targetFile""));
        System.out.println(""Start reading selected stages..."");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedstores);
        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");
        System.out.println(""Start reading and writing zgps..."");
        try {
            BufferedReader url = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));
            out.write(url.readLine());
            out.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = url.readLine()) != null) {
                String[] entries = lineFromInputFile.split(""\t"");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    out.write(lineFromInputFile);
                    out.newLine();
                    out.flush();
                }
            }
            url.close();
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""Could not find source file for selected stages."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IO Exception while reading or writing zgps."");
            e.printStackTrace();
        }
        System.out.println(""Done."");
    }
",1,1,0,1,"config,CONFIG_MODULE,sourceFileSelectedStages,sourceFileZGPS,targetFile,selectedStages,in,out,lineFromInputFile,entries","config:-5.9604644775390625e-06,CONFIG_MODULE:0.0,sourceFileSelectedStages:0.0,sourceFileZGPS:0.0,targetFile:0.0,selectedStages:0.0,in:-1.4901161193847656e-05,out:-4.7147274017333984e-05,lineFromInputFile:0.0,entries:0.0,",3,11,"CONFIG_MODULE:CONFIG_MODULE,sourceFileSelectedStages:sourceFileSelectedstores,sourceFileZGPS:sourceFileZGPS,targetFile:targetFile,selectedStages:selectedStages,lineFromInputFile:lineFromInputFile,entries:entries,config:url,in:url,",Greedy,516,0.24573447704315185
330,"['5125847', '3109015', '    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })\n    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {\n        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());\n        StringBuilder name = new StringBuilder();\n        try {\n            if (dir.delete() && dir.mkdirs()) {\n                File minDir = new File(dir, ""min"");\n                minDir.mkdir();\n                File combineFile = new File(minDir, ""style.css"");\n                Writer writer = new FileWriter(combineFile);\n                boolean first = true;\n                for (Node link : linkCss) {\n                    String path = ((Element) link).getAttribute(""href"");\n                    URL url = new URL(buildUrl(base, path));\n                    InputStream inputStream = url.openStream();\n                    File cssFile = new File(dir, fileName(url));\n                    FileOutputStream outputStream = new FileOutputStream(cssFile);\n                    IOUtils.copy(inputStream, outputStream);\n                    outputStream.close();\n                    inputStream.close();\n                    if (!first) {\n                        writer.write(\'\\n\');\n                    } else {\n                        first = false;\n                    }\n                    Reader reader = new FileReader(cssFile);\n                    if (Configuration.cssMinification()) {\n                        CssCompressor cssCompressor = new CssCompressor(reader);\n                        cssCompressor.compress(writer, 0);\n                    } else {\n                        IOUtils.copy(reader, writer);\n                    }\n                    reader.close();\n                    String fileName = cssFile.getName();\n                    int pos = fileName.lastIndexOf(\'.\');\n                    if (pos >= 0) {\n                        fileName = fileName.substring(0, pos);\n                    }\n                    name.append(fileName).append("","");\n                }\n                writer.close();\n                FileReader reader = new FileReader(combineFile);\n                name.append(hashCode(IOUtils.toString(reader))).append("".css"");\n                reader.close();\n                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());\n                if (!targetFile.exists()) {\n                    targetFile.getParentFile().mkdirs();\n                    FileUtils.copyFile(combineFile, targetFile);\n                    newFiles.add(targetFile);\n                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");\n                }\n            }\n        } finally {\n            FileUtils.deleteQuietly(dir);\n        }\n        if (name.length() != 0) {\n            Element element = (Element) linkCss.get(0);\n            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());\n            return element;\n        } else {\n            return null;\n        }\n    }\n', '    private void copy(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n']",536,"    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""style.css"");
                Writer word = new FileWriter(combineFile);
                boolean first = true;
                for (Node link : linkCss) {
                    String path = ((Element) link).getAttribute(""href"");
                    URL source = new URL(buildUrl(base, path));
                    InputStream inputStream = source.openStream();
                    File cssFile = new File(dir, fileName(source));
                    FileOutputStream outputStream = new FileOutputStream(cssFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        word.write('
');
                    } else {
                        first = false;
                    }
                    Reader reader = new FileReader(cssFile);
                    if (Configuration.cssMinification()) {
                        CssCompressor cssCompressor = new CssCompressor(reader);
                        cssCompressor.compress(word, 0);
                    } else {
                        IOUtils.copy(reader, word);
                    }
                    reader.close();
                    String fileName = cssFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                word.close();
                FileReader reader = new FileReader(combineFile);
                name.append(hashCode(IOUtils.toString(reader))).append("".css"");
                reader.close();
                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    FileUtils.copyFile(combineFile, targetFile);
                    newFiles.add(targetFile);
                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkCss.get(0);
            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
",1,1,1,-1,"base,linkCss,newFiles,dir,name,minDir,combineFile,writer,link,path,url,inputStream,cssFile,fileName,outputStream,first,reader,cssCompressor,pos,targetFile","base:0.0015406012535095215,linkCss:0.0,newFiles:0.0,dir:0.0009438395500183105,name:0.0009529590606689453,minDir:0.0,combineFile:0.0,writer:0.0012634992599487305,link:-0.001376807689666748,path:-0.00015872716903686523,url:1.6569252014160156,inputStream:0.0,cssFile:0.0,fileName:0.0,outputStream:0.0,first:0.0004918575286865234,reader:-0.001601576805114746,cssCompressor:0.0,pos:3.5881996154785156e-05,targetFile:0.0,",2,8,"url:source,base:base,writer:word,name:name,dir:dir,first:first,pos:pos,linkCss:linkCss,newFiles:newFiles,minDir:minDir,combineFile:combineFile,inputStream:inputStream,cssFile:cssFile,fileName:fileName,outputStream:outputStream,cssCompressor:cssCompressor,targetFile:targetFile,path:path,link:link,reader:reader,",Greedy,913,0.4805756648381551
331,"['20654105', '6503552', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    public static DataElement createMD5Sum(int type, String data) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(data.getBytes());\n            byte[] dt = md.digest();\n            return new DataElement(type, hexEncode(dt));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new DataElement(type);\n    }\n']",96,"    public static void copyFile(File io, File out) throws IOException {
        FileChannel outStream = new FileInputStream(io).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            outStream.transferTo(0, outStream.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (outStream != null) outStream.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0,0,0,-1,"in,out,inChannel,outChannel","in:-2.384185791015625e-07,out:-1.1920928955078125e-06,inChannel:0.0,outChannel:0.0,",2,7,"inChannel:outStream,outChannel:outChannel,in:io,out:out,",Greedy,172,0.07825064261754354
332,"['18153746', '16190704', '    public static void copy(File src, File dst) throws IOException {\n        FileInputStream fIn = null;\n        FileOutputStream fOut = null;\n        FileChannel sIn = null;\n        FileChannel sOut = null;\n        try {\n            fIn = new FileInputStream(src);\n            try {\n                fOut = new FileOutputStream(dst);\n                try {\n                    sIn = fIn.getChannel();\n                    sOut = fOut.getChannel();\n                    sOut.transferFrom(sIn, 0, sIn.size());\n                } finally {\n                    if (sIn != null) {\n                        sIn.close();\n                    }\n                    if (sOut != null) {\n                        sOut.close();\n                    }\n                }\n            } finally {\n                if (fOut != null) {\n                    fOut.close();\n                }\n            }\n        } finally {\n            if (fIn != null) {\n                fIn.close();\n            }\n        }\n    }\n', '    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {\n        String sessionUrl = getSessionTokenUrl(protocol, domain);\n        URL url = new URL(sessionUrl);\n        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");\n        httpConn.setRequestProperty(""Authorization"", header);\n        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());\n        }\n        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));\n        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\\n"", ""="", true);\n        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);\n        return parsedTokens.get(""token"");\n    }\n']",156,"    public static void copy(File filename, File Dwd) throws IOException {
        FileInputStream sInt = null;
        FileOutputStream lDie = null;
        FileChannel sIn = null;
        FileChannel fExt = null;
        try {
            sInt = new FileInputStream(filename);
            try {
                lDie = new FileOutputStream(Dwd);
                try {
                    sIn = sInt.getChannel();
                    fExt = lDie.getChannel();
                    fExt.transferFrom(sIn, 0, sIn.size());
                } finally {
                    if (sIn != null) {
                        sIn.close();
                    }
                    if (fExt != null) {
                        fExt.close();
                    }
                }
            } finally {
                if (lDie != null) {
                    lDie.close();
                }
            }
        } finally {
            if (sInt != null) {
                sInt.close();
            }
        }
    }
",0,0,0,-1,"src,dst,fIn,fOut,sIn,sOut","src:-1.7881393432617188e-06,dst:0.0,fIn:0.0,fOut:0.0,sIn:0.0,sOut:0.0,",5,19,"dst:Dwd,fIn:sInt,fOut:lDie,sIn:sIn,sOut:fExt,src:filename,",Greedy,275,0.11808098157246907
333,"['3708296', '7309170', '    public byte[] transfer(@Nullable final TransferListener transferListener) {\n        try {\n            InputStream inputStream = url.openStream();\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());\n            if (transferListener != null) {\n                inputStream = new ObservableInputStream(inputStream, transferListener);\n            }\n            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);\n            return outputStream.toByteArray();\n        } catch (IOException e) {\n            throw new UnhandledException(e);\n        }\n    }\n', '    private void zip(File input, File output) {\n        OutputStream os = null;\n        InputStream is = null;\n        try {\n            os = new GZIPOutputStream(new FileOutputStream(output));\n            is = new FileInputStream(input);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n']",92,"    public byte[] transfer(@Nullable final TransferListener moveHandler) {
        try {
            InputStream  inputThread = url.openStream();
            ByteArrayOutputStream OutputBuffer = new ByteArrayOutputStream( inputThread.available());
            if (moveHandler != null) {
                 inputThread = new ObservableInputStream( inputThread, moveHandler);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier( inputThread), OutputBuffer);
            return OutputBuffer.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0,0,0,-1,"transferListener,inputStream,outputStream","transferListener:0.0,inputStream:0.0,outputStream:0.0,",3,11,"transferListener:moveHandler,inputStream: inputThread,outputStream:OutputBuffer,",Greedy,110,0.05937810341517131
334,"['6158845', '16474825', '    private void serveRedir(OutputStream os, IRequest req) throws IOException {\n        String urlString = req.getParameter(""url"");\n        URL url = new URL(urlString);\n        URLConnection con = url.openConnection();\n        InputStream is = new BufferedInputStream(con.getInputStream());\n        String ct = con.getContentType();\n        int cl = con.getContentLength();\n        String jsLink = ""<script language=\\""JavaScript1.2\\"" src=\\""/tddt.js\\"" type=\'text/javascript\'></script>\\n"";\n        int i;\n        String head = getHead(""HTTP/1.0 200 OK"", ""Content-Type: "" + ct + ""\\nContent-Length: -1"");\n        os.write(head.getBytes());\n        if (ct != null && ct.indexOf(""html"") != -1) {\n            os.write(jsLink.getBytes());\n            NetUtils.saveChangeLink(url, os);\n        } else {\n            int len;\n            byte[] b = new byte[1024];\n            while ((len = is.read(b)) >= 0) {\n                os.write(b, 0, len);\n            }\n        }\n        os.flush();\n    }\n', '    public static void copyFile(String file1, String file2) {\n        File filedata1 = new java.io.File(file1);\n        if (filedata1.exists()) {\n            try {\n                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));\n                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));\n                try {\n                    int read;\n                    while ((read = in.read()) != -1) {\n                        out.write(read);\n                    }\n                    out.flush();\n                } catch (IOException ex1) {\n                    ex1.printStackTrace();\n                } finally {\n                    out.close();\n                    in.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n']",215,"    private void serveRedir(OutputStream cos, IRequest Request) throws IOException {
        String strString = Request.getParameter(""http"");
        URL http = new URL(strString);
        URLConnection serv = http.openConnection();
        InputStream ri = new BufferedInputStream(serv.getInputStream());
        String lc = serv.getContentType();
        int ul = serv.getContentLength();
        String jsUrl = ""<script language=\""JavaScript1.2\"" src=\""/tddt.js\"" type='text/javascript'></script>
"";
        int index;
        String heads = getHead(""HTTP/1.0 200 OK"", ""Content-Type: "" + lc + ""
Content-Length: -1"");
        cos.write(heads.getBytes());
        if (lc != null && lc.indexOf(""html"") != -1) {
            cos.write(jsUrl.getBytes());
            NetUtils.saveChangeLink(http, cos);
        } else {
            int line;
            byte[] bytes = new byte[1024];
            while ((line = ri.read(bytes)) >= 0) {
                cos.write(bytes, 0, line);
            }
        }
        cos.flush();
    }
",0,0,0,-1,"os,req,urlString,url,con,is,ct,cl,jsLink,i,head,len,b","os:-5.960464477539062e-07,req:-5.960464477539062e-07,urlString:0.0,url:6.67572021484375e-06,con:-4.76837158203125e-07,is:-1.5497207641601562e-06,ct:5.960464477539062e-07,cl:-3.5762786865234375e-07,jsLink:0.0,i:-3.5762786865234375e-07,head:-4.76837158203125e-07,len:1.1920928955078125e-07,b:-5.960464477539062e-07,",13,36,"url:http,ct:lc,len:line,urlString:strString,jsLink:jsUrl,cl:ul,i:index,con:serv,head:heads,os:cos,req:Request,b:bytes,is:ri,",Greedy,577,0.25036876996358237
335,"['6677391', '322658', '    @Override\n    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String reqPath = req.getPathInfo();\n        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);\n        ZipEntry entry = zipInfo.get(reqPath);\n        if (entry == null) {\n            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));\n            resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));\n        ServletUtils.establishContentType(reqPath, resp);\n        InputStream in = null;\n        try {\n            in = new BufferedInputStream(zipFile.getInputStream(entry));\n            IOUtils.copy(in, resp.getOutputStream());\n            logger.debug(""Rendered: "" + reqPath);\n        } catch (FileNotFoundException e) {\n            logger.error(""zipped resource not found: "" + reqPath);\n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n    }\n', '    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(""line.separator"");\n        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));\n        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());\n        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());\n        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());\n        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());\n        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());\n        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + "".meta"").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());\n                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());\n                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());\n                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());\n                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + "".extra"").exists()) {\n                fos.write(new String(""The author says:"" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n']",198,"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry source = zipInfo.get(reqPath);
        if (source == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(source));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",1,1,1,-1,"req,resp,reqPath,entry,in","req:-2.86102294921875e-06,resp:-4.76837158203125e-06,reqPath:0.0,entry:3.337860107421875e-06,in:8.821487426757812e-06,",1,3,"in:in,entry:source,reqPath:reqPath,req:req,resp:resp,",Greedy,271,0.12086952129999796
336,"['22366636', '3108499', '    public int create(BusinessObject o) throws DAOException {\n        int insert = 0;\n        int id = 0;\n        Project project = (Project) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));\n            pst.setString(1, project.getName());\n            pst.setString(2, project.getDescription());\n            pst.setInt(3, project.getIdAccount());\n            pst.setInt(4, project.getIdContact());\n            insert = pst.executeUpdate();\n            if (insert <= 0) {\n                connection.rollback();\n                throw new DAOException(""Number of rows <= 0"");\n            } else if (insert > 1) {\n                connection.rollback();\n                throw new DAOException(""Number of rows > 1"");\n            }\n            Statement st = connection.createStatement();\n            ResultSet rs = st.executeQuery(""select max(id_project) from project"");\n            rs.next();\n            id = rs.getInt(1);\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(""A SQLException has occured"");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(""Connection null"");\n        }\n        return id;\n    }\n', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n']",255,"    public int create(BusinessObject office) throws DAOException {
        int throw = 0;
        int event = 0;
        Project user = (Project) office;
        try {
            PreparedStatement Pft = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_PROJECT""));
            Pft.setString(1, user.getName());
            Pft.setString(2, user.getDescription());
            Pft.setInt(3, user.getIdAccount());
            Pft.setInt(4, user.getIdContact());
            throw = Pft.executeUpdate();
            if (throw <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (throw > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement ost = connection.createStatement();
            ResultSet runs = ost.executeQuery(""select max(id_project) from project"");
            runs.next();
            event = runs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return event;
    }
",0,0,0,-1,"o,insert,id,project,pst,st,rs","o:1.1920928955078125e-07,insert:-1.1920928955078125e-07,id:-2.7418136596679688e-06,project:-1.9073486328125e-06,pst:0.0,st:-1.430511474609375e-06,rs:-1.1920928955078125e-06,",7,26,"o:office,pst:Pft,insert:throw,rs:runs,st:ost,project:user,id:event,",Greedy,374,0.16523116032282512
337,"['7564559', '1048705', '    public static String SHAEncrypt(String originalString) {\n        String encryptedString = new String("""");\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA-1"");\n            md.update(originalString.getBytes());\n            byte b[] = md.digest();\n            for (int i = 0; i < b.length; i++) {\n                char[] digit = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\' };\n                char[] ob = new char[2];\n                ob[0] = digit[(b[i] >>> 4) & 0X0F];\n                ob[1] = digit[b[i] & 0X0F];\n                encryptedString += new String(ob);\n            }\n        } catch (NoSuchAlgorithmException nsae) {\n            System.out.println(""the algorithm doesn\'t exist"");\n        }\n        return encryptedString;\n    }\n', '    public static String encriptarPassword(String aPassword) throws BusinessException {\n        ILogger logger = LogFactory.getLogger(User.class);\n        String methodId = ""encriptarPassword"";\n        try {\n            MessageDigest currentAlgorithm = MessageDigest.getInstance(""MD5"");\n            currentAlgorithm.reset();\n            currentAlgorithm.update(aPassword.getBytes());\n            byte[] hash = currentAlgorithm.digest();\n            String d = """";\n            for (int i = 0; i < hash.length; i++) {\n                int v = hash[i] & 0xFF;\n                if (v < 16) d += ""0"";\n                d += Integer.toString(v, 16).toUpperCase();\n            }\n            return d.toLowerCase();\n        } catch (NoSuchAlgorithmException nsae) {\n            logger.logError(methodId + ""error al encriptar password:"" + nsae, nsae);\n            throw new BusinessException(""Error al encriptar password"");\n        }\n    }\n']",188,"    public static String SHAEncrypt(String  originalText) {
        String  encryptedService = new String("""");
        try {
            MessageDigest cd = MessageDigest.getInstance(""SHA-1"");
            cd.update( originalText.getBytes());
            byte be[] = cd.digest();
            for (int multi = 0; multi < be.length; multi++) {
                char[] id = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] url = new char[2];
                url[0] = id[(be[multi] >>> 4) & 0X0F];
                url[1] = id[be[multi] & 0X0F];
                 encryptedService += new String(url);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return  encryptedService;
    }
",1,1,1,-1,"originalString,encryptedString,md,b,i,digit,ob","originalString:0.0,encryptedString:0.0,md:-0.02081996202468872,b:0.03460723161697388,i:0.10136234760284424,digit:-0.004499673843383789,ob:-0.01241379976272583,",7,24,"i:multi,b:be,originalString: originalText,encryptedString: encryptedService,digit:id,ob:url,md:cd,",Greedy,337,0.14678727388381957
338,"['2766456', '3327745', '    private void renderScript(PhaseEvent event) {\n        URL url = AjaxPhaseListener.class.getResource(SCRIPT_RESOURCE_NAME);\n        URLConnection conn = null;\n        InputStream stream = null;\n        BufferedReader bufReader = null;\n        HttpServletResponse response = (HttpServletResponse) event.getFacesContext().getExternalContext().getResponse();\n        OutputStreamWriter outWriter = null;\n        String curLine = null;\n        try {\n            outWriter = new OutputStreamWriter(response.getOutputStream(), response.getCharacterEncoding());\n            conn = url.openConnection();\n            conn.setUseCaches(false);\n            stream = conn.getInputStream();\n            bufReader = new BufferedReader(new InputStreamReader(stream));\n            response.setContentType(""text/javascript"");\n            response.setStatus(200);\n            while (null != (curLine = bufReader.readLine())) {\n                outWriter.write(curLine + ""\\n"");\n            }\n            outWriter.flush();\n            outWriter.close();\n            event.getFacesContext().responseComplete();\n        } catch (Exception e) {\n            String message = null;\n            message = ""Can\'t load script file:"" + url.toExternalForm();\n        }\n    }\n', '    public static void copy(String source, String dest) throws java.io.IOException {\n        java.io.BufferedInputStream in = null;\n        java.io.BufferedOutputStream out = null;\n        try {\n            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);\n            while (in.available() != 0) {\n                out.write(in.read());\n            }\n        } catch (java.io.IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (java.io.IOException E) {\n            }\n        }\n    }\n']",211,"    private void renderScript(PhaseEvent event) {
        URL ctrl = AjaxPhaseListener.class.getResource(SCRIPT_RESOURCE_NAME);
        URLConnection conn = null;
        InputStream stream = null;
        BufferedReader bufReader = null;
        HttpServletResponse file = (HttpServletResponse) event.getFacesContext().getExternalContext().getResponse();
        OutputStreamWriter outWriter = null;
        String curLine = null;
        try {
            outWriter = new OutputStreamWriter(file.getOutputStream(), file.getCharacterEncoding());
            conn = ctrl.openConnection();
            conn.setUseCaches(false);
            stream = conn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(stream));
            file.setContentType(""text/javascript"");
            file.setStatus(200);
            while (null != (curLine = bufReader.readLine())) {
                outWriter.write(curLine + ""
"");
            }
            outWriter.flush();
            outWriter.close();
            event.getFacesContext().responseComplete();
        } catch (Exception e) {
            String message = null;
            message = ""Can't load script file:"" + ctrl.toExternalForm();
        }
    }
",0,0,1,1,"event,url,conn,stream,bufReader,response,outWriter,curLine,message","event:-2.5033950805664062e-06,url:6.318092346191406e-05,conn:4.649162292480469e-06,stream:8.940696716308594e-06,bufReader:0.0,response:1.6570091247558594e-05,outWriter:0.0,curLine:0.0,message:-4.887580871582031e-06,",2,8,"url:ctrl,response:file,",Greedy,133,0.06028530200322469
339,"['7495800', '12728035', '    public static void copyFile(File fromFile, File toFile) throws IOException {\n        FileReader from = new FileReader(fromFile);\n        FileWriter to = new FileWriter(toFile);\n        char[] buffer = new char[4096];\n        int bytes_read;\n        while ((bytes_read = from.read(buffer)) != -1) {\n            to.write(buffer, 0, bytes_read);\n        }\n        to.flush();\n        to.close();\n        from.close();\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",94,"    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter http = new FileWriter(toFile);
        char[] url = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(url)) != -1) {
            http.write(url, 0, bytes_read);
        }
        http.flush();
        http.close();
        from.close();
    }
",1,1,0,1,"fromFile,toFile,from,to,buffer,bytes_read","fromFile:0.0,toFile:0.0,from:0.18892216682434082,to:0.6429365277290344,buffer:0.28612953424453735,bytes_read:0.0,",2,7,"to:http,buffer:url,",Greedy,106,0.05230069557825724
340,"['1789990', '9793984', '    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        final MessageDigest digest = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash;\n        digest.update(password.getBytes(""utf-8""), 0, password.length());\n        md5hash = digest.digest();\n        return convertToHex(md5hash);\n    }\n', '    public void setChecksum() {\n        try {\n            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");\n            String fqn = this.path + this.name;\n            md5.update(fqn.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & BYTE_CLEANER_FF;\n                if (b < BYTE_CLEANER_10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            this.checksum = sb.toString();\n        } catch (java.security.NoSuchAlgorithmException nsae) {\n            this.checksum = this.path + this.name;\n        }\n    }\n']",68,"    public String getHash(final String path) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest generEST = MessageDigest.getInstance(""MD5"");
        byte[] MD6array;
        generEST.update(path.getBytes(""utf-8""), 0, path.length());
        MD6array = generEST.generEST();
        return convertToHex(MD6array);
    }
",1,1,1,-1,"password,digest,md5hash","password:0.609066367149353,digest:0.0,md5hash:0.0,",3,10,"password:path,digest:generEST,md5hash:MD6array,",Greedy,129,0.06650095383326213
341,"['15861394', '6176440', '    public static String md5(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        byte[] md5hash = new byte[32];\n        try {\n            md.update(string.getBytes(""iso-8859-1""), 0, string.length());\n        } catch (UnsupportedEncodingException exception) {\n            LOGGER.warn(exception.getMessage());\n        }\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n', '    public static String encrypt(String password, String algorithm, byte[] salt) {\n        StringBuffer buffer = new StringBuffer();\n        MessageDigest digest = null;\n        int size = 0;\n        if (""CRYPT"".equalsIgnoreCase(algorithm)) {\n            throw new InternalError(""Not implemented"");\n        } else if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {\n            size = 20;\n            if (salt != null && salt.length > 0) {\n                buffer.append(""{SSHA}"");\n            } else {\n                buffer.append(""{SHA}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""SHA-1"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new InternalError(""Invalid algorithm"");\n            }\n        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {\n            size = 16;\n            if (salt != null && salt.length > 0) {\n                buffer.append(""{SMD5}"");\n            } else {\n                buffer.append(""{MD5}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""MD5"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new InternalError(""Invalid algorithm"");\n            }\n        }\n        int outSize = size;\n        digest.reset();\n        digest.update(password.getBytes());\n        if (salt != null && salt.length > 0) {\n            digest.update(salt);\n            outSize += salt.length;\n        }\n        byte[] out = new byte[outSize];\n        System.arraycopy(digest.digest(), 0, out, 0, size);\n        if (salt != null && salt.length > 0) {\n            System.arraycopy(salt, 0, out, size, salt.length);\n        }\n        buffer.append(Base64.encode(out));\n        return buffer.toString();\n    }\n']",115,"    public static String md5(String filename) {
        MessageDigest grad = null;
        try {
            grad = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException exception) {
            LOGGER.warn(exception.getMessage());
        }
        byte[] md005hash = new byte[32];
        try {
            grad.update(filename.getBytes(""iso-8859-1""), 0, filename.length());
        } catch (UnsupportedEncodingException exception) {
            LOGGER.warn(exception.getMessage());
        }
        md005hash = grad.digest();
        return convertToHex(md005hash);
    }
",1,1,1,-1,"string,md,md5hash","string:0.45570093393325806,md:1.1412301361560822,md5hash:0.0,",3,10,"md:grad,string:filename,md5hash:md005hash,",Greedy,162,0.07538055976231893
342,"['21682040', '5125847', '    public void extractFrinika() throws Exception {\n        FileInputStream fis = new FileInputStream(frinikaFile);\n        progressBar.setIndeterminate(true);\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry ze = zis.getNextEntry();\n        while (ze != null) {\n            showMessage(""Extracting: "" + ze.getName());\n            File file = new File(installDirName + ""/"" + ze.getName());\n            if (ze.isDirectory()) file.mkdir(); else {\n                FileOutputStream fos = new FileOutputStream(file);\n                byte[] b = new byte[BUFSIZE];\n                int c;\n                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);\n                fos.close();\n            }\n            ze = zis.getNextEntry();\n        }\n    }\n', '    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })\n    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {\n        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());\n        StringBuilder name = new StringBuilder();\n        try {\n            if (dir.delete() && dir.mkdirs()) {\n                File minDir = new File(dir, ""min"");\n                minDir.mkdir();\n                File combineFile = new File(minDir, ""style.css"");\n                Writer writer = new FileWriter(combineFile);\n                boolean first = true;\n                for (Node link : linkCss) {\n                    String path = ((Element) link).getAttribute(""href"");\n                    URL url = new URL(buildUrl(base, path));\n                    InputStream inputStream = url.openStream();\n                    File cssFile = new File(dir, fileName(url));\n                    FileOutputStream outputStream = new FileOutputStream(cssFile);\n                    IOUtils.copy(inputStream, outputStream);\n                    outputStream.close();\n                    inputStream.close();\n                    if (!first) {\n                        writer.write(\'\\n\');\n                    } else {\n                        first = false;\n                    }\n                    Reader reader = new FileReader(cssFile);\n                    if (Configuration.cssMinification()) {\n                        CssCompressor cssCompressor = new CssCompressor(reader);\n                        cssCompressor.compress(writer, 0);\n                    } else {\n                        IOUtils.copy(reader, writer);\n                    }\n                    reader.close();\n                    String fileName = cssFile.getName();\n                    int pos = fileName.lastIndexOf(\'.\');\n                    if (pos >= 0) {\n                        fileName = fileName.substring(0, pos);\n                    }\n                    name.append(fileName).append("","");\n                }\n                writer.close();\n                FileReader reader = new FileReader(combineFile);\n                name.append(hashCode(IOUtils.toString(reader))).append("".css"");\n                reader.close();\n                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());\n                if (!targetFile.exists()) {\n                    targetFile.getParentFile().mkdirs();\n                    FileUtils.copyFile(combineFile, targetFile);\n                    newFiles.add(targetFile);\n                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");\n                }\n            }\n        } finally {\n            FileUtils.deleteQuietly(dir);\n        }\n        if (name.length() != 0) {\n            Element element = (Element) linkCss.get(0);\n            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());\n            return element;\n        } else {\n            return null;\n        }\n    }\n']",164,"    public void extractFrinika() throws Exception {
        FileInputStream Fiss = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(Fiss);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File http = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) http.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(http);
                byte[] pb = new byte[BUFSIZE];
                int id;
                while ((id = zis.read(pb)) != -1) fos.write(pb, 0, id);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
",1,1,0,1,"fis,zis,ze,file,fos,b,c","fis:0.0,zis:0.0,ze:-0.00017660856246948242,file:0.000319063663482666,fos:0.0,b:7.355213165283203e-05,c:2.1755695343017578e-05,",4,11,"file:http,b:pb,c:id,fis:Fiss,",Greedy,183,0.08731417655944824
343,"['14196271', '20292404', '    private synchronized File zipTempFile(File tempFile) throws BlogunityException {\n        try {\n            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));\n            byte[] readBuffer = new byte[2156];\n            int bytesIn = 0;\n            FileInputStream fis = new FileInputStream(tempFile);\n            ZipEntry anEntry = new ZipEntry(tempFile.getName());\n            zos.putNextEntry(anEntry);\n            while ((bytesIn = fis.read(readBuffer)) != -1) {\n                zos.write(readBuffer, 0, bytesIn);\n            }\n            fis.close();\n            zos.close();\n            return zippedFile;\n        } catch (Exception e) {\n            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));\n        }\n    }\n', '    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {\n        File inputFile = null;\n        File outputFile = null;\n        try {\n            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());\n            OutputStream inputFileStream = null;\n            try {\n                inputFileStream = new FileOutputStream(inputFile);\n                IOUtils.copy(inputStream, inputFileStream);\n            } finally {\n                IOUtils.closeQuietly(inputFileStream);\n            }\n            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());\n            convert(inputFile, inputFormat, outputFile, outputFormat);\n            InputStream outputFileStream = null;\n            try {\n                outputFileStream = new FileInputStream(outputFile);\n                IOUtils.copy(outputFileStream, outputStream);\n            } finally {\n                IOUtils.closeQuietly(outputFileStream);\n            }\n        } catch (IOException ioException) {\n            throw new OpenOfficeException(""conversion failed"", ioException);\n        } finally {\n            if (inputFile != null) {\n                inputFile.delete();\n            }\n            if (outputFile != null) {\n                outputFile.delete();\n            }\n        }\n    }\n']",169,"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zes = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zes.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zes.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zes.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
",1,1,1,-1,"tempFile,zippedFile,zos,readBuffer,bytesIn,fis,anEntry","tempFile:0.0,zippedFile:0.0,zos:0.00010818243026733398,readBuffer:0.0,bytesIn:0.0,fis:0.0,anEntry:0.0,",1,4,"zos:zes,tempFile:tempFile,zippedFile:zippedFile,readBuffer:readBuffer,bytesIn:bytesIn,fis:fis,anEntry:anEntry,",Greedy,304,0.144283660252889
344,"['12340187', '1760352', '    private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException {\n        if (local == null) throw new IllegalArgumentException(""Must specify remote file"");\n        if (local.exists() && !local.canWrite()) throw new IOException(""Cannot write to "" + local);\n        long lengthCurrent = local.exists() ? local.length() : -1l;\n        if (lengthCurrent == 0) throw new IOException(""Cannot get the length for "" + local);\n        long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l;\n        if (remote == null) throw new IllegalArgumentException(""Must specify remote url"");\n        URLConnection urlConnection = remote.openConnection();\n        urlConnection.setDoInput(true);\n        urlConnection.setDoOutput(false);\n        long lengthRemote = urlConnection.getContentLength();\n        long lastModifiedRemote = urlConnection.getLastModified();\n        if (lengthRemote == lengthCurrent) {\n            LOGGER.fine(""Not downloading "" + remote + "" of length "" + lengthRemote + "" and date "" + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : ""n/a"") + "" for "" + local + "" of length "" + lengthCurrent + "" and date "" + new Date(lastModifiedCurrent));\n            return false;\n        }\n        BufferedInputStream inputStream = null;\n        BufferedOutputStream bufferedOutputStream = null;\n        try {\n            inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);\n            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local));\n            byte[] buffer = new byte[BUFFER_SIZE];\n            do {\n                int count = inputStream.read(buffer);\n                if (count < 0) break;\n                bufferedOutputStream.write(buffer, 0, count);\n            } while (true);\n            return true;\n        } finally {\n            try {\n                if (inputStream != null) inputStream.close();\n            } catch (Throwable throwable) {\n            }\n            try {\n                if (bufferedOutputStream != null) bufferedOutputStream.close();\n            } catch (Throwable throwable) {\n            }\n        }\n    }\n', '    public static int deleteContract(String likePatten) {\n        Connection conn = null;\n        PreparedStatement psmt = null;\n        StringBuffer SQL = new StringBuffer(200);\n        int deleted = 0;\n        SQL.append("" DELETE FROM JHF_ALIVE_CONTRACT "").append("" WHERE   ORDER_ID LIKE  ? "");\n        try {\n            conn = JdbcConnectionPool.mainConnection();\n            conn.setAutoCommit(false);\n            conn.setReadOnly(false);\n            psmt = conn.prepareStatement(SQL.toString());\n            psmt.setString(1, ""%"" + likePatten + ""%"");\n            deleted = psmt.executeUpdate();\n            conn.commit();\n        } catch (SQLException e) {\n            if (null != conn) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e1) {\n                    System.out.println("" error when roll back !"");\n                }\n            }\n        } finally {\n            try {\n                if (null != psmt) {\n                    psmt.close();\n                    psmt = null;\n                }\n                if (null != conn) {\n                    conn.close();\n                    conn = null;\n                }\n            } catch (SQLException e) {\n                System.out.println("" error  when psmt close or conn close ."");\n            }\n        }\n        return deleted;\n    }\n']",378,"    private static boolean downloadFile(URL url, File managed) throws IllegalArgumentException, IOException {
        if (managed == null) throw new IllegalArgumentException(""Must specify remote file"");
        if (managed.exists() && !managed.canWrite()) throw new IOException(""Cannot write to "" + managed);
        long lenRemote = managed.exists() ? managed.length() : -1l;
        if (lenRemote == 0) throw new IOException(""Cannot get the length for "" + managed);
        long lastModifyLatest = managed.exists() ? managed.lastModified() : -1l;
        if (url == null) throw new IllegalArgumentException(""Must specify remote url"");
        URLConnection urlConnection = url.openConnection();
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(false);
        long LengthRemote = urlConnection.getContentLength();
        long lastModifiedRemote = urlConnection.getLastModified();
        if (LengthRemote == lenRemote) {
            LOGGER.fine(""Not downloading "" + url + "" of length "" + LengthRemote + "" and date "" + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : ""n/a"") + "" for "" + managed + "" of length "" + lenRemote + "" and date "" + new Date(lastModifyLatest));
            return false;
        }
        BufferedInputStream Inputstream = null;
        BufferedOutputStream bufferedEdgeSteam = null;
        try {
            Inputstream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);
            bufferedEdgeSteam = new BufferedOutputStream(new FileOutputStream(managed));
            byte[] flush = new byte[BUFFER_SIZE];
            do {
                int id = Inputstream.read(flush);
                if (id < 0) break;
                bufferedEdgeSteam.write(flush, 0, id);
            } while (true);
            return true;
        } finally {
            try {
                if (Inputstream != null) Inputstream.close();
            } catch (Throwable throwable) {
            }
            try {
                if (bufferedEdgeSteam != null) bufferedEdgeSteam.close();
            } catch (Throwable throwable) {
            }
        }
    }
",0,0,0,-1,"remote,local,lengthCurrent,lastModifiedCurrent,urlConnection,lengthRemote,lastModifiedRemote,inputStream,bufferedOutputStream,buffer,count","remote:-5.245208740234375e-06,local:1.1563301086425781e-05,lengthCurrent:0.0,lastModifiedCurrent:0.0,urlConnection:0.0,lengthRemote:0.0,lastModifiedRemote:0.0,inputStream:0.0,bufferedOutputStream:0.0,buffer:3.337860107421875e-06,count:1.0728836059570312e-06,",9,43,"local:managed,buffer:flush,count:id,lengthCurrent:lenRemote,lastModifiedCurrent:lastModifyLatest,urlConnection:urlConnection,lengthRemote:LengthRemote,lastModifiedRemote:lastModifiedRemote,inputStream:Inputstream,bufferedOutputStream:bufferedEdgeSteam,remote:url,",Greedy,624,0.2794855316480001
345,"['22075658', '19476935', '    public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception {\n        BufferedInputStream bis = null;\n        BufferedOutputStream bos = null;\n        URL url = new URL(pURL);\n        int port = url.getPort();\n        if (-1 == port) {\n            port = url.getDefaultPort();\n        }\n        if (url.getProtocol().equals(HTTPS_PROTOCOL)) {\n            Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port);\n            Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol);\n        }\n        HttpClient httpClient = new HttpClient();\n        httpClient.getParams().setParameter(""http.socket.timeout"", HTTP_SOCKET_TIMEOUT);\n        HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL);\n        if (null != pUserName && null != pPassword) {\n            httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword));\n        }\n        try {\n            httpClient.executeMethod(httpMethod);\n            if (null != pResponseOutputStream) {\n                IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream);\n            }\n            return httpMethod.getResponseBodyAsStream();\n        } catch (Exception e) {\n            throw (e);\n        } finally {\n            httpMethod.releaseConnection();\n        }\n    }\n', '    public static void copyResource(String src, File dest) throws IOException {\n        InputStream fin = ResourceLoader.openResource(src);\n        if (fin == null) {\n            LogFactory.getLog(ResourceLoader.class).error(""Failed to load resource \'"" + src + ""\'"");\n            LogFactory.getLog(ResourceLoader.class).info(""Attempting to open file from from file system"");\n            fin = new FileInputStream(src);\n        }\n        if (fin == null) {\n            LogFactory.getLog(ResourceLoader.class).warn(""Giving up on copy operation, can\'t find source \'"" + src + ""\'"");\n            return;\n        }\n        BufferedOutputStream fout = new BufferedOutputStream(new FileOutputStream(dest));\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n        int readBytes = fin.read(buffer);\n        while (readBytes > -1) {\n            fout.write(buffer, 0, readBytes);\n            readBytes = fin.read(buffer);\n        }\n        fout.close();\n        fin.close();\n    }\n']",234,"    public static InputStream getResponse(String paURI, String pTeamNAME, String  pLogin, OutputStream pResponseWriteForm, String pHttpMClass) throws Exception {
        BufferedInputStream  inf = null;
        BufferedOutputStream  oy = null;
        URL url = new URL(paURI);
        int connection = url.getPort();
        if (-1 == connection) {
            connection = url.getDefaultPort();
        }
        if (url.getProtocol().equals(HTTPS_PROTOCOL)) {
            Protocol httpProtection = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), connection);
            Protocol.registerProtocol(HTTPS_PROTOCOL, httpProtection);
        }
        HttpClient HttpServer = new HttpClient();
        HttpServer.getParams().setParameter(""http.socket.timeout"", HTTP_SOCKET_TIMEOUT);
        HttpMethod HttpClass = getHttpMethod(pHttpMClass, paURI);
        if (null != pTeamNAME && null !=  pLogin) {
            HttpServer.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pTeamNAME,  pLogin));
        }
        try {
            HttpServer.executeMethod(HttpClass);
            if (null != pResponseWriteForm) {
                IOUtils.copy(HttpClass.getResponseBodyAsStream(), pResponseWriteForm);
            }
            return HttpClass.getResponseBodyAsStream();
        } catch (Exception e) {
            throw (e);
        } finally {
            HttpClass.releaseConnection();
        }
    }
",1,1,1,-1,"pURL,pUserName,pPassword,pResponseOutputStream,pHttpMethodType,bis,bos,url,port,httpsProtocol,httpClient,httpMethod","pURL:0.0,pUserName:0.0,pPassword:0.0,pResponseOutputStream:0.0,pHttpMethodType:0.0,bis:2.384185791015625e-07,bos:0.0,url:9.179115295410156e-06,port:1.5497207641601562e-06,httpsProtocol:0.0,httpClient:0.0,httpMethod:0.0,",11,31,"url:url,port:connection,bis: inf,pURL:paURI,pUserName:pTeamNAME,pPassword: pLogin,pResponseOutputStream:pResponseWriteForm,pHttpMethodType:pHttpMClass,bos: oy,httpsProtocol:httpProtection,httpClient:HttpServer,httpMethod:HttpClass,",Greedy,499,0.23099369208017986
346,"['14113380', '1274215', '    @SuppressWarnings(""unchecked"")\n    public void execute() throws MojoExecutionException {\n        List<Dependency> dependencies = project.getDependencies();\n        File file = new File(this.localRepository.getBasedir());\n        File dojoArtifact = null;\n        for (Dependency dependency : dependencies) {\n            if (!dependency.getGroupId().equals(""org.dojotoolkit"") && !dependency.getArtifactId().equals(""dojo"")) continue;\n            File file2 = new File(file, dependency.getGroupId().replace(\'.\', File.separatorChar));\n            file2 = new File(file2, dependency.getArtifactId());\n            file2 = new File(file2, dependency.getVersion());\n            file2 = new File(file2, dependency.getArtifactId() + \'-\' + dependency.getVersion() + \'.\' + dependency.getType());\n            if (!file2.exists()) throw new MojoExecutionException(""No artifact found in base repository "" + file2);\n            dojoArtifact = file2;\n        }\n        if (dojoArtifact == null) throw new MojoExecutionException(""No dojo dependencies found"");\n        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get(""org.apache.maven.plugins:maven-war-plugin"");\n        if (plugin == null) return;\n        String webappDirectory = null;\n        Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration();\n        if (dom != null) webappDirectory = dom.getChild(""webappDirectory"").getValue();\n        if (webappDirectory == null) webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + \'-\' + project.getVersion();\n        try {\n            File webAppDojoDir = new File(webappDirectory, this.dojoDir);\n            if (!webAppDojoDir.exists()) webAppDojoDir.mkdirs();\n            ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact));\n            ZipEntry zipentry = inputStream.getNextEntry();\n            byte[] buf = new byte[1024];\n            while (zipentry != null) {\n                File entry = new File(webAppDojoDir, zipentry.getName());\n                if (zipentry.isDirectory()) {\n                    entry.mkdirs();\n                } else {\n                    int n;\n                    FileOutputStream fileoutputstream;\n                    if (entry.getParent() != null) {\n                        entry.getParentFile().mkdirs();\n                    }\n                    fileoutputstream = new FileOutputStream(entry);\n                    while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                    fileoutputstream.close();\n                    inputStream.closeEntry();\n                }\n                zipentry = inputStream.getNextEntry();\n            }\n            inputStream.close();\n        } catch (Exception e) {\n            throw new MojoExecutionException(""Error to extract the dojo artifact "", e);\n        }\n    }\n', '    public static void main(String[] args) {\n        try {\n            if (args.length < 2) {\n                System.err.println(""usage: test [src] [dest]"");\n                return;\n            }\n            FileInputStream in = new FileInputStream(args[0]);\n            FileOutputStream out = new FileOutputStream(args[1]);\n            FileChannel src = in.getChannel();\n            FileChannel channel = out.getChannel();\n            long pos = 0, len = src.size(), ret;\n            while (len > 0) {\n                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;\n                len -= ret;\n                pos += ret;\n            }\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",532,"    @SuppressWarnings(""unchecked"")
    public void execute() throws MojoExecutionException {
        List<Dependency> dependencies = project.getDependencies();
        File url = new File(this.localRepository.getBasedir());
        File dojoArtository = null;
        for (Dependency dependency : dependencies) {
            if (!dependency.getGroupId().equals(""org.dojotoolkit"") && !dependency.getArtifactId().equals(""dojo"")) continue;
            File placeTwo = new File(url, dependency.getGroupId().replace('.', File.separatorChar));
            placeTwo = new File(placeTwo, dependency.getArtifactId());
            placeTwo = new File(placeTwo, dependency.getVersion());
            placeTwo = new File(placeTwo, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType());
            if (!placeTwo.exists()) throw new MojoExecutionException(""No artifact found in base repository "" + placeTwo);
            dojoArtository = placeTwo;
        }
        if (dojoArtository == null) throw new MojoExecutionException(""No dojo dependencies found"");
        Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get(""org.apache.maven.plugins:maven-war-plugin"");
        if (plugin == null) return;
        String webappFolder = null;
        Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration();
        if (dom != null) webappFolder = dom.getChild(""webappFolder"").getValue();
        if (webappFolder == null) webappFolder = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + '-' + project.getVersion();
        try {
            File webAppDojoDir = new File(webappFolder, this.dojoDir);
            if (!webAppDojoDir.exists()) webAppDojoDir.mkdirs();
            ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtository));
            ZipEntry zipentry = inputStream.getNextEntry();
            byte[] buf = new byte[1024];
            while (zipentry != null) {
                File entry = new File(webAppDojoDir, zipentry.getName());
                if (zipentry.isDirectory()) {
                    entry.mkdirs();
                } else {
                    int n;
                    FileOutputStream fileoutputstream;
                    if (entry.getParent() != null) {
                        entry.getParentFile().mkdirs();
                    }
                    fileoutputstream = new FileOutputStream(entry);
                    while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                    fileoutputstream.close();
                    inputStream.closeEntry();
                }
                zipentry = inputStream.getNextEntry();
            }
            inputStream.close();
        } catch (Exception e) {
            throw new MojoExecutionException(""Error to extract the dojo artifact "", e);
        }
    }
",1,1,0,1,"dependencies,file,dojoArtifact,dependency,file2,plugin,webappDirectory,dom,webAppDojoDir","dependencies:0.0,file:8.887052536010742e-05,dojoArtifact:0.0,dependency:0.0,file2:0.0,plugin:-1.5854835510253906e-05,webappDirectory:0.0,dom:-1.4126300811767578e-05,webAppDojoDir:0.0,",4,22,"file:url,dependencies:dependencies,dojoArtifact:dojoArtository,dependency:dependency,file2:placeTwo,webappDirectory:webappFolder,",Greedy,378,0.19117255608240763
347,"['20086435', '3023702', '    private InputStream createInputStream(String url) throws MalformedURLException, IOException {\n        if (url.startsWith(""classpath://"")) {\n            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));\n            if (is == null) throw new IOException(""Couldn\'t open stream to ["" + url + ""]"");\n            return is;\n        } else {\n            return new URL(url).openStream();\n        }\n    }\n', '    static HashSet<ScriptEngineFactory> lookup(ClassLoader loader, String name) {\n        HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();\n        try {\n            Enumeration<URL> urls = loader.getResources(name);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if ((line = trim(line)) != null) {\n                        try {\n                            Class<ScriptEngineFactory> clazz = (Class<ScriptEngineFactory>) Class.forName(line, true, loader);\n                            ScriptEngineFactory factory = clazz.newInstance();\n                            factories.add(factory);\n                        } catch (java.lang.UnsupportedClassVersionError error) {\n                            if (DEBUG) {\n                                System.err.println(line + "": version mismatch - ignore"");\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new ScriptException(ex);\n        } finally {\n            return factories;\n        }\n    }\n']",81,"    private InputStream createInputStream(String file) throws MalformedURLException, IOException {
        if (file.startsWith(""classpath://"")) {
            InputStream os = XMLResource.class.getResourceAsStream(file.substring(12));
            if (os == null) throw new IOException(""Couldn't open stream to ["" + file + ""]"");
            return os;
        } else {
            return new URL(file).openStream();
        }
    }
",0,0,0,-1,"url,is","url:1.430511474609375e-05,is:1.0728836059570312e-06,",2,8,"url:file,is:os,",Greedy,117,0.053094875812530515
348,"['15385608', '9356670', '    public boolean setFavBoard(List<BoardObject> list) throws NetworkException, ContentException {\n        HttpClient client = HttpConfig.newInstance();\n        HttpPost post = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);\n        List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n        for (BoardObject board : list) nvps.add(new BasicNameValuePair(board.getId(), ""on""));\n        try {\n            post.setEntity(new UrlEncodedFormEntity(nvps, BBSBodyParseHelper.BBS_CHARSET));\n            HttpResponse response = client.execute(post);\n            HttpEntity entity = response.getEntity();\n            if (HTTPUtil.isHttp200(response) && HTTPUtil.isXmlContentType(response)) {\n                HTTPUtil.consume(response.getEntity());\n                return true;\n            } else {\n                String msg = BBSBodyParseHelper.parseFailMsg(entity);\n                throw new ContentException(msg);\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n', '    private FTPClient loginToSharedWorkspace() throws SocketException, IOException {\n        FTPClient ftp = new FTPClient();\n        ftp.connect(mSwarm.getHost(), mSharedWorkspacePort);\n        if (!ftp.login(SHARED_WORKSPACE_LOGIN_NAME, mWorkspacePassword)) {\n            throw new IOException(""Unable to login to shared workspace."");\n        }\n        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\n        return ftp;\n    }\n']",211,"    public boolean setFavBoard(List<BoardObject> lists) throws NetworkException, ContentException {
        HttpClient to = HttpConfig.newInstance();
        HttpPost submit = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);
        List<NameValuePair> vips = new ArrayList<NameValuePair>();
        for (BoardObject Board : lists) vips.add(new BasicNameValuePair(Board.getId(), ""on""));
        try {
            submit.setEntity(new UrlEncodedFormEntity(vips, BBSBodyParseHelper.BBS_CHARSET));
            HttpResponse request = to.execute(submit);
            HttpEntity connection = request.getEntity();
            if (HTTPUtil.isHttp200(request) && HTTPUtil.isXmlContentType(request)) {
                HTTPUtil.consume(request.getEntity());
                return true;
            } else {
                String content = BBSBodyParseHelper.parseFailMsg(connection);
                throw new ContentException(content);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0,0,0,-1,"list,client,post,nvps,board,response,entity,msg","list:1.9669532775878906e-05,client:0.00020015239715576172,post:0.0005224347114562988,nvps:0.0,board:-4.4226646423339844e-05,response:0.00020521879196166992,entity:1.4066696166992188e-05,msg:6.794929504394531e-06,",8,21,"post:submit,response:request,client:to,list:lists,entity:connection,msg:content,nvps:vips,board:Board,",Greedy,360,0.16767516533533733
349,"['6217412', '13351146', '    protected void EncodeRoute() throws EncodeFailedException, IOException {\n        File storefile = getNode().getCodec().PackStore(null, ReturnStore);\n        DownRoute.EncodeData(storefile);\n        File data = getNode().getCodec().PackRemoteDownload(this);\n        data = PigData.EncodeData(data);\n        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);\n        FileChannel foc = fos.getChannel();\n        FileInputStream fis = new FileInputStream(data);\n        FileChannel fic = fis.getChannel();\n        fic.transferTo(0, fic.size(), foc);\n        foc.close();\n        fic.close();\n        UpRoute.EncodeData(PiggybackRouteFile);\n    }\n', '    public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {\n        if (!src.isFile() || !src.exists()) {\n            throw new IllegalArgumentException(""Source file \'"" + src.getAbsolutePath() + ""\' not found!"");\n        }\n        if (dst.exists()) {\n            if (dst.isDirectory()) {\n                dst = new File(dst, src.getName());\n            } else if (dst.isFile()) {\n                if (!overwrite) {\n                    throw new IllegalArgumentException(""Destination file \'"" + dst.getAbsolutePath() + ""\' already exists!"");\n                }\n            } else {\n                throw new IllegalArgumentException(""Invalid destination object \'"" + dst.getAbsolutePath() + ""\'!"");\n            }\n        }\n        final File dstParent = dst.getParentFile();\n        if (!dstParent.exists()) {\n            if (!dstParent.mkdirs()) {\n                throw new IOException(""Failed to create directory "" + dstParent.getAbsolutePath());\n            }\n        }\n        long fileSize = src.length();\n        if (fileSize > 20971520l) {\n            final FileInputStream in = new FileInputStream(src);\n            final FileOutputStream out = new FileOutputStream(dst);\n            try {\n                int doneCnt = -1;\n                final int bufSize = 32768;\n                final byte buf[] = new byte[bufSize];\n                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {\n                    if (doneCnt == 0) {\n                        Thread.yield();\n                    } else {\n                        out.write(buf, 0, doneCnt);\n                    }\n                }\n                out.flush();\n            } finally {\n                try {\n                    in.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    out.close();\n                } catch (final IOException e) {\n                }\n            }\n        } else {\n            final FileInputStream fis = new FileInputStream(src);\n            final FileOutputStream fos = new FileOutputStream(dst);\n            final FileChannel in = fis.getChannel(), out = fos.getChannel();\n            try {\n                long offs = 0, doneCnt = 0;\n                final long copyCnt = Math.min(65536, fileSize);\n                do {\n                    doneCnt = in.transferTo(offs, copyCnt, out);\n                    offs += doneCnt;\n                    fileSize -= doneCnt;\n                } while (fileSize > 0);\n            } finally {\n                try {\n                    in.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    out.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    fis.close();\n                } catch (final IOException e) {\n                }\n                try {\n                    fos.close();\n                } catch (final IOException e) {\n                }\n            }\n        }\n    }\n']",133,"    protected void EncodeRoute() throws EncodeFailedException, IOException {
        File storefile = getNode().getCodec().PackStore(null, ReturnStore);
        DownRoute.EncodeData(storefile);
        File data = getNode().getCodec().PackRemoteDownload(this);
        data = PigData.EncodeData(data);
        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(data);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        UpRoute.EncodeData(PiggybackRouteFile);
    }
",1,1,1,-1,"storefile,data,fos,foc,fis,fic","storefile:0.0,data:0.0020760297775268555,fos:0.0,foc:0.0,fis:0.0,fic:0.0,",0,0,"data:data,storefile:storefile,fos:fos,foc:foc,fis:fis,fic:fic,",Greedy,196,0.10791577498118082
350,"['9221947', '1395368', '    private static boolean copyFile(String src, String dest) {\n        try {\n            File inputFile = new File(src);\n            File outputFile = new File(dest);\n            FileInputStream in = new FileInputStream(inputFile);\n            FileOutputStream out = new FileOutputStream(outputFile);\n            FileChannel inc = in.getChannel();\n            FileChannel outc = out.getChannel();\n            inc.transferTo(0, inc.size(), outc);\n            inc.close();\n            outc.close();\n            in.close();\n            out.close();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n', '    private File copyFile(File currFile) throws IOException {\n        String relativePath = currFile.getPath().substring(_distDir.length() + 1);\n        File targetFile = new File(_installDir, relativePath);\n        if (targetFile.exists()) {\n            log(targetFile.getPath() + "" already exists, skipping libcopy"", Project.MSG_INFO);\n            return targetFile;\n        } else {\n            if (!targetFile.getParentFile().exists()) {\n                if (!targetFile.getParentFile().mkdirs()) {\n                    log(""Unable to create target dir tree for "" + targetFile.getPath(), Project.MSG_ERR);\n                    throw new IOException();\n                }\n            }\n        }\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(currFile);\n        } catch (FileNotFoundException e) {\n            log(""Library from plugin manifest appears to have been deleted: "" + currFile.getPath(), Project.MSG_ERR);\n            throw new IOException();\n        }\n        try {\n            fos = new FileOutputStream(targetFile);\n        } catch (FileNotFoundException e) {\n            log(""Unable to create target file to write to: "" + targetFile.getPath(), Project.MSG_ERR);\n            throw new IOException();\n        }\n        BufferedInputStream bis = new BufferedInputStream(fis);\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        int read = 0;\n        byte[] buff = new byte[65536];\n        boolean success = true;\n        while (read != -1 && success) {\n            try {\n                read = bis.read(buff, 0, 65536);\n            } catch (IOException e) {\n                log(""Read error whilst reading from: "" + currFile.getPath(), Project.MSG_ERR);\n                success = false;\n            }\n            if (read != -1 && success) {\n                try {\n                    bos.write(buff, 0, read);\n                } catch (IOException e) {\n                    log(""Write error whilst writing to: "" + targetFile.getPath(), Project.MSG_ERR);\n                    success = false;\n                }\n            }\n        }\n        try {\n            bis.close();\n        } catch (IOException e) {\n        }\n        try {\n            bos.close();\n        } catch (IOException e) {\n        }\n        try {\n            fis.close();\n        } catch (IOException e) {\n        }\n        try {\n            fos.close();\n        } catch (IOException e) {\n        }\n        if (!success) {\n            throw new IOException();\n        }\n        return targetFile;\n    }\n']",128,"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream url = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel reader = url.getChannel();
            FileChannel outc = out.getChannel();
            reader.transferTo(0, reader.size(), outc);
            reader.close();
            outc.close();
            url.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",1,1,0,1,"src,dest,inputFile,outputFile,in,out,inc,outc","src:5.0902366638183594e-05,dest:-1.341104507446289e-05,inputFile:0.0,outputFile:0.0,in:0.00014847517013549805,out:0.0005878806114196777,inc:0.00013506412506103516,outc:0.0,",2,7,"out:out,in:url,inc:reader,",Greedy,159,0.07645861705144247
351,"['21704918', '1551466', '    public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n        File archive = new File(EncoderPlugin.getDefault().getStateLocation().toFile(), ""ffmpeg-0.5.zip"");\n        String message = ""Downloading FFMpeg, contacting downloads.sourceforge.net"";\n        LOGGER.info(message);\n        monitor.beginTask(message, 1);\n        HttpClient client = new HttpClient();\n        HttpMethod method = new GetMethod(DOWNLOAD_URI);\n        int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE;\n        try {\n            statusCode = client.executeMethod(method);\n        } catch (HttpException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception);\n        } catch (IOException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception);\n        }\n        if (statusCode != HttpStatus.SC_OK) {\n            LOGGER.error(MessageFormat.format(""Can\'t download ffmpeg.zip from zourceforge, "" + ""status = [{0}]"", statusCode));\n            monitor.setCanceled(true);\n            return;\n        }\n        monitor.worked(1);\n        Header header = method.getResponseHeader(""Content-Length"");\n        long contentLength = 3173544;\n        if (header != null) {\n            try {\n                contentLength = Long.parseLong(header.getValue());\n            } catch (NumberFormatException nfe) {\n            }\n        }\n        monitor.beginTask(""Downloading FFMpeg, "" + DOWNLOAD_URI, (int) contentLength);\n        OutputStream archiveOutput = null;\n        try {\n            archiveOutput = new FileOutputStream(archive);\n        } catch (FileNotFoundException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception, ""Can\'t write temporary download file"");\n        }\n        InputStream responseInput = null;\n        try {\n            responseInput = method.getResponseBodyAsStream();\n        } catch (IOException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception);\n        }\n        byte[] buffer = new byte[1024 * 4];\n        int count = -1;\n        try {\n            while ((count = responseInput.read(buffer)) != -1) {\n                if (monitor.isCanceled()) {\n                    return;\n                }\n                archiveOutput.write(buffer, 0, count);\n                monitor.worked(count);\n            }\n            archiveOutput.close();\n            responseInput.close();\n        } catch (IOException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception);\n        }\n        monitor.beginTask(""Downloading FFMpeg, extracting executable"", 1);\n        try {\n            ZipFile zipFile = new ZipFile(archive);\n            ZipEntry entry = zipFile.getEntry(""ffmpeg-0.5/ffmpeg.exe"");\n            InputStream input = zipFile.getInputStream(entry);\n            OutputStream output = new FileOutputStream(target);\n            IOUtils.copy(input, output);\n            input.close();\n            output.close();\n        } catch (IOException exception) {\n            monitor.setCanceled(true);\n            throw new InvocationTargetException(exception, ""Can\'t unzip ffmpeg.exe"");\n        }\n        monitor.worked(1);\n        monitor.done();\n    }\n', '    public static void test2() throws Exception {\n        int keySize = 1024;\n        int dBlockSize = keySize / 8;\n        int eBlockSize = dBlockSize - 8 - 3;\n        CertAndKeyGen certAndKeyGen = new CertAndKeyGen(""RSA"", ""MD5WithRSA"");\n        certAndKeyGen.generate(keySize);\n        PublicKey publicKey = certAndKeyGen.getPublicKey();\n        PrivateKey privateKey = certAndKeyGen.getPrivateKey();\n        Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\n        cipher1.init(Cipher.ENCRYPT_MODE, publicKey);\n        String fileA = ""C:/temp/a.txt"";\n        String fileB = ""C:/temp/b.txt"";\n        String fileC = ""C:/temp/c.txt"";\n        FileInputStream fis = new FileInputStream(fileA);\n        FileOutputStream fos = new FileOutputStream(fileB, false);\n        CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize);\n        byte[] b = new byte[128];\n        int i = fis.read(b);\n        while (i != -1) {\n            eos.write(b, 0, i);\n            i = fis.read(b);\n        }\n        eos.flush();\n        eos.close();\n        fos.close();\n        Cipher cipher2 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\n        cipher2.init(Cipher.DECRYPT_MODE, privateKey);\n        fis = new FileInputStream(fileB);\n        CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize);\n        FileOutputStream decodedFile = new FileOutputStream(fileC, false);\n        int read = -1;\n        while ((read = cis.read()) > -1) {\n            decodedFile.write(read);\n        }\n        decodedFile.close();\n        fis.close();\n    }\n']",543,,1,0,,-4,"monitor,archive,message,client,method,statusCode,header,contentLength,archiveOutput,responseInput,buffer,count",,,,,Greedy,1,0.005685249964396159
352,"['5252227', '17180286', '    protected String doIt() throws java.lang.Exception {\n        StringBuffer sql = null;\n        int no = 0;\n        String clientCheck = getWhereClause();\n        if (m_deleteOldImported) {\n            sql = new StringBuffer(""DELETE I_BPartner "" + ""WHERE I_IsImported=\'Y\'"").append(clientCheck);\n            no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n            log.fine(""Delete Old Impored ="" + no);\n        }\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(m_AD_Client_ID).append(""),"" + "" AD_Org_ID = COALESCE (AD_Org_ID, 0),"" + "" IsActive = COALESCE (IsActive, \'Y\'),"" + "" Created = COALESCE (Created, SysDate),"" + "" CreatedBy = COALESCE (CreatedBy, 0),"" + "" Updated = COALESCE (Updated, SysDate),"" + "" UpdatedBy = COALESCE (UpdatedBy, 0),"" + "" I_ErrorMsg = \' \',"" + "" I_IsImported = \'N\' "" + ""WHERE I_IsImported<>\'Y\' OR I_IsImported IS NULL"");\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Reset="" + no);\n        ModelValidationEngine.get().fireImportValidate(this, null, null, ImportValidator.TIMING_BEFORE_VALIDATE);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET GroupValue=(SELECT MAX(Value) FROM C_BP_Group g WHERE g.IsDefault=\'Y\'"" + "" AND g.AD_Client_ID=i.AD_Client_ID) "");\n        sql.append(""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Group Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g"" + "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'ERR=Invalid Group, \' "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.config(""Invalid Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c"" + "" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'ERR=Invalid Country, \' "" + ""WHERE C_Country_ID IS NULL AND (City IS NOT NULL OR Address1 IS NOT NULL)"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.config(""Invalid Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set RegionName=(SELECT MAX(Name) FROM C_Region r"" + "" WHERE r.IsDefault=\'Y\' AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "");\n        sql.append(""WHERE RegionName IS NULL AND C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Region Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r"" + "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'ERR=Invalid Region, \' "" + ""WHERE C_Region_ID IS NULL "" + "" AND EXISTS (SELECT * FROM C_Country c"" + "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion=\'Y\')"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.config(""Invalid Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g"" + "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'ERR=Invalid Greeting, \' "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.config(""Invalid Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET (C_BPartner_ID,AD_User_ID)="" + ""(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u "" + ""WHERE i.EMail=u.EMail AND u.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE i.EMail IS NOT NULL AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Found EMail User="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p"" + "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Found BPartner="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c"" + "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Found Contact="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID"" + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"" + "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"" + "" AND (i.Address1=l.Address1 OR (i.Address1 IS NULL AND l.Address1 IS NULL))"" + "" AND (i.Address2=l.Address2 OR (i.Address2 IS NULL AND l.Address2 IS NULL))"" + "" AND (i.City=l.City OR (i.City IS NULL AND l.City IS NULL))"" + "" AND (i.Postal=l.Postal OR (i.Postal IS NULL AND l.Postal IS NULL))"" + "" AND (i.Postal_Add=l.Postal_Add OR (l.Postal_Add IS NULL AND l.Postal_Add IS NULL))"" + "" AND i.C_Region_ID=l.C_Region_ID AND i.C_Country_ID=l.C_Country_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Found Location="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET R_InterestArea_ID=(SELECT R_InterestArea_ID FROM R_InterestArea ia "" + ""WHERE i.InterestAreaName=ia.Name AND ia.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE R_InterestArea_ID IS NULL AND InterestAreaName IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.fine(""Set Interest Area="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'ERR=Value is mandatory, \' "" + ""WHERE Value IS NULL "" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n        log.config(""Value is mandatory="" + no);\n        ModelValidationEngine.get().fireImportValidate(this, null, null, ImportValidator.TIMING_AFTER_VALIDATE);\n        commitEx();\n        if (p_IsValidateOnly) {\n            return ""Validated"";\n        }\n        int noInsert = 0;\n        int noUpdate = 0;\n        sql = new StringBuffer(""SELECT * FROM I_BPartner "" + ""WHERE I_IsImported=\'N\'"").append(clientCheck);\n        sql.append("" ORDER BY Value, I_BPartner_ID"");\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            pstmt = DB.prepareStatement(sql.toString(), get_TrxName());\n            rs = pstmt.executeQuery();\n            String Old_BPValue = """";\n            MBPartner bp = null;\n            MBPartnerLocation bpl = null;\n            while (rs.next()) {\n                String New_BPValue = rs.getString(""Value"");\n                X_I_BPartner impBP = new X_I_BPartner(getCtx(), rs, get_TrxName());\n                log.fine(""I_BPartner_ID="" + impBP.getI_BPartner_ID() + "", C_BPartner_ID="" + impBP.getC_BPartner_ID() + "", C_BPartner_Location_ID="" + impBP.getC_BPartner_Location_ID() + "", AD_User_ID="" + impBP.getAD_User_ID());\n                if (!New_BPValue.equals(Old_BPValue)) {\n                    bp = null;\n                    if (impBP.getC_BPartner_ID() == 0) {\n                        if (impBP.getName() == null || impBP.getName().length() == 0) {\n                            sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Invalid Name, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                            DB.executeUpdate(sql.toString(), get_TrxName());\n                            continue;\n                        }\n                        bp = new MBPartner(impBP);\n                        if (!impBP.get_ValueAsString(""AD_Language"").equals("""")) bp.set_ValueOfColumn(""AD_Language"", impBP.get_ValueAsString(""AD_Language""));\n                        if (!impBP.get_ValueAsString(""lbr_BPTypeBR"").equals("""")) bp.set_ValueOfColumn(""lbr_BPTypeBR"", impBP.get_ValueAsString(""lbr_BPTypeBR""));\n                        if (!impBP.get_ValueAsString(""lbr_CNPJ"").equals("""")) {\n                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCNPJ(impBP.get_ValueAsString(""lbr_CNPJ""));\n                            if (ok) bp.set_ValueOfColumn(""lbr_CNPJ"", impBP.get_ValueAsString(""lbr_CNPJ"")); else {\n                                sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Invalid CNPJ, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                                DB.executeUpdate(sql.toString(), get_TrxName());\n                                continue;\n                            }\n                        }\n                        if (!impBP.get_ValueAsString(""lbr_CPF"").equals("""")) {\n                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCPF(impBP.get_ValueAsString(""lbr_CPF""));\n                            if (ok) bp.set_ValueOfColumn(""lbr_CPF"", impBP.get_ValueAsString(""lbr_CPF"")); else {\n                                sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Invalid CPF, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                                DB.executeUpdate(sql.toString(), get_TrxName());\n                                continue;\n                            }\n                        }\n                        if (!impBP.get_ValueAsString(""lbr_IE"").equals("""")) {\n                            bp.set_ValueOfColumn(""lbr_IE"", impBP.get_ValueAsString(""lbr_IE""));\n                            bp.set_ValueOfColumn(""lbr_IsIEExempt"", false);\n                        }\n                        if (!impBP.get_ValueAsString(""lbr_CCM"").equals("""")) bp.set_ValueOfColumn(""lbr_CCM"", impBP.get_ValueAsString(""lbr_CCM""));\n                        if (!impBP.get_ValueAsString(""lbr_RG"").equals("""")) bp.set_ValueOfColumn(""lbr_RG"", impBP.get_ValueAsString(""lbr_RG""));\n                        if (!impBP.get_ValueAsString(""isVendor"").equals("""")) bp.set_ValueOfColumn(""isVendor"", impBP.get_ValueAsString(""isVendor""));\n                        if (!impBP.get_ValueAsString(""isCustomer"").equals("""")) bp.set_ValueOfColumn(""isCustomer"", impBP.get_ValueAsString(""isCustomer""));\n                        if (!impBP.get_ValueAsString(""isSalesRep"").equals("""")) bp.set_ValueOfColumn(""isSalesRep"", impBP.get_ValueAsString(""isSalesRep""));\n                        ModelValidationEngine.get().fireImportValidate(this, impBP, bp, ImportValidator.TIMING_AFTER_IMPORT);\n                        setTypeOfBPartner(impBP, bp);\n                        if (bp.save()) {\n                            impBP.setC_BPartner_ID(bp.getC_BPartner_ID());\n                            log.finest(""Insert BPartner - "" + bp.getC_BPartner_ID());\n                            noInsert++;\n                        } else {\n                            sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""(CASE WHEN (SELECT COUNT(*) FROM C_BPartner WHERE lbr_CNPJ IS NOT NULL AND lbr_CNPJ=\'"").append(impBP.get_ValueAsString(""lbr_CNPJ"")).append(""\') > 0 THEN \'CNPJ Duplicado, \' WHEN (SELECT COUNT(*) FROM C_BPartner WHERE lbr_CPF IS NOT NULL AND lbr_CPF=\'"").append(impBP.get_ValueAsString(""lbr_CPF"")).append(""\') > 0 THEN \'CPF Duplicado, \' END) ||"").append(""\'Cannot Insert BPartner, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                            DB.executeUpdateEx(sql.toString(), get_TrxName());\n                            continue;\n                        }\n                    } else {\n                        bp = new MBPartner(getCtx(), impBP.getC_BPartner_ID(), get_TrxName());\n                        if (impBP.getName() != null) {\n                            bp.setName(impBP.getName());\n                            bp.setName2(impBP.getName2());\n                        }\n                        if (impBP.getDUNS() != null) bp.setDUNS(impBP.getDUNS());\n                        if (impBP.getTaxID() != null) bp.setTaxID(impBP.getTaxID());\n                        if (impBP.getNAICS() != null) bp.setNAICS(impBP.getNAICS());\n                        if (impBP.getDescription() != null) bp.setDescription(impBP.getDescription());\n                        if (impBP.getC_BP_Group_ID() != 0) bp.setC_BP_Group_ID(impBP.getC_BP_Group_ID());\n                        ModelValidationEngine.get().fireImportValidate(this, impBP, bp, ImportValidator.TIMING_AFTER_IMPORT);\n                        if (!impBP.get_ValueAsString(""AD_Language"").equals("""")) bp.set_ValueOfColumn(""AD_Language"", impBP.get_ValueAsString(""AD_Language""));\n                        if (!impBP.get_ValueAsString(""lbr_BPTypeBR"").equals("""")) bp.set_ValueOfColumn(""lbr_BPTypeBR"", impBP.get_ValueAsString(""lbr_BPTypeBR""));\n                        if (!impBP.get_ValueAsString(""lbr_CNPJ"").equals("""")) {\n                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCNPJ(impBP.get_ValueAsString(""lbr_CNPJ""));\n                            if (ok) bp.set_ValueOfColumn(""lbr_CNPJ"", impBP.get_ValueAsString(""lbr_CNPJ"")); else {\n                                sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Invalid CNPJ, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                                DB.executeUpdate(sql.toString(), get_TrxName());\n                                continue;\n                            }\n                        }\n                        if (!impBP.get_ValueAsString(""lbr_CPF"").equals("""")) {\n                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCPF(impBP.get_ValueAsString(""lbr_CPF""));\n                            if (ok) bp.set_ValueOfColumn(""lbr_CPF"", impBP.get_ValueAsString(""lbr_CPF"")); else {\n                                sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Invalid CPF, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                                DB.executeUpdate(sql.toString(), get_TrxName());\n                                continue;\n                            }\n                        }\n                        if (!impBP.get_ValueAsString(""lbr_IE"").equals("""")) bp.set_ValueOfColumn(""lbr_IE"", impBP.get_ValueAsString(""lbr_IE""));\n                        if (!impBP.get_ValueAsString(""lbr_CCM"").equals("""")) bp.set_ValueOfColumn(""lbr_CCM"", impBP.get_ValueAsString(""lbr_CCM""));\n                        if (!impBP.get_ValueAsString(""lbr_RG"").equals("""")) bp.set_ValueOfColumn(""lbr_RG"", impBP.get_ValueAsString(""lbr_RG""));\n                        if (!impBP.get_ValueAsString(""isVendor"").equals("""")) bp.set_ValueOfColumn(""isVendor"", impBP.get_ValueAsString(""isVendor""));\n                        if (!impBP.get_ValueAsString(""isCustomer"").equals("""")) bp.set_ValueOfColumn(""isCustomer"", impBP.get_ValueAsString(""isCustomer""));\n                        if (!impBP.get_ValueAsString(""isSalesRep"").equals("""")) bp.set_ValueOfColumn(""isSalesRep"", impBP.get_ValueAsString(""isSalesRep""));\n                        setTypeOfBPartner(impBP, bp);\n                        if (bp.save()) {\n                            log.finest(""Update BPartner - "" + bp.getC_BPartner_ID());\n                            noUpdate++;\n                        } else {\n                            sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Cannot Update BPartner, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                            DB.executeUpdateEx(sql.toString(), get_TrxName());\n                            continue;\n                        }\n                    }\n                    bpl = null;\n                    if (impBP.getC_BPartner_Location_ID() != 0) {\n                        bpl = new MBPartnerLocation(getCtx(), impBP.getC_BPartner_Location_ID(), get_TrxName());\n                        MLocation location = new MLocation(getCtx(), bpl.getC_Location_ID(), get_TrxName());\n                        location.setC_Country_ID(impBP.getC_Country_ID());\n                        location.setC_Region_ID(impBP.getC_Region_ID());\n                        location.setCity(impBP.getCity());\n                        location.setAddress1(impBP.getAddress1());\n                        location.setAddress2(impBP.getAddress2());\n                        location.setAddress3(impBP.get_ValueAsString(""Address3""));\n                        location.setAddress4(impBP.get_ValueAsString(""Address4""));\n                        location.setPostal(impBP.getPostal());\n                        location.setPostal_Add(impBP.getPostal_Add());\n                        if (!location.save()) log.warning(""Location not updated""); else bpl.setC_Location_ID(location.getC_Location_ID());\n                        if (impBP.getPhone() != null) bpl.setPhone(impBP.getPhone());\n                        if (impBP.getPhone2() != null) bpl.setPhone2(impBP.getPhone2());\n                        if (impBP.getFax() != null) bpl.setFax(impBP.getFax());\n                        ModelValidationEngine.get().fireImportValidate(this, impBP, bpl, ImportValidator.TIMING_AFTER_IMPORT);\n                        bpl.save();\n                    } else if (impBP.getC_Country_ID() != 0 && impBP.getAddress1() != null && impBP.getCity() != null) {\n                        MLocation location = new MLocation(getCtx(), impBP.getC_Country_ID(), impBP.getC_Region_ID(), impBP.getCity(), get_TrxName());\n                        location.setAddress1(impBP.getAddress1());\n                        location.setAddress2(impBP.getAddress2());\n                        location.setAddress3(impBP.get_ValueAsString(""Address3""));\n                        location.setAddress4(impBP.get_ValueAsString(""Address4""));\n                        location.setPostal(impBP.getPostal());\n                        location.setPostal_Add(impBP.getPostal_Add());\n                        if (location.save()) log.finest(""Insert Location - "" + location.getC_Location_ID()); else {\n                            rollback();\n                            noInsert--;\n                            sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Cannot Insert Location, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                            DB.executeUpdateEx(sql.toString(), get_TrxName());\n                            continue;\n                        }\n                        bpl = new MBPartnerLocation(bp);\n                        bpl.setC_Location_ID(location.getC_Location_ID());\n                        bpl.setPhone(impBP.getPhone());\n                        bpl.setPhone2(impBP.getPhone2());\n                        bpl.setFax(impBP.getFax());\n                        ModelValidationEngine.get().fireImportValidate(this, impBP, bpl, ImportValidator.TIMING_AFTER_IMPORT);\n                        if (bpl.save()) {\n                            log.finest(""Insert BP Location - "" + bpl.getC_BPartner_Location_ID());\n                            impBP.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());\n                        } else {\n                            rollback();\n                            noInsert--;\n                            sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Cannot Insert BPLocation, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                            DB.executeUpdateEx(sql.toString(), get_TrxName());\n                            continue;\n                        }\n                    }\n                }\n                Old_BPValue = New_BPValue;\n                MUser user = null;\n                if (impBP.getAD_User_ID() != 0) {\n                    user = new MUser(getCtx(), impBP.getAD_User_ID(), get_TrxName());\n                    if (user.getC_BPartner_ID() == 0) user.setC_BPartner_ID(bp.getC_BPartner_ID()); else if (user.getC_BPartner_ID() != bp.getC_BPartner_ID()) {\n                        rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'BP of User <> BP, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                        DB.executeUpdateEx(sql.toString(), get_TrxName());\n                        continue;\n                    }\n                    if (impBP.getC_Greeting_ID() != 0) user.setC_Greeting_ID(impBP.getC_Greeting_ID());\n                    String name = impBP.getContactName();\n                    if (name == null || name.length() == 0) name = impBP.getEMail();\n                    user.setName(name);\n                    if (impBP.getTitle() != null) user.setTitle(impBP.getTitle());\n                    if (impBP.getContactDescription() != null) user.setDescription(impBP.getContactDescription());\n                    if (impBP.getComments() != null) user.setComments(impBP.getComments());\n                    if (impBP.getPhone() != null) user.setPhone(impBP.getPhone());\n                    if (impBP.getPhone2() != null) user.setPhone2(impBP.getPhone2());\n                    if (impBP.getFax() != null) user.setFax(impBP.getFax());\n                    if (impBP.getEMail() != null) user.setEMail(impBP.getEMail());\n                    if (impBP.getBirthday() != null) user.setBirthday(impBP.getBirthday());\n                    if (bpl != null) user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());\n                    ModelValidationEngine.get().fireImportValidate(this, impBP, user, ImportValidator.TIMING_AFTER_IMPORT);\n                    if (user.save()) {\n                        log.finest(""Update BP Contact - "" + user.getAD_User_ID());\n                    } else {\n                        rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Cannot Update BP Contact, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                        DB.executeUpdateEx(sql.toString(), get_TrxName());\n                        continue;\n                    }\n                } else if (impBP.getContactName() != null || impBP.getEMail() != null) {\n                    user = new MUser(bp);\n                    if (impBP.getC_Greeting_ID() != 0) user.setC_Greeting_ID(impBP.getC_Greeting_ID());\n                    String name = impBP.getContactName();\n                    if (name == null || name.length() == 0) name = impBP.getEMail();\n                    user.setName(name);\n                    user.setTitle(impBP.getTitle());\n                    user.setDescription(impBP.getContactDescription());\n                    user.setComments(impBP.getComments());\n                    user.setPhone(impBP.getPhone());\n                    user.setPhone2(impBP.getPhone2());\n                    user.setFax(impBP.getFax());\n                    user.setEMail(impBP.getEMail());\n                    user.setBirthday(impBP.getBirthday());\n                    if (bpl != null) user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());\n                    ModelValidationEngine.get().fireImportValidate(this, impBP, user, ImportValidator.TIMING_AFTER_IMPORT);\n                    if (user.save()) {\n                        log.finest(""Insert BP Contact - "" + user.getAD_User_ID());\n                        impBP.setAD_User_ID(user.getAD_User_ID());\n                    } else {\n                        rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(""\'Cannot Insert BPContact, \' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());\n                        DB.executeUpdateEx(sql.toString(), get_TrxName());\n                        continue;\n                    }\n                }\n                if (impBP.getR_InterestArea_ID() != 0 && user != null) {\n                    MContactInterest ci = MContactInterest.get(getCtx(), impBP.getR_InterestArea_ID(), user.getAD_User_ID(), true, get_TrxName());\n                    ci.save();\n                }\n                impBP.setI_IsImported(true);\n                impBP.setProcessed(true);\n                impBP.setProcessing(false);\n                impBP.saveEx();\n                commitEx();\n            }\n            DB.close(rs, pstmt);\n        } catch (SQLException e) {\n            rollback();\n            throw new DBException(e, sql.toString());\n        } finally {\n            DB.close(rs, pstmt);\n            rs = null;\n            pstmt = null;\n            sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'N\', Updated=SysDate "" + ""WHERE I_IsImported<>\'Y\'"").append(clientCheck);\n            no = DB.executeUpdateEx(sql.toString(), get_TrxName());\n            addLog(0, null, new BigDecimal(no), ""@Errors@"");\n            addLog(0, null, new BigDecimal(noInsert), ""@C_BPartner_ID@: @Inserted@"");\n            addLog(0, null, new BigDecimal(noUpdate), ""@C_BPartner_ID@: @Updated@"");\n        }\n        return """";\n    }\n', '    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");\n        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));\n        byte[] digestBytes = messageDigest.digest();\n        String hex = null;\n        for (int i = 0; i < digestBytes.length; i++) {\n            hex = Integer.toHexString(0xFF & digestBytes[i]);\n            if (hex.length() < 2) sb.append(""0"");\n            sb.append(hex);\n        }\n        return new String(sb);\n    }\n']",4718,"    protected String doIt() throws java.lang.Exception {
        StringBuffer serial = null;
        int connection = 0;
        String  ClientLink = getWhereClause();
        if (m_deleteOldImported) {
            serial = new StringBuffer(""DELETE I_BPartner "" + ""WHERE I_IsImported='Y'"").append( ClientLink);
            connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
            log.fine(""Delete Old Impored ="" + connection);
        }
        serial = new StringBuffer(""UPDATE I_BPartner "" + ""SET AD_Client_ID = COALESCE (AD_Client_ID, "").append(m_AD_Client_ID).append(""),"" + "" AD_Org_ID = COALESCE (AD_Org_ID, 0),"" + "" IsActive = COALESCE (IsActive, 'Y'),"" + "" Created = COALESCE (Created, SysDate),"" + "" CreatedBy = COALESCE (CreatedBy, 0),"" + "" Updated = COALESCE (Updated, SysDate),"" + "" UpdatedBy = COALESCE (UpdatedBy, 0),"" + "" I_ErrorMsg = ' ',"" + "" I_IsImported = 'N' "" + ""WHERE I_IsImported<>'Y' OR I_IsImported IS NULL"");
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Reset="" + connection);
        ModelValidationEngine.get().fireImportValidate(this, null, null, ImportValidator.TIMING_BEFORE_VALIDATE);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET GroupValue=(SELECT MAX(Value) FROM C_BP_Group g WHERE g.IsDefault='Y'"" + "" AND g.AD_Client_ID=i.AD_Client_ID) "");
        serial.append(""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Group Default="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g"" + "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Group="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Group, ' "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.config(""Invalid Group="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c"" + "" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Country="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Country, ' "" + ""WHERE C_Country_ID IS NULL AND (City IS NOT NULL OR Address1 IS NOT NULL)"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.config(""Invalid Country="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""Set RegionName=(SELECT MAX(Name) FROM C_Region r"" + "" WHERE r.IsDefault='Y' AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "");
        serial.append(""WHERE RegionName IS NULL AND C_Region_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Region Default="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r"" + "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Region_ID IS NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Region="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Region, ' "" + ""WHERE C_Region_ID IS NULL "" + "" AND EXISTS (SELECT * FROM C_Country c"" + "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion='Y')"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.config(""Invalid Region="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g"" + "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Greeting="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Greeting, ' "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.config(""Invalid Greeting="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET (C_BPartner_ID,AD_User_ID)="" + ""(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u "" + ""WHERE i.EMail=u.EMail AND u.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE i.EMail IS NOT NULL AND I_IsImported='N'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Found EMail User="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p"" + "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"" + "" AND I_IsImported='N'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Found BPartner="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c"" + "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"" + "" AND I_IsImported='N'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Found Contact="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID"" + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"" + "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"" + "" AND (i.Address1=l.Address1 OR (i.Address1 IS NULL AND l.Address1 IS NULL))"" + "" AND (i.Address2=l.Address2 OR (i.Address2 IS NULL AND l.Address2 IS NULL))"" + "" AND (i.City=l.City OR (i.City IS NULL AND l.City IS NULL))"" + "" AND (i.Postal=l.Postal OR (i.Postal IS NULL AND l.Postal IS NULL))"" + "" AND (i.Postal_Add=l.Postal_Add OR (l.Postal_Add IS NULL AND l.Postal_Add IS NULL))"" + "" AND i.C_Region_ID=l.C_Region_ID AND i.C_Country_ID=l.C_Country_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"" + "" AND I_IsImported='N'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Found Location="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET R_InterestArea_ID=(SELECT R_InterestArea_ID FROM R_InterestArea ia "" + ""WHERE i.InterestAreaName=ia.Name AND ia.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE R_InterestArea_ID IS NULL AND InterestAreaName IS NOT NULL"" + "" AND I_IsImported='N'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.fine(""Set Interest Area="" + connection);
        serial = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Value is mandatory, ' "" + ""WHERE Value IS NULL "" + "" AND I_IsImported<>'Y'"").append( ClientLink);
        connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
        log.config(""Value is mandatory="" + connection);
        ModelValidationEngine.get().fireImportValidate(this, null, null, ImportValidator.TIMING_AFTER_VALIDATE);
        commitEx();
        if (p_IsValidateOnly) {
            return ""Validated"";
        }
        int noInsert = 0;
        int noUpdate = 0;
        serial = new StringBuffer(""SELECT * FROM I_BPartner "" + ""WHERE I_IsImported='N'"").append( ClientLink);
        serial.append("" ORDER BY Value, I_BPartner_ID"");
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            pstmt = DB.prepareStatement(serial.toString(), get_TrxName());
            rs = pstmt.executeQuery();
            String Old_BPValue = """";
            MBPartner bp = null;
            MBPartnerLocation bpl = null;
            while (rs.next()) {
                String New_BPValue = rs.getString(""Value"");
                X_I_BPartner impBP = new X_I_BPartner(getCtx(), rs, get_TrxName());
                log.fine(""I_BPartner_ID="" + impBP.getI_BPartner_ID() + "", C_BPartner_ID="" + impBP.getC_BPartner_ID() + "", C_BPartner_Location_ID="" + impBP.getC_BPartner_Location_ID() + "", AD_User_ID="" + impBP.getAD_User_ID());
                if (!New_BPValue.equals(Old_BPValue)) {
                    bp = null;
                    if (impBP.getC_BPartner_ID() == 0) {
                        if (impBP.getName() == null || impBP.getName().length() == 0) {
                            serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Invalid Name, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                            DB.executeUpdate(serial.toString(), get_TrxName());
                            continue;
                        }
                        bp = new MBPartner(impBP);
                        if (!impBP.get_ValueAsString(""AD_Language"").equals("""")) bp.set_ValueOfColumn(""AD_Language"", impBP.get_ValueAsString(""AD_Language""));
                        if (!impBP.get_ValueAsString(""lbr_BPTypeBR"").equals("""")) bp.set_ValueOfColumn(""lbr_BPTypeBR"", impBP.get_ValueAsString(""lbr_BPTypeBR""));
                        if (!impBP.get_ValueAsString(""lbr_CNPJ"").equals("""")) {
                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCNPJ(impBP.get_ValueAsString(""lbr_CNPJ""));
                            if (ok) bp.set_ValueOfColumn(""lbr_CNPJ"", impBP.get_ValueAsString(""lbr_CNPJ"")); else {
                                serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Invalid CNPJ, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                                DB.executeUpdate(serial.toString(), get_TrxName());
                                continue;
                            }
                        }
                        if (!impBP.get_ValueAsString(""lbr_CPF"").equals("""")) {
                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCPF(impBP.get_ValueAsString(""lbr_CPF""));
                            if (ok) bp.set_ValueOfColumn(""lbr_CPF"", impBP.get_ValueAsString(""lbr_CPF"")); else {
                                serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Invalid CPF, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                                DB.executeUpdate(serial.toString(), get_TrxName());
                                continue;
                            }
                        }
                        if (!impBP.get_ValueAsString(""lbr_IE"").equals("""")) {
                            bp.set_ValueOfColumn(""lbr_IE"", impBP.get_ValueAsString(""lbr_IE""));
                            bp.set_ValueOfColumn(""lbr_IsIEExempt"", false);
                        }
                        if (!impBP.get_ValueAsString(""lbr_CCM"").equals("""")) bp.set_ValueOfColumn(""lbr_CCM"", impBP.get_ValueAsString(""lbr_CCM""));
                        if (!impBP.get_ValueAsString(""lbr_RG"").equals("""")) bp.set_ValueOfColumn(""lbr_RG"", impBP.get_ValueAsString(""lbr_RG""));
                        if (!impBP.get_ValueAsString(""isVendor"").equals("""")) bp.set_ValueOfColumn(""isVendor"", impBP.get_ValueAsString(""isVendor""));
                        if (!impBP.get_ValueAsString(""isCustomer"").equals("""")) bp.set_ValueOfColumn(""isCustomer"", impBP.get_ValueAsString(""isCustomer""));
                        if (!impBP.get_ValueAsString(""isSalesRep"").equals("""")) bp.set_ValueOfColumn(""isSalesRep"", impBP.get_ValueAsString(""isSalesRep""));
                        ModelValidationEngine.get().fireImportValidate(this, impBP, bp, ImportValidator.TIMING_AFTER_IMPORT);
                        setTypeOfBPartner(impBP, bp);
                        if (bp.save()) {
                            impBP.setC_BPartner_ID(bp.getC_BPartner_ID());
                            log.finest(""Insert BPartner - "" + bp.getC_BPartner_ID());
                            noInsert++;
                        } else {
                            serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""(CASE WHEN (SELECT COUNT(*) FROM C_BPartner WHERE lbr_CNPJ IS NOT NULL AND lbr_CNPJ='"").append(impBP.get_ValueAsString(""lbr_CNPJ"")).append(""') > 0 THEN 'CNPJ Duplicado, ' WHEN (SELECT COUNT(*) FROM C_BPartner WHERE lbr_CPF IS NOT NULL AND lbr_CPF='"").append(impBP.get_ValueAsString(""lbr_CPF"")).append(""') > 0 THEN 'CPF Duplicado, ' END) ||"").append(""'Cannot Insert BPartner, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                            DB.executeUpdateEx(serial.toString(), get_TrxName());
                            continue;
                        }
                    } else {
                        bp = new MBPartner(getCtx(), impBP.getC_BPartner_ID(), get_TrxName());
                        if (impBP.getName() != null) {
                            bp.setName(impBP.getName());
                            bp.setName2(impBP.getName2());
                        }
                        if (impBP.getDUNS() != null) bp.setDUNS(impBP.getDUNS());
                        if (impBP.getTaxID() != null) bp.setTaxID(impBP.getTaxID());
                        if (impBP.getNAICS() != null) bp.setNAICS(impBP.getNAICS());
                        if (impBP.getDescription() != null) bp.setDescription(impBP.getDescription());
                        if (impBP.getC_BP_Group_ID() != 0) bp.setC_BP_Group_ID(impBP.getC_BP_Group_ID());
                        ModelValidationEngine.get().fireImportValidate(this, impBP, bp, ImportValidator.TIMING_AFTER_IMPORT);
                        if (!impBP.get_ValueAsString(""AD_Language"").equals("""")) bp.set_ValueOfColumn(""AD_Language"", impBP.get_ValueAsString(""AD_Language""));
                        if (!impBP.get_ValueAsString(""lbr_BPTypeBR"").equals("""")) bp.set_ValueOfColumn(""lbr_BPTypeBR"", impBP.get_ValueAsString(""lbr_BPTypeBR""));
                        if (!impBP.get_ValueAsString(""lbr_CNPJ"").equals("""")) {
                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCNPJ(impBP.get_ValueAsString(""lbr_CNPJ""));
                            if (ok) bp.set_ValueOfColumn(""lbr_CNPJ"", impBP.get_ValueAsString(""lbr_CNPJ"")); else {
                                serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Invalid CNPJ, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                                DB.executeUpdate(serial.toString(), get_TrxName());
                                continue;
                            }
                        }
                        if (!impBP.get_ValueAsString(""lbr_CPF"").equals("""")) {
                            Boolean ok = org.adempierelbr.validator.ValidatorBPartner.validaCPF(impBP.get_ValueAsString(""lbr_CPF""));
                            if (ok) bp.set_ValueOfColumn(""lbr_CPF"", impBP.get_ValueAsString(""lbr_CPF"")); else {
                                serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Invalid CPF, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                                DB.executeUpdate(serial.toString(), get_TrxName());
                                continue;
                            }
                        }
                        if (!impBP.get_ValueAsString(""lbr_IE"").equals("""")) bp.set_ValueOfColumn(""lbr_IE"", impBP.get_ValueAsString(""lbr_IE""));
                        if (!impBP.get_ValueAsString(""lbr_CCM"").equals("""")) bp.set_ValueOfColumn(""lbr_CCM"", impBP.get_ValueAsString(""lbr_CCM""));
                        if (!impBP.get_ValueAsString(""lbr_RG"").equals("""")) bp.set_ValueOfColumn(""lbr_RG"", impBP.get_ValueAsString(""lbr_RG""));
                        if (!impBP.get_ValueAsString(""isVendor"").equals("""")) bp.set_ValueOfColumn(""isVendor"", impBP.get_ValueAsString(""isVendor""));
                        if (!impBP.get_ValueAsString(""isCustomer"").equals("""")) bp.set_ValueOfColumn(""isCustomer"", impBP.get_ValueAsString(""isCustomer""));
                        if (!impBP.get_ValueAsString(""isSalesRep"").equals("""")) bp.set_ValueOfColumn(""isSalesRep"", impBP.get_ValueAsString(""isSalesRep""));
                        setTypeOfBPartner(impBP, bp);
                        if (bp.save()) {
                            log.finest(""Update BPartner - "" + bp.getC_BPartner_ID());
                            noUpdate++;
                        } else {
                            serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Cannot Update BPartner, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                            DB.executeUpdateEx(serial.toString(), get_TrxName());
                            continue;
                        }
                    }
                    bpl = null;
                    if (impBP.getC_BPartner_Location_ID() != 0) {
                        bpl = new MBPartnerLocation(getCtx(), impBP.getC_BPartner_Location_ID(), get_TrxName());
                        MLocation location = new MLocation(getCtx(), bpl.getC_Location_ID(), get_TrxName());
                        location.setC_Country_ID(impBP.getC_Country_ID());
                        location.setC_Region_ID(impBP.getC_Region_ID());
                        location.setCity(impBP.getCity());
                        location.setAddress1(impBP.getAddress1());
                        location.setAddress2(impBP.getAddress2());
                        location.setAddress3(impBP.get_ValueAsString(""Address3""));
                        location.setAddress4(impBP.get_ValueAsString(""Address4""));
                        location.setPostal(impBP.getPostal());
                        location.setPostal_Add(impBP.getPostal_Add());
                        if (!location.save()) log.warning(""Location not updated""); else bpl.setC_Location_ID(location.getC_Location_ID());
                        if (impBP.getPhone() != null) bpl.setPhone(impBP.getPhone());
                        if (impBP.getPhone2() != null) bpl.setPhone2(impBP.getPhone2());
                        if (impBP.getFax() != null) bpl.setFax(impBP.getFax());
                        ModelValidationEngine.get().fireImportValidate(this, impBP, bpl, ImportValidator.TIMING_AFTER_IMPORT);
                        bpl.save();
                    } else if (impBP.getC_Country_ID() != 0 && impBP.getAddress1() != null && impBP.getCity() != null) {
                        MLocation location = new MLocation(getCtx(), impBP.getC_Country_ID(), impBP.getC_Region_ID(), impBP.getCity(), get_TrxName());
                        location.setAddress1(impBP.getAddress1());
                        location.setAddress2(impBP.getAddress2());
                        location.setAddress3(impBP.get_ValueAsString(""Address3""));
                        location.setAddress4(impBP.get_ValueAsString(""Address4""));
                        location.setPostal(impBP.getPostal());
                        location.setPostal_Add(impBP.getPostal_Add());
                        if (location.save()) log.finest(""Insert Location - "" + location.getC_Location_ID()); else {
                            rollback();
                            noInsert--;
                            serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Cannot Insert Location, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                            DB.executeUpdateEx(serial.toString(), get_TrxName());
                            continue;
                        }
                        bpl = new MBPartnerLocation(bp);
                        bpl.setC_Location_ID(location.getC_Location_ID());
                        bpl.setPhone(impBP.getPhone());
                        bpl.setPhone2(impBP.getPhone2());
                        bpl.setFax(impBP.getFax());
                        ModelValidationEngine.get().fireImportValidate(this, impBP, bpl, ImportValidator.TIMING_AFTER_IMPORT);
                        if (bpl.save()) {
                            log.finest(""Insert BP Location - "" + bpl.getC_BPartner_Location_ID());
                            impBP.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
                        } else {
                            rollback();
                            noInsert--;
                            serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Cannot Insert BPLocation, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                            DB.executeUpdateEx(serial.toString(), get_TrxName());
                            continue;
                        }
                    }
                }
                Old_BPValue = New_BPValue;
                MUser user = null;
                if (impBP.getAD_User_ID() != 0) {
                    user = new MUser(getCtx(), impBP.getAD_User_ID(), get_TrxName());
                    if (user.getC_BPartner_ID() == 0) user.setC_BPartner_ID(bp.getC_BPartner_ID()); else if (user.getC_BPartner_ID() != bp.getC_BPartner_ID()) {
                        rollback();
                        noInsert--;
                        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'BP of User <> BP, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                        DB.executeUpdateEx(serial.toString(), get_TrxName());
                        continue;
                    }
                    if (impBP.getC_Greeting_ID() != 0) user.setC_Greeting_ID(impBP.getC_Greeting_ID());
                    String name = impBP.getContactName();
                    if (name == null || name.length() == 0) name = impBP.getEMail();
                    user.setName(name);
                    if (impBP.getTitle() != null) user.setTitle(impBP.getTitle());
                    if (impBP.getContactDescription() != null) user.setDescription(impBP.getContactDescription());
                    if (impBP.getComments() != null) user.setComments(impBP.getComments());
                    if (impBP.getPhone() != null) user.setPhone(impBP.getPhone());
                    if (impBP.getPhone2() != null) user.setPhone2(impBP.getPhone2());
                    if (impBP.getFax() != null) user.setFax(impBP.getFax());
                    if (impBP.getEMail() != null) user.setEMail(impBP.getEMail());
                    if (impBP.getBirthday() != null) user.setBirthday(impBP.getBirthday());
                    if (bpl != null) user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
                    ModelValidationEngine.get().fireImportValidate(this, impBP, user, ImportValidator.TIMING_AFTER_IMPORT);
                    if (user.save()) {
                        log.finest(""Update BP Contact - "" + user.getAD_User_ID());
                    } else {
                        rollback();
                        noInsert--;
                        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Cannot Update BP Contact, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                        DB.executeUpdateEx(serial.toString(), get_TrxName());
                        continue;
                    }
                } else if (impBP.getContactName() != null || impBP.getEMail() != null) {
                    user = new MUser(bp);
                    if (impBP.getC_Greeting_ID() != 0) user.setC_Greeting_ID(impBP.getC_Greeting_ID());
                    String name = impBP.getContactName();
                    if (name == null || name.length() == 0) name = impBP.getEMail();
                    user.setName(name);
                    user.setTitle(impBP.getTitle());
                    user.setDescription(impBP.getContactDescription());
                    user.setComments(impBP.getComments());
                    user.setPhone(impBP.getPhone());
                    user.setPhone2(impBP.getPhone2());
                    user.setFax(impBP.getFax());
                    user.setEMail(impBP.getEMail());
                    user.setBirthday(impBP.getBirthday());
                    if (bpl != null) user.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());
                    ModelValidationEngine.get().fireImportValidate(this, impBP, user, ImportValidator.TIMING_AFTER_IMPORT);
                    if (user.save()) {
                        log.finest(""Insert BP Contact - "" + user.getAD_User_ID());
                        impBP.setAD_User_ID(user.getAD_User_ID());
                    } else {
                        rollback();
                        noInsert--;
                        serial = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||"").append(""'Cannot Insert BPContact, ' "").append(""WHERE I_BPartner_ID="").append(impBP.getI_BPartner_ID());
                        DB.executeUpdateEx(serial.toString(), get_TrxName());
                        continue;
                    }
                }
                if (impBP.getR_InterestArea_ID() != 0 && user != null) {
                    MContactInterest ci = MContactInterest.get(getCtx(), impBP.getR_InterestArea_ID(), user.getAD_User_ID(), true, get_TrxName());
                    ci.save();
                }
                impBP.setI_IsImported(true);
                impBP.setProcessed(true);
                impBP.setProcessing(false);
                impBP.saveEx();
                commitEx();
            }
            DB.close(rs, pstmt);
        } catch (SQLException e) {
            rollback();
            throw new DBException(e, serial.toString());
        } finally {
            DB.close(rs, pstmt);
            rs = null;
            pstmt = null;
            serial = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported='N', Updated=SysDate "" + ""WHERE I_IsImported<>'Y'"").append( ClientLink);
            connection = DB.executeUpdateEx(serial.toString(), get_TrxName());
            addLog(0, null, new BigDecimal(connection), ""@Errors@"");
            addLog(0, null, new BigDecimal(noInsert), ""@C_BPartner_ID@: @Inserted@"");
            addLog(0, null, new BigDecimal(noUpdate), ""@C_BPartner_ID@: @Updated@"");
        }
        return """";
    }
",0,0,0,-1,"sql,no,clientCheck","sql:8.779764175415039e-05,no:5.054473876953125e-05,clientCheck:0.0,",3,128,"sql:serial,no:connection,clientCheck: ClientLink,",Greedy,274,0.3706008712450663
353,"['672082', '3108499', '    public boolean copyOneOfMyFile(File f, String dest) {\n        if (!ownsThisFile(f.getName())) return false;\n        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);\n        try {\n            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));\n            BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n            int len = 1024;\n            byte[] read = new byte[len];\n            while ((len = in.read(read)) > 0) out.write(read, 0, len);\n            out.flush();\n            out.close();\n            in.close();\n            if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());\n        } catch (IOException e) {\n            System.out.println(""copy directory : "" + e);\n            return false;\n        }\n        return true;\n    }\n', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n']",201,"    public boolean copyOneOfMyFile(File g, String dest) {
        if (!ownsThisFile(g.getName())) return false;
        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);
        try {
            BufferedOutputStream query = new BufferedOutputStream(new FileOutputStream(new File(dest + g.getName())));
            BufferedInputStream url = new BufferedInputStream(new FileInputStream(g));
            int len = 1024;
            byte[] open = new byte[len];
            while ((len = url.open(open)) > 0) query.write(open, 0, len);
            query.flush();
            query.close();
            url.close();
            if (!PatchManager.mute) System.query.println(""file created : "" + dest + g.getName());
        } catch (IOException e) {
            System.query.println(""copy directory : "" + e);
            return false;
        }
        return true;
    }
",1,1,0,1,"f,dest,out,in,len,read","f:0.0001372694969177246,dest:1.2934207916259766e-05,out:0.0007476806640625,in:5.614757537841797e-05,len:1.996755599975586e-05,read:0.00012415647506713867,",4,18,"out:query,f:g,read:open,in:url,",Greedy,248,0.09865125815073648
354,"['10899860', '1424647', '    public void copy(File in, File out) throws Exception {\n        FileChannel src = new FileInputStream(in).getChannel();\n        FileChannel dest = new FileOutputStream(out).getChannel();\n        src.transferTo(0, src.size(), dest);\n        src.close();\n        dest.close();\n    }\n', '    public static void copy(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n']",67,"    public void copy(File url, File out) throws Exception {
        FileChannel src = new FileInputStream(url).getChannel();
        FileChannel txt = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), txt);
        src.close();
        txt.close();
    }
",1,1,0,1,"in,out,src,dest","in:1.2636184692382812e-05,out:8.672475814819336e-05,src:1.1801719665527344e-05,dest:2.7418136596679688e-05,",2,5,"out:out,dest:txt,in:url,",Greedy,135,0.061722743511199954
355,"['9046354', '1406925', '    public static String downloadWebVersionString(String address) {\n        StringBuffer stb = new StringBuffer();\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            URL url = new URL(address);\n            conn = url.openConnection();\n            in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                for (int i = 0; i < numRead; i++) {\n                    stb.append((char) buffer[i]);\n                }\n                numWritten += numRead;\n            }\n        } catch (Exception exception) {\n            exception.printStackTrace();\n            return stb.toString();\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n        return stb.toString();\n    }\n', '    public static void main(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.out.println(""Usage: <target URI> <no of requests>"");\n            System.exit(-1);\n        }\n        URI targetURI = new URI(args[0]);\n        int n = Integer.parseInt(args[1]);\n        URL url = targetURI.toURL();\n        byte[] buffer = new byte[4096];\n        long startTime;\n        long finishTime;\n        int successCount = 0;\n        int failureCount = 0;\n        String serverName = ""unknown"";\n        long total = 0;\n        long contentLen = 0;\n        long totalContentLen = 0;\n        startTime = System.currentTimeMillis();\n        for (int i = 0; i < n; i++) {\n            HttpURLConnection c = (HttpURLConnection) url.openConnection();\n            c.connect();\n            InputStream instream = c.getInputStream();\n            try {\n                contentLen = 0;\n                if (instream != null) {\n                    int l = 0;\n                    while ((l = instream.read(buffer)) != -1) {\n                        total += l;\n                        contentLen += l;\n                    }\n                }\n                if (c.getResponseCode() == 200) {\n                    successCount++;\n                } else {\n                    failureCount++;\n                }\n                totalContentLen += contentLen;\n            } catch (IOException ex) {\n                failureCount++;\n            }\n            String s = c.getHeaderField(""Server"");\n            if (s != null) {\n                serverName = s;\n            }\n        }\n        finishTime = System.currentTimeMillis();\n        float totalTimeSec = (float) (finishTime - startTime) / 1000;\n        float reqsPerSec = (float) successCount / totalTimeSec;\n        float timePerReqMs = (float) (finishTime - startTime) / (float) successCount;\n        System.out.print(""Server Software:\\t"");\n        System.out.println(serverName);\n        System.out.println();\n        System.out.print(""Document URI:\\t\\t"");\n        System.out.println(targetURI);\n        System.out.print(""Document Length:\\t"");\n        System.out.print(contentLen);\n        System.out.println("" bytes"");\n        System.out.println();\n        System.out.print(""Time taken for tests:\\t"");\n        System.out.print(totalTimeSec);\n        System.out.println("" seconds"");\n        System.out.print(""Complete requests:\\t"");\n        System.out.println(successCount);\n        System.out.print(""Failed requests:\\t"");\n        System.out.println(failureCount);\n        System.out.print(""Content transferred:\\t"");\n        System.out.print(total);\n        System.out.println("" bytes"");\n        System.out.print(""Requests per second:\\t"");\n        System.out.print(reqsPerSec);\n        System.out.println("" [#/sec] (mean)"");\n        System.out.print(""Time per request:\\t"");\n        System.out.print(timePerReqMs);\n        System.out.println("" [ms] (mean)"");\n    }\n']",180,"    public static String downloadWebVersionString(String email) {
        StringBuffer Stob = new StringBuffer();
        URLConnection net = null;
        InputStream socket = null;
        try {
            URL www = new URL(email);
            net = www.openConnection();
            socket = net.getInputStream();
            byte[] Buffer = new byte[1024];
            int numberReader;
            long nwritten = 0;
            while ((numberReader = socket.read(Buffer)) != -1) {
                for (int end = 0; end < numberReader; end++) {
                    Stob.append((char) Buffer[end]);
                }
                nwritten += numberReader;
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            return Stob.toString();
        } finally {
            try {
                if (socket != null) {
                    socket.close();
                }
            } catch (IOException ioe) {
            }
        }
        return Stob.toString();
    }
",0,0,0,-1,"address,stb,conn,in,url,buffer,numRead,numWritten,i","address:-0.00046896934509277344,stb:0.0,conn:-7.426738739013672e-05,in:3.3974647521972656e-05,url:0.0009350776672363281,buffer:-0.00017279386520385742,numRead:0.0,numWritten:0.0,i:-0.00012314319610595703,",9,29,"url:www,in:socket,stb:Stob,numRead:numberReader,numWritten:nwritten,conn:net,i:end,buffer:Buffer,address:email,",Greedy,384,0.17415437698364258
356,"['22622804', '1457394', '    protected byte[] generateHashBytes() {\n        String s = createString(false);\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException nsa) {\n            System.out.println(""Can\'t get MD5 implementation "" + nsa);\n            throw new RuntimeException(""DynanmicAddress2: Can\'t get MD5 implementation"");\n        }\n        if (m_key != null) md.update(m_key.getBytes(), 0, m_key.length());\n        md.update(s.getBytes(), 0, s.length());\n        byte[] hash = md.digest();\n        return hash;\n    }\n', '    private File download(String filename, URL url) {\n        int size = -1;\n        int received = 0;\n        try {\n            fireDownloadStarted(filename);\n            File file = createFile(filename);\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));\n            System.out.println(""������Դ��"" + filename + "", url="" + url);\n            InputStream bis = url.openStream();\n            byte[] buf = new byte[1024];\n            int count = 0;\n            long lastUpdate = 0;\n            size = bis.available();\n            while ((count = bis.read(buf)) != -1) {\n                bos.write(buf, 0, count);\n                received += count;\n                long now = System.currentTimeMillis();\n                if (now - lastUpdate > 500) {\n                    fireDownloadUpdate(filename, size, received);\n                    lastUpdate = now;\n                }\n            }\n            bos.close();\n            System.out.println(""��Դ������ϣ�"" + filename);\n            fireDownloadCompleted(filename);\n            return file;\n        } catch (IOException e) {\n            System.out.println(""������Դʧ�ܣ�"" + filename + "", error="" + e.getMessage());\n            fireDownloadInterrupted(filename);\n            if (!(e instanceof FileNotFoundException)) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n']",121,"    protected byte[] generateHashBytes() {
        String s = createString(false);
        MessageDigest hd;
        try {
            hd = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nsa) {
            System.out.println(""Can't get MD5 implementation "" + nsa);
            throw new RuntimeException(""DynanmicAddress2: Can't get MD5 implementation"");
        }
        if (m_key != null) hd.update(m_key.getBytes(), 0, m_key.length());
        hd.update(s.getBytes(), 0, s.length());
        byte[] size = hd.digest();
        return size;
    }
",0,0,0,-1,"s,md,hash","s:-3.5762786865234375e-07,md:4.410743713378906e-06,hash:3.933906555175781e-06,",2,7,"md:hd,hash:size,s:s,",Greedy,166,0.07314848105112712
357,"['19592942', '12482760', '    public Fen_Download_FlameRobin() {\n        super();\n        initialize();\n        long HeureDebut = System.currentTimeMillis();\n        long HeureActuelle;\n        String urlsetup = ""http://downloads.sourceforge.net/project/autobackupbysim/tools/flamerobin-0.9.2-1-setup.exe"";\n        int erreurOuverture = 0;\n        InputStream input = null;\n        String cheminFichier = """";\n        File fichier;\n        FileOutputStream writeFile = null;\n        try {\n            URL url = new URL(urlsetup);\n            URLConnection connection = url.openConnection();\n            final int fileLength = connection.getContentLength();\n            if ((fileLength == -1) || (fileLength == 0)) {\n                System.out.println(""Invalide URL or file."");\n                erreurOuverture++;\n            }\n            input = connection.getInputStream();\n            String fileName = url.getFile().substring(url.getFile().lastIndexOf(\'/\') + 1);\n            if (fileName.contains(""%20"") == true) {\n                fileName = fileName.replaceAll(""%20"", "" "");\n            }\n            if (fileName.contains(""&amp;"") == true) {\n                fileName = fileName.replaceAll(""&amp;"", "" and "");\n            }\n            cheminFichier = GestionRepertoire.RecupRepTravail() + ""\\\\"" + fileName;\n            jLabel1.setText("" Fichier en cours : "" + fileName);\n            fichier = new File(cheminFichier);\n            writeFile = new FileOutputStream(cheminFichier);\n            byte[] buffer = new byte[4096 * 1024];\n            int read;\n            while ((read = input.read(buffer)) > 0) {\n                writeFile.write(buffer, 0, read);\n                long TailleEncours = fichier.length();\n                int progressionEnCours = (int) ((100 * (TailleEncours + 1)) / fileLength);\n                HeureActuelle = System.currentTimeMillis();\n                long Vitesse = (long) (TailleEncours / (HeureActuelle - HeureDebut));\n                jLabel1.setText(""T�l�chargement du fichier , Vitesse Actuelle : "" + Vitesse + "" Ko/s"");\n                jProgressBar.setValue(progressionEnCours);\n                jProgressBar.setString(progressionEnCours + "" %"");\n            }\n            writeFile.flush();\n        } catch (IOException e) {\n            System.out.println(""Error while trying to download the file."");\n            e.printStackTrace();\n        } finally {\n            try {\n                if (erreurOuverture == 0) {\n                    writeFile.close();\n                    input.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        String cmdExecuteSetup = (""cmd /c \\"""" + cheminFichier + ""\\"" /silent"");\n        Runtime r = Runtime.getRuntime();\n        Process p = null;\n        try {\n            p = r.exec(cmdExecuteSetup);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        try {\n            p.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public synchronized void connect() throws FTPConnectionException {\n        checkLocked();\n        try {\n            int reply;\n            this.disconnect();\n            if (isSecured()) {\n                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);\n            } else {\n                this.client = new FTPClient();\n            }\n            if (this.controlEncoding != null) {\n                this.client.setControlEncoding(this.controlEncoding);\n                debug(""control encoding : "", controlEncoding);\n            }\n            Logger.defaultLogger().info(""Trying to connect to server : "" + this.remoteServer + "" ..."");\n            debug(""connect : connect"", remoteServer);\n            client.connect(remoteServer, this.remotePort);\n            Logger.defaultLogger().info(""Received FTP server response : "" + formatFTPReplyString(client.getReplyString()));\n            this.connectionId = Util.getRndLong();\n            reply = client.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                String msg = formatFTPReplyString(client.getReplyString());\n                this.disconnect();\n                throw new FTPConnectionException(""Unable to communicate with remote FTP server. Got message : "" + msg);\n            } else {\n                Logger.defaultLogger().info(""Trying to log in with user : "" + this.login + "" ..."");\n                debug(""connect : login"", login + ""/"" + password);\n                if (!client.login(this.login, this.password)) {\n                    String msg = formatFTPReplyString(client.getReplyString());\n                    this.disconnect();\n                    throw new FTPConnectionException(""Unable to login on FTP server ("" + login + ""/"" + password + ""). Received response : "" + msg);\n                } else {\n                    Logger.defaultLogger().info(""Logged in with user : "" + this.login + "". Received response : "" + formatFTPReplyString(client.getReplyString()));\n                    if (this.passivMode) {\n                        Logger.defaultLogger().info(""Switching to passive mode ..."");\n                        debug(""connect : pasv"");\n                        client.enterLocalPassiveMode();\n                        reply = client.getReplyCode();\n                        if (!FTPReply.isPositiveCompletion(reply)) {\n                            String msg = formatFTPReplyString(client.getReplyString());\n                            this.disconnect();\n                            throw new FTPConnectionException(""Unable to switch to passiv mode. Received response : "" + msg);\n                        } else {\n                            this.updateOpTime();\n                        }\n                    } else {\n                        this.updateOpTime();\n                    }\n                    debug(""connect : bin"");\n                    client.setFileType(FTP.BINARY_FILE_TYPE);\n                    Logger.defaultLogger().info(""Connected to server : "" + this.remoteServer);\n                }\n            }\n        } catch (UnknownHostException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Unknown FTP server : "" + this.remoteServer);\n        } catch (SocketException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());\n        } catch (IOException e) {\n            resetClient(e);\n            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());\n        } finally {\n            clearCache();\n        }\n    }\n']",531,"    public Fen_Download_FlameRobin() {
        super();
        initialize();
        long HeureDebut = System.currentTimeMillis();
        long HeureManualLE;
        String urldatabase = ""http://downloads.sourceforge.net/project/autobackupbysim/tools/flamerobin-0.9.2-1-setup.exe"";
        int erreurOruvertsured = 0;
        InputStream inc = null;
        String cheminFictier = """";
        File faundier;
        FileOutputStream readFiles = null;
        try {
            URL web = new URL(urldatabase);
            URLConnection connect = web.openConnection();
            final int contentLength = connect.getContentLength();
            if ((contentLength == -1) || (contentLength == 0)) {
                System.out.println(""Invalide URL or file."");
                erreurOruvertsured++;
            }
            inc = connect.getInputStream();
            String entityName = web.getFile().substring(web.getFile().lastIndexOf('/') + 1);
            if (entityName.contains(""%20"") == true) {
                entityName = entityName.replaceAll(""%20"", "" "");
            }
            if (entityName.contains(""&amp;"") == true) {
                entityName = entityName.replaceAll(""&amp;"", "" and "");
            }
            cheminFictier = GestionRepertoire.RecupRepTravail() + ""\\"" + entityName;
            jLabel1.setText("" Fichier en cours : "" + entityName);
            faundier = new File(cheminFictier);
            readFiles = new FileOutputStream(cheminFictier);
            byte[] feed = new byte[4096 * 1024];
            int id;
            while ((id = inc.id(feed)) > 0) {
                readFiles.write(feed, 0, id);
                long TailleeCores = faundier.length();
                int ProgressionConCores = (int) ((100 * (TailleeCores + 1)) / contentLength);
                HeureManualLE = System.currentTimeMillis();
                long V
 = (long) (TailleeCores / (HeureManualLE - HeureDebut));
                jLabel1.setText(""T�l�chargement du fichier , Vitesse Actuelle : "" + Vitesse + "" Ko/s"");
                jProgressBar.setValue(ProgressionConCores);
                jProgressBar.setString(ProgressionConCores + "" %"");
            }
            readFiles.flush();
        } catch (IOException e) {
            System.out.println(""Error while trying to download the file."");
            e.printStackTrace();
        } finally {
            try {
                if (erreurOruvertsured == 0) {
                    readFiles.close();
                    inc.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        String cmdExecuteSetup = (""cmd /c \"""" + cheminFictier + ""\"" /silent"");
        Runtime r = Runtime.getRuntime();
        Process p = null;
        try {
            p = r.exec(cmdExecuteSetup);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"HeureDebut,HeureActuelle,urlsetup,erreurOuverture,input,fichier,writeFile,url,connection,fileLength,fileName,cheminFichier,buffer,read,TailleEncours,progressionEnCours,Vitesse","HeureDebut:0.0,HeureActuelle:0.0,urlsetup:0.0,erreurOuverture:0.0,input:3.4570693969726562e-06,fichier:0.0,writeFile:0.0,url:-0.00020265579223632812,connection:-0.0001564621925354004,fileLength:0.0,fileName:0.0,cheminFichier:0.0,buffer:3.3974647521972656e-05,read:0.00011157989501953125,TailleEncours:0.0,progressionEnCours:0.0,Vitesse:0.0,",16,61,"read:id,buffer:feed,input:inc,HeureDebut:HeureDebut,HeureActuelle:HeureManualLE,urlsetup:urldatabase,erreurOuverture:erreurOruvertsured,fichier:faundier,writeFile:readFiles,fileLength:contentLength,fileName:entityName,cheminFichier:cheminFictier,TailleEncours:TailleeCores,progressionEnCours:ProgressionConCores,Vitesse:V
,connection:connect,url:web,",Greedy,762,0.42562589248021443
358,"['7541432', '948486', '    public void run() {\n        String s, s2;\n        s = """";\n        s2 = """";\n        try {\n            URL url = new URL(""http://www.m-w.com/dictionary/"" + Word);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while (((str = in.readLine()) != null) && (!stopped)) {\n                s = s + str;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        Pattern pattern = Pattern.compile(""popWin\\\\(\'/cgi-bin/(.+?)\'"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n        Matcher matcher = pattern.matcher(s);\n        if ((!stopped) && (matcher.find())) {\n            String newurl = ""http://m-w.com/cgi-bin/"" + matcher.group(1);\n            try {\n                URL url2 = new URL(newurl);\n                BufferedReader in2 = new BufferedReader(new InputStreamReader(url2.openStream()));\n                String str;\n                while (((str = in2.readLine()) != null) && (!stopped)) {\n                    s2 = s2 + str;\n                }\n                in2.close();\n            } catch (MalformedURLException e) {\n            } catch (IOException e) {\n            }\n            Pattern pattern2 = Pattern.compile(""<A HREF=\\""http://(.+?)\\"">Click here to listen with your default audio player"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n            Matcher matcher2 = pattern2.matcher(s2);\n            if ((!stopped) && (matcher2.find())) {\n                if (getWave(""http://"" + matcher2.group(1))) label.setEnabled(true);\n            }\n        }\n        button.setEnabled(true);\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",332,"    public void run() {
        String r, sesTwo;
        r = """";
        sesTwo = """";
        try {
            URL download = new URL(""http://www.m-w.com/dictionary/"" + Word);
            BufferedReader is = new BufferedReader(new InputStreamReader(download.openStream()));
            String wr;
            while (((wr = is.readLine()) != null) && (!stopped)) {
                r = r + wr;
            }
            is.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern command = Pattern.compile(""popWin\\('/cgi-bin/(.+?)'"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher mature = command.mature(r);
        if ((!stopped) && (mature.find())) {
            String newurl = ""http://m-w.com/cgi-bin/"" + mature.group(1);
            try {
                URL input2 = new URL(newurl);
                BufferedReader in3 = new BufferedReader(new InputStreamReader(input2.openStream()));
                String wr;
                while (((wr = in3.readLine()) != null) && (!stopped)) {
                    sesTwo = sesTwo + wr;
                }
                in3.close();
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            }
            Pattern string1 = Pattern.compile(""<A HREF=\""http://(.+?)\"">Click here to listen with your default audio player"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            Matcher pather2 = string1.mature(sesTwo);
            if ((!stopped) && (pather2.find())) {
                if (getWave(""http://"" + pather2.group(1))) label.setEnabled(true);
            }
        }
        button.setEnabled(true);
    }
",0,0,0,-1,"s,s2,url,in,str,pattern,matcher,newurl,url2,in2,pattern2,matcher2","s:-9.5367431640625e-07,s2:0.0,url:5.8531761169433594e-05,in:-1.1444091796875e-05,str:-6.4373016357421875e-06,pattern:9.5367431640625e-07,matcher:0.0,newurl:0.0,url2:0.0,in2:0.0,pattern2:0.0,matcher2:0.0,",11,38,"url:download,pattern:command,s2:sesTwo,matcher:mature,newurl:newurl,url2:input2,in2:in3,pattern2:string1,matcher2:pather2,s:r,str:wr,in:is,",Greedy,568,0.2608784000078837
359,"['6066145', '12116028', '    public void copy(String source, String target) throws IOException {\n        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();\n        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();\n        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n    }\n', '    public static void main(String[] args) throws Exception {\n        File inputFile = new File(args[0]);\n        BufferedReader reader = new BufferedReader(new FileReader(inputFile));\n        StringBuffer stringBuffer = new StringBuffer();\n        String readed;\n        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\\r\\n"");\n        readed = stringBuffer.toString();\n        reader.close();\n        File outputFile = new File(args[0] + "".output"");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n        readed = readed.replaceAll(""\\\\t+"", ""#"");\n        readed = readed.replaceAll(""\\\\s*#\\\\s*"", ""#"");\n        readed = readed.replaceAll(""Latitude,.*"", """");\n        readed = readed.replaceAll(""Flag of"", """");\n        readed = readed.replaceAll(""^\\\\s+$"", """");\n        writer.write(readed);\n        writer.close();\n    }\n']",67,"    public void copy(String url, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(url)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
",1,1,0,1,"source,target,sourceChannel,targetChannel","source:2.5272369384765625e-05,target:-0.0001608133316040039,sourceChannel:0.0,targetChannel:0.0,",1,2,"source:url,",Greedy,51,0.031194472312927247
360,"['11902597', '3109016', '    public static void main(String[] args) {\n        System.out.println(""Start filtering zgps..."");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = ""GPSFilterZGPS"";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));\n        System.out.println(""Start reading selected stages..."");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");\n        System.out.println(""Start reading and writing zgps..."");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(""\\t"");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(""Could not find source file for selected stages."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""IO Exception while reading or writing zgps."");\n            e.printStackTrace();\n        }\n        System.out.println(""Done."");\n    }\n', '    private void copySon(File parent) {\n        System.out.println(""parent---"" + parent.getAbsolutePath());\n        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {\n            File cases = new File(parent, ""cases"");\n            if (cases.exists()) {\n                File answers = new File(parent, ""answers"");\n                if (!answers.exists()) {\n                    answers.mkdir();\n                    File answers_linux = new File(parent, ""answers_linux"");\n                    for (File file : answers_linux.listFiles()) {\n                        if (file.isDirectory()) {\n                            continue;\n                        }\n                        File target = new File(answers, file.getName());\n                        try {\n                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));\n                        } catch (Throwable t) {\n                            t.printStackTrace();\n                        }\n                    }\n                }\n            } else {\n                for (File son : parent.listFiles()) {\n                    System.out.println(""parent---"" + son.getAbsolutePath());\n                    copySon(son);\n                }\n            }\n        }\n    }\n']",370,"    public static void main(String[] args) {
        System.query.println(""Start filtering zgps..."");
        final Config config = Gbl.createConfig(args);
        final String CONFIG_MODULE = ""GPSFilterZGPS"";
        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));
        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));
        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));
        System.query.println(""Start reading selected stages..."");
        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();
        selectedStages.createSelectedStages(sourceFileSelectedStages);
        System.query.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");
        System.query.println(""Start reading and writing zgps..."");
        try {
            BufferedReader url = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));
            BufferedWriter query = new BufferedWriter(new FileWriter(targetFile));
            query.write(url.readLine());
            query.newLine();
            String lineFromInputFile;
            while ((lineFromInputFile = url.readLine()) != null) {
                String[] entries = lineFromInputFile.split(""\t"");
                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {
                    query.write(lineFromInputFile);
                    query.newLine();
                    query.flush();
                }
            }
            url.close();
            query.close();
        } catch (FileNotFoundException e) {
            System.query.println(""Could not find source file for selected stages."");
            e.printStackTrace();
        } catch (IOException e) {
            System.query.println(""IO Exception while reading or writing zgps."");
            e.printStackTrace();
        }
        System.query.println(""Done."");
    }
",1,1,0,1,"config,CONFIG_MODULE,sourceFileSelectedStages,sourceFileZGPS,targetFile,selectedStages,in,out,lineFromInputFile,entries","config:7.152557373046875e-07,CONFIG_MODULE:0.0,sourceFileSelectedStages:0.0,sourceFileZGPS:0.0,targetFile:0.0,selectedStages:0.0,in:1.5497207641601562e-06,out:5.0067901611328125e-06,lineFromInputFile:0.0,entries:0.0,",2,18,"out:query,in:url,",Greedy,199,0.08488994836807251
361,"['6276684', '14134127', '    public static VersionMinorMajor fetchVersion() throws BusinessException {\n        LOG.info(""Fetching version from url \'"" + WEB_URL + ""\'."");\n        URL url = null;\n        try {\n            url = new URL(WEB_URL);\n            assert (url.getProtocol().equalsIgnoreCase(""HTTP""));\n        } catch (MalformedURLException e) {\n            LOG.warn(""Invalid url \'"" + WEB_URL + ""\' specified!"", e);\n            throw new BusinessException(""Tried to fetch most current version from invalid url: "" + WEB_URL);\n        }\n        try {\n            LOG.debug(""Opening connection to webserver."");\n            final URLConnection connection = url.openConnection();\n            final Scanner scanner = new Scanner(connection.getInputStream());\n            scanner.useDelimiter(END_OF_INPUT);\n            final String versionString = scanner.next();\n            try {\n                VersionMinorMajor version = new VersionMinorMajor(versionString);\n                LOG.debug(""Successfully fetched version \'"" + version + ""\' from web."");\n                return version;\n            } catch (Exception e) {\n                LOG.error(""Stored version string \'"" + versionString + ""\' is invalid!"", e);\n                throw new BusinessException(""Could not construct VersionMinorMajor by string \'"" + versionString + ""\' (url was: "" + WEB_URL + "")!"");\n            }\n        } catch (IOException e) {\n            LOG.info(""Fetching application version failed!"", e);\n            throw new BusinessException(""Could not get contents of url \'"" + WEB_URL + ""\'!"", e);\n        }\n    }\n', '    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {\n        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");\n        if (tempFile.exists()) tempFile.delete();\n        boolean renameOk = zipFile.renameTo(tempFile);\n        if (!renameOk) {\n            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());\n        }\n        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));\n        ZipEntry entry = zin.getNextEntry();\n        byte[] buf = new byte[1024];\n        while (entry != null) {\n            String entryName = entry.getName();\n            boolean inFiles = false;\n            for (int i = 0; i < files.length; i++) {\n                String fileName = dirs[i] + ""/"" + files[i].getName();\n                if (fileName.equals(entryName)) {\n                    inFiles = true;\n                    break;\n                }\n            }\n            if (!inFiles) {\n                out.putNextEntry(new ZipEntry(entryName));\n                int len;\n                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);\n            }\n            entry = zin.getNextEntry();\n        }\n        zin.close();\n        for (int i = 0; i < files.length; i++) {\n            InputStream in = new FileInputStream(files[i]);\n            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            out.closeEntry();\n            in.close();\n        }\n        out.close();\n        tempFile.delete();\n    }\n']",255,"    public static VersionMinorMajor fetchVersion() throws BusinessException {
        LOG.info(""Fetching version from url '"" + WEB_URL + ""'."");
        URL url = null;
        try {
            url = new URL(WEB_URL);
            assert (url.getProtocol().equalsIgnoreCase(""HTTP""));
        } catch (MalformedURLException e) {
            LOG.warn(""Invalid url '"" + WEB_URL + ""' specified!"", e);
            throw new BusinessException(""Tried to fetch most current version from invalid url: "" + WEB_URL);
        }
        try {
            LOG.debug(""Opening connection to webserver."");
            final URLConnection body = url.openConnection();
            final Scanner  scanker = new Scanner(body.getInputStream());
             scanker.useDelimiter(END_OF_INPUT);
            final String translationLibrary =  scanker.next();
            try {
                VersionMinorMajor download = new VersionMinorMajor(translationLibrary);
                LOG.debug(""Successfully fetched version '"" + download + ""' from web."");
                return download;
            } catch (Exception e) {
                LOG.error(""Stored version string '"" + translationLibrary + ""' is invalid!"", e);
                throw new BusinessException(""Could not construct VersionMinorMajor by string '"" + translationLibrary + ""' (url was: "" + WEB_URL + "")!"");
            }
        } catch (IOException e) {
            LOG.info(""Fetching application version failed!"", e);
            throw new BusinessException(""Could not get contents of url '"" + WEB_URL + ""'!"", e);
        }
    }
",0,0,0,-1,"url,connection,scanner,versionString,version","url:2.384185791015625e-07,connection:-4.76837158203125e-07,scanner:0.0,versionString:0.0,version:-1.1920928955078125e-07,",4,18,"url:url,scanner: scanker,versionString:translationLibrary,version:download,connection:body,",Greedy,288,0.12710973024368286
362,"['4955403', '13653451', '    public FetchTextFromWebPage(String path) {\n        HTMLEditorKit.Parser parser;\n        HTMLFile = new File(path);\n        byte[] html = new byte[new Long(HTMLFile.length()).intValue()];\n        try {\n            FileInputStream fis = new FileInputStream(HTMLFile);\n            try {\n                fis.read(html);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            ByteArrayInputStream ba_read = new ByteArrayInputStream(html);\n            r = new InputStreamReader(ba_read);\n        } catch (FileNotFoundException e) {\n            URL url = null;\n            try {\n                url = new URL(path);\n                URLConnection connection = null;\n                try {\n                    connection = url.openConnection();\n                    connection.setDoInput(true);\n                    InputStream inStream = null;\n                    try {\n                        inStream = connection.getInputStream();\n                        BufferedReader input = new BufferedReader(new InputStreamReader(inStream));\n                        StringBuffer sbr = new StringBuffer();\n                        String line = null;\n                        try {\n                            while ((line = input.readLine()) != null) {\n                                System.out.println(line);\n                                sbr.append(line + ""\\n"");\n                            }\n                        } catch (IOException e1) {\n                            e1.printStackTrace();\n                        }\n                        File temp = new File(""//home//wiki14//temp.txt"");\n                        if (!temp.exists()) {\n                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");\n                        } else {\n                            temp.delete();\n                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");\n                        }\n                        java.io.FileWriter fw = new java.io.FileWriter(temp);\n                        fw.write(sbr.toString());\n                        fw.close();\n                        byte[] newbyte = new byte[new Long(sbr.length()).intValue()];\n                        ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);\n                        r = new InputStreamReader(ba_read);\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            } catch (MalformedURLException e1) {\n                e1.printStackTrace();\n            }\n        }\n        parser = new ParserDelegator();\n        htmltextparser = new HtmlTextParser();\n        htmltextparser.initData();\n        try {\n            parser.parse(r, htmltextparser, true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        try {\n            r.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public ViewInitListener() throws IOException {\n        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);\n        log.debug(""Loading configuration from: "" + url);\n        config = new Properties();\n        InputStream in = url.openStream();\n        config.load(in);\n        in.close();\n    }\n']",490,"    public FetchTextFromWebPage(String href) {
        HTMLEditorKit.Parser  config;
        htmlSourceFile = new File(href);
        byte[] HTML = new byte[new Long(htmlSourceFile.length()).intValue()];
        try {
            FileInputStream lais = new FileInputStream(htmlSourceFile);
            try {
                lais.read(HTML);
            } catch (IOException e) {
                e.printStackTrace();
            }
            ByteArrayInputStream na_sync = new ByteArrayInputStream(HTML);
            e = new InputStreamReader(na_sync);
        } catch (FileNotFoundException e) {
            URL url = null;
            try {
                url = new URL(href);
                URLConnection uri = null;
                try {
                    uri = url.openConnection();
                    uri.setDoInput(true);
                    InputStream instream = null;
                    try {
                        instream = uri.getInputStream();
                        BufferedReader in = new BufferedReader(new InputStreamReader(instream));
                        StringBuffer fhr = new StringBuffer();
                        String Line = null;
                        try {
                            while ((Line = in.readLine()) != null) {
                                System.out.println(Line);
                                fhr.append(Line + ""
"");
                            }
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                        File now = new File(""//home//wiki14//temp.txt"");
                        if (!now.exists()) {
                            if (!now.createNewFile()) System.out.println(""File caanot be created"");
                        } else {
                            now.delete();
                            if (!now.createNewFile()) System.out.println(""File caanot be created"");
                        }
                        java.io.FileWriter usr = new java.io.FileWriter(now);
                        usr.write(fhr.toString());
                        usr.close();
                        byte[]  newmor = new byte[new Long(fhr.length()).intValue()];
                        ByteArrayInputStream na_sync = new ByteArrayInputStream( newmor);
                        e = new InputStreamReader(na_sync);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            } catch (MalformedURLException e1) {
                e1.printStackTrace();
            }
        }
         config = new ParserDelegator();
        htmltextparser = new HtmlTextParser();
        htmltextparser.initData();
        try {
             config.parse(e, htmltextparser, true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            e.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"path,parser,HTMLFile,html,fis,ba_read,r,url,connection,inStream,input,sbr,line,temp,fw,newbyte","path:-8.344650268554688e-07,parser:0.0,HTMLFile:0.0,html:-4.76837158203125e-07,fis:0.0,ba_read:0.0,r:-5.960464477539062e-07,url:-1.6808509826660156e-05,connection:1.1920928955078125e-06,inStream:0.0,input:-1.1920928955078125e-07,sbr:0.0,line:-2.2649765014648438e-06,temp:-1.1920928955078125e-07,fw:-1.1920928955078125e-07,newbyte:0.0,",15,50,"connection:uri,parser: config,HTMLFile:htmlSourceFile,fis:lais,ba_read:na_sync,inStream:instream,sbr:fhr,newbyte: newmor,input:in,temp:now,fw:usr,html:HTML,r:e,path:href,line:Line,url:url,",Greedy,698,0.37531797885894774
363,"['6413929', '672082', '    public HogsCustomizer() {\n        m_filename = PathFinder.getCustsFile();\n        m_currenttaunts = new String[10];\n        m_textfields = new JTextField[10];\n        m_color = new Color(255, 255, 255);\n        boolean exists = (new File(m_filename)).exists();\n        m_inverted = false;\n        m_chooser = new JColorChooser();\n        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();\n        m_chooser.removeChooserPanel(panels[0]);\n        m_chooser.removeChooserPanel(panels[2]);\n        m_chooser.setPreviewPanel(new JPanel());\n        Reader reader = null;\n        if (exists) {\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        } else {\n            Object[] options = { ""Yes"", ""No, Thanks"" };\n            int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);\n            if (n == 0) {\n                try {\n                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.exit(0);\n                }\n            } else {\n                System.exit(0);\n            }\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e1) {\n                e1.printStackTrace();\n                System.exit(0);\n            }\n        }\n        try {\n            readFromFile(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n        Box mainpanel = Box.createVerticalBox();\n        mainpanel.add(buildTauntsPanel());\n        mainpanel.add(buildMouseStylePanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildColorPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildButtonsPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setContentPane(mainpanel);\n        this.pack();\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));\n        this.setTitle(""Hogs Customizer"");\n        this.setVisible(true);\n    }\n', '    public boolean copyOneOfMyFile(File f, String dest) {\n        if (!ownsThisFile(f.getName())) return false;\n        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);\n        try {\n            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));\n            BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n            int len = 1024;\n            byte[] read = new byte[len];\n            while ((len = in.read(read)) > 0) out.write(read, 0, len);\n            out.flush();\n            out.close();\n            in.close();\n            if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());\n        } catch (IOException e) {\n            System.out.println(""copy directory : "" + e);\n            return false;\n        }\n        return true;\n    }\n']",526,"    public HogsCustomizer() {
        m_url = PathFinder.getCustsFile();
        m_currenttitle = new String[10];
        m_buttonboxes = new JTextField[10];
        M__bg = new Color(255, 255, 255);
        boolean  exits = (new File(m_url)). exits();
        m_inverted = false;
        m_joosed = new JColorChooser();
        AbstractColorChooserPanel[] choes = m_joosed.getChooserPanels();
        m_joosed.removeChooserPanel(choes[0]);
        m_joosed.removeChooserPanel(choes[2]);
        m_joosed.setPreviewPanel(new JPanel());
        Reader player = null;
        if ( exits) {
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            Object[] opens = { ""Yes"", ""No, Thanks"" };
            int f = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.
                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opens, opens[1]);
            if (f == 0) {
                try {
                    FileChannel inputConnection = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();
                    FileChannel dostchannel = new FileOutputStream(m_url).getChannel();
                    dostchannel.transferFrom(inputConnection, 0, inputConnection.size());
                    inputConnection.close();
                    dostchannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
                System.exit(0);
            }
        }
        try {
            readFromFile(player);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        Box mainpanel = Box.createVerticalBox();
        mainpanel.add(buildTauntsPanel());
        mainpanel.add(buildMouseStylePanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildColorPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildButtonsPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainpanel);
        this.pack();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));
        this.setTitle(""Hogs Customizer"");
        this.setVisible(true);
    }
",1,1,1,-1,"m_filename,m_currenttaunts,m_textfields,m_color,exists,m_chooser,panels,reader,options,n,srcChannel,dstChannel","m_filename:0.0,m_currenttaunts:0.0,m_textfields:0.0,m_color:0.0,exists:0.0,m_chooser:0.0,panels:0.0,reader:0.0017011761665344238,options:0.0005100369453430176,n:-3.6776065826416016e-05,srcChannel:0.0,dstChannel:0.0,",12,35,"reader:player,options:opens,m_filename:m_url,m_currenttaunts:m_currenttitle,m_textfields:m_buttonboxes,m_color:M__bg,exists: exits,m_chooser:m_joosed,panels:choes,srcChannel:inputConnection,dstChannel:dostchannel,n:f,",Greedy,523,0.27837207714716594
364,"['15634393', '20841292', '    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {\n        File sourceFile = getTileFile(x, y, zoom, tileSource);\n        if (!sourceFile.exists()) return false;\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        long sourceBytes = 0;\n        long writtenBytes = 0;\n        try {\n            fis = new FileInputStream(sourceFile);\n            fos = new FileOutputStream(targetFileName);\n            FileChannel source = fis.getChannel();\n            FileChannel destination = fos.getChannel();\n            sourceBytes = source.size();\n            writtenBytes = destination.transferFrom(source, 0, sourceBytes);\n        } finally {\n            Utilities.closeStream(fis);\n            Utilities.closeStream(fos);\n        }\n        if (writtenBytes != sourceBytes) throw new IOException(""Target file\'s size is not equal to the source file\'s size!"");\n        return true;\n    }\n', '    public void fileCopy(File src, File dest) throws IOException {\n        if (!dest.exists()) {\n            final File parent = new File(dest.getParent());\n            if (!parent.exists() && !parent.mkdirs()) {\n                throw new IOException();\n            }\n            if (!dest.createNewFile()) {\n            }\n        }\n        FileInputStream is = null;\n        FileOutputStream os = null;\n        try {\n            is = new FileInputStream(src);\n            os = new FileOutputStream(dest);\n            final FileChannel srcChannel = is.getChannel();\n            final FileChannel dstChannel = os.getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } finally {\n            try {\n                if (is != null) {\n                    is.close();\n                }\n            } finally {\n                if (os != null) {\n                    os.close();\n                }\n            }\n        }\n    }\n']",162,"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File targetFiles = getTileFile(x, y, zoom, tileSource);
        if (!targetFiles.exists()) return false;
        FileInputStream  fs = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long wroteCount = 0;
        try {
             fs = new FileInputStream(targetFiles);
            fos = new FileOutputStream(targetFileName);
            FileChannel parent =  fs.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = parent.size();
            wroteCount = destination.transferFrom(parent, 0, sourceBytes);
        } finally {
            Utilities.closeStream( fs);
            Utilities.closeStream(fos);
        }
        if (wroteCount != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
",1,1,1,-1,"targetFileName,x,y,zoom,tileSource,sourceFile,fis,fos,sourceBytes,writtenBytes,source,destination","targetFileName:0.0,x:-0.0036208629608154297,y:0.006042838096618652,zoom:0.0,tileSource:0.0,sourceFile:0.0,fis:0.0,fos:0.0,sourceBytes:0.0,writtenBytes:0.0,source:0.00199204683303833,destination:0.0,",4,14,"y:y,source:parent,targetFileName:targetFileName,zoom:zoom,tileSource:tileSource,sourceFile:targetFiles,fis: fs,fos:fos,sourceBytes:sourceBytes,writtenBytes:wroteCount,destination:destination,x:x,",Greedy,471,0.2167413870493571
365,"['3897603', '12822637', '    public void updateDBModel(Tasks task) throws Exception {\n        task.setOperationName(""Updating DB Model.."");\n        int localVersion = getLocalModelVersion();\n        int currentVersion = 0;\n        try {\n            currentVersion = getModelVersion();\n        } catch (SQLException e) {\n            if (e.getErrorCode() != 1146) {\n                throw e;\n            }\n        }\n        boolean autoCommit = getConn().getAutoCommit();\n        try {\n            getConn().setAutoCommit(false);\n            for (int version = currentVersion + 1; version <= localVersion; version++) {\n                task.setStatus(""Updating to version "" + version);\n                InputStream in = EDACCApp.class.getClassLoader().getResourceAsStream(""edacc/resources/db_version/"" + version + "".sql"");\n                if (in == null) {\n                    throw new SQLQueryFileNotFoundException();\n                }\n                executeSqlScript(task, in);\n                Statement st = getConn().createStatement();\n                st.executeUpdate(""INSERT INTO `Version` VALUES ("" + version + "", NOW())"");\n                st.close();\n            }\n        } catch (Exception e) {\n            getConn().rollback();\n            throw e;\n        } finally {\n            getConn().setAutoCommit(autoCommit);\n        }\n    }\n', '    private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {\n        long mgr = Constants.MANAGER;\n        Data data, response;\n        try {\n            response = sendAndWait(new Request(mgr)).get(0);\n            MessageDigest md;\n            try {\n                md = MessageDigest.getInstance(""MD5"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(""MD5 hash not supported."");\n            }\n            byte[] challenge = response.getBytes();\n            md.update(challenge);\n            md.update(password.getBytes(Data.STRING_ENCODING));\n            try {\n                data = Data.valueOf(md.digest());\n                response = sendAndWait(new Request(mgr).add(0, data)).get(0);\n            } catch (ExecutionException ex) {\n                throw new IncorrectPasswordException();\n            }\n            loginMessage = response.getString();\n            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);\n            ID = response.getWord();\n        } catch (InterruptedException ex) {\n            throw new LoginFailedException(ex);\n        } catch (ExecutionException ex) {\n            throw new LoginFailedException(ex);\n        } catch (IOException ex) {\n            throw new LoginFailedException(ex);\n        }\n    }\n']",222,"    public void updateDBModel(Tasks message) throws Exception {
        message.setOperationName(""Updating DB Model.."");
        int finalFeature = getLocalModelVersion();
        int  currentVer = 0;
        try {
             currentVer = getModelVersion();
        } catch (SQLException e) {
            if (e.getErrorCode() != 1146) {
                throw e;
            }
        }
        boolean automaticCommit = getConn().getAutoCommit();
        try {
            getConn().setAutoCommit(false);
            for (int date =  currentVer + 1; date <= finalFeature; date++) {
                message.setStatus(""Updating to version "" + date);
                InputStream doc = EDACCApp.class.getClassLoader().getResourceAsStream(""edacc/resources/db_version/"" + date + "".sql"");
                if (doc == null) {
                    throw new SQLQueryFileNotFoundException();
                }
                executeSqlScript(message, doc);
                Statement h = getConn().createStatement();
                h.executeUpdate(""INSERT INTO `Version` VALUES ("" + date + "", NOW())"");
                h.close();
            }
        } catch (Exception e) {
            getConn().rollback();
            throw e;
        } finally {
            getConn().setAutoCommit(automaticCommit);
        }
    }
",0,0,0,-1,"task,localVersion,currentVersion,autoCommit,version,in,st","task:1.1205673217773438e-05,localVersion:0.0,currentVersion:0.0,autoCommit:0.0,version:-3.0875205993652344e-05,in:-1.4424324035644531e-05,st:-1.9788742065429688e-05,",7,24,"task:message,localVersion:finalFeature,currentVersion: currentVer,autoCommit:automaticCommit,in:doc,st:h,version:date,",Greedy,356,0.15436764558156332
366,"['288695', '917011', '    public void CopyFile(File source, File destination) throws Exception {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(""diff"", "".htm"");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(""<html><head><title>LOC Differences</title>\\n"" + SCRIPT + ""</head>\\n"" + ""<body bgcolor=\'#ffffff\'>\\n"" + ""<div onMouseOver=\\""window.defaultStatus=\'Metrics\'\\"">\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        out.write(""<table name=METRICS BORDER>\\n"");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(""<tr><td>Base:&nbsp;</td><td>"");\n            out.write(Long.toString(base));\n            out.write(""</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>"");\n            out.write(Long.toString(deleted));\n            out.write(""</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>"");\n            out.write(Long.toString(modified));\n            out.write(""</td></tr>\\n<tr><td>Added:&nbsp;</td><td>"");\n            out.write(Long.toString(added));\n            out.write(""</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>"");\n            out.write(Long.toString(added + modified));\n            out.write(""</td></tr>\\n"");\n        }\n        out.write(""<tr><td>Total:&nbsp;</td><td>"");\n        out.write(Long.toString(total));\n        out.write(""</td></tr>\\n</table></div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n']",146,"    public void CopyFile(File src, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(src);
            fos = new FileOutputStream(destination);
            byte[] url = new byte[4096];
            int get;
            while ((get = fis.get(url)) != -1) {
                fos.write(url, 0, get);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,0,1,"source,destination,fis,fos,buffer,read","source:0.004386723041534424,destination:0.0,fis:0.0,fos:0.0,buffer:0.0008740425109863281,read:0.0007517337799072266,",3,9,"source:src,buffer:url,read:get,",Greedy,172,0.07785023848215739
367,"['1562772', '19182834', '    private String getCoded(String pass) {\n        String passSecret = """";\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(pass.getBytes(""UTF8""));\n            byte s[] = m.digest();\n            for (int i = 0; i < s.length; i++) {\n                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);\n            }\n        } catch (NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return passSecret;\n    }\n', '    public synchronized String encrypt(String password) {\n        try {\n            MessageDigest md = null;\n            md = MessageDigest.getInstance(""SHA-1"");\n            md.update(password.getBytes(""UTF-8""));\n            byte raw[] = md.digest();\n            byte[] hash = (new Base64()).encode(raw);\n            return new String(hash);\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(""Algorithm SHA-1 is not supported"", e.getCause());\n            return null;\n        } catch (UnsupportedEncodingException e) {\n            logger.error(""UTF-8 encoding is not supported"");\n            return null;\n        }\n    }\n']",125,"    private String getCoded(String port) {
        String assRET = """";
        try {
            MessageDigest mand = MessageDigest.getInstance(""MD5"");
            mand.update(port.getBytes(""UTF8""));
            byte es[] = mand.digest();
            for (int abi = 0; abi < es.length; abi++) {
                assRET += Integer.toHexString((0x000000ff & es[abi]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return assRET;
    }
",1,1,1,-1,"pass,m,s,i,passSecret","pass:-7.62939453125e-06,m:-4.5299530029296875e-06,s:-4.0531158447265625e-06,i:1.0848045349121094e-05,passSecret:0.0,",5,15,"i:abi,passSecret:assRET,s:es,m:mand,pass:port,",Greedy,229,0.09839483896891275
368,"['18284811', '16995204', '    private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {\n        Map<String, String> result = new LinkedHashMap();\n        while (urls.hasNext()) {\n            URL url = urls.next();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String s = reader.readLine();\n            while (s != null) {\n                s = s.trim();\n                if (s.length() > 0) {\n                    String[] ss = s.split(""\\\\s"");\n                    for (int i = 1; i < ss.length; i++) {\n                        result.put(ss[i], ss[0]);\n                    }\n                }\n                s = reader.readLine();\n            }\n            reader.close();\n        }\n        return result;\n    }\n', '    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        fields.put(item.getFieldName(), item.getString());\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = """";\n                if (fields.get(""taBody"") != null) {\n                    body = (String) fields.get(""taBody"");\n                } else if (fields.get(""taReplyBody"") != null) {\n                    body = (String) fields.get(""taReplyBody"");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(""mid"");\n                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));\n            } else {\n                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));\n                request.setAttribute(""exception"", ""The form is null"");\n                request.setAttribute(""newLocation"", null);\n                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = ""NullPointerException"";\n            }\n            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));\n            request.setAttribute(""exception"", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), ""OK"");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n']",170,"    private Map<String, String> readStuff(Iterator<URL> materials) throws IOException {
        Map<String, String> response = new LinkedHashMap();
        while (materials.hasNext()) {
            URL name = materials.next();
            BufferedReader file = new BufferedReader(new InputStreamReader(name.openStream()));
            String is = file.readLine();
            while (is != null) {
                is = is.trim();
                if (is.length() > 0) {
                    String[] services = is.split(""\\is"");
                    for (int is = 1; is < services.length; is++) {
                        response.put(services[is], services[0]);
                    }
                }
                is = file.readLine();
            }
            file.close();
        }
        return response;
    }
",0,0,0,-1,"urls,result,url,reader,s,ss,i","urls:0.0,result:0.0002511143684387207,url:0.0016602873802185059,reader:5.894899368286133e-05,s:1.6629695892333984e-05,ss:3.24249267578125e-05,i:-3.6954879760742188e-06,",7,28,"url:name,result:response,reader:file,ss:services,s:is,urls:materials,i:is,",Greedy,369,0.1565269668896993
369,"['14232817', '22026286', '    protected void lookupForParsedElementAnnotations(JClassType t) {\n        List<JMethod> methods = getParsableElementMethods(t);\n        if (methods != null) {\n            for (JMethod method : methods) {\n                ParsedElement elementAnnotation = method.getAnnotation(ParsedElement.class);\n                if (elementAnnotation.type() == ParsedElement.Types.SYNC) {\n                    try {\n                        String contents = """";\n                        URL url = getClass().getClassLoader().getResource(elementAnnotation.file());\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            contents += line;\n                        }\n                        reader.close();\n                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), contents.replaceAll(""\\"""", ""\'""), elementAnnotation.type());\n                        this.parsedElementList.add(elementDescriptor);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), elementAnnotation.file(), elementAnnotation.type());\n                    this.parsedElementList.add(elementDescriptor);\n                }\n            }\n        }\n    }\n', '    public static void main(String args[]) {\n        int i, j, l;\n        short NUMNUMBERS = 100;\n        short numbers[] = new short[NUMNUMBERS];\n        printIntro();\n        int time = (int) System.currentTimeMillis();\n        for (i = 0; i < NUMNUMBERS; i++) {\n            numbers[i] = (short) (NUMNUMBERS - 1 - i);\n        }\n        for (i = 0; i < NUMNUMBERS; i++) {\n            for (j = 0; j < NUMNUMBERS - i - 1; j++) {\n                if (numbers[j] > numbers[j + 1]) {\n                    short temp = numbers[j];\n                    numbers[j] = numbers[j + 1];\n                    numbers[j + 1] = temp;\n                }\n            }\n            if (WANT_PROGRESS) {\n                printProgress();\n            }\n        }\n        time = (int) System.currentTimeMillis() - time;\n        System.out.print(time);\n        System.out.print(""End\\n"");\n    }\n']",233,"    protected void lookupForParsedElementAnnotations(JClassType the) {
        List<JMethod> methods = getParsableElementMethods(the);
        if (methods != null) {
            for (JMethod attr : methods) {
                ParsedElement objectAnnotations = attr.getAnnotation(ParsedElement.class);
                if (objectAnnotations.type() == ParsedElement.Types.SYNC) {
                    try {
                        String encences = """";
                        URL file = getClass().getClassLoader().getResource(objectAnnotations.file());
                        BufferedReader r = new BufferedReader(new InputStreamReader(file.openStream()));
                        String line = null;
                        while ((line = r.readLine()) != null) {
                            encences += line;
                        }
                        r.close();
                        ParsedElementDescriptor elementDesccriptor = new ParsedElementDescriptor(attr.getName(), encences.replaceAll(""\"""", ""'""), objectAnnotations.type());
                        this.parsedElementList.add(elementDesccriptor);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    ParsedElementDescriptor elementDesccriptor = new ParsedElementDescriptor(attr.getName(), objectAnnotations.file(), objectAnnotations.type());
                    this.parsedElementList.add(elementDesccriptor);
                }
            }
        }
    }
",0,0,0,-1,"t,methods,method,elementAnnotation,url,reader,line,contents,elementDescriptor","t:4.9948692321777344e-05,methods:0.0,method:6.204843521118164e-05,elementAnnotation:0.0,url:0.0027257204055786133,reader:5.054473876953125e-05,line:0.0004156827926635742,contents:0.0,elementDescriptor:0.0,",7,24,"url:file,line:line,method:attr,reader:r,t:the,methods:methods,elementAnnotation:objectAnnotations,contents:encences,elementDescriptor:elementDesccriptor,",Greedy,480,0.21395973364512125
370,"['5675397', '11444436', '    private void delete(String location) throws Exception {\n        URL url = new URL(location);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(""DELETE"");\n        conn.connect();\n        int responseCode = conn.getResponseCode();\n        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {\n            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";\n            fail(response);\n        }\n    }\n', '    public void run() {\n        try {\n            FTPClient c = new FTPClient();\n            c.configure(ftpConfig);\n            logger.debug(""Trying to connect"");\n            c.connect(""127.0.0.1"", 21211);\n            logger.debug(""Connected"");\n            c.setSoTimeout(5000);\n            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {\n                logger.debug(""Houston, we have a problem. D/C"");\n                c.disconnect();\n                throw new Exception();\n            }\n            if (c.login(""drftpd"", ""drftpd"")) {\n                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");\n                _sc.addSuccess();\n                Thread.sleep(5000);\n                c.disconnect();\n            } else {\n                logger.debug(""Login failed, D/C!"");\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            logger.debug(e, e);\n            _sc.addFailure();\n        }\n        logger.debug(""exiting"");\n    }\n']",106,"    private void delete(String directory) throws Exception {
        URL bb = new URL(directory);
        HttpURLConnection fail = (HttpURLConnection) bb.openConnection();
        fail.setRequestMethod(""DELETE"");
        fail.connect();
        int requestCode = fail.getResponseCode();
        if (requestCode != HttpURLConnection.HTTP_OK && requestCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String Response = ""location "" + directory + "" responded: "" + fail.getResponseMessage() + "" ("" + requestCode + "")"";
            fail(Response);
        }
    }
",0,0,0,-1,"location,url,conn,responseCode,response","location:1.5139579772949219e-05,url:0.00013822317123413086,conn:1.919269561767578e-05,responseCode:0.0,response:1.9073486328125e-06,",5,17,"url:bb,conn:fail,location:directory,response:Response,responseCode:requestCode,",Greedy,230,0.09920284350713095
371,"['19999376', '8481623', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        from_file = checkFile(from_file);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",138,"    private static void unzipEntry(ZipFile zipfile, ZipEntry in, File outFile) throws IOException {
        if (in.isDirectory()) {
            createDir(new File(outFile, in.getName()));
            return;
        }
        File outputFile = new File(outFile, in.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(in));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",1,1,1,-1,"zipfile,entry,outputDir,outputFile,inputStream,outputStream","zipfile:0.0,entry:-0.0004799962043762207,outputDir:0.0,outputFile:0.0,inputStream:0.0,outputStream:0.0,",2,8,"zipfile:zipfile,outputDir:outFile,outputFile:outputFile,inputStream:inputStream,outputStream:outputStream,entry:in,",Greedy,216,0.10676557223002116
372,"['13510171', '14677081', '        private String readCreditsHtml(IApplication app) {\n            final URL url = app.getResources().getCreditsURL();\n            StringBuffer buf = new StringBuffer(2048);\n            if (url != null) {\n                try {\n                    BufferedReader rdr = new BufferedReader(new InputStreamReader(url.openStream()));\n                    try {\n                        String line = null;\n                        while ((line = rdr.readLine()) != null) {\n                            String internationalizedLine = Utilities.replaceI18NSpanLine(line, s_stringMgr);\n                            buf.append(internationalizedLine);\n                        }\n                    } finally {\n                        rdr.close();\n                    }\n                } catch (IOException ex) {\n                    String errorMsg = s_stringMgr.getString(""AboutBoxDialog.error.creditsfile"");\n                    s_log.error(errorMsg, ex);\n                    buf.append(errorMsg + "": "" + ex.toString());\n                }\n            } else {\n                String errorMsg = s_stringMgr.getString(""AboutBoxDialog.error.creditsfileurl"");\n                s_log.error(errorMsg);\n                buf.append(errorMsg);\n            }\n            return buf.toString();\n        }\n', '    protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {\n        Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);\n        while (resources.hasMoreElements()) {\n            URL url = resources.nextElement();\n            String path = url.getPath();\n            if (!visitedURIs.contains(path)) {\n                visitedURIs.add(path);\n                LOG.debug(""Loading file {} to retrieve list of packages, from url: {}"", META_INF_SERVICES, url);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                try {\n                    while (true) {\n                        String line = reader.readLine();\n                        if (line == null) {\n                            break;\n                        }\n                        line = line.trim();\n                        if (line.startsWith(""#"") || line.length() == 0) {\n                            continue;\n                        }\n                        tokenize(packages, line);\n                    }\n                } finally {\n                    IOHelper.close(reader, null, LOG);\n                }\n            }\n        }\n    }\n']",193,"        private String readCreditsHtml(IApplication base) {
            final URL connection = base.getResources().getCreditsURL();
            StringBuffer Buff = new StringBuffer(2048);
            if (connection != null) {
                try {
                    BufferedReader RDr = new BufferedReader(new InputStreamReader(connection.openStream()));
                    try {
                        String word = null;
                        while ((word = RDr.readLine()) != null) {
                            String internationalizableBlock = Utilities.replaceI18NSpanLine(word, s_stringMgr);
                            Buff.append(internationalizableBlock);
                        }
                    } finally {
                        RDr.close();
                    }
                } catch (IOException ex) {
                    String ErrorLog = s_stringMgr.getString(""AboutBoxDialog.error.creditsfile"");
                    s_log.error(ErrorLog, ex);
                    Buff.append(ErrorLog + "": "" + ex.toString());
                }
            } else {
                String ErrorLog = s_stringMgr.getString(""AboutBoxDialog.error.creditsfileurl"");
                s_log.error(ErrorLog);
                Buff.append(ErrorLog);
            }
            return Buff.toString();
        }
",1,1,1,-1,"app,url,buf,rdr,line,internationalizedLine,errorMsg","app:1.5735626220703125e-05,url:2.276897430419922e-05,buf:-1.6570091247558594e-05,rdr:0.0,line:-3.7789344787597656e-05,internationalizedLine:0.0,errorMsg:0.0,",7,24,"url:connection,app:base,rdr:RDr,internationalizedLine:internationalizableBlock,errorMsg:ErrorLog,buf:Buff,line:word,",Greedy,335,0.14555248419443767
373,"['3542936', '339340', '    public boolean deleteByQuery(String query, int coreId) {\n        try {\n            URL url = new URL(solrUrl + ""/core"" + coreId + ""/update"");\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            conn.setRequestProperty(""Content-type"", ""text/xml"");\n            conn.setRequestProperty(""charset"", ""utf-8"");\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            System.out.println(""******************"" + query);\n            wr.write(""<delete><query>"" + query + ""</query></delete>"");\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n            conn = url.openConnection();\n            conn.setDoOutput(true);\n            conn.setRequestProperty(""Content-type"", ""text/xml"");\n            conn.setRequestProperty(""charset"", ""utf-8"");\n            wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(""<commit/>"");\n            wr.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line = rd.readLine()) != null) {\n                System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n', '    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n        URL url = getClass().getResource(name);\n        InputStream in = url.openStream();\n        try {\n            return ClassFile.read(in);\n        } finally {\n            in.close();\n        }\n    }\n']",320,"    public boolean deleteByQuery(String sql, int serverPath) {
        try {
            URL file = new URL(solrUrl + ""/core"" + serverPath + ""/update"");
            URLConnection ctx = file.openConnection();
            ctx.setDoOutput(true);
            ctx.setRequestProperty(""Content-type"", ""text/xml"");
            ctx.setRequestProperty(""charset"", ""utf-8"");
            OutputStreamWriter wal = new OutputStreamWriter(ctx.getOutputStream());
            System.out.println(""******************"" + sql);
            wal.write(""<delete><query>"" + sql + ""</query></delete>"");
            wal.flush();
            BufferedReader rf = new BufferedReader(new InputStreamReader(ctx.getInputStream()));
            String line;
            while ((line = rf.readLine()) != null) {
                System.out.println(line);
            }
            wal.close();
            rf.close();
            ctx = file.openConnection();
            ctx.setDoOutput(true);
            ctx.setRequestProperty(""Content-type"", ""text/xml"");
            ctx.setRequestProperty(""charset"", ""utf-8"");
            wal = new OutputStreamWriter(ctx.getOutputStream());
            wal.write(""<commit/>"");
            wal.flush();
            rf = new BufferedReader(new InputStreamReader(ctx.getInputStream()));
            while ((line = rf.readLine()) != null) {
                System.out.println(line);
            }
            wal.close();
            rf.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0,0,0,-1,"query,coreId,url,conn,wr,rd,line","query:9.5367431640625e-07,coreId:0.0,url:2.2649765014648438e-06,conn:0.0,wr:-1.1920928955078125e-07,rd:-1.1920928955078125e-07,line:-8.344650268554688e-07,",6,34,"url:file,query:sql,coreId:serverPath,conn:ctx,wr:wal,rd:rf,line:line,",Greedy,438,0.18061890999476116
374,"['15292308', '1188160', '    private static File createFileFromURL(URL url) throws IOException {\n        File tempFile = File.createTempFile(""oboFile"", "".obo"");\n        PrintStream ps = new PrintStream(tempFile);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            ps.println(line);\n        }\n        ps.close();\n        return tempFile;\n    }\n', '    public static String urlContentToString(URL url, String encoding) throws IOException {\n        String out = """";\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));\n        String line;\n        while ((line = in.readLine()) != null) {\n            out += line;\n        }\n        in.close();\n        return out;\n    }\n']",89,,0,1,,-4,"url,tempFile,ps,reader,line",,,,,Greedy,1,0.006435167789459228
375,"['10361726', '16589432', '    void queryFile(String rendezvousProgram, String rendezvousMD5) {\n        try {\n            XMLConfigParser.readUrlHost();\n            String url = XMLConfigParser.urlHost;\n            String query;\n            String param1 = ""op=query"";\n            String param2 = ""program="" + rendezvousProgram;\n            String param3 = ""md5="" + rendezvousMD5;\n            query = String.format(""%s&%s&%s"", param1, param2, param3);\n            openConnection(query, url);\n            String line = br.readLine();\n            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);\n            br.close();\n        } catch (MalformedURLException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);\n        } catch (IOException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());\n        }\n    }\n', '    private static String hash(String string) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA"");\n        } catch (Exception e) {\n            return null;\n        }\n        try {\n            md.update(string.getBytes(""UTF-8""));\n        } catch (Exception e) {\n            return null;\n        }\n        byte raw[] = md.digest();\n        return (new BASE64Encoder()).encode(raw);\n    }\n']",159,"    void queryFile(String endiscoveryProgram, String renditeSHA5) {
        try {
            XMLConfigParser.readUrlHost();
            String url = XMLConfigParser.urlHost;
            String error;
            String Param5 = ""op=query"";
            String resource2 = ""program="" + endiscoveryProgram;
            String param3 = ""md5="" + renditeSHA5;
            error = String.format(""%s&%s&%s"", Param5, resource2, param3);
            openConnection(error, url);
            String xml = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + xml);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
",0,0,0,-1,"rendezvousProgram,rendezvousMD5,url,query,param1,param2,param3,line","rendezvousProgram:0.0,rendezvousMD5:0.0,url:-1.6689300537109375e-06,query:-1.3113021850585938e-06,param1:0.0,param2:0.0,param3:0.0,line:7.152557373046875e-07,",6,13,"line:xml,rendezvousProgram:endiscoveryProgram,rendezvousMD5:renditeSHA5,param1:Param5,param2:resource2,param3:param3,query:error,url:url,",Greedy,309,0.13734085162480672
376,"['832329', '18623182', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",271,"    private static void readAndRewrite(File outfile, File outFile) throws IOException {
        ImageInputStream iniais = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(outfile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iniais);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iniais, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + outfile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",1,1,0,1,"inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","inFile:0.0,outFile:0.0,iis:0.0,dcmParser:0.0,ds:-0.0036829710006713867,pdReader:0.0,out:-0.005794823169708252,dcmEncParam:-5.364418029785156e-07,pdWriter:-3.5762786865234375e-07,",3,15,"inFile:outfile,outFile:outFile,iis:iniais,dcmParser:dcmParser,pdReader:pdReader,pdWriter:pdWriter,dcmEncParam:dcmEncParam,ds:ds,out:url,",Greedy,504,0.21983519792556763
377,"['14518760', '2102737', '    public void connect(final URLConnectAdapter urlAdapter) {\n        if (this.connectSettings == null) {\n            throw new IllegalStateException(""Invalid Connect Settings (is null)"");\n        }\n        final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();\n        BufferedReader in;\n        try {\n            in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));\n            final StringBuilder buf = new StringBuilder(200);\n            String str;\n            while ((str = in.readLine()) != null) {\n                buf.append(str);\n                buf.append(\'\\n\');\n            }\n            final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());\n            final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();\n            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {\n                final String key = entry.getKey();\n                final List<String> val = entry.getValue();\n                if ((val != null) && (val.size() > 1)) {\n                    System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());\n                }\n                if (key != null) {\n                    result.addHeader(key, val.get(0), val);\n                } else {\n                    result.addHeader(""Status"", val.get(0), val);\n                }\n            }\n            this.lastResult = result;\n        } catch (IOException e) {\n            throw new ConnectException(e);\n        }\n    }\n', '    private String getContents(Server server, String uri) throws TechnicalException {\n        try {\n            URL url = new URL(""http://localhost:"" + PORT + uri);\n            return StreamUtils.getStreamContent(url.openStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new TechnicalException(e);\n        }\n    }\n']",301,"    public void connect(final URLConnectAdapter  urlConnection) {
        if (this.connectSettings == null) {
            throw new IllegalStateException(""Invalid Connect Settings (is null)"");
        }
        final HttpURLConnection httpconn = (HttpURLConnection)  urlConnection.openConnection();
        BufferedReader ini;
        try {
            ini = new BufferedReader(new InputStreamReader(httpconn.getInputStream()));
            final StringBuilder nb = new StringBuilder(200);
            String line;
            while ((line = ini.readLine()) != null) {
                nb.append(line);
                nb.append('
');
            }
            final ConnectResult function = new ConnectResult(httpconn.getResponseCode(), nb.toString());
            final Map<String, List<String>> headerFormments = httpconn.getHeaderFields();
            for (Map.Entry<String, List<String>> ner : headerFormments.entrySet()) {
                final String word = ner.getKey();
                final List<String> il = ner.getValue();
                if ((il != null) && (il.size() > 1)) {
                    System.out.println(""WARN: Invalid header value : "" + word + "" url="" + this.connectSettings.getUrl());
                }
                if (word != null) {
                    function.addHeader(word, il.get(0), il);
                } else {
                    function.addHeader(""Status"", il.get(0), il);
                }
            }
            this.lastResult = function;
        } catch (IOException e) {
            throw new ConnectException(e);
        }
    }
",0,0,0,-1,"urlAdapter,httpConnection,in,buf,str,result,headerFields,entry,key,val,lastResult","urlAdapter:0.0,httpConnection:0.0,in:-5.4836273193359375e-06,buf:-7.152557373046875e-07,str:5.0067901611328125e-06,result:2.2649765014648438e-06,headerFields:0.0,entry:-1.5497207641601562e-06,key:2.86102294921875e-06,val:4.0531158447265625e-06,lastResult:0.0,",10,36,"str:line,val:il,key:word,result:function,urlAdapter: urlConnection,httpConnection:httpconn,headerFields:headerFormments,lastResult:lastResult,buf:nb,entry:ner,in:ini,",Greedy,513,0.23700340588887533
378,"['17568209', '10697587', '    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {\n        if (srcFile == null || tagFile == null) {\n            return false;\n        }\n        int length = 2097152;\n        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));\n        if (!dirFile.exists()) {\n            dirFile.mkdirs();\n        }\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());\n        FileChannel inC = in.getChannel();\n        FileChannel outC = out.getChannel();\n        int i = 0;\n        while (true) {\n            if (inC.position() == inC.size()) {\n                inC.close();\n                outC.close();\n                break;\n            }\n            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;\n            inC.transferTo(inC.position(), length, outC);\n            inC.position(inC.position() + length);\n            i++;\n        }\n        return true;\n    }\n', '    public static void copyFileNIO(File in, File out) throws IOException {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(in);\n            fos = new FileOutputStream(out);\n            FileChannel sourceChannel = fis.getChannel();\n            FileChannel targetChannel = fos.getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n        }\n    }\n']",225,"    private static boolean CopyFile(File viewUrl, File catDir) throws IOException {
        if (viewUrl == null || catDir == null) {
            return false;
        }
        int url = 2097152;
        File DIRFiles = new File(getFileFolder(catDir.getAbsolutePath()));
        if (!DIRFiles.exists()) {
            DIRFiles.mkdirs();
        }
        FileInputStream arin = new FileInputStream(viewUrl);
        FileOutputStream inc = new FileOutputStream(catDir.getAbsolutePath());
        FileChannel innc = arin.getChannel();
        FileChannel tagE = inc.getChannel();
        int i = 0;
        while (true) {
            if (innc.position() == innc.size()) {
                innc.close();
                tagE.close();
                break;
            }
            if ((innc.size() - innc.position()) < 20971520) url = (int) (innc.size() - innc.position()); else url = 20971520;
            innc.transferTo(innc.position(), url, tagE);
            innc.position(innc.position() + url);
            i++;
        }
        return true;
    }
",1,1,0,1,"srcFile,tagFile,length,dirFile,in,out,inC,outC,i","srcFile:0.0,tagFile:0.0,length:-0.0027710795402526855,dirFile:0.0,in:-0.0014001727104187012,out:0.020062923431396484,inC:0.0,outC:0.0,i:0.0013478994369506836,",8,34,"out:inc,i:i,srcFile:viewUrl,tagFile:catDir,dirFile:DIRFiles,inC:innc,outC:tagE,in:arin,length:url,",Greedy,444,0.19666908979415892
379,"['20852768', '3838437', '    private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {\n        synchronized (results) {\n            Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);\n            Vector<Class<?>> v = new Vector<Class<?>>();\n            String fqcn = searchClass.getName();\n            List<URL> knownLocations = new ArrayList<URL>();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    String[] files = directory.list();\n                    for (int i = 0; i < files.length; i++) {\n                        if (files[i].endsWith("".class"")) {\n                            String classname = files[i].substring(0, files[i].length() - 6);\n                            try {\n                                Class<?> c = Class.forName(packageName + ""."" + classname);\n                                if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + ""."" + classname)) {\n                                    thisResult.put(c, url);\n                                }\n                            } catch (ClassNotFoundException cnfex) {\n                                errors.add(cnfex);\n                            } catch (Exception ex) {\n                                errors.add(ex);\n                            }\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration<JarEntry> e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(""/"")) classname = classname.substring(1);\n                                classname = classname.replace(\'/\', \'.\');\n                                try {\n                                    Class c = Class.forName(classname);\n                                    if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {\n                                        thisResult.put(c, url);\n                                    }\n                                } catch (ClassNotFoundException cnfex) {\n                                    errors.add(cnfex);\n                                } catch (NoClassDefFoundError ncdfe) {\n                                    errors.add(ncdfe);\n                                } catch (UnsatisfiedLinkError ule) {\n                                    errors.add(ule);\n                                } catch (Exception exception) {\n                                    errors.add(exception);\n                                } catch (Error error) {\n                                    errors.add(error);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n            results.putAll(thisResult);\n            Iterator<Class<?>> it = thisResult.keySet().iterator();\n            while (it.hasNext()) {\n                v.add(it.next());\n            }\n            return v;\n        }\n    }\n', '    public static boolean copyFile(final File inFile, final File outFile) {\n        try {\n            FileChannel ic = new FileInputStream(inFile).getChannel();\n            FileChannel oc = new FileOutputStream(outFile).getChannel();\n            ic.transferTo(0, ic.size(), oc);\n            ic.close();\n            oc.close();\n            return true;\n        } catch (IOException e) {\n            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);\n            return false;\n        }\n    }\n']",623,"    private final Vector<Class<?>> findSubclasses(URL document, String  packageSummary, Class<?> SuperCode) {
        synchronized (results) {
            Map<Class<?>, URL> theseMap = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);
            Vector<Class<?>> v = new Vector<Class<?>>();
            String fetcn = searchClass.getName();
            List<URL> knownLocations = new ArrayList<URL>();
            knownLocations.add(document);
            for (int inc = 0; inc < knownLocations.size(); inc++) {
                URL path = knownLocations.get(inc);
                File out = new File(path.getFile());
                if (out.exists()) {
                    String[] file = out.list();
                    for (int i = 0; i < file.length; i++) {
                        if (file[i].endsWith("".class"")) {
                            String classname = file[i].substring(0, file[i].length() - 6);
                            try {
                                Class<?> abc = Class.forName( packageSummary + ""."" + classname);
                                if (SuperCode.isAssignableFrom(abc) && !fetcn.equals( packageSummary + ""."" + classname)) {
                                    theseMap.put(abc, path);
                                }
                            } catch (ClassNotFoundException cnfex) {
                                errors.add(cnfex);
                            } catch (Exception ex) {
                                errors.add(ex);
                            }
                        }
                    }
                } else {
                    try {
                        JarURLConnection lock = (JarURLConnection) path.openConnection();
                        JarFile jarFile = lock.getJarFile();
                        Enumeration<JarEntry> ee = jarFile.entries();
                        while (ee.hasMoreElements()) {
                            JarEntry entry = ee.nextElement();
                            String entryname = entry.getName();
                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {
                                String classname = entryname.substring(0, entryname.length() - 6);
                                if (classname.startsWith(""/"")) classname = classname.substring(1);
                                classname = classname.replace('/', '.');
                                try {
                                    Class abc = Class.forName(classname);
                                    if (SuperCode.isAssignableFrom(abc) && !fetcn.equals(classname)) {
                                        theseMap.put(abc, path);
                                    }
                                } catch (ClassNotFoundException cnfex) {
                                    errors.add(cnfex);
                                } catch (NoClassDefFoundError ncdfe) {
                                    errors.add(ncdfe);
                                } catch (UnsatisfiedLinkError ule) {
                                    errors.add(ule);
                                } catch (Exception exception) {
                                    errors.add(exception);
                                } catch (Error error) {
                                    errors.add(error);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
            results.putAll(theseMap);
            Iterator<Class<?>> it = theseMap.keySet().iterator();
            while (it.hasNext()) {
                v.add(it.next());
            }
            return v;
        }
    }
",0,0,1,1,"location,packageName,superClass,thisResult,v,fqcn,knownLocations,loc,url,directory,files,i,classname,c,conn,jarFile,e,entry,entryname","location:1.1920928955078125e-07,packageName:0.0,superClass:0.0,thisResult:0.0,v:-4.76837158203125e-07,fqcn:0.0,knownLocations:0.0,loc:4.76837158203125e-07,url:1.4781951904296875e-05,directory:1.0728836059570312e-06,files:8.344650268554688e-07,i:-1.1920928955078125e-07,classname:0.0,c:2.2649765014648438e-06,conn:5.0067901611328125e-06,jarFile:0.0,e:3.5762786865234375e-07,entry:-4.76837158203125e-07,entryname:0.0,",12,44,"url:path,conn:lock,c:abc,directory:out,files:file,loc:inc,e:ee,location:document,packageName: packageSummary,superClass:SuperCode,thisResult:theseMap,fqcn:fetcn,",Greedy,573,0.31943751176198326
380,"['20531124', '13964622', '    public static Debugger getDebugger(InetAddress host, int port, String password) throws IOException {\n        try {\n            Socket s = new Socket(host, port);\n            try {\n                ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());\n                ObjectInputStream in = new ObjectInputStream(s.getInputStream());\n                int protocolVersion = in.readInt();\n                if (protocolVersion > 220) {\n                    throw new IOException(""Incompatible protocol version "" + protocolVersion + "". At most 220 was expected."");\n                }\n                byte[] challenge = (byte[]) in.readObject();\n                MessageDigest md = MessageDigest.getInstance(""SHA"");\n                md.update(password.getBytes(""UTF-8""));\n                md.update(challenge);\n                out.writeObject(md.digest());\n                return new LocalDebuggerProxy((Debugger) in.readObject());\n            } finally {\n                s.close();\n            }\n        } catch (IOException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new UndeclaredThrowableException(e);\n        }\n    }\n', '    public void setImage(java.awt.Image img) {\n        if (imageName != null && imageName.length() > 0) {\n            try {\n                InputStream url = currentProject.getUrl(imageName).openStream();\n                image = new org.eclipse.swt.graphics.Image(getDisplay(), url);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            Display.getDefault().asyncExec(new Runnable() {\n\n                public void run() {\n                    redraw();\n                }\n            });\n        }\n    }\n']",200,"    public static Debugger getDebugger(InetAddress host, int limit, String sword) throws IOException {
        try {
            Socket sync = new Socket(host, limit);
            try {
                ObjectOutputStream output = new ObjectOutputStream(sync.getOutputStream());
                ObjectInputStream reader = new ObjectInputStream(sync.getInputStream());
                int proocolLength = reader.readInt();
                if (proocolLength > 220) {
                    throw new IOException(""Incompatible protocol version "" + proocolLength + "". At most 220 was expected."");
                }
                byte[] challenge = (byte[]) reader.readObject();
                MessageDigest meta = MessageDigest.getInstance(""SHA"");
                meta.update(sword.getBytes(""UTF-8""));
                meta.update(challenge);
                output.writeObject(meta.digest());
                return new LocalDebuggerProxy((Debugger) reader.readObject());
            } finally {
                sync.close();
            }
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new UndeclaredThrowableException(e);
        }
    }
",0,0,0,-1,"host,port,password,s,out,in,protocolVersion,challenge,md","host:-4.76837158203125e-07,port:-3.5762786865234375e-07,password:-2.9802322387695312e-06,s:-5.960464477539062e-07,out:-1.0728836059570312e-06,in:-1.5497207641601562e-06,protocolVersion:0.0,challenge:0.0,md:-4.410743713378906e-06,",7,21,"protocolVersion:proocolLength,challenge:challenge,port:limit,host:host,s:sync,out:output,in:reader,password:sword,md:meta,",Greedy,399,0.17732437054316202
381,"['15464715', '22024581', '    private String sendQuery(String query) {\n        File xmlServerResponse = null;\n        String serverResponse = """";\n        try {\n            long start = Calendar.getInstance().getTimeInMillis();\n            System.out.println(""\\n\\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");\n            System.out.println(""    consulta de busqueda -> "" + query);\n            URL url = new URL(query);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = """";\n            while ((line = in.readLine()) != null) {\n                serverResponse += line;\n            }\n            long ahora = (Calendar.getInstance().getTimeInMillis() - start);\n            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);\n            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\\n"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return serverResponse;\n    }\n', '    private static Collection<String> crossCheckFromOBOFile(String category) throws Exception {\n        Collection<String> miCol = new ArrayList<String>();\n        String revision = ""1.48"";\n        URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + ""?revision="" + revision);\n        log.debug(""url "" + url);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String inputLine;\n        int termCounter = 0;\n        int miCounter = 0;\n        int obsoleteCounter = 0;\n        int obsoleteCounterDef = 0;\n        int typedefCounter = 0;\n        int drugTerm = 0;\n        int psiTerm = 0;\n        String mi = null;\n        while ((inputLine = in.readLine()) != null) {\n            String temp;\n            temp = inputLine;\n            if (inputLine.startsWith(""[Term]"")) {\n                termCounter++;\n            } else if (inputLine.matches(""id:\\\\s+(MI:.*)"")) {\n                mi = temp.split(""\\\\s+"")[1];\n                miCounter++;\n            } else if (inputLine.contains(""is_obsolete: true"")) {\n                obsoleteCounter++;\n            } else if (inputLine.matches(""def:.*?OBSOLETE.*"")) {\n                obsoleteCounterDef++;\n            } else if (inputLine.startsWith(""[Typedef]"")) {\n                typedefCounter++;\n            } else if (inputLine.matches(""subset:\\\\s+PSI-MI\\\\s+slim"")) {\n                psiTerm++;\n                if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) miCol.add(mi);\n            } else if (inputLine.matches(""subset:\\\\s+Drugable"")) {\n                drugTerm++;\n                if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) miCol.add(mi);\n            }\n        }\n        Assert.assertEquals(948, termCounter);\n        Assert.assertEquals(948, miCounter);\n        Assert.assertEquals(53, obsoleteCounter);\n        Assert.assertEquals(53, obsoleteCounterDef);\n        Assert.assertEquals(1, typedefCounter);\n        Assert.assertEquals(844, psiTerm);\n        Assert.assertEquals(124, drugTerm);\n        in.close();\n        return miCol;\n    }\n']",169,"    private String sendQuery(String qs) {
        File xmlServerResponse = null;
        String systemLine = """";
        try {
            long entry = Calendar.getInstance().getTimeInMillis();
            System.out.println(""

++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + qs);
            URL file = new URL(qs);
            BufferedReader in = new BufferedReader(new InputStreamReader(file.openStream()));
            String write = """";
            while ((write = in.readLine()) != null) {
                systemLine += write;
            }
            long ahta = (Calendar.getInstance().getTimeInMillis() - entry);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahta);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++

"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return systemLine;
    }
",1,1,0,1,"query,xmlServerResponse,start,url,in,line,serverResponse,ahora","query:-8.702278137207031e-05,xmlServerResponse:0.0,start:-6.282329559326172e-05,url:0.0014206767082214355,in:-0.0005112886428833008,line:0.00026345252990722656,serverResponse:0.0,ahora:0.0,",6,15,"url:file,line:write,xmlServerResponse:xmlServerResponse,serverResponse:systemLine,ahora:ahta,start:entry,query:qs,",Greedy,264,0.13473337491353352
382,"['6326517', '12829110', '    public static final String hash(String password) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n            password = password + salt;\n            md.update(password.getBytes(""utf8""));\n            byte[] b = md.digest();\n            StringBuilder output = new StringBuilder(32);\n            for (int i = 0; i < b.length; i++) {\n                String temp = Integer.toHexString(b[i] & 0xff);\n                if (temp.length() < 2) {\n                    output.append(""0"");\n                }\n                output.append(temp);\n            }\n            return output.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {\n        Properties props = Configuration.getInstance().getProperties();\n        String algorithm = props.getProperty(""com.makeabyte.jhosting.server.persistence.security.algorithm"");\n        String encryptedData = data;\n        boolean encrypt = Boolean.parseBoolean(props.getProperty(""com.makeabyte.jhosting.server.persistence.security.encrypt""));\n        if (encrypt) {\n            if (algorithm.equalsIgnoreCase(""UTF-16LE"")) return encryptActiveDirectory(data);\n            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);\n            md.reset();\n            md.update(data.getBytes());\n            encryptedData = md.digest().toString();\n        }\n        return encryptedData;\n    }\n']",152,"    public static final String hash(String path) {
        MessageDigest grad = null;
        try {
            grad = MessageDigest.getInstance(""SHA-512"");
            path = path + salt;
            grad.update(path.getBytes(""utf8""));
            byte[] nb = grad.digest();
            StringBuilder ilo = new StringBuilder(32);
            for (int uri = 0; uri < nb.length; uri++) {
                String emp = Integer.toHexString(nb[uri] & 0xff);
                if (emp.length() < 2) {
                    ilo.append(""0"");
                }
                ilo.append(emp);
            }
            return ilo.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",1,1,1,-1,"password,md,b,output,i,temp","password:-7.426738739013672e-05,md:-0.00017827749252319336,b:8.821487426757812e-06,output:-2.3245811462402344e-05,i:-1.5974044799804688e-05,temp:-3.0100345611572266e-05,",6,22,"b:nb,i:uri,output:ilo,temp:emp,password:path,md:grad,",Greedy,318,0.12981274525324504
383,"['2525895', '6330721', '    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(DIGEST);\n            SecureRandom random = SecureRandom.getInstance(RANDOM);\n            digester.reset();\n            for (int i = 0; i < ITERATIONS; i++) {\n                digester.update(salt);\n                digester.update(cryptPassword.getBytes(""UTF-8""));\n            }\n            byte[] hash = digester.digest();\n            random.setSeed(hash);\n            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n            generator.init(maxKeySize, random);\n            SecretKey key = generator.generateKey();\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            byte[] cipherOut = cipher.doFinal(credentials);\n            byte[] ret = new byte[salt.length + cipherOut.length];\n            System.arraycopy(salt, 0, ret, 0, salt.length);\n            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);\n            return ret;\n        } catch (Exception e) {\n            StorePlugin.getDefault().log(e);\n        }\n        return new byte[0];\n    }\n', '    public int setData(String mysql) {\n        int mycount = 0;\n        try {\n            conn.setAutoCommit(false);\n            mycount = 0;\n            stmt = conn.createStatement();\n            mycount = stmt.executeUpdate(mysql);\n        } catch (Exception e) {\n            mycount = -1;\n        } finally {\n            if (mycount > 0) {\n                try {\n                    conn.commit();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                try {\n                    conn.rollback();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return mycount;\n    }\n']",258,"    public static byte[] encode(String passwordpassword, byte[] credentials, byte[] cert) {
        try {
            MessageDigest Digest = MessageDigest.getInstance(DIGEST);
            SecureRandom password = SecureRandom.getInstance(RANDOM);
            Digest.reset();
            for (int id = 0; id < ITERATIONS; id++) {
                Digest.update(cert);
                Digest.update(passwordpassword.getBytes(""UTF-8""));
            }
            byte[] hash = Digest.digest();
            password.setSeed(hash);
            int maxHashLength = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generate = KeyGenerator.getInstance(CIPHER);
            generate.init(maxHashLength, password);
            SecretKey cer = generate.generateKey();
            Cipher encairo = Cipher.getInstance(CIPHER);
            encairo.init(Cipher.ENCRYPT_MODE, cer);
            byte[] cryptIn = encairo.doFinal(credentials);
            byte[] phrase = new byte[cert.length + cryptIn.length];
            System.arraycopy(cert, 0, phrase, 0, cert.length);
            System.arraycopy(cryptIn, 0, phrase, cert.length, cryptIn.length);
            return phrase;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",0,0,0,-1,"cryptPassword,credentials,salt,digester,random,i,hash,maxKeySize,generator,key,cipher,cipherOut,ret","cryptPassword:0.0,credentials:0.0,salt:0.0,digester:0.0,random:0.000532984733581543,i:0.0011039376258850098,hash:-0.004703223705291748,maxKeySize:0.0,generator:0.0,key:-7.832050323486328e-05,cipher:0.0,cipherOut:0.0,ret:-0.001109480857849121,",11,37,"i:id,random:password,cryptPassword:passwordpassword,credentials:credentials,salt:cert,digester:Digest,maxKeySize:maxHashLength,generator:generate,cipher:encairo,cipherOut:cryptIn,key:cer,ret:phrase,hash:hash,",Greedy,579,0.2653983314832052
384,"['17972560', '948486', '    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {\n        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {\n            File selectedFolder = folderFileChooser.getSelectedFile();\n            File collectionCopyFile;\n            String newDocumentName;\n            Document newDocument;\n            StringBuilder distinguisherReplacer = new StringBuilder();\n            int matchingFilenameDistinguisher;\n            String nextToken;\n            Term newTerm;\n            String userHome;\n            String fileSeparator;\n            int userOption;\n            ArrayList<File> folderTextFiles = new ArrayList<File>();\n            ArrayList<File> folderRejectedFiles = new ArrayList<File>();\n            HashSet<File> ignoredFiles = new HashSet<File>();\n            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");\n            Scanner tokenizer = null;\n            FileChannel fileSource = null;\n            FileChannel collectionDestination = null;\n            HashMap<String, Integer> termHashMap = null;\n            Index collectionIndex = activeCollection.getIndex();\n            int documentTermMaxFrequency;\n            int currentTermFrequency;\n            for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);\n            for (File selectedFile : folderTextFiles) {\n                newDocumentName = selectedFile.getName();\n                newDocument = new Document(newDocumentName);\n                if (activeCollection.containsDocument(newDocument)) {\n                    matchingFilenameDistinguisher = 1;\n                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");\n                    newDocument.setDocumentName(newDocumentName);\n                    while (activeCollection.containsDocument(newDocument)) {\n                        matchingFilenameDistinguisher++;\n                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();\n                        newDocument.setDocumentName(newDocumentName);\n                    }\n                }\n                termHashMap = new HashMap<String, Integer>();\n                try {\n                    tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));\n                    tokenizer.useDelimiter(Pattern.compile(""\\\\p{Space}|\\\\p{Punct}|\\\\p{Cntrl}""));\n                    while (tokenizer.hasNext()) {\n                        nextToken = tokenizer.next().toLowerCase();\n                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);\n                    }\n                    documentTermMaxFrequency = 0;\n                    for (String term : termHashMap.keySet()) {\n                        newTerm = new Term(term);\n                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);\n                        currentTermFrequency = termHashMap.get(term);\n                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;\n                        collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);\n                    }\n                    newDocument.setTermMaxFrequency(documentTermMaxFrequency);\n                    activeCollection.addDocument(newDocument);\n                    userHome = System.getProperty(""user.home"");\n                    fileSeparator = System.getProperty(""file.separator"");\n                    collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);\n                    collectionCopyFile.createNewFile();\n                    fileSource = new FileInputStream(selectedFile).getChannel();\n                    collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();\n                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());\n                } catch (FileNotFoundException e) {\n                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");\n                    return;\n                } catch (IOException e) {\n                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\n                    if (userOption == JOptionPane.NO_OPTION) {\n                        activeCollection.removeDocument(newDocument);\n                        for (String term : termHashMap.keySet()) {\n                            collectionIndex.removeAllOccurences(new Term(term), newDocument);\n                        }\n                        folderTextFiles.add(selectedFile);\n                    } else ignoredFiles.add(selectedFile);\n                } finally {\n                    try {\n                        if (tokenizer != null) tokenizer.close();\n                        if (fileSource != null) fileSource.close();\n                        if (collectionDestination != null) collectionDestination.close();\n                    } catch (IOException e) {\n                        System.err.println(e.getMessage());\n                    }\n                }\n            }\n            if (ignoredFiles.size() > 0) {\n                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);\n                ignoredFilesDialog.setVisible(true);\n            }\n            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",879,"    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File currentArea = folderFileChooser.getSelectedFile();
            File collectionActiveSourceFile;
            String newFeatureUrl;
            Document newSession;
            StringBuilder distinguishreplacement = new StringBuilder();
            int matchingFilenameChinctionishes;
            String NextTerm;
            Term newterm;
            String Userhome;
            String fileDelatater;
            int  userOptions;
            ArrayList<File> folderEmptyfiles = new ArrayList<File>();
            ArrayList<File> folderPreceivedPages = new ArrayList<File>();
            HashSet<File> coloredFolder = new HashSet<File>();
            FileNameExtensionFilter TextFilesFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");
            Scanner tokenized = null;
            FileChannel selectionResource = null;
            FileChannel archiveOrdination = null;
            HashMap<String, Integer> termHList = null;
            Index  collectionindex = activeCollection.getIndex();
            int documentTermMaxfraction;
            int currentTermPrequently;
            for (File archiveFolder : currentArea.listFiles()) if (TextFilesFilter.accept(archiveFolder)) folderEmptyfiles.add(archiveFolder); else folderPreceivedPages.add(archiveFolder);
            for (File currentFolder : folderEmptyfiles) {
                newFeatureUrl = currentFolder.getName();
                newSession = new Document(newFeatureUrl);
                if (activeCollection.containsDocument(newSession)) {
                    matchingFilenameChinctionishes = 1;
                    newFeatureUrl = newFeatureUrl.concat(""("" + matchingFilenameChinctionishes + "")"");
                    newSession.setDocumentName(newFeatureUrl);
                    while (activeCollection.containsDocument(newSession)) {
                        matchingFilenameChinctionishes++;
                        newFeatureUrl = distinguishreplacement.replace(newFeatureUrl.length() - 2, newFeatureUrl.length() - 1, new Integer(matchingFilenameChinctionishes).toString()).toString();
                        newSession.setDocumentName(newFeatureUrl);
                    }
                }
                termHList = new HashMap<String, Integer>();
                try {
                    tokenized = new Scanner(new BufferedReader(new FileReader(currentFolder)));
                    tokenized.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                    while (tokenized.hasNext()) {
                        NextTerm = tokenized.next().toLowerCase();
                        if (!NextTerm.isEmpty()) if (termHList.containsKey(NextTerm)) termHList.put(NextTerm, termHList.get(NextTerm) + 1); else termHList.put(NextTerm, 1);
                    }
                    documentTermMaxfraction = 0;
                    for (String term : termHList.keySet()) {
                        newterm = new Term(term);
                        if (! collectionindex.termExists(newterm))  collectionindex.addTerm(newterm);
                        currentTermPrequently = termHList.get(term);
                        if (currentTermPrequently > documentTermMaxfraction) documentTermMaxfraction = currentTermPrequently;
                         collectionindex.addOccurence(newterm, newSession, currentTermPrequently);
                    }
                    newSession.setTermMaxFrequency(documentTermMaxfraction);
                    activeCollection.addDocument(newSession);
                    Userhome = System.getProperty(""user.home"");
                    fileDelatater = System.getProperty(""file.separator"");
                    collectionActiveSourceFile = new File(Userhome + fileDelatater + ""Infrared"" + fileDelatater + activeCollection.getDocumentCollectionName() + fileDelatater + newFeatureUrl);
                    collectionActiveSourceFile.createNewFile();
                    selectionResource = new FileInputStream(currentFolder).getChannel();
                    archiveOrdination = new FileOutputStream(collectionActiveSourceFile).getChannel();
                    archiveOrdination.transferFrom(selectionResource, 0, selectionResource.size());
                } catch (FileNotFoundException e) {
                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                    return;
                } catch (IOException e) {
                     userOptions = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if ( userOptions == JOptionPane.NO_OPTION) {
                        activeCollection.removeDocument(newSession);
                        for (String term : termHList.keySet()) {
                             collectionindex.removeAllOccurences(new Term(term), newSession);
                        }
                        folderEmptyfiles.add(currentFolder);
                    } else coloredFolder.add(currentFolder);
                } finally {
                    try {
                        if (tokenized != null) tokenized.close();
                        if (selectionResource != null) selectionResource.close();
                        if (archiveOrdination != null) archiveOrdination.close();
                    } catch (IOException e) {
                        System.err.println(e.getMessage());
                    }
                }
            }
            if (coloredFolder.size() > 0) {
                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(coloredFolder, this);
                ignoredFilesDialog.setVisible(true);
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
",1,1,1,-1,"evt,selectedFolder,collectionCopyFile,newDocumentName,newDocument,distinguisherReplacer,matchingFilenameDistinguisher,nextToken,newTerm,userHome,fileSeparator,userOption,folderTextFiles,folderRejectedFiles,ignoredFiles,textFileFilter,tokenizer,fileSource,collectionDestination,termHashMap,collectionIndex,documentTermMaxFrequency,currentTermFrequency,folderFile,selectedFile","evt:0.0,selectedFolder:0.0,collectionCopyFile:0.0,newDocumentName:0.0,newDocument:0.0,distinguisherReplacer:0.0,matchingFilenameDistinguisher:0.0,nextToken:0.0,newTerm:0.0,userHome:0.0,fileSeparator:0.0,userOption:0.0,folderTextFiles:0.0,folderRejectedFiles:0.0,ignoredFiles:0.0,textFileFilter:0.0,tokenizer:0.0,fileSource:0.0,collectionDestination:0.0,termHashMap:0.0,collectionIndex:0.0,documentTermMaxFrequency:0.0,currentTermFrequency:0.0,folderFile:0.0,selectedFile:0.0,",24,122,"evt:evt,selectedFolder:currentArea,collectionCopyFile:collectionActiveSourceFile,newDocumentName:newFeatureUrl,newDocument:newSession,distinguisherReplacer:distinguishreplacement,matchingFilenameDistinguisher:matchingFilenameChinctionishes,nextToken:NextTerm,newTerm:newterm,userHome:Userhome,fileSeparator:fileDelatater,userOption: userOptions,folderTextFiles:folderEmptyfiles,folderRejectedFiles:folderPreceivedPages,ignoredFiles:coloredFolder,textFileFilter:TextFilesFilter,tokenizer:tokenized,fileSource:selectionResource,collectionDestination:archiveOrdination,termHashMap:termHList,collectionIndex: collectionindex,documentTermMaxFrequency:documentTermMaxfraction,currentTermFrequency:currentTermPrequently,folderFile:archiveFolder,selectedFile:currentFolder,",Greedy,927,0.6186775803565979
385,"['9221947', '6326517', '    private static boolean copyFile(String src, String dest) {\n        try {\n            File inputFile = new File(src);\n            File outputFile = new File(dest);\n            FileInputStream in = new FileInputStream(inputFile);\n            FileOutputStream out = new FileOutputStream(outputFile);\n            FileChannel inc = in.getChannel();\n            FileChannel outc = out.getChannel();\n            inc.transferTo(0, inc.size(), outc);\n            inc.close();\n            outc.close();\n            in.close();\n            out.close();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n', '    public static final String hash(String password) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n            password = password + salt;\n            md.update(password.getBytes(""utf8""));\n            byte[] b = md.digest();\n            StringBuilder output = new StringBuilder(32);\n            for (int i = 0; i < b.length; i++) {\n                String temp = Integer.toHexString(b[i] & 0xff);\n                if (temp.length() < 2) {\n                    output.append(""0"");\n                }\n                output.append(temp);\n            }\n            return output.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n']",128,"    private static boolean copyFile(String stream, String dest) {
        try {
            File outStream = new File(stream);
            File outputFile = new File(dest);
            FileInputStream socket = new FileInputStream(outStream);
            FileOutputStream io = new FileOutputStream(outputFile);
            FileChannel reader = socket.getChannel();
            FileChannel  oute = io.getChannel();
            reader.transferTo(0, reader.size(),  oute);
            reader.close();
             oute.close();
            socket.close();
            io.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",0,0,0,-1,"src,dest,inputFile,outputFile,in,out,inc,outc","src:1.0728836059570312e-06,dest:2.86102294921875e-06,inputFile:0.0,outputFile:0.0,in:-4.410743713378906e-06,out:-1.3947486877441406e-05,inc:-4.410743713378906e-06,outc:0.0,",6,17,"dest:dest,src:stream,inputFile:outStream,outputFile:outputFile,outc: oute,in:socket,inc:reader,out:io,",Greedy,310,0.14024523099263508
386,"['17551461', '10899860', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n', '    public void copy(File in, File out) throws Exception {\n        FileChannel src = new FileInputStream(in).getChannel();\n        FileChannel dest = new FileOutputStream(out).getChannel();\n        src.transferTo(0, src.size(), dest);\n        src.close();\n        dest.close();\n    }\n']",98,"    public static void copyFromFileToFileUsingNIO(File imageChannel, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(imageChannel).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",1,1,1,-1,"inputFile,outputFile,inputChannel,outputChannel","inputFile:0.0,outputFile:0.0,inputChannel:0.0,outputChannel:0.0,",1,2,"inputFile:imageChannel,outputFile:outputFile,inputChannel:inputChannel,outputChannel:outputChannel,",Greedy,115,0.06414419015248617
387,"['7902699', '7891900', '    public static List<String> getLevelIndex(URL fetchUrl) {\n        List<String> levelNames = new ArrayList<String>();\n        BufferedReader bufferedreader;\n        try {\n            URLConnection urlconnection = fetchUrl.openConnection();\n            urlconnection.setConnectTimeout(30000);\n            if (urlconnection.getContentEncoding() != null) {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));\n            } else {\n                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));\n            }\n        } catch (IOException _ex) {\n            System.err.println(""HexTD::readFile:: Can\'t read from "" + fetchUrl);\n            return levelNames;\n        }\n        String sLine1;\n        try {\n            while ((sLine1 = bufferedreader.readLine()) != null) {\n                if (sLine1.trim().length() != 0) {\n                    levelNames.add(sLine1);\n                }\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return levelNames;\n    }\n', '    public void writeConfiguration(Writer out) throws IOException {\n        if (myUrl == null) {\n            out.append(""# Unable to print configuration resource\\n"");\n        } else {\n            InputStream in = myUrl.openStream();\n            if (in != null) {\n                try {\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n            } else {\n                out.append(""# Unable to print configuration resource\\n"");\n            }\n        }\n    }\n']",208,"    public static List<String> getLevelIndex(URL FetchFile) {
        List<String> entrynames = new ArrayList<String>();
        BufferedReader  buffererreader;
        try {
            URLConnection llconnect = FetchFile.openConnection();
            llconnect.setConnectTimeout(30000);
            if (llconnect.getContentEncoding() != null) {
                 buffererreader = new BufferedReader(new InputStreamReader(llconnect.getInputStream(), llconnect.getContentEncoding()));
            } else {
                 buffererreader = new BufferedReader(new InputStreamReader(llconnect.getInputStream(), ""utf-8""));
            }
        } catch (IOException _ex) {
            System.err.println(""HexTD::readFile:: Can't read from "" + FetchFile);
            return entrynames;
        }
        String sLinU;
        try {
            while ((sLinU =  buffererreader.readLine()) != null) {
                if (sLinU.trim().length() != 0) {
                    entrynames.add(sLinU);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return entrynames;
    }
",0,0,0,-1,"fetchUrl,levelNames,bufferedreader,urlconnection,sLine1","fetchUrl:0.0,levelNames:0.0,bufferedreader:0.0,urlconnection:0.0,sLine1:0.0,",5,21,"fetchUrl:FetchFile,levelNames:entrynames,bufferedreader: buffererreader,urlconnection:llconnect,sLine1:sLinU,",Greedy,291,0.12555936574935914
388,"['22095676', '17180286', '    public static String addTag(String tag_id, String tag_description, String tag_text, String tag_author, String application_code) {\n        String so = OctopusErrorMessages.UNKNOWN_ERROR;\n        if (tag_id == null || tag_id.trim().equals("""")) {\n            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;\n        }\n        if (tag_id.trim().equals(application_code)) {\n            return OctopusErrorMessages.TAG_ID_TOO_SHORT;\n        }\n        if (!StringUtil.isAlphaNumerical(StringUtil.replace(StringUtil.replace(tag_id, ""-"", """"), ""_"", """"))) {\n            return OctopusErrorMessages.TAG_ID_MUST_BE_ALPHANUMERIC;\n        }\n        if (!tag_id.startsWith(application_code)) {\n            return OctopusErrorMessages.TAG_ID_MUST_START + "" "" + application_code;\n        }\n        String tag_exist = exist(tag_id);\n        if (!tag_exist.equals(OctopusErrorMessages.DOESNT_ALREADY_EXIST)) {\n            return tag_exist;\n        }\n        if (tag_description != null && !tag_description.trim().equals("""")) {\n            tag_description = StringUtil.replace(tag_description, ""\\n"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""\\r"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""\\t"", "" "");\n            tag_description = StringUtil.replace(tag_description, ""<"", ""&#60;"");\n            tag_description = StringUtil.replace(tag_description, "">"", ""&#62;"");\n            tag_description = StringUtil.replace(tag_description, ""\'"", ""&#39;"");\n        } else {\n            return OctopusErrorMessages.DESCRIPTION_TEXT_EMPTY;\n        }\n        if (tag_text != null && !tag_text.trim().equals("""")) {\n            tag_text = StringUtil.replace(tag_text, ""\\n"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""\\r"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""\\t"", "" "");\n            tag_text = StringUtil.replace(tag_text, ""<"", ""&#60;"");\n            tag_text = StringUtil.replace(tag_text, "">"", ""&#62;"");\n            tag_text = StringUtil.replace(tag_text, ""\'"", ""&#39;"");\n        } else {\n            return OctopusErrorMessages.TRANSLATION_TEXT_EMPTY;\n        }\n        if (tag_author == null || tag_author.trim().equals("""")) {\n            return OctopusErrorMessages.MAIN_PARAMETER_EMPTY;\n        }\n        DBConnection theConnection = null;\n        try {\n            theConnection = DBServiceManager.allocateConnection();\n            theConnection.setAutoCommit(false);\n            String query = ""INSERT INTO tr_tag (tr_tag_id,tr_tag_applicationid,tr_tag_info,tr_tag_creationdate) "";\n            query += ""VALUES (?,?,\'"" + tag_description + ""\',getdate())"";\n            PreparedStatement state = theConnection.prepareStatement(query);\n            state.setString(1, tag_id);\n            state.setString(2, application_code);\n            state.executeUpdate();\n            String query2 = ""INSERT INTO tr_translation (tr_translation_trtagid, tr_translation_language, tr_translation_text, tr_translation_version, tr_translation_lud, tr_translation_lun ) "";\n            query2 += ""VALUES(?,\'"" + OctopusApplication.MASTER_LANGUAGE + ""\',\'"" + tag_text + ""\',0,getdate(),?)"";\n            PreparedStatement state2 = theConnection.prepareStatement(query2);\n            state2.setString(1, tag_id);\n            state2.setString(2, tag_author);\n            state2.executeUpdate();\n            theConnection.commit();\n            so = OctopusErrorMessages.ACTION_DONE;\n        } catch (SQLException e) {\n            try {\n                theConnection.rollback();\n            } catch (SQLException ex) {\n            }\n            so = OctopusErrorMessages.ERROR_DATABASE;\n        } finally {\n            if (theConnection != null) {\n                try {\n                    theConnection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n                theConnection.release();\n            }\n        }\n        return so;\n    }\n', '    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");\n        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));\n        byte[] digestBytes = messageDigest.digest();\n        String hex = null;\n        for (int i = 0; i < digestBytes.length; i++) {\n            hex = Integer.toHexString(0xFF & digestBytes[i]);\n            if (hex.length() < 2) sb.append(""0"");\n            sb.append(hex);\n        }\n        return new String(sb);\n    }\n']",665,"    public static String addTag(String  tag_name, String tag_description, String tag_text, String tag_author, String application_code) {
        String so = OctopusErrorMessages.UNKNOWN_ERROR;
        if ( tag_name == null ||  tag_name.trim().equals("""")) {
            return OctopusErrorMessages.TAG_ID_CANT_BE_EMPTY;
        }
        if ( tag_name.trim().equals(application_code)) {
            return OctopusErrorMessages.TAG_ID_TOO_SHORT;
        }
        if (!StringUtil.isAlphaNumerical(StringUtil.replace(StringUtil.replace( tag_name, ""-"", """"), ""_"", """"))) {
            return OctopusErrorMessages.TAG_ID_MUST_BE_ALPHANUMERIC;
        }
        if (! tag_name.startsWith(application_code)) {
            return OctopusErrorMessages.TAG_ID_MUST_START + "" "" + application_code;
        }
        String tag_exist = exist( tag_name);
        if (!tag_exist.equals(OctopusErrorMessages.DOESNT_ALREADY_EXIST)) {
            return tag_exist;
        }
        if (tag_description != null && !tag_description.trim().equals("""")) {
            tag_description = StringUtil.replace(tag_description, ""
"", "" "");
            tag_description = StringUtil.replace(tag_description, ""\r"", "" "");
            tag_description = StringUtil.replace(tag_description, ""\t"", "" "");
            tag_description = StringUtil.replace(tag_description, ""<"", ""&#60;"");
            tag_description = StringUtil.replace(tag_description, "">"", ""&#62;"");
            tag_description = StringUtil.replace(tag_description, ""'"", ""&#39;"");
        } else {
            return OctopusErrorMessages.DESCRIPTION_TEXT_EMPTY;
        }
        if (tag_text != null && !tag_text.trim().equals("""")) {
            tag_text = StringUtil.replace(tag_text, ""
"", "" "");
            tag_text = StringUtil.replace(tag_text, ""\r"", "" "");
            tag_text = StringUtil.replace(tag_text, ""\t"", "" "");
            tag_text = StringUtil.replace(tag_text, ""<"", ""&#60;"");
            tag_text = StringUtil.replace(tag_text, "">"", ""&#62;"");
            tag_text = StringUtil.replace(tag_text, ""'"", ""&#39;"");
        } else {
            return OctopusErrorMessages.TRANSLATION_TEXT_EMPTY;
        }
        if (tag_author == null || tag_author.trim().equals("""")) {
            return OctopusErrorMessages.MAIN_PARAMETER_EMPTY;
        }
        DBConnection theConnection = null;
        try {
            theConnection = DBServiceManager.allocateConnection();
            theConnection.setAutoCommit(false);
            String query = ""INSERT INTO tr_tag (tr_tag_id,tr_tag_applicationid,tr_tag_info,tr_tag_creationdate) "";
            query += ""VALUES (?,?,'"" + tag_description + ""',getdate())"";
            PreparedStatement state = theConnection.prepareStatement(query);
            state.setString(1,  tag_name);
            state.setString(2, application_code);
            state.executeUpdate();
            String query2 = ""INSERT INTO tr_translation (tr_translation_trtagid, tr_translation_language, tr_translation_text, tr_translation_version, tr_translation_lud, tr_translation_lun ) "";
            query2 += ""VALUES(?,'"" + OctopusApplication.MASTER_LANGUAGE + ""','"" + tag_text + ""',0,getdate(),?)"";
            PreparedStatement state2 = theConnection.prepareStatement(query2);
            state2.setString(1,  tag_name);
            state2.setString(2, tag_author);
            state2.executeUpdate();
            theConnection.commit();
            so = OctopusErrorMessages.ACTION_DONE;
        } catch (SQLException e) {
            try {
                theConnection.rollback();
            } catch (SQLException ex) {
            }
            so = OctopusErrorMessages.ERROR_DATABASE;
        } finally {
            if (theConnection != null) {
                try {
                    theConnection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
                theConnection.release();
            }
        }
        return so;
    }
",0,0,1,1,"tag_id,tag_description,tag_text,tag_author,application_code,so,tag_exist","tag_id:0.0,tag_description:0.0,tag_text:0.0,tag_author:0.0,application_code:0.0,so:-0.001453101634979248,tag_exist:0.0,",1,9,"tag_id: tag_name,",Greedy,96,0.04642035563786825
389,"['10067028', '3708296', '    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            long size = in.size();\n            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buffer);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n', '    public byte[] transfer(@Nullable final TransferListener transferListener) {\n        try {\n            InputStream inputStream = url.openStream();\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());\n            if (transferListener != null) {\n                inputStream = new ObservableInputStream(inputStream, transferListener);\n            }\n            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);\n            return outputStream.toByteArray();\n        } catch (IOException e) {\n            throw new UnhandledException(e);\n        }\n    }\n']",117,"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel id = null;
        FileChannel id = null;
        try {
            id = new FileInputStream(source).getChannel();
            id = new FileOutputStream(destination).getChannel();
            long size = id.size();
            MappedByteBuffer buffer = id.map(FileChannel.MapMode.READ_ONLY, 0, size);
            id.write(buffer);
        } finally {
            if (id != null) {
                id.close();
            }
            if (id != null) {
                id.close();
            }
        }
    }
",0,0,0,-1,"source,destination,in,out,size,buffer","source:-2.9802322387695312e-06,destination:0.0,in:-3.4570693969726562e-06,out:-5.125999450683594e-06,size:-3.5762786865234375e-07,buffer:-2.86102294921875e-06,",2,11,"destination:destination,size:size,buffer:buffer,source:source,in:id,out:id,",Greedy,284,0.12073039611180623
390,"['4140309', '11902597', '    public String encrypt(final char[] password, final String algorithm, final byte[] salt) {\n        final StringBuffer buffer = new StringBuffer();\n        MessageDigest digest = null;\n        int size = 0;\n        if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {\n            size = 20;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SSHA}"");\n            } else {\n                buffer.append(""{SHA}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""SHA-1"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {\n            size = 16;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SMD5}"");\n            } else {\n                buffer.append(""{MD5}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""MD5"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else {\n            throw new UnsupportedOperationException(""Not implemented"");\n        }\n        int outSize = size;\n        digest.reset();\n        try {\n            digest.update(new String(password).getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(""UTF-8 Unsupported"");\n        }\n        if ((salt != null) && (salt.length > 0)) {\n            digest.update(salt);\n            outSize += salt.length;\n        }\n        final byte[] out = new byte[outSize];\n        System.arraycopy(digest.digest(), 0, out, 0, size);\n        if ((salt != null) && (salt.length > 0)) {\n            System.arraycopy(salt, 0, out, size, salt.length);\n        }\n        buffer.append(new String(Base64.encodeBase64(out)));\n        return buffer.toString();\n    }\n', '    public static void main(String[] args) {\n        System.out.println(""Start filtering zgps..."");\n        final Config config = Gbl.createConfig(args);\n        final String CONFIG_MODULE = ""GPSFilterZGPS"";\n        File sourceFileSelectedStages = new File(config.findParam(CONFIG_MODULE, ""sourceFileSelectedStages""));\n        File sourceFileZGPS = new File(config.findParam(CONFIG_MODULE, ""sourceFileZGPS""));\n        File targetFile = new File(config.findParam(CONFIG_MODULE, ""targetFile""));\n        System.out.println(""Start reading selected stages..."");\n        FilterZGPSSelectedStages selectedStages = new FilterZGPSSelectedStages();\n        selectedStages.createSelectedStages(sourceFileSelectedStages);\n        System.out.println(""Done. "" + selectedStages.getSelectedStages().size() + "" stages were stored"");\n        System.out.println(""Start reading and writing zgps..."");\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFileZGPS)));\n            BufferedWriter out = new BufferedWriter(new FileWriter(targetFile));\n            out.write(in.readLine());\n            out.newLine();\n            String lineFromInputFile;\n            while ((lineFromInputFile = in.readLine()) != null) {\n                String[] entries = lineFromInputFile.split(""\\t"");\n                if (selectedStages.containsStage(Integer.parseInt(entries[0]), Integer.parseInt(entries[1]), Integer.parseInt(entries[2]))) {\n                    out.write(lineFromInputFile);\n                    out.newLine();\n                    out.flush();\n                }\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(""Could not find source file for selected stages."");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(""IO Exception while reading or writing zgps."");\n            e.printStackTrace();\n        }\n        System.out.println(""Done."");\n    }\n']",414,"    public String encrypt(final char[] hash, final String palgorith, final byte[]  sal) {
        final StringBuffer string = new StringBuffer();
        MessageDigest digest = null;
        int sized = 0;
        if (""SHA"".equalsIgnoreCase(palgorith) || ""SSHA"".equalsIgnoreCase(palgorith)) {
            sized = 20;
            if (( sal != null) && ( sal.length > 0)) {
                string.append(""{SSHA}"");
            } else {
                string.append(""{SHA}"");
            }
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(palgorith) || ""SMD5"".equalsIgnoreCase(palgorith)) {
            sized = 16;
            if (( sal != null) && ( sal.length > 0)) {
                string.append(""{SMD5}"");
            } else {
                string.append(""{MD5}"");
            }
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else {
            throw new UnsupportedOperationException(""Not implemented"");
        }
        int outputLength = sized;
        digest.reset();
        try {
            digest.update(new String(hash).getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""UTF-8 Unsupported"");
        }
        if (( sal != null) && ( sal.length > 0)) {
            digest.update( sal);
            outputLength +=  sal.length;
        }
        final byte[] update = new byte[outputLength];
        System.arraycopy(digest.digest(), 0, update, 0, sized);
        if (( sal != null) && ( sal.length > 0)) {
            System.arraycopy( sal, 0, update, sized,  sal.length);
        }
        string.append(new String(Base64.encodeBase64(update)));
        return string.toString();
    }
",0,0,0,-1,"password,algorithm,salt,buffer,digest,size,outSize,out","password:0.0006983280181884766,algorithm:0.0,salt:0.0,buffer:8.940696716308594e-06,digest:0.0,size:-2.5033950805664062e-06,outSize:0.0,out:1.4662742614746094e-05,",7,42,"password:hash,out:update,buffer:string,algorithm:palgorith,salt: sal,digest:digest,outSize:outputLength,size:sized,",Greedy,555,0.2535884658495585
391,"['20841292', '10673772', '    public void fileCopy(File src, File dest) throws IOException {\n        if (!dest.exists()) {\n            final File parent = new File(dest.getParent());\n            if (!parent.exists() && !parent.mkdirs()) {\n                throw new IOException();\n            }\n            if (!dest.createNewFile()) {\n            }\n        }\n        FileInputStream is = null;\n        FileOutputStream os = null;\n        try {\n            is = new FileInputStream(src);\n            os = new FileOutputStream(dest);\n            final FileChannel srcChannel = is.getChannel();\n            final FileChannel dstChannel = os.getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } finally {\n            try {\n                if (is != null) {\n                    is.close();\n                }\n            } finally {\n                if (os != null) {\n                    os.close();\n                }\n            }\n        }\n    }\n', '    private File extractResource(String resourceName, File destDir) {\n        File file = new File(destDir, resourceName);\n        InputStream in = getClass().getResourceAsStream(resourceName);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(file);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        return file;\n    }\n']",187,"    public void fileCopy(File url, File dest) throws IOException {
        if (!dest.exists()) {
            final File source = new File(dest.getParent());
            if (!source.exists() && !source.mkdirs()) {
                throw new IOException();
            }
            if (!dest.createNewFile()) {
            }
        }
        FileInputStream id = null;
        FileOutputStream os = null;
        try {
            id = new FileInputStream(url);
            os = new FileOutputStream(dest);
            final FileChannel sourceConnection = id.getChannel();
            final FileChannel dstChannel = os.getChannel();
            dstChannel.transferFrom(sourceConnection, 0, sourceConnection.size());
            sourceConnection.close();
            dstChannel.close();
        } finally {
            try {
                if (id != null) {
                    id.close();
                }
            } finally {
                if (os != null) {
                    os.close();
                }
            }
        }
    }
",1,1,0,1,"src,dest,parent,is,os,srcChannel,dstChannel","src:0.0021162033081054688,dest:-0.002126455307006836,parent:0.008229255676269531,is:0.0002593994140625,os:-0.0004972219467163086,srcChannel:0.0,dstChannel:0.0,",4,14,"parent:source,src:url,is:id,srcChannel:sourceConnection,",Greedy,217,0.0919947624206543
392,"['22197335', '460892', '    private void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",84,"    private void copyFile(File url, File dst) throws IOException {
        InputStream url = new FileInputStream(url);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = url.read(buf)) > 0) out.write(buf, 0, len);
        url.close();
        out.close();
    }
",1,1,0,1,"src,dst,in,out,buf,len","src:0.0006646513938903809,dst:0.0,in:0.00017386674880981445,out:0.0007088184356689453,buf:4.941225051879883e-05,len:0.00012069940567016602,",2,5,"out:out,src:url,in:url,",Greedy,144,0.06720487674077352
393,"['20536502', '23186914', '    public void testSavepoint4() throws Exception {\n        Statement stmt = con.createStatement();\n        stmt.execute(""CREATE TABLE #savepoint4 (data int)"");\n        stmt.close();\n        con.setAutoCommit(false);\n        for (int i = 0; i < 3; i++) {\n            System.out.println(""iteration: "" + i);\n            PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint4 (data) VALUES (?)"");\n            pstmt.setInt(1, 1);\n            assertTrue(pstmt.executeUpdate() == 1);\n            Savepoint savepoint = con.setSavepoint();\n            assertNotNull(savepoint);\n            assertTrue(savepoint.getSavepointId() == 1);\n            try {\n                savepoint.getSavepointName();\n                assertTrue(false);\n            } catch (SQLException e) {\n            }\n            pstmt.setInt(1, 2);\n            assertTrue(pstmt.executeUpdate() == 1);\n            pstmt.close();\n            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");\n            ResultSet rs = pstmt.executeQuery();\n            assertTrue(rs.next());\n            assertTrue(rs.getInt(1) == 3);\n            assertTrue(!rs.next());\n            pstmt.close();\n            rs.close();\n            con.rollback(savepoint);\n            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");\n            rs = pstmt.executeQuery();\n            assertTrue(rs.next());\n            assertTrue(rs.getInt(1) == 1);\n            assertTrue(!rs.next());\n            pstmt.close();\n            rs.close();\n            con.rollback();\n        }\n        con.setAutoCommit(true);\n    }\n', '    public void save(Connection conn, boolean commit) throws SQLException {\n        PreparedStatement stmt = null;\n        if (!isValid()) {\n            String errorMessage = ""Unable to save invalid DAO \'"" + getClass().getName() + ""\'!"";\n            if (log.isErrorEnabled()) {\n                log.error(errorMessage);\n            }\n            throw new SQLException(errorMessage);\n        }\n        try {\n            if (isNew()) {\n                primaryKey = createNewPrimaryKey();\n                stmt = conn.prepareStatement(getInsertSql());\n            } else {\n                stmt = conn.prepareStatement(getUpdateSql());\n            }\n            setValues(stmt);\n            int rowCount = stmt.executeUpdate();\n            if (rowCount != 1) {\n                primaryKey = OvUuid.NULL_UUID;\n                if (commit) {\n                    conn.rollback();\n                }\n                String errorMessage = ""Invalid number of rows changed!"";\n                if (log.isErrorEnabled()) {\n                    log.error(errorMessage);\n                }\n                throw new SQLException(errorMessage);\n            } else {\n                if (commit) {\n                    conn.commit();\n                }\n            }\n        } finally {\n            OvJdbcUtils.closeStatement(stmt);\n        }\n    }\n']",318,"    public void testSavepoint4() throws Exception {
        Statement strMT = con.createStatement();
        strMT.execute(""CREATE TABLE #savepoint4 (data int)"");
        strMT.close();
        con.setAutoCommit(false);
        for (int pi = 0; pi < 3; pi++) {
            System.out.println(""iteration: "" + pi);
            PreparedStatement pftm = con.prepareStatement(""INSERT INTO #savepoint4 (data) VALUES (?)"");
            pftm.setInt(1, 1);
            assertTrue(pftm.executeUpdate() == 1);
            Savepoint  savepointer = con.setSavepoint();
            assertNotNull( savepointer);
            assertTrue( savepointer.getSavepointId() == 1);
            try {
                 savepointer.getSavepointName();
                assertTrue(false);
            } catch (SQLException e) {
            }
            pftm.setInt(1, 2);
            assertTrue(pftm.executeUpdate() == 1);
            pftm.close();
            pftm = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            ResultSet ows = pftm.executeQuery();
            assertTrue(ows.next());
            assertTrue(ows.getInt(1) == 3);
            assertTrue(!ows.next());
            pftm.close();
            ows.close();
            con.rollback( savepointer);
            pftm = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            ows = pftm.executeQuery();
            assertTrue(ows.next());
            assertTrue(ows.getInt(1) == 1);
            assertTrue(!ows.next());
            pftm.close();
            ows.close();
            con.rollback();
        }
        con.setAutoCommit(true);
    }
",1,1,1,-1,"stmt,i,pstmt,savepoint,rs","stmt:0.0,i:-7.301568984985352e-05,pstmt:0.0,savepoint:0.0,rs:3.5643577575683594e-05,",5,34,"rs:ows,stmt:strMT,pstmt:pftm,savepoint: savepointer,i:pi,",Greedy,394,0.16652181545893352
394,"['13902980', '11036037', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void copy(String srcFilename, String destFilename) throws IOException {\n        int bytes_read = 0;\n        byte[] buffer = new byte[512];\n        FileInputStream fin = null;\n        FileOutputStream fout = null;\n        try {\n            fin = new FileInputStream(srcFilename);\n            try {\n                fout = new FileOutputStream(destFilename);\n                while ((bytes_read = fin.read(buffer)) != -1) {\n                    fout.write(buffer, 0, bytes_read);\n                }\n            } finally {\n                try {\n                    if (fout != null) {\n                        fout.close();\n                        fout = null;\n                    }\n                } catch (IOException e) {\n                }\n            }\n        } finally {\n            try {\n                if (fin != null) {\n                    fin.close();\n                    fin = null;\n                }\n            } catch (IOException e) {\n            }\n        }\n    }\n']",193,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:-0.07764989137649536,out:0.4721704125404358,buffer:0.3209104537963867,read:0.18607228994369507,success:0.016588866710662842,",0,0,"out:out,buffer:buffer,read:read,success:success,infile:infile,outfile:outfile,in:in,",Greedy,332,0.14795692364374796
395,"['6644160', '1760352', '    public void saveHiddenNames(HashSet names) throws SQLException {\n        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();\n        PreparedStatement ps = null;\n        try {\n            conn.setAutoCommit(false);\n            Statement stmt = conn.createStatement();\n            stmt.executeUpdate(""DELETE FROM HIDDENBOARDNAMES"");\n            stmt.close();\n            stmt = null;\n            ps = conn.prepareStatement(""INSERT INTO HIDDENBOARDNAMES (boardname) VALUES (?)"");\n            for (Iterator i = names.iterator(); i.hasNext(); ) {\n                String bName = (String) i.next();\n                ps.setString(1, bName);\n                ps.executeUpdate();\n            }\n            ps.close();\n            conn.commit();\n            conn.setAutoCommit(true);\n        } catch (Throwable t) {\n            logger.log(Level.SEVERE, ""Exception during save"", t);\n            try {\n                conn.rollback();\n            } catch (Throwable t1) {\n                logger.log(Level.SEVERE, ""Exception during rollback"", t1);\n            }\n            try {\n                conn.setAutoCommit(true);\n            } catch (Throwable t1) {\n            }\n        } finally {\n            AppLayerDatabase.getInstance().givePooledConnection(conn);\n            try {\n                if (ps != null) ps.close();\n            } catch (Throwable t1) {\n            }\n            ;\n        }\n    }\n', '    public static int deleteContract(String likePatten) {\n        Connection conn = null;\n        PreparedStatement psmt = null;\n        StringBuffer SQL = new StringBuffer(200);\n        int deleted = 0;\n        SQL.append("" DELETE FROM JHF_ALIVE_CONTRACT "").append("" WHERE   ORDER_ID LIKE  ? "");\n        try {\n            conn = JdbcConnectionPool.mainConnection();\n            conn.setAutoCommit(false);\n            conn.setReadOnly(false);\n            psmt = conn.prepareStatement(SQL.toString());\n            psmt.setString(1, ""%"" + likePatten + ""%"");\n            deleted = psmt.executeUpdate();\n            conn.commit();\n        } catch (SQLException e) {\n            if (null != conn) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e1) {\n                    System.out.println("" error when roll back !"");\n                }\n            }\n        } finally {\n            try {\n                if (null != psmt) {\n                    psmt.close();\n                    psmt = null;\n                }\n                if (null != conn) {\n                    conn.close();\n                    conn = null;\n                }\n            } catch (SQLException e) {\n                System.out.println("" error  when psmt close or conn close ."");\n            }\n        }\n        return deleted;\n    }\n']",251,"    public void saveHiddenNames(HashSet paces) throws SQLException {
        Connection cn = AppLayerDatabase.getInstance().getPooledConnection();
        PreparedStatement http = null;
        try {
            cn.setAutoCommit(false);
            Statement Stmb = cn.createStatement();
            Stmb.executeUpdate(""DELETE FROM HIDDENBOARDNAMES"");
            Stmb.close();
            Stmb = null;
            http = cn.prepareStatement(""INSERT INTO HIDDENBOARDNAMES (boardname) VALUES (?)"");
            for (Iterator I = paces.iterator(); I.hasNext(); ) {
                String cString = (String) I.next();
                http.setString(1, cString);
                http.executeUpdate();
            }
            http.close();
            cn.commit();
            cn.setAutoCommit(true);
        } catch (Throwable t) {
            logger.log(Level.SEVERE, ""Exception during save"", t);
            try {
                cn.rollback();
            } catch (Throwable t1) {
                logger.log(Level.SEVERE, ""Exception during rollback"", t1);
            }
            try {
                cn.setAutoCommit(true);
            } catch (Throwable t1) {
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(cn);
            try {
                if (http != null) http.close();
            } catch (Throwable t1) {
            }
            ;
        }
    }
",1,1,1,-1,"names,conn,ps,stmt,i,bName","names:1.4424324035644531e-05,conn:2.014636993408203e-05,ps:1.2874603271484375e-05,stmt:0.0,i:5.841255187988281e-06,bName:0.0,",6,27,"conn:cn,names:paces,ps:http,i:I,stmt:Stmb,bName:cString,",Greedy,316,0.15822701851526896
396,"['15723802', '14807299', '    void createAgentProgram(PrintStream ps, String agentName, String agentID) throws IOException, ConfigException {\n        Agent agent = service.getAgent(agentName);\n        File instanceDir = getInstanceDir();\n        double agent_timeout_seconds = engine.getTimeout();\n        String ii = ""\\"""";\n        String agentScript = ""agent-"" + agentName + "".py"";\n        String serviceScript = ""service.py"";\n        Set<String> taskNames = agent.getTasks().keySet();\n        File scriptDir = getService().getScriptDir();\n        final boolean embedScripts = true;\n        {\n            ps.println(""#!/bin/sh"");\n            ps.println(""umask 0077"");\n        }\n        for (String taskName : taskNames) {\n            Task task = getService().getTask(taskName);\n            String script = task.getScriptContent();\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + task.getFile() + "" << "" + ii + ""EOF_"" + task.getFile() + ii);\n                ps.println(script);\n                ps.println(""EOF_"" + task.getFile());\n            } else {\n                File taskScriptFile = new File(instanceDir, task.getFile());\n                PrintStream xs = new PrintStream(taskScriptFile);\n                xs.print(script);\n                xs.close();\n            }\n        }\n        {\n            PrintStream ss = null;\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + serviceScript + "" << "" + ii + ""EOF_"" + serviceScript + ii);\n                ss = ps;\n            } else {\n                File serviceScriptFile = new File(instanceDir, serviceScript);\n                ss = new PrintStream(serviceScriptFile);\n            }\n            service.createServiceScript(ss);\n            if (embedScripts) ps.println(""EOF_"" + serviceScript); else ss.close();\n        }\n        {\n            URL url = new URL(engine.getAgentContextURL() + ""/"" + engine.getAgentURLPath());\n            log.debug(""url for agent = "" + url.toExternalForm());\n            PrintStream as = null;\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + agentScript + "" << "" + ii + ""EOF_"" + agentScript + ii);\n                as = ps;\n            } else {\n                File agentScriptFile = new File(instanceDir, agentScript);\n                as = new PrintStream(agentScriptFile);\n            }\n            String tab[] = { """", ""    "", ""        "", ""            "", ""                "", ""                    "" };\n            int i = 0;\n            as.println(tab[i] + ""from wrapper import ZSIWrapper"");\n            as.println(tab[i] + ""from service import Service"");\n            as.println(tab[i] + ""import threading"");\n            as.println(tab[i] + ""from sys import exit"");\n            as.println();\n            as.println(tab[i] + ""URL="" + ii + url.toString() + ii);\n            as.println(tab[i] + ""agentID="" + ii + agentID + ii);\n            as.println(tab[i] + ""instanceID="" + instanceID);\n            as.println(tab[i] + ""instanceKey="" + ii + key + ii);\n            as.println(tab[i] + ""timeout="" + ii + agent_timeout_seconds + ii);\n            as.println(tab[i] + ""stop_flag=0"");\n            as.println(tab[i] + ""kill_flag=0"");\n            as.println();\n            as.println(tab[i] + ""# Need extra port for each thread, "" + ""ZSIWrapper (actually ZSI) not thread save"");\n            as.println(tab[i] + ""port0=ZSIWrapper(URL, agentID, instanceID, instanceKey, timeout)"");\n            as.println(tab[i] + ""port0.setAgentStatus("" + Status.RUNNING.ordinal() + "")"");\n            as.println();\n            as.println(tab[i] + ""def create_namespace(service) :"");\n            as.println(tab[i] + ""    "" + ii + ""create a namespace for injection "" + ""into a task script and returns it."" + ii);\n            as.println(tab[i] + ""# first get most (not all) variables"");\n            as.print(tab[i] + ""    arglist = [ "");\n            int counter = 0;\n            for (VarAttributes va : attributesMap.values()) {\n                counter++;\n                String varname = va.getName();\n                if (Constants.VAR_STDOUT.equals(varname)) continue;\n                VarTypeEnum vartype = va.getType();\n                switch(vartype) {\n                    case DOUBLE:\n                    case STRING:\n                    case LONG:\n                    case BOOLEAN:\n                    case CHOICE:\n                        as.print(tab[i] + ""    \'"" + varname + ""\'"");\n                        if (counter != attributesMap.size()) as.println("",\\\\"");\n                        break;\n                    case FILES:\n                        break;\n                    default:\n                        throw new RuntimeException(""unkown data type in switch"");\n                }\n            }\n            as.println(""]"");\n            as.println(tab[i] + ""    vars=port0.getManyVars(arglist)"");\n            as.println(tab[i] + ""    namesp = vars "");\n            as.println(tab[i] + ""    namesp[ \'service\' ] = service "");\n            as.println(tab[i] + ""    return namesp"");\n            as.println();\n            for (String taskName : taskNames) {\n                Task task = getService().getTask(taskName);\n                boolean background = task.isBackground();\n                as.println(tab[i] + ""def task_"" + taskName + ""():"");\n                {\n                    i++;\n                    as.println(tab[i] + ""try :"");\n                    if (background) {\n                        as.println(tab[i] + ""    # as ZSIWrapper is not task save,"" + "" create a new one"");\n                        as.println(tab[i] + ""    port_task=ZSIWrapper(URL, agentID, "" + ""instanceID, instanceKey, timeout)"");\n                        as.println(tab[i] + ""    service = Service(port_task)"");\n                    } else {\n                        as.println(tab[i] + ""    # this is foreground, "" + ""use port0 from current task"");\n                        as.println(tab[i] + ""    service = Service(port0)"");\n                    }\n                    as.println(tab[i] + ""    globals = create_namespace(service)"");\n                    as.println(tab[i] + ""    locals = { }"");\n                    as.println(tab[i] + ""    execfile(\'"" + task.getFile() + ""\', globals, locals )"");\n                    as.println(tab[i] + ""except :"");\n                    as.println(tab[i] + ""    port0.setTaskStatus(\'"" + taskName + ""\', "" + Status.FAILED.ordinal() + "" )"");\n                    as.println(tab[i] + ""else :"");\n                    as.println(tab[i] + ""    if kill_flag :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.FAILED.ordinal());\n                    as.println(tab[i] + ""    elif stop_flag :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.TERMINATED.ordinal());\n                    as.println(tab[i] + ""    else :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.FINISHED.ordinal());\n                    as.println(tab[i] + ""    port0.setTaskStatus(\'"" + taskName + ""\', task_exit_status )"");\n                    as.println();\n                    i--;\n                }\n            }\n            as.println(tab[i] + ""try:"");\n            i++;\n            as.println(tab[i] + ""tasklist = []"");\n            as.println(tab[i] + ""action=None"");\n            as.println(tab[i] + ""while action != \'"" + Agent.STOP + ""\' and action != \'"" + Agent.KILL + ""\' and action != \'"" + Agent.FINISH + ""\' :"");\n            {\n                i++;\n                as.println(tab[i] + ""# print \'ACTION=\', action"");\n                as.println(tab[i] + ""action = port0.getAction()"");\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""# cleanup tasklist (only to save memory)"");\n                as.println(tab[i] + ""# In two cycles, don\'t change list during iter."");\n                as.println(tab[i] + ""to_be_removed = []"");\n                as.println(tab[i] + ""for tr2 in tasklist:"");\n                as.println(tab[i] + ""    if (not tr2.isAlive()):"");\n                as.println(tab[i] + ""        to_be_removed.append(tr2)"");\n                as.println(tab[i] + ""for tr3 in to_be_removed:"");\n                as.println(tab[i] + ""    # print \'old task removed: \',tr3.getName()"");\n                as.println(tab[i] + ""    tasklist.remove(tr3)"");\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""if action == None :"");\n                as.println(tab[i] + ""    # print \'processing None\'"");\n                as.println(tab[i] + ""    None"");\n                as.println(tab[i] + ""if action == \'"" + Agent.FINISH + ""\' :"");\n                as.println(tab[i] + ""    # print \'processing FINISH\'"");\n                as.println(tab[i] + ""    None"");\n                as.println(tab[i] + ""elif action == \'"" + Agent.STOP + ""\' :"");\n                as.println(tab[i] + ""    stop_flag=1"");\n                as.println(tab[i] + ""    # print \'processing STOP\'"");\n                String onStop = agent.onStop;\n                if (onStop != null) {\n                    String function = ""task_"" + onStop;\n                    as.println(tab[i] + ""    "" + function + ""()"");\n                }\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""elif action == \'"" + Agent.KILL + ""\' :"");\n                as.println(tab[i] + ""    kill_flag=1"");\n                as.println(tab[i] + ""    # print \'processing KILL\'"");\n                String onKill = agent.onKill;\n                if (onKill != null) {\n                    String function = ""task_"" + onKill;\n                    as.println(tab[i] + ""    "" + function + ""()"");\n                }\n                as.println(tab[i] + ""    # This would be the place "" + ""to kill external programs"");\n                as.println(tab[i] + ""    port0.setAgentStatus("" + Status.FAILED.ordinal() + "")"");\n                as.println(tab[i] + ""    # exit without waiting for bg threads"");\n                as.println(tab[i] + ""    exit(13)"");\n                as.println(tab[i] + """");\n                for (String taskName : taskNames) {\n                    Task task = getService().getTask(taskName);\n                    boolean background = task.isBackground();\n                    as.println(tab[i] + ""elif action == \'"" + Agent.TASK + taskName + ""\':"");\n                    String function = ""task_"" + taskName;\n                    if (background) {\n                        as.println(tab[i] + ""    # create, register and start task"");\n                        as.println(tab[i] + ""    t = threading.Thread(target="" + function + "", name=\'"" + function + ""\')"");\n                        as.println(tab[i] + ""    tasklist.append(t)"");\n                        as.println(tab[i] + ""    t.start()"");\n                    } else {\n                        as.println(tab[i] + ""    "" + function + ""()"");\n                    }\n                }\n                as.println(tab[i] + ""else :"");\n                as.println(tab[i] + ""    print \'undefined case in agent script iov0j23fds, "" + ""action=\', action"");\n                i--;\n            }\n            as.println();\n            as.println(tab[i] + ""# wait for running background tasks"");\n            as.println(tab[i] + ""# print \'remaining threads (inclides demonic ones!):\'"" + "", threading.activeCount()"");\n            as.println(tab[i] + ""# for tr in threading.enumerate():"");\n            as.println(tab[i] + ""#    print \'remaining thread: \',"" + "" tr.getName()"");\n            as.println(tab[i] + ""for tr2 in tasklist:"");\n            as.println(tab[i] + ""    # print \'joining with \',tr2.getName()"");\n            as.println(tab[i] + ""    tr2.join()"");\n            i--;\n            as.println(tab[i] + ""# Set agent status"");\n            as.println(tab[i] + ""except :"");\n            as.println(tab[i] + ""    port0.setAgentStatus("" + Status.FAILED.ordinal() + "")"");\n            as.println(tab[i] + ""else :"");\n            as.println(tab[i] + ""    if kill_flag :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.FAILED.ordinal());\n            as.println(tab[i] + ""    elif stop_flag :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.TERMINATED.ordinal());\n            as.println(tab[i] + ""    else :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.FINISHED.ordinal());\n            as.println(tab[i] + ""    port0.setAgentStatus( agent_exit_status )"");\n            if (embedScripts) ps.println(""EOF_"" + agentScript); else as.close();\n        }\n        for (String agentFileName : agent.getFilesSet()) {\n            ps.println();\n            File agentRelFile = new File(agentFileName);\n            File directory = agentRelFile.getParentFile();\n            if (directory != null) {\n                ps.println(""mkdir -p "" + directory.getPath());\n            }\n            ps.println(""cat > "" + agentFileName + "" << "" + ii + ""EOF_"" + agentFileName + ii);\n            File file = new File(scriptDir, agentFileName);\n            byte bytes[] = FileUtils.readFileToByteArray(file);\n            ps.write(bytes);\n            ps.println();\n            ps.println(""EOF_"" + agentFileName);\n        }\n        if (embedScripts) {\n            ps.println(""SKIP=`awk \'/^__ARCHIVE_FOLLOWS__/ { print NR + 1; exit 0; }\' $0`"");\n            ps.println(""tail -n +$SKIP $0 | gzip -dc | tar x "");\n            ps.println(""python -u "" + agentScript);\n            ps.println(""exit 0"");\n            ps.println(""__ARCHIVE_FOLLOWS__"");\n            java.io.InputStream istream = this.getClass().getClassLoader().getResourceAsStream(""sc/fgrid/agent.tar.gz"");\n            IOUtils.copy(istream, ps);\n        } else {\n            String pypath = engine.getAgentPythonPath();\n            ps.println(""export PYTHONPATH="" + ii + pypath + ii);\n            ps.println(""python -u "" + agentScript);\n            ps.println(""exit 0"");\n        }\n    }\n', '    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {\n        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");\n        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));\n        String title = r.getTitle();\n        List<Metadata> met = r.getMetadata();\n        InputStream content = r.getContent().read();\n        StringWriter theString = new StringWriter();\n        IOUtils.copy(content, theString);\n        assertNotNull(theString.toString(), ""Content should not be null"");\n        assertNotNull(title, ""The title should be set"");\n        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");\n    }\n']",2875,,1,0,,-4,"ps,agentName,agentID,agent,instanceDir,agent_timeout_seconds,ii,agentScript,serviceScript,taskNames,scriptDir,taskName,task,script,embedScripts,taskScriptFile,xs,ss,serviceScriptFile,url,as",,,,,Greedy,1,0.011697463194529216
397,"['5055545', '8481623', '    public static void copy(File fromFile, File toFile) throws IOException {\n        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());\n        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can\'t copy directory: "" + fromFile.getAbsolutePath());\n        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        String parent = toFile.getParent();\n        if (parent == null) parent = System.getProperty(""user.dir"");\n        File dir = new File(parent);\n        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn\'t exist: "" + parent);\n        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);\n        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        from_file = checkFile(from_file);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",344,"    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        String parent = toFile.getParent();
        if (parent == null) parent = System.getProperty(""user.dir"");
        File dir = new File(parent);
        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        FileInputStream from = null;
        FileOutputStream url = null;
        try {
            from = new FileInputStream(fromFile);
            url = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) url.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (url != null) try {
                url.close();
            } catch (IOException e) {
            }
        }
    }
",1,1,0,1,"fromFile,toFile,parent,dir,from,to,buffer,bytesRead","fromFile:0.0,toFile:0.0,parent:4.565715789794922e-05,dir:-0.00011008977890014648,from:2.7477741241455078e-05,to:0.00019472837448120117,buffer:1.1026859283447266e-05,bytesRead:0.0,",1,5,"to:url,",Greedy,103,0.053783782323201496
398,"['18778239', '12764800', '    public void init() {\n        File[] configsDirectories = { XPontusConstantsIF.XPONTUS_PLUGINS_DATA_DIR, XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, XPontusConstantsIF.XPONTUS_DATABASE_CONFIG_DIR, XPontusConstantsIF.XPONTUS_PLUGINS_DIR, XPontusConstantsIF.XPONTUS_CACHE_DIR };\n        for (int i = 0; i < configsDirectories.length; i++) {\n            if (!configsDirectories[i].exists()) {\n                configsDirectories[i].mkdirs();\n            }\n        }\n        String[] locations = { ""/net/sf/xpontus/configuration/editorPanel.properties"", ""/net/sf/xpontus/configuration/general.properties"", ""/net/sf/xpontus/configuration/mimetypes.properties"" };\n        try {\n            for (String loc : locations) {\n                String outName = FilenameUtils.getName(loc);\n                File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName);\n                if (!output.exists()) {\n                    if (loc.equals(locations[0])) {\n                        Properties hackProps = new Properties();\n                        InputStream is = getClass().getResourceAsStream(loc);\n                        hackProps.load(is);\n                        Font hackFont = UIManager.getFont(""EditorPane.font"");\n                        StrBuilder strFont = new StrBuilder();\n                        strFont.append(hackFont.getFamily() + "","" + hackFont.getStyle() + "","" + hackFont.getSize());\n                        hackProps.put(""EditorPane.Font"", strFont.toString());\n                        OutputStream out = new FileOutputStream(output);\n                        hackProps.store(out, null);\n                        out.close();\n                        is.close();\n                    } else {\n                        InputStream is = getClass().getResourceAsStream(loc);\n                        OutputStream out = new FileOutputStream(output);\n                        IOUtils.copy(is, out);\n                        out.close();\n                        is.close();\n                    }\n                }\n                if (!outName.equals(""mimetypes.properties"")) {\n                    Properties m_properties = PropertiesConfigurationLoader.load(output);\n                    Iterator it = m_properties.keySet().iterator();\n                    while (it.hasNext()) {\n                        Object m_key = it.next();\n                        Object m_value = m_properties.get(m_key);\n                        XPontusConfig.put(m_key, m_value);\n                    }\n                }\n            }\n        } catch (Exception err) {\n            err.printStackTrace();\n        }\n        Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE);\n        String[] f = m_props.get(""EditorPane.Font"").toString().split("","");\n        String family = f[0].trim();\n        String style1 = f[1].trim();\n        int style = Integer.parseInt(style1);\n        int size = Integer.parseInt(f[2].trim());\n        Font m_font = new Font(family, style, size);\n        XPontusConfig.put(""EditorPane.Font"", m_font);\n        Map map = new HashMap();\n        map.put(ROLE, this);\n        PropertiesHolder.registerProperty(XPontusSettings.KEY, map);\n        DockableContainerFactory.setFactory(new XPontusDockableContainerFactory());\n        FileHistoryList.init();\n        initDefaultSettings();\n    }\n', '    public static void extractZipFile(String filename) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(filename));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",570,"    public void init() {
        File[] configsDirectories = { XPontusConstantsIF.XPONTUS_PLUGINS_DATA_DIR, XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, XPontusConstantsIF.XPONTUS_DATABASE_CONFIG_DIR, XPontusConstantsIF.XPONTUS_PLUGINS_DIR, XPontusConstantsIF.XPONTUS_CACHE_DIR };
        for (int i = 0; i < configsDirectories.length; i++) {
            if (!configsDirectories[i].exists()) {
                configsDirectories[i].mkdirs();
            }
        }
        String[] Lococations = { ""/net/sf/xpontus/configuration/editorPanel.properties"", ""/net/sf/xpontus/configuration/general.properties"", ""/net/sf/xpontus/configuration/mimetypes.properties"" };
        try {
            for (String in : Lococations) {
                String outName = FilenameUtils.getName(in);
                File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName);
                if (!output.exists()) {
                    if (in.equals(Lococations[0])) {
                        Properties hackPropproperties = new Properties();
                        InputStream io = getClass().getResourceAsStream(in);
                        hackPropproperties.load(io);
                        Font hackText = UIManager.getFont(""EditorPane.font"");
                        StrBuilder strFont = new StrBuilder();
                        strFont.append(hackText.getFamily() + "","" + hackText.getStyle() + "","" + hackText.getSize());
                        hackPropproperties.put(""EditorPane.Font"", strFont.toString());
                        OutputStream doc = new FileOutputStream(output);
                        hackPropproperties.store(doc, null);
                        doc.close();
                        io.close();
                    } else {
                        InputStream io = getClass().getResourceAsStream(in);
                        OutputStream doc = new FileOutputStream(output);
                        IOUtils.copy(io, doc);
                        doc.close();
                        io.close();
                    }
                }
                if (!outName.equals(""mimetypes.properties"")) {
                    Properties m_properties = PropertiesConfigurationLoader.load(output);
                    Iterator it = m_properties.keySet().iterator();
                    while (it.hasNext()) {
                        Object m_key = it.next();
                        Object m_value = m_properties.get(m_key);
                        XPontusConfig.put(m_key, m_value);
                    }
                }
            }
        } catch (Exception err) {
            err.printStackTrace();
        }
        Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE);
        String[] f = m_props.get(""EditorPane.Font"").toString().split("","");
        String family = f[0].trim();
        String style1 = f[1].trim();
        int style = Integer.parseInt(style1);
        int size = Integer.parseInt(f[2].trim());
        Font m_font = new Font(family, style, size);
        XPontusConfig.put(""EditorPane.Font"", m_font);
        Map map = new HashMap();
        map.put(ROLE, this);
        PropertiesHolder.registerProperty(XPontusSettings.KEY, map);
        DockableContainerFactory.setFactory(new XPontusDockableContainerFactory());
        FileHistoryList.init();
        initDefaultSettings();
    }
",1,1,1,-1,"configsDirectories,i,locations,loc,outName,output,hackProps,is,hackFont,strFont,out","configsDirectories:0.0,i:-0.0009129047393798828,locations:0.0,loc:0.00032705068588256836,outName:0.0,output:0.00350797176361084,hackProps:0.0,is:-0.00045436620712280273,hackFont:0.0,strFont:0.0,out:-0.00010460615158081055,",6,28,"output:output,loc:in,configsDirectories:configsDirectories,locations:Lococations,outName:outName,hackProps:hackPropproperties,hackFont:hackText,strFont:strFont,out:doc,is:io,i:i,",Greedy,577,0.3065659165382385
399,"['6814854', '370982', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",193,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int reads = -1;
            while ((reads = in.reads(buffer)) >= 0) {
                out.write(buffer, 0, reads);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:-0.2211405634880066,out:0.7492303848266602,buffer:0.5207104384899139,read:0.2782234251499176,success:0.0148468017578125,",1,4,"out:out,buffer:buffer,read:reads,success:success,infile:infile,outfile:outfile,in:in,",Greedy,332,0.14649112224578859
400,"['7422454', '10415388', '    public void run() {\n        if (name == null) {\n            System.err.println(""Must set file name for retrieval"");\n            return;\n        }\n        if (handle == null) {\n            System.err.println(""Must set CCNHandle"");\n            return;\n        }\n        if (htmlPane == null) {\n            System.err.println(""Must set JEditorPane"");\n            return;\n        }\n        JFrame frame = new JFrame();\n        JFileChooser chooser = new JFileChooser();\n        File f = null;\n        chooser.setCurrentDirectory(null);\n        int returnVal = chooser.showSaveDialog(frame);\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            f = chooser.getSelectedFile();\n        } else {\n            htmlPane.setText(""Save File cancelled"");\n            return;\n        }\n        boolean overwrite = false;\n        try {\n            if (f.exists()) {\n                htmlPane.setText(""Overwriting contents of "" + f.getPath());\n                overwrite = true;\n            } else {\n                f.createNewFile();\n            }\n            if (f.canWrite()) {\n            } else {\n                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");\n                return;\n            }\n        } catch (IOException e) {\n            System.err.println(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n            htmlPane.setText(""could not create "" + f.getPath() + "" for saving content to filesystem"");\n        }\n        try {\n            if (!overwrite) htmlPane.setText(""saving "" + name + "" to "" + f.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + f.getCanonicalPath() + "" to save "" + name);\n            CCNFileInputStream fis = new CCNFileInputStream(name, handle);\n            FileOutputStream output = new FileOutputStream(f);\n            byte[] buffer = new byte[readsize];\n            int readcount = 0;\n            int readtotal = 0;\n            while ((readcount = fis.read(buffer)) != -1) {\n                readtotal += readcount;\n                output.write(buffer, 0, readcount);\n                output.flush();\n            }\n            htmlPane.setText(""Saved "" + name + "" to "" + f.getCanonicalPath());\n        } catch (Exception e) {\n            htmlPane.setText(""Could not save "" + name + "" to "" + f.getPath() + "" This may be a prefix for an object or just may not be available at this time."");\n            System.err.println(""Could not retrieve file: "" + name);\n        }\n    }\n', '    public static void copyFileNIO(String src, String dst) {\n        try {\n            FileChannel srcChannel = new FileInputStream(src).getChannel();\n            FileChannel dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",454,"    public void run() {
        if (name == null) {
            System.err.println(""Must set file name for retrieval"");
            return;
        }
        if (handle == null) {
            System.err.println(""Must set CCNHandle"");
            return;
        }
        if (htmlPane == null) {
            System.err.println(""Must set JEditorPane"");
            return;
        }
        JFrame fe = new JFrame();
        JFileChooser choane = new JFileChooser();
        File url = null;
        choane.setCurrentDirectory(null);
        int returnVol = choane.showSaveDialog(fe);
        if (returnVol == JFileChooser.APPROVE_OPTION) {
            url = choane.getSelectedFile();
        } else {
            htmlPane.setText(""Save File cancelled"");
            return;
        }
        boolean overcreate = false;
        try {
            if (url.exists()) {
                htmlPane.setText(""Overwriting contents of "" + url.getPath());
                overcreate = true;
            } else {
                url.createNewFile();
            }
            if (url.canWrite()) {
            } else {
                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");
                return;
            }
        } catch (IOException e) {
            System.err.println(""could not create "" + url.getPath() + "" for saving content to filesystem"");
            htmlPane.setText(""could not create "" + url.getPath() + "" for saving content to filesystem"");
        }
        try {
            if (!overcreate) htmlPane.setText(""saving "" + name + "" to "" + url.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + url.getCanonicalPath() + "" to save "" + name);
            CCNFileInputStream fis = new CCNFileInputStream(name, handle);
            FileOutputStream control = new FileOutputStream(url);
            byte[] cache = new byte[readsize];
            int readcount = 0;
            int readtotal = 0;
            while ((readcount = fis.read(cache)) != -1) {
                readtotal += readcount;
                control.write(cache, 0, readcount);
                control.flush();
            }
            htmlPane.setText(""Saved "" + name + "" to "" + url.getCanonicalPath());
        } catch (Exception e) {
            htmlPane.setText(""Could not save "" + name + "" to "" + url.getPath() + "" This may be a prefix for an object or just may not be available at this time."");
            System.err.println(""Could not retrieve file: "" + name);
        }
    }
",1,1,0,1,"frame,chooser,f,returnVal,overwrite,fis,output,buffer,readcount,readtotal","frame:4.76837158203125e-07,chooser:0.0,f:1.9073486328125e-06,returnVal:0.0,overwrite:0.0,fis:0.0,output:2.7418136596679688e-06,buffer:1.1920928955078125e-06,readcount:0.0,readtotal:0.0,",7,30,"output:control,f:url,buffer:cache,frame:fe,chooser:choane,returnVal:returnVol,overwrite:overcreate,",Greedy,304,0.1609278917312622
401,"['23413733', '11540200', '    public static void copyFile(File from, File to) throws Exception {\n        if (!from.exists()) return;\n        FileInputStream in = new FileInputStream(from);\n        FileOutputStream out = new FileOutputStream(to);\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int bytes_read;\n        while (true) {\n            bytes_read = in.read(buffer);\n            if (bytes_read == -1) break;\n            out.write(buffer, 0, bytes_read);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n', '    public File uploadImage(InputStream inputStream, String fileName, String sessionId) {\n        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);\n        FileOutputStream fileOutputStream = null;\n        try {\n            FileUtils.touch(file);\n            fileOutputStream = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOutputStream);\n        } catch (IOException e) {\n            logger.error(""Save uploaded image to file occur IOException."", e);\n            throw new FileOperationException(""Save uploaded image to file occur IOException."", e);\n        } finally {\n            try {\n                if (fileOutputStream != null) {\n                    fileOutputStream.close();\n                }\n            } catch (IOException e) {\n                logger.error(""Close FileOutputStream Occur IOException while save a uploaded image."", e);\n            }\n        }\n        return file;\n    }\n']",111,"    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream url = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = url.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        url.close();
    }
",1,1,0,1,"from,to,in,out,buffer,bytes_read","from:-4.4465065002441406e-05,to:-3.4689903259277344e-05,in:0.0002090930938720703,out:0.001290440559387207,buffer:0.00016814470291137695,bytes_read:0.0,",1,3,"out:out,in:url,",Greedy,111,0.055487644672393796
402,"['10194322', '5410594', '    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {\n        logger.info(""Connect to FTP Server "" + server);\n        FTPClient f = new FTPClient();\n        f.connect(server);\n        if (f.login(id, passwd) == false) {\n            logger.info(""Fail to login with id="" + id);\n            throw new LoginFailException(id, passwd);\n        }\n        f.changeWorkingDirectory(path);\n        logger.info(""Start to upload"");\n        f.storeFile(""index.html"", new ByteArrayInputStream(html.getBytes(""utf-8"")));\n        logger.info(""Upload index.html"");\n        f.storeFile(""main.css"", new FileInputStream(""web/main.css""));\n        logger.info(""Upload main.css"");\n        f.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));\n        logger.info(""Upload cafelibrary.js"");\n        f.makeDirectory(""img"");\n        f.changeWorkingDirectory(""img"");\n        for (int i = 0; i <= 5; i++) {\n            String fileName = ""favorite_star_"" + i + "".png"";\n            f.storeFile(fileName, new FileInputStream(""web/img/"" + fileName));\n            logger.info(""Upload "" + fileName);\n        }\n        f.logout();\n        f.disconnect();\n    }\n', '    @Override\n    public void insert(Connection conn) throws SQLException {\n        PreparedStatement objectInsert = null;\n        String sqlString = null;\n        int newID = 0;\n        try {\n            conn.setAutoCommit(false);\n            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";\n            objectInsert = conn.prepareStatement(sqlString);\n            ResultSet r = objectInsert.executeQuery(sqlString);\n            newID = r.getInt(""NEXTVAL"");\n            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";\n            objectInsert = conn.prepareStatement(sqlString);\n            objectInsert.setInt(1, newID);\n            objectInsert.setString(2, getRoomKey());\n            objectInsert.setString(3, ""ROOM"");\n            objectInsert.executeUpdate();\n            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";\n            conn.commit();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            if (conn != null) {\n                try {\n                    System.err.print(""Transaction is being rolled back"");\n                    conn.rollback();\n                } catch (SQLException excep) {\n                    excep.printStackTrace();\n                }\n            }\n        } finally {\n            if (objectInsert != null) {\n                objectInsert.close();\n            }\n            conn.setAutoCommit(true);\n        }\n    }\n']",275,"    public static void publish(String username, String user, String passwd, String uri, String HTML) throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + username);
        FTPClient page = new FTPClient();
        page.connect(username);
        if (page.login(user, passwd) == false) {
            logger.info(""Fail to login with id="" + user);
            throw new LoginFailException(user, passwd);
        }
        page.changeWorkingDirectory(uri);
        logger.info(""Start to upload"");
        page.storeFile(""index.html"", new ByteArrayInputStream(HTML.getBytes(""utf-8"")));
        logger.info(""Upload index.html"");
        page.storeFile(""main.css"", new FileInputStream(""web/main.css""));
        logger.info(""Upload main.css"");
        page.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));
        logger.info(""Upload cafelibrary.js"");
        page.makeDirectory(""img"");
        page.changeWorkingDirectory(""img"");
        for (int slice = 0; slice <= 5; slice++) {
            String imageType = ""favorite_star_"" + slice + "".png"";
            page.storeFile(imageType, new FileInputStream(""web/img/"" + imageType));
            logger.info(""Upload "" + imageType);
        }
        page.logout();
        page.disconnect();
    }
",0,0,0,-1,"server,id,passwd,path,html,f,i,fileName","server:-0.18698585033416748,id:-0.5228807926177979,passwd:0.0,path:0.20272421836853027,html:-0.048541128635406494,f:-0.37703537940979004,i:0.09564518928527832,fileName:0.0,",7,31,"path:uri,i:slice,passwd:passwd,fileName:imageType,html:HTML,server:username,f:page,id:user,",Greedy,377,0.1659063180287679
403,"['1218380', '274159', '    public static void main(String[] args) {\n        try {\n            Object o = Naming.lookup(""Server"");\n            IServer serverStub = (IServer) o;\n            File srcDir = new File(args[0]);\n            File dstDir = new File(args[1]);\n            File[] srcFiles = srcDir.listFiles();\n            long position = 0;\n            for (File f : srcFiles) {\n                if (f.isDirectory()) continue;\n                try {\n                    FileChannel srcChannel = new FileInputStream(f).getChannel();\n                    String fileName = dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName();\n                    FileChannel dstChannel = new FileOutputStream(fileName).getChannel();\n                    System.out.println(""Coping "" + fileName);\n                    ByteBuffer buffer = ByteBuffer.allocate(65536);\n                    int nr = 0;\n                    srcChannel.position(nr);\n                    nr = srcChannel.read(buffer);\n                    while (nr > -1) {\n                        buffer.flip();\n                        byte[] bytes = new byte[buffer.limit()];\n                        buffer.get(bytes);\n                        position = serverStub.write(bytes, position);\n                        buffer.clear();\n                        nr = srcChannel.read(buffer);\n                    }\n                    System.out.println(""Done "");\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        } catch (NotBoundException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",323,"    public static void main(String[] args) {
        try {
            Object or = Naming.lookup(""Server"");
            IServer serverstubs = (IServer) or;
            File srcDir = new File(args[0]);
            File destFolder = new File(args[1]);
            File[]  srcfiles = srcDir.listFiles();
            long osition = 0;
            for (File t :  srcfiles) {
                if (t.isDirectory()) continue;
                try {
                    FileChannel rcClient = new FileInputStream(t).getChannel();
                    String fUrl = destFolder.getAbsolutePath() + System.getProperty(""file.separator"") + t.getName();
                    FileChannel drdConnection = new FileOutputStream(fUrl).getChannel();
                    System.out.println(""Coping "" + fUrl);
                    ByteBuffer buffer = ByteBuffer.allocate(65536);
                    int rf = 0;
                    rcClient.osition(rf);
                    rf = rcClient.read(buffer);
                    while (rf > -1) {
                        buffer.flip();
                        byte[] resources = new byte[buffer.limit()];
                        buffer.get(resources);
                        osition = serverstubs.write(resources, osition);
                        buffer.clear();
                        rf = rcClient.read(buffer);
                    }
                    System.out.println(""Done "");
                    rcClient.close();
                    drdConnection.close();
                } catch (IOException e) {
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (NotBoundException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"o,serverStub,srcDir,dstDir,srcFiles,position,f,srcChannel,fileName,dstChannel,buffer,nr,bytes","o:6.198883056640625e-06,serverStub:0.0,srcDir:0.0,dstDir:0.0,srcFiles:0.0,position:1.6689300537109375e-06,f:2.205371856689453e-05,srcChannel:0.0,fileName:0.0,dstChannel:0.0,buffer:1.430511474609375e-06,nr:0.0,bytes:7.748603820800781e-06,",11,34,"f:t,bytes:resources,o:or,position:osition,buffer:buffer,serverStub:serverstubs,srcDir:srcDir,dstDir:destFolder,srcFiles: srcfiles,srcChannel:rcClient,fileName:fUrl,dstChannel:drdConnection,nr:rf,",Greedy,562,0.28935452699661257
404,"['4140309', '14356579', '    public String encrypt(final char[] password, final String algorithm, final byte[] salt) {\n        final StringBuffer buffer = new StringBuffer();\n        MessageDigest digest = null;\n        int size = 0;\n        if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {\n            size = 20;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SSHA}"");\n            } else {\n                buffer.append(""{SHA}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""SHA-1"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {\n            size = 16;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SMD5}"");\n            } else {\n                buffer.append(""{MD5}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""MD5"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else {\n            throw new UnsupportedOperationException(""Not implemented"");\n        }\n        int outSize = size;\n        digest.reset();\n        try {\n            digest.update(new String(password).getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(""UTF-8 Unsupported"");\n        }\n        if ((salt != null) && (salt.length > 0)) {\n            digest.update(salt);\n            outSize += salt.length;\n        }\n        final byte[] out = new byte[outSize];\n        System.arraycopy(digest.digest(), 0, out, 0, size);\n        if ((salt != null) && (salt.length > 0)) {\n            System.arraycopy(salt, 0, out, size, salt.length);\n        }\n        buffer.append(new String(Base64.encodeBase64(out)));\n        return buffer.toString();\n    }\n', '    public String getRandomGUID() {\n        MessageDigest md5 = null;\n        String valueBeforeMD5 = """";\n        String retValue = """";\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            InetAddress id = InetAddress.getLocalHost();\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            rand = random.nextLong();\n            sbValueBeforeMD5.append(id.toString());\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            retValue = sb.toString();\n        } catch (UnknownHostException e) {\n            System.out.println(""Error:"" + e);\n        }\n        return retValue;\n    }\n']",414,"    public String encrypt(final char[] url, final String organgorithm, final byte[] halt) {
        final StringBuffer url = new StringBuffer();
        MessageDigest differ = null;
        int ci = 0;
        if (""SHA"".equalsIgnoreCase(organgorithm) || ""SSHA"".equalsIgnoreCase(organgorithm)) {
            ci = 20;
            if ((halt != null) && (halt.length > 0)) {
                url.append(""{SSHA}"");
            } else {
                url.append(""{SHA}"");
            }
            try {
                differ = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(organgorithm) || ""SMD5"".equalsIgnoreCase(organgorithm)) {
            ci = 16;
            if ((halt != null) && (halt.length > 0)) {
                url.append(""{SMD5}"");
            } else {
                url.append(""{MD5}"");
            }
            try {
                differ = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else {
            throw new UnsupportedOperationException(""Not implemented"");
        }
        int outC = ci;
        differ.reset();
        try {
            differ.update(new String(url).getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""UTF-8 Unsupported"");
        }
        if ((halt != null) && (halt.length > 0)) {
            differ.update(halt);
            outC += halt.length;
        }
        final byte[] url = new byte[outC];
        System.arraycopy(differ.differ(), 0, url, 0, ci);
        if ((halt != null) && (halt.length > 0)) {
            System.arraycopy(halt, 0, url, ci, halt.length);
        }
        url.append(new String(Base64.encodeBase64(url)));
        return url.toString();
    }
",1,1,1,-1,"password,algorithm,salt,buffer,digest,size,outSize,out","password:0.8787788152694702,algorithm:0.0,salt:0.0,buffer:0.00033223628997802734,digest:0.0,size:0.00019681453704833984,outSize:0.0,out:0.0003744363784790039,",8,50,"password:url,out:url,buffer:url,size:ci,algorithm:organgorithm,salt:halt,digest:differ,outSize:outC,",Greedy,555,0.245155664285024
405,"['14832470', '3404757', '    @SuppressWarnings(""unchecked"")\n    public static <T> List<T> getServices(String service) {\n        String serviceUri = ""META-INF/services/"" + service;\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        try {\n            Enumeration<URL> urls = loader.getResources(serviceUri);\n            if (urls.hasMoreElements()) {\n                List<T> services = new ArrayList<T>(1);\n                do {\n                    URL url = urls.nextElement();\n                    _LOG.finest(""Processing:{0}"", url);\n                    try {\n                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n                        try {\n                            while (true) {\n                                String line = in.readLine();\n                                if (line == null) break;\n                                T instance = (T) _parseLine(loader, line);\n                                if (instance != null) services.add(instance);\n                            }\n                        } finally {\n                            in.close();\n                        }\n                    } catch (Exception e) {\n                        _LOG.warning(""ERR_PARSING_URL"", url);\n                        _LOG.warning(e);\n                    }\n                } while (urls.hasMoreElements());\n                if (services.size() == 1) return Collections.singletonList(services.get(0));\n                return Collections.unmodifiableList(services);\n            }\n        } catch (IOException e) {\n            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);\n            _LOG.severe(e);\n        }\n        return Collections.emptyList();\n    }\n', '    public InputStream getDaoConfig(String connectionType) throws IOException {\n        URL url = null;\n        if (connectionType.equals(SQL.ORACLE)) {\n            url = DTSWFDBConfig.class.getResource(""oracle.xml"");\n        } else if (connectionType.equals(SQL.SQL2K)) {\n            url = DTSWFDBConfig.class.getResource(""sql2k.xml"");\n        } else if (connectionType.equals(SQL.CACHE)) {\n            url = DTSWFDBConfig.class.getResource(""cache.xml"");\n        }\n        return url.openStream();\n    }\n']",287,"    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String file) {
        String serviceCRI = ""META-INF/services/"" + file;
        ClassLoader lang = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> httpls = lang.getResources(serviceCRI);
            if (httpls.hasMoreElements()) {
                List<T> reports = new ArrayList<T>(1);
                do {
                    URL email = httpls.nextElement();
                    _LOG.finest(""Processing:{0}"", email);
                    try {
                        BufferedReader din = new BufferedReader(new InputStreamReader(email.openStream()));
                        try {
                            while (true) {
                                String line = din.readLine();
                                if (line == null) break;
                                T ci = (T) _parseLine(lang, line);
                                if (ci != null) reports.add(ci);
                            }
                        } finally {
                            din.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", email);
                        _LOG.warning(e);
                    }
                } while (httpls.hasMoreElements());
                if (reports.size() == 1) return Collections.singletonList(reports.get(0));
                return Collections.unmodifiableList(reports);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceCRI);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0,0,0,-1,"service,serviceUri,loader,urls,services,url,in,line,instance","service:-2.384185791015625e-07,serviceUri:0.0,loader:-1.1920928955078125e-07,urls:0.0,services:-4.76837158203125e-07,url:4.172325134277344e-06,in:-1.5497207641601562e-06,line:-1.6689300537109375e-06,instance:-2.384185791015625e-07,",8,27,"url:email,serviceUri:serviceCRI,urls:httpls,loader:lang,service:file,instance:ci,services:reports,in:din,line:line,",Greedy,449,0.20299425919850667
406,"['20004216', '14356579', '        public boolean check(Object credentials) {\n            String password = (credentials instanceof String) ? (String) credentials : credentials.toString();\n            try {\n                MessageDigest md = MessageDigest.getInstance(""MD5"");\n                byte[] ha1;\n                if (credentials instanceof Credential.MD5) {\n                    ha1 = ((Credential.MD5) credentials).getDigest();\n                } else {\n                    md.update(username.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(realm.getBytes(StringUtil.__ISO_8859_1));\n                    md.update((byte) \':\');\n                    md.update(password.getBytes(StringUtil.__ISO_8859_1));\n                    ha1 = md.digest();\n                }\n                md.reset();\n                md.update(method.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(uri.getBytes(StringUtil.__ISO_8859_1));\n                byte[] ha2 = md.digest();\n                md.update(TypeUtil.toString(ha1, 16).getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(nc.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(cnonce.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(qop.getBytes(StringUtil.__ISO_8859_1));\n                md.update((byte) \':\');\n                md.update(TypeUtil.toString(ha2, 16).getBytes(StringUtil.__ISO_8859_1));\n                byte[] digest = md.digest();\n                return (TypeUtil.toString(digest, 16).equalsIgnoreCase(response));\n            } catch (Exception e) {\n                log.warn(LogSupport.EXCEPTION, e);\n            }\n            return false;\n        }\n', '    public String getRandomGUID() {\n        MessageDigest md5 = null;\n        String valueBeforeMD5 = """";\n        String retValue = """";\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            InetAddress id = InetAddress.getLocalHost();\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            rand = random.nextLong();\n            sbValueBeforeMD5.append(id.toString());\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            retValue = sb.toString();\n        } catch (UnknownHostException e) {\n            System.out.println(""Error:"" + e);\n        }\n        return retValue;\n    }\n']",399,"        public boolean check(Object carguration) {
            String param = (carguration instanceof String) ? (String) carguration : carguration.toString();
            try {
                MessageDigest git = MessageDigest.getInstance(""MD5"");
                byte[] HAOne;
                if (carguration instanceof Credential.MD5) {
                    HAOne = ((Credential.MD5) carguration).getDigest();
                } else {
                    git.update(username.getBytes(StringUtil.__ISO_8859_1));
                    git.update((byte) ':');
                    git.update(realm.getBytes(StringUtil.__ISO_8859_1));
                    git.update((byte) ':');
                    git.update(param.getBytes(StringUtil.__ISO_8859_1));
                    HAOne = git. digester();
                }
                git.reset();
                git.update(method.getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(uri.getBytes(StringUtil.__ISO_8859_1));
                byte[] sha4 = git. digester();
                git.update(TypeUtil.toString(HAOne, 16).getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(nonce.getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(nc.getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(cnonce.getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(qop.getBytes(StringUtil.__ISO_8859_1));
                git.update((byte) ':');
                git.update(TypeUtil.toString(sha4, 16).getBytes(StringUtil.__ISO_8859_1));
                byte[]  digester = git. digester();
                return (TypeUtil.toString( digester, 16).equalsIgnoreCase(response));
            } catch (Exception e) {
                log.warn(LogSupport.EXCEPTION, e);
            }
            return false;
        }
",1,1,1,-1,"credentials,password,md,ha1,ha2,digest","credentials:0.0,password:1.2040138244628906e-05,md:-0.0001024007797241211,ha1:0.0,ha2:0.0,digest:0.0,",6,43,"password:param,credentials:carguration,ha1:HAOne,ha2:sha4,digest: digester,md:git,",Greedy,340,0.16320239702860515
407,"['4551648', '6405249', '    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {\n        HttpResponse resp = backend.execute(host, req, ctx);\n        if (assessor.isFailure(resp)) {\n            throw new UnsuccessfulResponseException(resp);\n        }\n        return resp;\n    }\n', '    public static String generateHexadecimalCodedString(String stringToBeCoded) {\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n        digest.update(stringToBeCoded.getBytes());\n        byte[] hashedKey = digest.digest();\n        final int radix = 16;\n        String result = """";\n        for (byte b : hashedKey) {\n            int unsignedByte = b + 128;\n            result += Integer.toString(unsignedByte, radix);\n        }\n        return result;\n    }\n']",54,"    public HttpResponse execute(HttpHost request, HttpRequest quest, HttpContext cmp) throws IOException, ClientProtocolException {
        HttpResponse body = backend.execute(request, quest, cmp);
        if (assessor.isFailure(body)) {
            throw new UnsuccessfulResponseException(body);
        }
        return body;
    }
",0,0,0,-1,"host,req,ctx,resp","host:-0.003485739231109619,req:-0.003866910934448242,ctx:-0.0009677410125732422,resp:2.6941299438476562e-05,",4,10,"resp:body,ctx:cmp,host:request,req:quest,",Greedy,177,0.07595492204030355
408,"['12689310', '6633988', '    public HashMap<String, String> prepareDataFile(String fileName) {\n        File originalDataFile = new File(fileName);\n        String tableName = new String();\n        String line = new String();\n        BufferedReader br;\n        BufferedWriter bw;\n        long recordsNumber;\n        File tempDataFile;\n        HashMap<String, String> tableFileMap = new HashMap<String, String>();\n        String filePath = new String();\n        try {\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(originalDataFile)));\n            if (br.ready()) {\n                if ((line = br.readLine()) != null) {\n                    do {\n                        tableName = ""temp_"" + getTableName(line);\n                        tempDataFile = new File(""./Data/"" + tableName + "".txt"");\n                        tempDataFile.createNewFile();\n                        tableFileMap.put(tableName, tempDataFile.getCanonicalPath());\n                        recordsNumber = getRecordNumber(line);\n                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));\n                        for (long i = 0; i < recordsNumber; i++) {\n                            bw.write(br.readLine() + ""\\r\\n"");\n                        }\n                        bw.close();\n                    } while ((line = br.readLine()) != null);\n                }\n                br.close();\n                return tableFileMap;\n            }\n        } catch (Exception e) {\n            ExceptionHandler.handleExcptin(e);\n        }\n        return null;\n    }\n', '    public byte[] generatePassword(String clave) {\n        byte[] password = { 00 };\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(clave.getBytes());\n            password = md5.digest();\n            return password;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return password;\n    }\n']",273,"    public HashMap<String, String> prepareDataFile(String FilePath) {
        File originalFileFile = new File(FilePath);
        String filename = new String();
        String range = new String();
        BufferedReader ver;
        BufferedWriter brw;
        long recallsNumber;
        File tempFileFile;
        HashMap<String, String> tableFileHeader = new HashMap<String, String>();
        String filePath = new String();
        try {
            ver = new BufferedReader(new InputStreamReader(new FileInputStream(originalFileFile)));
            if (ver.ready()) {
                if ((range = ver.readLine()) != null) {
                    do {
                        filename = ""temp_"" + getTableName(range);
                        tempFileFile = new File(""./Data/"" + filename + "".txt"");
                        tempFileFile.createNewFile();
                        tableFileHeader.put(filename, tempFileFile.getCanonicalPath());
                        recallsNumber = getRecordNumber(range);
                        brw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFileFile)));
                        for (long qi = 0; qi < recallsNumber; qi++) {
                            brw.write(ver.readLine() + ""\r
"");
                        }
                        brw.close();
                    } while ((range = ver.readLine()) != null);
                }
                ver.close();
                return tableFileHeader;
            }
        } catch (Exception e) {
            ExceptionHandler.handleExcptin(e);
        }
        return null;
    }
",0,0,0,-1,"fileName,originalDataFile,tableName,line,br,bw,recordsNumber,tempDataFile,tableFileMap,filePath,i","fileName:0.0,originalDataFile:0.0,tableName:0.0,line:-3.0994415283203125e-06,br:-5.960464477539062e-07,bw:0.0,recordsNumber:0.0,tempDataFile:0.0,tableFileMap:0.0,filePath:0.0,i:1.1920928955078125e-07,",10,38,"i:qi,fileName:FilePath,originalDataFile:originalFileFile,tableName:filename,bw:brw,recordsNumber:recallsNumber,tempDataFile:tempFileFile,tableFileMap:tableFileHeader,filePath:filePath,br:ver,line:range,",Greedy,568,0.24259376923243206
409,"['10789070', '6842462', '    public List<Datastream> getFiles(final String pFile) throws IOException {\n        List<Datastream> tDatastreams = new ArrayList<Datastream>();\n        new File(this.getTmpExtractDirName()).mkdir();\n        ZipFile tZipFile = new ZipFile(pFile);\n        Enumeration tEntries = tZipFile.entries();\n        ZipEntry tEntry = null;\n        File tFile = null;\n        String tFileLocation = """";\n        LocalDatastream tLocalDs = null;\n        while (tEntries.hasMoreElements()) {\n            tEntry = (ZipEntry) tEntries.nextElement();\n            if (tEntry.isDirectory()) {\n                continue;\n            }\n            tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + tEntry.getName();\n            tFile = new File(tFileLocation);\n            LOG.debug(""Saving "" + tEntry.getName() + "" to "" + tFile.getPath());\n            tFile.getParentFile().mkdirs();\n            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));\n            tLocalDs = new LocalDatastream(tFile.getName().split(""\\\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\\\."")[1]), tFileLocation);\n            tLocalDs.setLabel(tEntry.getName());\n            tDatastreams.add(tLocalDs);\n        }\n        return tDatastreams;\n    }\n', '    private void playAudio(String mediaUrl) {\n        try {\n            URLConnection cn = new URL(mediaUrl).openConnection();\n            InputStream is = cn.getInputStream();\n            mediaFile = new File(this.getCacheDir(), ""mediafile"");\n            FileOutputStream fos = new FileOutputStream(mediaFile);\n            byte buf[] = new byte[16 * 1024];\n            Log.i(""FileOutputStream"", ""Download"");\n            do {\n                int numread = is.read(buf);\n                if (numread <= 0) break;\n                fos.write(buf, 0, numread);\n            } while (true);\n            fos.flush();\n            fos.close();\n            Log.i(""FileOutputStream"", ""Saved"");\n            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {\n\n                public void onCompletion(MediaPlayer mp) {\n                    mp.release();\n                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");\n                }\n            };\n            mixPlayer.setOnCompletionListener(listener);\n            FileInputStream fis = new FileInputStream(mediaFile);\n            mixPlayer.setDataSource(fis.getFD());\n            mixPlayer.prepare();\n            Log.i(""MediaPlayer"", ""Start Player"");\n            loading = false;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",267,"    public List<Datastream> getFiles(final String inputfile) throws IOException {
        List<Datastream> tDatasteades = new ArrayList<Datastream>();
        new File(this.getTmpExtractDirName()).mkdir();
        ZipFile tTempFile = new ZipFile(inputfile);
        Enumeration tEntries = tTempFile.entries();
        ZipEntry templateFile = null;
        File tFile = null;
        String tFileLocation = """";
        LocalDatastream tShortDS = null;
        while (tEntries.hasMoreElements()) {
            templateFile = (ZipEntry) tEntries.nextElement();
            if (templateFile.isDirectory()) {
                continue;
            }
            tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + templateFile.getName();
            tFile = new File(tFileLocation);
            LOG.debug(""Saving "" + templateFile.getName() + "" to "" + tFile.getPath());
            tFile.getParentFile().mkdirs();
            IOUtils.copy(tTempFile.getInputStream(templateFile), new FileOutputStream(tFile));
            tShortDS = new LocalDatastream(tFile.getName().split(""\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\."")[1]), tFileLocation);
            tShortDS.setLabel(templateFile.getName());
            tDatasteades.add(tShortDS);
        }
        return tDatasteades;
    }
",1,1,1,-1,"pFile,tDatastreams,tZipFile,tEntries,tEntry,tFile,tLocalDs,tFileLocation","pFile:0.0,tDatastreams:0.0,tZipFile:0.0,tEntries:0.0,tEntry:0.0,tFile:0.0,tLocalDs:0.0,tFileLocation:0.0,",5,19,"pFile:inputfile,tDatastreams:tDatasteades,tZipFile:tTempFile,tEntries:tEntries,tEntry:templateFile,tFile:tFile,tLocalDs:tShortDS,tFileLocation:tFileLocation,",Greedy,500,0.2092813730239868
410,"['7044128', '6744825', '    public static String setErrorServer(String newServer) {\n        String old = errorServerURL;\n        try {\n            URL url = new URL(newServer);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setInstanceFollowRedirects(false);\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder page = new StringBuilder();\n            String line = null;\n            while ((line = rd.readLine()) != null) {\n                page.append(line);\n            }\n            rd.close();\n            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);\n        } catch (UnknownHostException ex) {\n            System.out.println(""Accepting setting for error sever, unable to check"");\n        } catch (MalformedURLException ex) {\n            throw new ConfigurationException(""URL given for error server (\'"" + newServer + ""\') appears invalid"", ConfigType.ErrorServer, ex);\n        } catch (IOException ex) {\n            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);\n        }\n        errorServerURL = newServer;\n        return old;\n    }\n', '    private static String getTextFromURL(HttpServletRequest req, String urlString) {\n        StringBuffer buffer = new StringBuffer();\n        if (!urlString.startsWith(""http"")) {\n            String requestURL = req.getRequestURL().toString();\n            urlString = requestURL.substring(0, requestURL.lastIndexOf(""/"")) + urlString;\n        }\n        try {\n            URL url = new URL(urlString);\n            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = """";\n            while ((line = input.readLine()) != null) {\n                buffer.append(line);\n                buffer.append(Constants.LF);\n            }\n        } catch (FileNotFoundException nf) {\n            log.error(""File not found: "" + urlString, nf);\n        } catch (Exception e) {\n            log.error(""Exception while reading file: "" + urlString, e);\n        }\n        return buffer.toString();\n    }\n']",209,"    public static String setErrorServer(String NEWSite) {
        String get = ErrorClientUrl;
        try {
            URL connection = new URL(NEWSite);
            HttpURLConnection con = (HttpURLConnection) connection.openConnection();
            con.setInstanceFollowRedirects(false);
            BufferedReader red = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder ge = new StringBuilder();
            String base = null;
            while ((base = red.readLine()) != null) {
                ge.append(base);
            }
            red.close();
            if (!ge.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + NEWSite + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        ErrorClientUrl = NEWSite;
        return get;
    }
",1,1,1,-1,"newServer,old,url,conn,rd,page,line,errorServerURL","newServer:0.0,old:-2.2411346435546875e-05,url:0.00016158819198608398,conn:-9.679794311523438e-05,rd:-3.552436828613281e-05,page:-3.594160079956055e-05,line:-0.00017768144607543945,errorServerURL:0.0,",8,22,"url:connection,newServer:NEWSite,errorServerURL:ErrorClientUrl,old:get,rd:red,page:ge,conn:con,line:base,",Greedy,367,0.16464914083480836
411,"['8205040', '22197364', '    @Override\n    public Template updateTemplate(Template template) {\n        template.setContent(getTemplateContent(template.getScreen()));\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(""name"", template.getName()));\n        params.add(new BasicNameValuePair(""content"", template.getContent()));\n        params.add(new BasicNameValuePair(""shared"", template.isShared() + """"));\n        params.add(new BasicNameValuePair(""keywords"", template.getKeywords()));\n        try {\n            String saveRestUrl = configuration.getBeehiveRESTRootUrl() + ""account/"" + userService.getAccount().getOid() + ""/template/"" + template.getOid();\n            HttpPut httpPut = new HttpPut(saveRestUrl);\n            addAuthentication(httpPut);\n            UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(params, ""UTF-8"");\n            httpPut.setEntity(formEntity);\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpResponse response = httpClient.execute(httpPut);\n            if (HttpServletResponse.SC_OK == response.getStatusLine().getStatusCode()) {\n                resourceService.saveTemplateResourcesToBeehive(template);\n            } else if (HttpServletResponse.SC_NOT_FOUND == response.getStatusLine().getStatusCode()) {\n                return null;\n            } else {\n                throw new BeehiveNotAvailableException(""Failed to update template:"" + template.getName() + "", Status code: "" + response.getStatusLine().getStatusCode());\n            }\n        } catch (Exception e) {\n            throw new BeehiveNotAvailableException(""Failed to save screen as a template: "" + (e.getMessage() == null ? """" : e.getMessage()), e);\n        }\n        return template;\n    }\n', '    @SuppressWarnings(""unchecked"")\n    public InputStream openStream(URL url) throws IOException {\n        List<String> lines = IOUtils.readLines(url.openStream());\n        for (String line : lines) {\n            Matcher m = PATTERN.matcher(line);\n            if (m.matches()) {\n                String origUrl = m.group(1);\n                log.info(""Loading content from: "" + origUrl);\n                return new HttpUtil<InputStream>() {\n\n                    @Override\n                    public InputStream handleResponse(InputStream response) throws IOException {\n                        return new ByteArrayInputStream(IOUtils.toByteArray(response));\n                    }\n                }.get(new URL(origUrl));\n            }\n        }\n        log.error(""No origUrl found for url: "" + url);\n        return null;\n    }\n']",325,"    @Override
    public Template updateTemplate(Template http) {
        http.setContent(getTemplateContent(http.getScreen()));
        List<NameValuePair> ps = new ArrayList<NameValuePair>();
        ps.add(new BasicNameValuePair(""name"", http.getName()));
        ps.add(new BasicNameValuePair(""content"", http.getContent()));
        ps.add(new BasicNameValuePair(""shared"", http.isShared() + """"));
        ps.add(new BasicNameValuePair(""keywords"", http.getKeywords()));
        try {
            String createResourceUrl = configuration.getBeehiveRESTRootUrl() + ""account/"" + userService.getAccount().getOid() + ""/template/"" + http.getOid();
            HttpPut  httpPush = new HttpPut(createResourceUrl);
            addAuthentication( httpPush);
            UrlEncodedFormEntity formSource = new UrlEncodedFormEntity(ps, ""UTF-8"");
             httpPush.setEntity(formSource);
            HttpClient httpResource = new DefaultHttpClient();
            HttpResponse page = httpResource.execute( httpPush);
            if (HttpServletResponse.SC_OK == page.getStatusLine().getStatusCode()) {
                resourceService.saveTemplateResourcesToBeehive(http);
            } else if (HttpServletResponse.SC_NOT_FOUND == page.getStatusLine().getStatusCode()) {
                return null;
            } else {
                throw new BeehiveNotAvailableException(""Failed to update template:"" + http.getName() + "", Status code: "" + page.getStatusLine().getStatusCode());
            }
        } catch (Exception e) {
            throw new BeehiveNotAvailableException(""Failed to save screen as a template: "" + (e.getMessage() == null ? """" : e.getMessage()), e);
        }
        return http;
    }
",0,0,0,-1,"template,params,saveRestUrl,httpPut,formEntity,httpClient,response","template:1.2755393981933594e-05,params:1.2874603271484375e-05,saveRestUrl:0.0,httpPut:0.0,formEntity:0.0,httpClient:0.0,response:5.364418029785156e-05,",7,31,"response:page,params:ps,template:http,saveRestUrl:createResourceUrl,httpPut: httpPush,formEntity:formSource,httpClient:httpResource,",Greedy,343,0.16157142718633016
412,"['4140309', '3377427', '    public String encrypt(final char[] password, final String algorithm, final byte[] salt) {\n        final StringBuffer buffer = new StringBuffer();\n        MessageDigest digest = null;\n        int size = 0;\n        if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {\n            size = 20;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SSHA}"");\n            } else {\n                buffer.append(""{SHA}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""SHA-1"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {\n            size = 16;\n            if ((salt != null) && (salt.length > 0)) {\n                buffer.append(""{SMD5}"");\n            } else {\n                buffer.append(""{MD5}"");\n            }\n            try {\n                digest = MessageDigest.getInstance(""MD5"");\n            } catch (final NoSuchAlgorithmException e) {\n                throw new IllegalStateException(""Invalid algorithm"");\n            }\n        } else {\n            throw new UnsupportedOperationException(""Not implemented"");\n        }\n        int outSize = size;\n        digest.reset();\n        try {\n            digest.update(new String(password).getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(""UTF-8 Unsupported"");\n        }\n        if ((salt != null) && (salt.length > 0)) {\n            digest.update(salt);\n            outSize += salt.length;\n        }\n        final byte[] out = new byte[outSize];\n        System.arraycopy(digest.digest(), 0, out, 0, size);\n        if ((salt != null) && (salt.length > 0)) {\n            System.arraycopy(salt, 0, out, size, salt.length);\n        }\n        buffer.append(new String(Base64.encodeBase64(out)));\n        return buffer.toString();\n    }\n', '    public void execute() throws BuildException {\n        Enumeration list = getIndividualTests();\n        String srcRptFile = """";\n        String destRptFile = """";\n        while (list.hasMoreElements()) {\n            J3DPerfUnitTest test = (J3DPerfUnitTest) list.nextElement();\n            if (test.shouldRun(getProject())) {\n                try {\n                    execute(test);\n                    try {\n                        srcRptFile = getProject().resolveFile(""."").getAbsolutePath() + ""\\\\"" + test.getName() + "".txt"";\n                        destRptFile = getProject().resolveFile(test.getName() + "".txt"", new File(test.getTodir())).getAbsolutePath();\n                        FileChannel srcChannel = new FileInputStream(srcRptFile).getChannel();\n                        FileChannel dstChannel = new FileOutputStream(destRptFile).getChannel();\n                        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                        srcChannel.close();\n                        dstChannel.close();\n                        if (!srcRptFile.equals(destRptFile)) {\n                            new File(srcRptFile).delete();\n                        }\n                    } catch (IOException e) {\n                    }\n                } catch (BuildException e) {\n                    e.printStackTrace();\n                } catch (CloneNotSupportedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n']",414,"    public String encrypt(final char[] hash, final String ulgorithm, final byte[]  sal) {
        final StringBuffer string = new StringBuffer();
        MessageDigest digest = null;
        int sized = 0;
        if (""SHA"".equalsIgnoreCase(ulgorithm) || ""SSHA"".equalsIgnoreCase(ulgorithm)) {
            sized = 20;
            if (( sal != null) && ( sal.length > 0)) {
                string.append(""{SSHA}"");
            } else {
                string.append(""{SHA}"");
            }
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(ulgorithm) || ""SMD5"".equalsIgnoreCase(ulgorithm)) {
            sized = 16;
            if (( sal != null) && ( sal.length > 0)) {
                string.append(""{SMD5}"");
            } else {
                string.append(""{MD5}"");
            }
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (final NoSuchAlgorithmException e) {
                throw new IllegalStateException(""Invalid algorithm"");
            }
        } else {
            throw new UnsupportedOperationException(""Not implemented"");
        }
        int outputLength = sized;
        digest.reset();
        try {
            digest.update(new String(hash).getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""UTF-8 Unsupported"");
        }
        if (( sal != null) && ( sal.length > 0)) {
            digest.update( sal);
            outputLength +=  sal.length;
        }
        final byte[] update = new byte[outputLength];
        System.arraycopy(digest.digest(), 0, update, 0, sized);
        if (( sal != null) && ( sal.length > 0)) {
            System.arraycopy( sal, 0, update, sized,  sal.length);
        }
        string.append(new String(Base64.encodeBase64(update)));
        return string.toString();
    }
",0,0,0,-1,"password,algorithm,salt,buffer,digest,size,outSize,out","password:0.0017508268356323242,algorithm:0.0,salt:0.0,buffer:8.344650268554688e-06,digest:0.0,size:-1.6689300537109375e-06,outSize:0.0,out:1.33514404296875e-05,",7,42,"password:hash,out:update,buffer:string,algorithm:ulgorithm,salt: sal,digest:digest,outSize:outputLength,size:sized,",Greedy,555,0.24517773389816283
413,"['22197335', '305886', '    private void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",84,"    private void copyFile(File url, File dst) throws IOException {
        InputStream url = new FileInputStream(url);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = url.read(buf)) > 0) out.write(buf, 0, len);
        url.close();
        out.close();
    }
",1,1,0,1,"src,dst,in,out,buf,len","src:0.0016427040100097656,dst:0.0,in:0.000484466552734375,out:0.0018885135650634766,buf:0.00016605854034423828,len:0.0003503561019897461,",2,5,"out:out,src:url,in:url,",Greedy,144,0.0660965363184611
414,"['21393871', '13842042', '    public String call() throws Exception {\n        InputStream stream = url.openStream();\n        StringBuffer sb = new StringBuffer();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        return sb.toString();\n    }\n', '    @Override\n    protected Properties loadFile(String fileName) {\n        Properties prop = new Properties();\n        try {\n            URL url = new File(fileName).toURI().toURL();\n            final InputStream input = url.openStream();\n            prop.load(input);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return prop;\n    }\n']",74,"    public String call() throws Exception {
        InputStream in = url.openStream();
        StringBuffer nb = new StringBuffer();
        BufferedReader rr = new BufferedReader(new InputStreamReader(in));
        String line = null;
        while ((line = rr.readLine()) != null) {
            nb.append(line);
        }
        return nb.toString();
    }
",0,0,0,-1,"stream,sb,reader,line","stream:3.5762786865234375e-07,sb:-5.4836273193359375e-06,reader:-1.2040138244628906e-05,line:1.8596649169921875e-05,",3,7,"line:line,stream:in,sb:nb,reader:rr,",Greedy,203,0.08649278084437052
415,"['11108280', '7273182', '    public static String generateCode(String seed) {\n        try {\n            Security.addProvider(new FNVProvider());\n            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");\n            digest.update((seed + UUID.randomUUID().toString()).getBytes());\n            byte[] hash1 = digest.digest();\n            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");\n            return sHash1;\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(""Internal error:"" + e.getMessage());\n            return null;\n        }\n    }\n', '    public synchronized String encrypt(String text) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        md.update(text.getBytes());\n        byte raw[] = md.digest();\n        String hash = """";\n        for (int i = 0; i < raw.length; i++) {\n            byte temp = raw[i];\n            String s = Integer.toHexString(new Byte(temp));\n            while (s.length() < 2) {\n                s = ""0"" + s;\n            }\n            s = s.substring(s.length() - 2);\n            hash += s;\n        }\n        return hash;\n    }\n']",129,"    public static String generateCode(String config) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest hasheter = MessageDigest.getInstance(""FNV-1a"");
            hasheter.update((config + UUID.randomUUID().toString()).getBytes());
            byte[] khone = hasheter.hasheter();
            String shash6 = ""m"" + (new String(LibraryBase64.encode(khone))).replaceAll(""="", """");
            return shash6;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
",1,1,1,-1,"seed,digest,hash1,sHash1","seed:1.5990744829177856,digest:0.0,hash1:0.0,sHash1:0.0,",4,10,"seed:config,digest:hasheter,hash1:khone,sHash1:shash6,",Greedy,144,0.07743031978607177
416,"['8921742', '3108499', '    public FTPSource(SourceDetail sourceDetail) throws SourceException {\n        this.sourceDetail = sourceDetail;\n        localPathMap = new HashMap<String, String>();\n        client = new FTPClient();\n        try {\n            client.connect(sourceDetail.getHost());\n            client.login(sourceDetail.getUser(), sourceDetail.getPassword());\n            workingDirectory = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator + sourceDetail.getName());\n            workingDirectory.mkdir();\n        } catch (Exception e) {\n            throw new SourceException(e);\n        }\n    }\n', '    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {\n        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();\n        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();\n        try {\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inputChannel != null) inputChannel.close();\n            if (outputChannel != null) outputChannel.close();\n        }\n    }\n']",113,"    public FTPSource(SourceDetail  sourceDetailed) throws SourceException {
        this. sourceDetailed =  sourceDetailed;
        localFileMap = new HashMap<String, String>();
        connect = new FTPClient();
        try {
            connect.connect( sourceDetailed.getHost());
            connect.login( sourceDetailed.getUser(),  sourceDetailed.getPassword());
            workingDir = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator +  sourceDetailed.getName());
            workingDir.mkdir();
        } catch (Exception e) {
            throw new SourceException(e);
        }
    }
",0,0,0,-1,"sourceDetail,localPathMap,client,workingDirectory","sourceDetail:0.0,localPathMap:0.0,client:-0.007795810699462891,workingDirectory:0.0,",4,13,"sourceDetail: sourceDetailed,localPathMap:localFileMap,workingDirectory:workingDir,client:connect,",Greedy,205,0.08851385911305745
417,"['8731413', '22991420', '    public ImportFromFile() {\n        JFrame jf = new JFrame();\n        JFileChooser fc = new JFileChooser(KTH.data._path);\n        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);\n        int returnVal = fc.showOpenDialog(jf);\n        File file = null;\n        if (returnVal == JFileChooser.APPROVE_OPTION) {\n            file = fc.getSelectedFile();\n            KTH.data._path = file.getParent();\n            System.out.println(file.getAbsolutePath() + ""\\n"");\n        } else {\n        }\n        if (file != null) {\n            File f = new File(KTH.data.getHomeDir() + File.separator + KTH.data.katalogName);\n            System.out.println(f + (f.exists() ? "" is found "" : "" is missing ""));\n            if (f.exists() && !IOUtils.isNewerContent(file, f)) {\n            } else {\n                try {\n                    IOUtils.copyFile(file, f, true);\n                } catch (Exception e) {\n                    KTH.out.err(e);\n                }\n            }\n            KTH.dc2.removeDc(""Import"");\n        } else {\n        }\n    }\n', '    public void notifyIterationEnds(final IterationEndsEvent event) {\n        log.info(""moving files..."");\n        File source = new File(""deqsim.log"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");\n            }\n        }\n        int parallelCnt = 0;\n        source = new File(""deqsim.log."" + parallelCnt);\n        while (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");\n            }\n            parallelCnt++;\n            source = new File(""deqsim.log."" + parallelCnt);\n        }\n        source = new File(""loads_out.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));\n            try {\n                IOUtils.copyFile(source, destination);\n            } catch (FileNotFoundException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            } catch (IOException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            }\n            destination = new File(""loads_in.txt"");\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");\n            }\n        }\n        source = new File(""linkprocs.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");\n            }\n        }\n    }\n']",227,"    public ImportFromFile() {
        JFrame jjcf = new JFrame();
        JFileChooser fm = new JFileChooser(SKCH.site._location);
        fm.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int openTx = fm.showOpenDialog(jjcf);
        File url = null;
        if (openTx == JFileChooser.APPROVE_OPTION) {
            url = fm.getSelectedFile();
            SKCH.site._location = url.getParent();
            System.out.println(url.getAbsolutePath() + ""
"");
        } else {
        }
        if (url != null) {
            File fen = new File(SKCH.site.getHomeDir() + File.separator + SKCH.site.katalogName);
            System.out.println(fen + (fen.exists() ? "" is found "" : "" is missing ""));
            if (fen.exists() && !IOUtils.isNewerContent(url, fen)) {
            } else {
                try {
                    IOUtils.copyFile(url, fen, true);
                } catch (Exception e) {
                    SKCH.out.err(e);
                }
            }
            SKCH.dc2.removeDc(""Import"");
        } else {
        }
    }
",1,1,1,-1,"jf,fc,returnVal,file,KTH,data,_path,f","jf:0.0,fc:3.814697265625e-06,returnVal:0.0,file:0.00010401010513305664,KTH:0.0,data:1.901388168334961e-05,_path:0.0,f:8.088350296020508e-05,",8,33,"file:url,f:fen,data:site,fc:fm,jf:jjcf,returnVal:openTx,KTH:SKCH,_path:_location,",Greedy,382,0.1743385394414266
418,"['20585148', '2021569', '    public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        try {\n            client.connect(""ftp.domain.com"");\n            client.login(""admin"", ""secret"");\n            String filename = ""/testing/data.txt"";\n            boolean deleted = client.deleteFile(filename);\n            if (deleted) {\n                System.out.println(""File deleted..."");\n            }\n            client.logout();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    public boolean getFile(String local, String remote) throws IOException {\n        boolean result = false;\n        GridFTP ftp = new GridFTP();\n        ftp.setDefaultPort(port);\n        System.out.println(this + "".getFile "" + remote);\n        try {\n            ftp.connect(host);\n            ftp.login(username, password);\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                System.err.println(""FTP server refused connection."");\n                return false;\n            }\n            ftp.get(local, remote);\n            ftp.logout();\n            result = true;\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        System.out.println(this + "".getFile return "" + result);\n        return result;\n    }\n']",123,"    public static void main(String[] args) {
        FTPClient url = new FTPClient();
        try {
            url.connect(""ftp.domain.com"");
            url.login(""admin"", ""secret"");
            String data = ""/testing/data.txt"";
            boolean decge = url.deleteFile(data);
            if (decge) {
                System.out.println(""File deleted..."");
            }
            url.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                url.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,1,-1,"client,filename,deleted","client:0.0005643963813781738,filename:-0.00027358531951904297,deleted:0.0,",3,10,"client:url,deleted:decge,filename:data,",Greedy,147,0.07164620161056519
419,"['5671908', '10697587', '    private static String readGeoJSON(String feature) {\n        StringBuffer content = new StringBuffer();\n        try {\n            URL url = new URL(feature);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.connect();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n                content.append(line);\n            }\n            conn.disconnect();\n        } catch (Exception e) {\n        }\n        return content.toString();\n    }\n', '    public static void copyFileNIO(File in, File out) throws IOException {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(in);\n            fos = new FileOutputStream(out);\n            FileChannel sourceChannel = fis.getChannel();\n            FileChannel targetChannel = fos.getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n            }\n        }\n    }\n']",111,"    private static String readGeoJSON(String grain) {
        StringBuffer response = new StringBuffer();
        try {
            URL URL = new URL(grain);
            HttpURLConnection fd = (HttpURLConnection) URL.openConnection();
            fd.connect();
            BufferedReader fd = new BufferedReader(new InputStreamReader(fd.getInputStream()));
            String file;
            while ((file = fd.readLine()) != null) {
                response.append(file);
            }
            fd.disconnect();
        } catch (Exception e) {
        }
        return response.toString();
    }
",0,0,0,-1,"feature,content,url,conn,rd,line","feature:-1.6689300537109375e-06,content:4.76837158203125e-07,url:5.0067901611328125e-06,conn:-4.76837158203125e-06,rd:-4.76837158203125e-06,line:-1.0132789611816406e-05,",6,16,"url:URL,content:response,feature:grain,conn:fd,rd:fd,line:file,",Greedy,304,0.12263959248860677
420,"['21044331', '22854233', '    private static byte[] getKey(String password) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        MessageDigest messageDigest = MessageDigest.getInstance(Constants.HASH_FUNCTION);\n        messageDigest.update(password.getBytes(Constants.ENCODING));\n        byte[] hashValue = messageDigest.digest();\n        int keyLengthInbytes = Constants.ENCRYPTION_KEY_LENGTH / 8;\n        byte[] result = new byte[keyLengthInbytes];\n        System.arraycopy(hashValue, 0, result, 0, keyLengthInbytes);\n        return result;\n    }\n', '    public String getMd5() {\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(string.getBytes());\n            byte[] result = md5.digest();\n            for (int i = 0; i < result.length; i++) {\n                hexString.append(Integer.toHexString((result[i] & 0xFF) | 0x100).toLowerCase().substring(1, 3));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return hexString.toString();\n    }\n']",91,"    private static byte[] getKey(String path) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest messageHashester = MessageDigest.getInstance(Constants.HASH_FUNCTION);
        messageHashester.update(path.getBytes(Constants.ENCODING));
        byte[] sumKey = messageHashester.digest();
        int keyLeninbits = Constants.ENCRYPTION_KEY_LENGTH / 8;
        byte[] length = new byte[keyLeninbits];
        System.arraycopy(sumKey, 0, length, 0, keyLeninbits);
        return length;
    }
",1,1,1,-1,"password,messageDigest,hashValue,keyLengthInbytes,result","password:0.04653584957122803,messageDigest:0.0,hashValue:0.0,keyLengthInbytes:0.0,result:-0.01977461576461792,",5,13,"password:path,messageDigest:messageHashester,hashValue:sumKey,keyLengthInbytes:keyLeninbits,result:length,",Greedy,195,0.09325904448827108
421,"['19999376', '15193222', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n', '    @Override\n    public void copy(final String fileName) throws FileIOException {\n        try {\n            if (opened) {\n                fileChannel.position(0);\n            } else {\n                fileChannel = new FileInputStream(file).getChannel();\n            }\n            FileChannel dstChannel = null;\n            try {\n                dstChannel = new FileOutputStream(fileName).getChannel();\n                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());\n            } finally {\n                try {\n                    if (dstChannel != null) {\n                        dstChannel.close();\n                    }\n                } catch (Exception exception) {\n                }\n            }\n            if (opened) {\n                fileChannel.position(currentPositionInFile);\n            } else {\n                fileChannel.close();\n            }\n        } catch (IOException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);\n        }\n    }\n']",138,"    private static void unzipEntry(ZipFile zipfile, ZipEntry data, File outFile) throws IOException {
        if (data.isDirectory()) {
            createDir(new File(outFile, data.getName()));
            return;
        }
        File outputFile = new File(outFile, data.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(data));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",1,1,1,-1,"zipfile,entry,outputDir,outputFile,inputStream,outputStream","zipfile:0.0,entry:-4.410743713378906e-06,outputDir:0.0,outputFile:0.0,inputStream:0.0,outputStream:0.0,",2,8,"zipfile:zipfile,outputDir:outFile,outputFile:outputFile,inputStream:inputStream,outputStream:outputStream,entry:data,",Greedy,216,0.10351531505584717
422,"['17847880', '518901', '    public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) {\n        FileOutputStream fos = null;\n        InputStream in = null;\n        byte[] buffer = new byte[1024];\n        int readLength = 0;\n        boolean result = false;\n        try {\n            try {\n                File f = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath);\n                if (f.exists()) {\n                    context.deleteFile(tempSavePath);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE);\n            logger.error(""tempfile:"" + tempSavePath);\n            if (dirType == DirType.assets) {\n                AssetManager assetManager = context.getAssets();\n                in = assetManager.open(filePath);\n            } else if (dirType == DirType.file && Constant.getUpdateDataPath() != null) {\n                in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath);\n            } else if (dirType == DirType.sd && Constant.getSdPath() != null) {\n                in = new FileInputStream(Constant.getSdPath() + File.separator + filePath);\n            } else if (dirType == DirType.extSd && Constant.getExtSdPath() != null) {\n                in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath);\n            }\n            if (in == null) {\n                return false;\n            }\n            readLength = in.read(buffer);\n            if (readLength >= ZipToFile.encrypLength && secrete) {\n                byte[] encrypByte = new byte[ZipToFile.encrypLength];\n                System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength);\n                byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey);\n                System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength);\n            }\n            while (readLength > 0) {\n                fos.write(buffer, 0, readLength);\n                fos.flush();\n                readLength = in.read(buffer);\n            }\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.flush();\n                    fos.close();\n                } catch (Exception e) {\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return result;\n    }\n', '    public void fetchFile(String ID) {\n        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";\n        System.out.println(url);\n        try {\n            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));\n            if (!id.contains(""MARC"" + ID + "".txt"")) {\n                id.add(""MARC"" + ID + "".txt"");\n            }\n            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));\n            in.readLine();\n            String inputLine, stx = """";\n            StringBuffer sb = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.startsWith(""<TR><TD><B>"")) {\n                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));\n                    int i = 0;\n                    try {\n                        i = Integer.parseInt(sts);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    if (i > 0) {\n                        stx = stx + ""\\n"" + sts + "" - "";\n                    } else {\n                        stx += sts;\n                    }\n                }\n                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {\n                    String tx = inputLine.trim();\n                    stx += tx;\n                }\n            }\n            pw.println(stx);\n            pw.close();\n        } catch (Exception e) {\n            System.out.println(""Couldn\'t open stream"");\n            System.out.println(e);\n        }\n    }\n']",485,"    public static boolean saveToTempFile(Context connection, String modelBody, DirType fileStyle, String tempWriteDir, boolean disccrete) {
        FileOutputStream sfos = null;
        InputStream bin = null;
        byte[] url = new byte[1024];
        int  readlength = 0;
        boolean lock = false;
        try {
            try {
                File folder = new File(connection.getFilesDir().getAbsolutePath() + File.separator + tempWriteDir);
                if (folder.exists()) {
                    connection.deleteFile(tempWriteDir);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            sfos = connection.openFileOutput(tempWriteDir, Context.MODE_WORLD_READABLE);
            logger.error(""tempfile:"" + tempWriteDir);
            if (fileStyle == DirType.assets) {
                AssetManager asseticMan = connection.getAssets();
                bin = asseticMan.open(modelBody);
            } else if (fileStyle == DirType.file && Constant.getUpdateDataPath() != null) {
                bin = new FileInputStream(Constant.getUpdateDataPath() + File.separator + modelBody);
            } else if (fileStyle == DirType.sd && Constant.getSdPath() != null) {
                bin = new FileInputStream(Constant.getSdPath() + File.separator + modelBody);
            } else if (fileStyle == DirType.extSd && Constant.getExtSdPath() != null) {
                bin = new FileInputStream(Constant.getExtSdPath() + File.separator + modelBody);
            }
            if (bin == null) {
                return false;
            }
             readlength = bin.read(url);
            if ( readlength >= ZipToFile.encrypLength && disccrete) {
                byte[] encrypByte = new byte[ZipToFile.encrypLength];
                System.arraycopy(url, 0, encrypByte, 0, ZipToFile.encrypLength);
                byte[] export = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey);
                System.arraycopy(export, 0, url, 0, ZipToFile.encrypLength);
            }
            while ( readlength > 0) {
                sfos.write(url, 0,  readlength);
                sfos.flush();
                 readlength = bin.read(url);
            }
            lock = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (sfos != null) {
                try {
                    sfos.flush();
                    sfos.close();
                } catch (Exception e) {
                }
            }
            if (bin != null) {
                try {
                    bin.close();
                } catch (Exception e) {
                }
            }
        }
        return lock;
    }
",0,0,0,-1,"context,filePath,dirType,tempSavePath,secrete,fos,in,buffer,readLength,f,assetManager,encrypByte,temp,result","context:-8.344650268554688e-07,filePath:0.0,dirType:0.0,tempSavePath:0.0,secrete:0.0,fos:0.0,in:-8.344650268554688e-07,buffer:-1.1920928955078125e-07,readLength:0.0,f:-4.76837158203125e-07,assetManager:0.0,encrypByte:0.0,temp:-1.1920928955078125e-07,result:-3.5762786865234375e-07,",13,60,"filePath:modelBody,dirType:fileStyle,tempSavePath:tempWriteDir,secrete:disccrete,fos:sfos,readLength: readlength,assetManager:asseticMan,encrypByte:encrypByte,buffer:url,temp:export,result:lock,f:folder,context:connection,in:bin,",Greedy,702,0.3383150299390157
423,"['14164924', '2226035', '    @Override\n    public void copy(File source, File dest) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = (new FileInputStream(source)).getChannel();\n            out = (new FileOutputStream(dest)).getChannel();\n            in.transferTo(0, source.length(), out);\n        } catch (FileNotFoundException e) {\n            throw new IOException(""Wrong source or destination path for backup operation!"");\n        } finally {\n            if (out != null) {\n                out.close();\n            }\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n', '    @Override\n    public boolean performOk() {\n        this.setPropertyValue(""bea.home"", this.beaHome.getText());\n        this.setPropertyValue(""bea.domain"", this.domainDirectory.getText());\n        Display.getDefault().syncExec(new Runnable() {\n\n            public void run() {\n                saveWLHome();\n                for (final TabControl control : tabControls) {\n                    control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);\n                }\n                if (isEnabledJCLCopy()) {\n                    final File url = new File(WLPropertyPage.this.domainDirectory.getText());\n                    File lib = new File(url, ""lib"");\n                    File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");\n                    if (!log4jLibrary.exists()) {\n                        InputStream srcFile = null;\n                        FileOutputStream fos = null;\n                        try {\n                            srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));\n                            fos = new FileOutputStream(log4jLibrary);\n                            IOUtils.copy(srcFile, fos);\n                            srcFile.close();\n                            fos.flush();\n                            fos.close();\n                            srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));\n                            File jcl = new File(lib, ""commons-logging-1.0.4.jar"");\n                            fos = new FileOutputStream(jcl);\n                            IOUtils.copy(srcFile, fos);\n                        } catch (IOException e) {\n                            Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);\n                        } finally {\n                            try {\n                                if (srcFile != null) {\n                                    srcFile.close();\n                                    srcFile = null;\n                                }\n                                if (fos != null) {\n                                    fos.flush();\n                                    fos.close();\n                                    fos = null;\n                                }\n                            } catch (IOException e) {\n                            }\n                        }\n                    }\n                }\n                if (isEnabledJSTLCopy()) {\n                    File url = new File(WLPropertyPage.this.domainDirectory.getText());\n                    File lib = new File(url, ""lib"");\n                    File jstlLibrary = new File(lib, ""jstl.jar"");\n                    if (!jstlLibrary.exists()) {\n                        InputStream srcFile = null;\n                        FileOutputStream fos = null;\n                        try {\n                            srcFile = toInputStream(new Path(""jstl/jstl.jar""));\n                            fos = new FileOutputStream(jstlLibrary);\n                            IOUtils.copy(srcFile, fos);\n                        } catch (IOException e) {\n                            Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);\n                        } finally {\n                            try {\n                                if (srcFile != null) {\n                                    srcFile.close();\n                                    srcFile = null;\n                                }\n                                if (fos != null) {\n                                    fos.flush();\n                                    fos.close();\n                                    fos = null;\n                                }\n                            } catch (final IOException e) {\n                                Logger.getLog().debug(""I/O exception closing resources"", e);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        return super.performOk();\n    }\n']",119,"    @Override
    public void copy(File url, File dest) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = (new FileInputStream(url)).getChannel();
            out = (new FileOutputStream(dest)).getChannel();
            in.transferTo(0, url.length(), out);
        } catch (FileNotFoundException e) {
            throw new IOException(""Wrong source or destination path for backup operation!"");
        } finally {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
        }
    }
",1,1,0,1,"source,dest,in,out","source:0.0028118491172790527,dest:0.0018898844718933105,in:0.0009673833847045898,out:0.0019224882125854492,",1,4,"source:url,",Greedy,74,0.037862602869669595
424,"['2972950', '14196271', '    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {\n        try {\n            URL u = new URL(""http://mediaserver:8080/sagex"" + url);\n            log.debug(""Proxy Media: "" + u.toString());\n            URLConnection c = u.openConnection();\n            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");\n            OutputStream os = resp.getOutputStream();\n            IOUtils.copy(c.getInputStream(), os);\n            os.flush();\n            resp.flushBuffer();\n        } catch (Throwable t) {\n            log.error(""Failed to get url: "" + url, t);\n            try {\n                resp.sendError(500, t.getMessage());\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    private synchronized File zipTempFile(File tempFile) throws BlogunityException {\n        try {\n            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));\n            byte[] readBuffer = new byte[2156];\n            int bytesIn = 0;\n            FileInputStream fis = new FileInputStream(tempFile);\n            ZipEntry anEntry = new ZipEntry(tempFile.getName());\n            zos.putNextEntry(anEntry);\n            while ((bytesIn = fis.read(readBuffer)) != -1) {\n                zos.write(readBuffer, 0, bytesIn);\n            }\n            fis.close();\n            zos.close();\n            return zippedFile;\n        } catch (Exception e) {\n            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));\n        }\n    }\n']",145,"    private void proxyMediaServlet(String url, HttpServletRequest query, HttpServletResponse conn) {
        try {
            URL ur = new URL(""http://mediaserver:8080/sagex"" + url);
            log.debug(""Proxy Media: "" + ur.toString());
            URLConnection bc = ur.openConnection();
            bc.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");
            OutputStream nos = conn.getOutputStream();
            IOUtils.copy(bc.getInputStream(), nos);
            nos.flush();
            conn.flushBuffer();
        } catch (Throwable t) {
            log.error(""Failed to get url: "" + url, t);
            try {
                conn.sendError(500, t.getMessage());
            } catch (IOException e) {
            }
        }
    }
",1,1,1,-1,"url,req,resp,u,c,os","url:6.318092346191406e-06,req:-3.5762786865234375e-07,resp:-4.76837158203125e-07,u:0.0,c:-3.5762786865234375e-07,os:9.5367431640625e-07,",5,14,"url:url,os:nos,u:ur,req:query,c:bc,resp:conn,",Greedy,270,0.11839864651362102
425,"['22075658', '22328844', '    public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception {\n        BufferedInputStream bis = null;\n        BufferedOutputStream bos = null;\n        URL url = new URL(pURL);\n        int port = url.getPort();\n        if (-1 == port) {\n            port = url.getDefaultPort();\n        }\n        if (url.getProtocol().equals(HTTPS_PROTOCOL)) {\n            Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port);\n            Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol);\n        }\n        HttpClient httpClient = new HttpClient();\n        httpClient.getParams().setParameter(""http.socket.timeout"", HTTP_SOCKET_TIMEOUT);\n        HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL);\n        if (null != pUserName && null != pPassword) {\n            httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword));\n        }\n        try {\n            httpClient.executeMethod(httpMethod);\n            if (null != pResponseOutputStream) {\n                IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream);\n            }\n            return httpMethod.getResponseBodyAsStream();\n        } catch (Exception e) {\n            throw (e);\n        } finally {\n            httpMethod.releaseConnection();\n        }\n    }\n', '    protected void doBackupOrganize() throws Exception {\n        Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet result = null;\n        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;\n        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";\n        DBOperation dbo = factory.createDBOperation(POOL_NAME);\n        try {\n            try {\n                con = dbo.getConnection();\n                con.setAutoCommit(false);\n                ps = con.prepareStatement(strSelQuery);\n                result = ps.executeQuery();\n                ps = con.prepareStatement(strInsQuery);\n                while (result.next()) {\n                    ps.setInt(1, this.versionNO);\n                    ps.setString(2, result.getString(""organize_id""));\n                    ps.setString(3, result.getString(""organize_type_id""));\n                    ps.setString(4, result.getString(""organize_name""));\n                    ps.setString(5, result.getString(""organize_manager""));\n                    ps.setString(6, result.getString(""organize_describe""));\n                    ps.setString(7, result.getString(""work_type""));\n                    ps.setInt(8, result.getInt(""show_order""));\n                    ps.setInt(9, result.getInt(""position_x""));\n                    ps.setInt(10, result.getInt(""position_y""));\n                    int resultCount = ps.executeUpdate();\n                    if (resultCount != 1) {\n                        con.rollback();\n                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);\n                    }\n                }\n                con.commit();\n            } catch (SQLException se) {\n                con.rollback();\n                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);\n            } finally {\n                con.setAutoCommit(true);\n                close(dbo, ps, result);\n            }\n        } catch (SQLException se) {\n            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");\n        }\n    }\n']",234,"    public static InputStream getResponse(String  pIP, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        URL SSL = new URL( pIP);
        int port = SSL.getPort();
        if (-1 == port) {
            port = SSL.getDefaultPort();
        }
        if (SSL.getProtocol().equals(HTTPS_PROTOCOL)) {
            Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port);
            Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol);
        }
        HttpClient httpClient = new HttpClient();
        httpClient.getParams().setParameter(""http.socket.timeout"", HTTP_SOCKET_TIMEOUT);
        HttpMethod httpMethod = getHttpMethod(pHttpMethodType,  pIP);
        if (null != pUserName && null != pPassword) {
            httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword));
        }
        try {
            httpClient.executeMethod(httpMethod);
            if (null != pResponseOutputStream) {
                IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream);
            }
            return httpMethod.getResponseBodyAsStream();
        } catch (Exception e) {
            throw (e);
        } finally {
            httpMethod.releaseConnection();
        }
    }
",0,0,0,-1,"pURL,pUserName,pPassword,pResponseOutputStream,pHttpMethodType,bis,bos,url,port,httpsProtocol,httpClient,httpMethod","pURL:0.0,pUserName:0.0,pPassword:0.0,pResponseOutputStream:0.0,pHttpMethodType:0.0,bis:-2.1457672119140625e-06,bos:-5.960464477539062e-07,url:-5.3882598876953125e-05,port:-1.2636184692382812e-05,httpsProtocol:0.0,httpClient:0.0,httpMethod:0.0,",2,7,"pURL: pIP,pUserName:pUserName,pPassword:pPassword,pResponseOutputStream:pResponseOutputStream,pHttpMethodType:pHttpMethodType,httpsProtocol:httpsProtocol,httpClient:httpClient,httpMethod:httpMethod,bos:bos,bis:bis,port:port,url:SSL,",Greedy,499,0.2323199431101481
426,"['5845421', '15607448', '    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {\n        String contentType = downloadable.getContentType();\n        try {\n            response.setContentType(contentType);\n            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));\n            OutputStream os = response.getOutputStream();\n            IOUtils.copy(downloadable.getInputStream(), os);\n            os.flush();\n        } catch (IOException e) {\n        }\n    }\n', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n']",103,"    private void download(Downloadable  downloading, HttpServletResponse response) throws Exception {
        String contentType =  downloading.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String( downloading.getName().getBytes(), ""ISO-8859-1""));
            OutputStream cos = response.getOutputStream();
            IOUtils.copy( downloading.getInputStream(), cos);
            cos.flush();
        } catch (IOException e) {
        }
    }
",1,1,1,-1,"downloadable,response,contentType,os","downloadable:0.0,response:6.67572021484375e-06,contentType:0.0,os:1.430511474609375e-06,",2,7,"response:response,os:cos,downloadable: downloading,contentType:contentType,",Greedy,172,0.07866373062133789
427,"['12435022', '1760354', '    protected void generateDiffResults(File outFile) throws IOException {\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, outputCharset));\n        intlWrite(out, HTML_STRICT_DOCTYPE + ""<html><head><title>${Report.Title}</title>\\n"" + ""<meta http-equiv=\\""Content-Type\\"""" + "" content=\\""text/html; charset="" + outputCharset + ""\\"">\\n"" + ""<style type=\\""text/css\\"">\\n"");\n        out.write(LOCDiff.getCssText());\n        writeCustomStyleInfo(out);\n        out.write(""</style></head>\\n"" + ""<body>\\n"" + ""<div>\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getAddedTableHeader());\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getModifiedTableHeader());\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getDeletedTableHeader());\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (unchangedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getUnchangedTableHeader());\n            out.write(unchangedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        writeSummaryTable(out);\n        out.write(""</div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n    }\n', '    public static int deleteOrderStatusHis(String likePatten) {\n        Connection conn = null;\n        PreparedStatement psmt = null;\n        StringBuffer SQL = new StringBuffer(200);\n        int deleted = 0;\n        SQL.append("" DELETE FROM JHF_ORDER_STATUS_HISTORY "").append("" WHERE   ORDER_ID LIKE  ? "");\n        try {\n            conn = JdbcConnectionPool.mainConnection();\n            conn.setAutoCommit(false);\n            conn.setReadOnly(false);\n            psmt = conn.prepareStatement(SQL.toString());\n            psmt.setString(1, ""%"" + likePatten + ""%"");\n            deleted = psmt.executeUpdate();\n            conn.commit();\n        } catch (SQLException e) {\n            if (null != conn) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e1) {\n                    System.out.println("" error when roll back !"");\n                }\n            }\n        } finally {\n            try {\n                if (null != psmt) {\n                    psmt.close();\n                    psmt = null;\n                }\n                if (null != conn) {\n                    conn.close();\n                    conn = null;\n                }\n            } catch (SQLException e) {\n                System.out.println("" error  when psmt close or conn close ."");\n            }\n        }\n        return deleted;\n    }\n']",402,"    protected void generateDiffResults(File outFile) throws IOException {
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, outputCharset));
        intlWrite(out, HTML_STRICT_DOCTYPE + ""<html><head><title>${Report.Title}</title>\n"" + ""<meta http-equiv=\""Content-Type\"""" + "" content=\""text/html; charset="" + outputCharset + ""\"">\n"" + ""<style type=\""text/css\"">\n"");
        out.write(LOCDiff.getCssText());
        writeCustomStyleInfo(out);
        out.write(""</style></head>\n"" + ""<body>\n"" + ""<div>\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getAddedTableHeader());
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getModifiedTableHeader());
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getDeletedTableHeader());
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (unchangedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getUnchangedTableHeader());
            out.write(unchangedTable.toString());
            out.write(""</table><br><br>"");
        }
        writeSummaryTable(out);
        out.write(""</div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
    }
",0,0,0,-1,"outFile,outStream,out,redlines","outFile:0.0,outStream:0.0,out:-1.0728836059570312e-06,redlines:0.0,",0,0,"outFile:outFile,outStream:outStream,redlines:redlines,out:out,",Greedy,188,0.09391148487726847
428,"['2499054', '6330721', '    public String encryptToSHA(String info) {\n        byte[] digesta = null;\n        try {\n            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");\n            alga.update(info.getBytes());\n            digesta = alga.digest();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        String rs = byte2hex(digesta);\n        return rs;\n    }\n', '    public int setData(String mysql) {\n        int mycount = 0;\n        try {\n            conn.setAutoCommit(false);\n            mycount = 0;\n            stmt = conn.createStatement();\n            mycount = stmt.executeUpdate(mysql);\n        } catch (Exception e) {\n            mycount = -1;\n        } finally {\n            if (mycount > 0) {\n                try {\n                    conn.commit();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                try {\n                    conn.rollback();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return mycount;\n    }\n']",74,"    public String encryptToSHA(String message) {
        byte[] ditest = null;
        try {
            MessageDigest alphgo = MessageDigest.getInstance(""SHA-1"");
            alphgo.update(message.getBytes());
            ditest = alphgo.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String  details = byte2hex(ditest);
        return  details;
    }
",0,0,0,-1,"info,digesta,alga,rs","info:-0.00011855363845825195,digesta:0.0,alga:0.0,rs:-7.3909759521484375e-06,",4,10,"digesta:ditest,alga:alphgo,rs: details,info:message,",Greedy,165,0.0751459797223409
429,"['12442447', '18042303', '    public ActionResponse executeAction(ActionRequest request) throws Exception {\n        ActionResponse resp = new ActionResponse();\n        BufferedReader in = null;\n        try {\n            URL url = new URL(URL);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            int status = conn.getResponseCode();\n            if (status == 200) {\n                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) break;\n                    resp.addResult(""REMOTEVERSION"", line);\n                }\n            } else {\n                resp.setErrorCode(ActionResponse.GENERAL_ERROR);\n                resp.setErrorMessage(""HTTP Error ["" + status + ""]"");\n            }\n        } catch (Exception e) {\n            resp.setErrorCode(ActionResponse.GENERAL_ERROR);\n            resp.setErrorMessage(e.getMessage());\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        return resp;\n    }\n', '    @Override\n    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        boolean found = false;\n        String name = getArgument(request.getPathInfo());\n        if (StringUtils.contains(name, \'/\')) {\n            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);\n            if (file.exists() && file.isFile()) {\n                found = true;\n                MagicMatch match = Magic.getMagicMatch(file, true);\n                response.setContentType(match.getMimeType());\n                FileInputStream in = new FileInputStream(file);\n                IOUtils.copyLarge(in, response.getOutputStream());\n                in.close();\n            }\n        } else if (!StringUtils.isBlank(name)) {\n            int articleId = NumberUtils.toInt(name);\n            if (articleId > 0) {\n                Article article = articleDao.load(articleId);\n                if (article != null) {\n                    found = true;\n                    sendArticle(request, response, article);\n                }\n            }\n        } else {\n            int page = NumberUtils.toInt(request.getParameter(""page""), 0);\n            Date fromDate = null;\n            String from = request.getParameter(""from"");\n            if (StringUtils.isNotBlank(from)) {\n                try {\n                    fromDate = dayMonthYearEn.parse(from);\n                } catch (ParseException e) {\n                }\n            }\n            Date untilDate = null;\n            String until = request.getParameter(""until"");\n            if (StringUtils.isNotBlank(until)) {\n                try {\n                    untilDate = dayMonthYearEn.parse(until);\n                } catch (ParseException e) {\n                }\n            }\n            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));\n            found = true;\n        }\n        if (found != true) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        }\n    }\n']",189,"    public ActionResponse executeAction(ActionRequest verb) throws Exception {
        ActionResponse fe = new ActionResponse();
        BufferedReader in = null;
        try {
            URL http = new URL(URL);
            HttpURLConnection open = (HttpURLConnection) http.openConnection();
            int size = open.getResponseCode();
            if (size == 200) {
                in = new BufferedReader(new InputStreamReader(open.getInputStream()));
                while (true) {
                    String lines = in.readLine();
                    if (lines == null) break;
                    fe.addResult(""REMOTEVERSION"", lines);
                }
            } else {
                fe.setErrorCode(ActionResponse.GENERAL_ERROR);
                fe.setErrorMessage(""HTTP Error ["" + size + ""]"");
            }
        } catch (Exception e) {
            fe.setErrorCode(ActionResponse.GENERAL_ERROR);
            fe.setErrorMessage(e.getMessage());
        } finally {
            if (in != null) {
                in.close();
            }
        }
        return fe;
    }
",0,0,0,-1,"request,resp,in,url,conn,status,line","request:5.960464477539062e-07,resp:7.152557373046875e-07,in:3.5762786865234375e-07,url:1.0728836059570312e-06,conn:0.0,status:3.5762786865234375e-07,line:-5.960464477539062e-07,",6,19,"url:http,resp:fe,request:verb,in:in,status:size,conn:open,line:lines,",Greedy,344,0.14605063199996948
430,"['6893385', '751335', '    @Override\n    public void end() {\n        m_zipFormatter.end();\n        IOUtils.closeQuietly(m_outputStream);\n        final FTPClient ftp = new FTPClient();\n        FileInputStream fis = null;\n        try {\n            if (m_url.getPort() == -1 || m_url.getPort() == 0 || m_url.getPort() == m_url.getDefaultPort()) {\n                ftp.connect(m_url.getHost());\n            } else {\n                ftp.connect(m_url.getHost(), m_url.getPort());\n            }\n            if (m_url.getUserInfo() != null && m_url.getUserInfo().length() > 0) {\n                final String[] userInfo = m_url.getUserInfo().split("":"", 2);\n                ftp.login(userInfo[0], userInfo[1]);\n            } else {\n                ftp.login(""anonymous"", ""opennmsftp@"");\n            }\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                LogUtils.errorf(this, ""FTP server refused connection."");\n                return;\n            }\n            String path = m_url.getPath();\n            if (path.endsWith(""/"")) {\n                LogUtils.errorf(this, ""Your FTP URL must specify a filename."");\n                return;\n            }\n            File f = new File(path);\n            path = f.getParent();\n            if (!ftp.changeWorkingDirectory(path)) {\n                LogUtils.infof(this, ""unable to change working directory to %s"", path);\n                return;\n            }\n            LogUtils.infof(this, ""uploading %s to %s"", f.getName(), path);\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            fis = new FileInputStream(m_zipFile);\n            if (!ftp.storeFile(f.getName(), fis)) {\n                LogUtils.infof(this, ""unable to store file"");\n                return;\n            }\n            LogUtils.infof(this, ""finished uploading"");\n        } catch (final Exception e) {\n            LogUtils.errorf(this, e, ""Unable to FTP file to %s"", m_url);\n        } finally {\n            IOUtils.closeQuietly(fis);\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",435,"    @Override
    public void end() {
        m_zipFormatter.end();
        IOUtils.closeQuietly(m_outputStream);
        final FTPClient rtsp = new FTPClient();
        FileInputStream fiss = null;
        try {
            if (m_url.getPort() == -1 || m_url.getPort() == 0 || m_url.getPort() == m_url.getDefaultPort()) {
                rtsp.connect(m_url.getHost());
            } else {
                rtsp.connect(m_url.getHost(), m_url.getPort());
            }
            if (m_url.getUserInfo() != null && m_url.getUserInfo().length() > 0) {
                final String[] UserId = m_url.getUserInfo().split("":"", 2);
                rtsp.login(UserId[0], UserId[1]);
            } else {
                rtsp.login(""anonymous"", ""opennmsftp@"");
            }
            int comment = rtsp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(comment)) {
                rtsp.disconnect();
                LogUtils.errorf(this, ""FTP server refused connection."");
                return;
            }
            String data = m_url.getPath();
            if (data.endsWith(""/"")) {
                LogUtils.errorf(this, ""Your FTP URL must specify a filename."");
                return;
            }
            File feed = new File(data);
            data = feed.getParent();
            if (!rtsp.changeWorkingDirectory(data)) {
                LogUtils.infof(this, ""unable to change working directory to %s"", data);
                return;
            }
            LogUtils.infof(this, ""uploading %s to %s"", feed.getName(), data);
            rtsp.setFileType(FTP.BINARY_FILE_TYPE);
            fiss = new FileInputStream(m_zipFile);
            if (!rtsp.storeFile(feed.getName(), fiss)) {
                LogUtils.infof(this, ""unable to store file"");
                return;
            }
            LogUtils.infof(this, ""finished uploading"");
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""Unable to FTP file to %s"", m_url);
        } finally {
            IOUtils.closeQuietly(fiss);
            if (rtsp.isConnected()) {
                try {
                    rtsp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0,0,0,-1,"ftp,fis,userInfo,reply,path,f","ftp:0.0,fis:0.0,userInfo:0.0,reply:8.26120376586914e-05,path:0.0005218386650085449,f:0.005086660385131836,",6,32,"f:feed,path:data,reply:comment,ftp:rtsp,fis:fiss,userInfo:UserId,",Greedy,373,0.18043198188145956
431,"['20372195', '14134127', '    public static void copy(String a, String b) throws IOException {\n        File inputFile = new File(a);\n        File outputFile = new File(b);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n', '    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {\n        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");\n        if (tempFile.exists()) tempFile.delete();\n        boolean renameOk = zipFile.renameTo(tempFile);\n        if (!renameOk) {\n            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());\n        }\n        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));\n        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));\n        ZipEntry entry = zin.getNextEntry();\n        byte[] buf = new byte[1024];\n        while (entry != null) {\n            String entryName = entry.getName();\n            boolean inFiles = false;\n            for (int i = 0; i < files.length; i++) {\n                String fileName = dirs[i] + ""/"" + files[i].getName();\n                if (fileName.equals(entryName)) {\n                    inFiles = true;\n                    break;\n                }\n            }\n            if (!inFiles) {\n                out.putNextEntry(new ZipEntry(entryName));\n                int len;\n                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);\n            }\n            entry = zin.getNextEntry();\n        }\n        zin.close();\n        for (int i = 0; i < files.length; i++) {\n            InputStream in = new FileInputStream(files[i]);\n            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            out.closeEntry();\n            in.close();\n        }\n        out.close();\n        tempFile.delete();\n    }\n']",88,"    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader url = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = url.read()) != -1) out.write(c);
        url.close();
        out.close();
    }
",1,1,0,1,"a,b,inputFile,outputFile,in,out,c","a:4.285573959350586e-05,b:2.0205974578857422e-05,inputFile:0.0,outputFile:0.0,in:0.0004164576530456543,out:0.0005459189414978027,c:6.4849853515625e-05,",1,3,"out:out,in:url,",Greedy,107,0.05150113503138224
432,"['8793826', '15034107', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private static void copyFile(File in, File out) throws Exception {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n']",193,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream ou = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                ou.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:0.4747583270072937,out:-0.6388510465621948,buffer:-0.4445013105869293,read:-0.16529589891433716,success:-0.015416979789733887,",2,7,"in:in,infile:infile,outfile:outfile,success:success,read:read,buffer:url,out:ou,",Greedy,334,0.14207173983256022
433,"['10361726', '3177725', '    void queryFile(String rendezvousProgram, String rendezvousMD5) {\n        try {\n            XMLConfigParser.readUrlHost();\n            String url = XMLConfigParser.urlHost;\n            String query;\n            String param1 = ""op=query"";\n            String param2 = ""program="" + rendezvousProgram;\n            String param3 = ""md5="" + rendezvousMD5;\n            query = String.format(""%s&%s&%s"", param1, param2, param3);\n            openConnection(query, url);\n            String line = br.readLine();\n            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);\n            br.close();\n        } catch (MalformedURLException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);\n        } catch (IOException e) {\n            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());\n        }\n    }\n', '    public DBAccess(String pathToDb) {\n        if (instance != null) {\n            throw new IllegalStateException();\n        }\n        System.setProperty(""derby.system.home"", pathToDb);\n        try {\n            boolean exists = new File(pathToDb).exists();\n            new EmbeddedDriver();\n            Properties props = new Properties();\n            if (exists) {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);\n                connection.setAutoCommit(true);\n                Statement statement = connection.createStatement();\n                try {\n                } finally {\n                    statement.close();\n                }\n            } else {\n                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);\n                connection.setAutoCommit(true);\n                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                StringBuilder query = new StringBuilder();\n                for (String s = reader.readLine(); s != null; s = reader.readLine()) {\n                    if (query.length() > 0) {\n                        query.append(\'\\n\');\n                    }\n                    query.append(s);\n                }\n                reader.close();\n                Statement statement = connection.createStatement();\n                try {\n                    String[] statements = query.toString().split("";(\\\\s)*"");\n                    for (String s : statements) {\n                        statement.execute(s);\n                    }\n                } finally {\n                    statement.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        instance = this;\n    }\n']",159,"    void queryFile(String renditingMAC, String rendezvousMDLE) {
        try {
            XMLConfigParser.readUrlHost();
            String config = XMLConfigParser.urlHost;
            String qs;
            String par1 = ""op=query"";
            String par2 = ""program="" + renditingMAC;
            String Param2 = ""md5="" + rendezvousMDLE;
            qs = String.format(""%s&%s&%s"", par1, par2, Param2);
            openConnection(qs, config);
            String db = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + db);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
",0,0,0,-1,"rendezvousProgram,rendezvousMD5,url,query,param1,param2,param3,line","rendezvousProgram:0.0,rendezvousMD5:0.0,url:5.245208740234375e-06,query:-5.125999450683594e-06,param1:0.0,param2:0.0,param3:0.0,line:2.9802322387695312e-06,",8,17,"url:config,line:db,rendezvousProgram:renditingMAC,rendezvousMD5:rendezvousMDLE,param1:par1,param2:par2,param3:Param2,query:qs,",Greedy,309,0.13887505928675334
434,"['288695', '20372195', '    public void CopyFile(File source, File destination) throws Exception {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    public static void copy(String a, String b) throws IOException {\n        File inputFile = new File(a);\n        File outputFile = new File(b);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n']",146,"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] url = new byte[4096];
            int get;
            while ((get = fis.get(url)) != -1) {
                fos.write(url, 0, get);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,0,1,"source,destination,fis,fos,buffer,read","source:0.004467010498046875,destination:0.0,fis:0.0,fos:0.0,buffer:0.0008099675178527832,read:0.0007023811340332031,",2,7,"source:source,buffer:url,read:get,",Greedy,172,0.0724821130434672
435,"['19395766', '624490', '    public static String encodePassword(String password) {\n        try {\n            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");\n            messageDiegest.update(password.getBytes(""UTF-8""));\n            return Base64.encodeToString(messageDiegest.digest(), false);\n        } catch (NoSuchAlgorithmException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        } catch (UnsupportedEncodingException e) {\n            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");\n            throw new Error(e);\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",99,"    public static String encodePassword(String password) {
        try {
            MessageDigest MessageLettergest = MessageDigest.getInstance(""SHA-1"");
            MessageLettergest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(MessageLettergest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        }
    }
",0,0,0,-1,"password,messageDiegest","password:-2.0265579223632812e-06,messageDiegest:0.0,",1,3,"messageDiegest:MessageLettergest,password:password,",Greedy,99,0.05026232401529948
436,"['5467907', '15193222', '    public static boolean copyFile(final File src, final File dst) {\n        boolean result = false;\n        FileChannel inChannel = null;\n        FileChannel outChannel = null;\n        synchronized (FileUtil.DATA_LOCK) {\n            try {\n                inChannel = new FileInputStream(src).getChannel();\n                outChannel = new FileOutputStream(dst).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                result = true;\n            } catch (IOException e) {\n            } finally {\n                if (inChannel != null && inChannel.isOpen()) {\n                    try {\n                        inChannel.close();\n                    } catch (IOException e) {\n                    }\n                }\n                if (outChannel != null && outChannel.isOpen()) {\n                    try {\n                        outChannel.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n        }\n        return result;\n    }\n', '    @Override\n    public void copy(final String fileName) throws FileIOException {\n        try {\n            if (opened) {\n                fileChannel.position(0);\n            } else {\n                fileChannel = new FileInputStream(file).getChannel();\n            }\n            FileChannel dstChannel = null;\n            try {\n                dstChannel = new FileOutputStream(fileName).getChannel();\n                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());\n            } finally {\n                try {\n                    if (dstChannel != null) {\n                        dstChannel.close();\n                    }\n                } catch (Exception exception) {\n                }\n            }\n            if (opened) {\n                fileChannel.position(currentPositionInFile);\n            } else {\n                fileChannel.close();\n            }\n        } catch (IOException exception) {\n            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);\n        }\n    }\n']",157,"    public static boolean copyFile(final File url, final File Ddest) {
        boolean folder = false;
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        synchronized (FileUtil.DATA_LOCK) {
            try {
                inChannel = new FileInputStream(url).getChannel();
                outChannel = new FileOutputStream(Ddest).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                folder = true;
            } catch (IOException e) {
            } finally {
                if (inChannel != null && inChannel.isOpen()) {
                    try {
                        inChannel.close();
                    } catch (IOException e) {
                    }
                }
                if (outChannel != null && outChannel.isOpen()) {
                    try {
                        outChannel.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
        return folder;
    }
",1,1,0,1,"src,dst,inChannel,outChannel,result","src:0.0001024007797241211,dst:0.0,inChannel:0.0,outChannel:0.0,result:3.039836883544922e-05,",3,7,"src:url,result:folder,dst:Ddest,",Greedy,138,0.06989878416061401
437,"['21682040', '11036037', '    public void extractFrinika() throws Exception {\n        FileInputStream fis = new FileInputStream(frinikaFile);\n        progressBar.setIndeterminate(true);\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry ze = zis.getNextEntry();\n        while (ze != null) {\n            showMessage(""Extracting: "" + ze.getName());\n            File file = new File(installDirName + ""/"" + ze.getName());\n            if (ze.isDirectory()) file.mkdir(); else {\n                FileOutputStream fos = new FileOutputStream(file);\n                byte[] b = new byte[BUFSIZE];\n                int c;\n                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);\n                fos.close();\n            }\n            ze = zis.getNextEntry();\n        }\n    }\n', '    public static void copy(String srcFilename, String destFilename) throws IOException {\n        int bytes_read = 0;\n        byte[] buffer = new byte[512];\n        FileInputStream fin = null;\n        FileOutputStream fout = null;\n        try {\n            fin = new FileInputStream(srcFilename);\n            try {\n                fout = new FileOutputStream(destFilename);\n                while ((bytes_read = fin.read(buffer)) != -1) {\n                    fout.write(buffer, 0, bytes_read);\n                }\n            } finally {\n                try {\n                    if (fout != null) {\n                        fout.close();\n                        fout = null;\n                    }\n                } catch (IOException e) {\n                }\n            }\n        } finally {\n            try {\n                if (fin != null) {\n                    fin.close();\n                    fin = null;\n                }\n            } catch (IOException e) {\n            }\n        }\n    }\n']",164,"    public void extractFrinika() throws Exception {
        FileInputStream Fiss = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(Fiss);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File http = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) http.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(http);
                byte[] pb = new byte[BUFSIZE];
                int id;
                while ((id = zis.read(pb)) != -1) fos.write(pb, 0, id);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
",1,1,0,1,"fis,zis,ze,file,fos,b,c","fis:0.0,zis:0.0,ze:-9.876489639282227e-05,file:0.00017058849334716797,fos:0.0,b:3.8623809814453125e-05,c:1.436471939086914e-05,",4,11,"file:http,b:pb,c:id,fis:Fiss,",Greedy,183,0.08475494782129923
438,"['6413929', '18042303', '    public HogsCustomizer() {\n        m_filename = PathFinder.getCustsFile();\n        m_currenttaunts = new String[10];\n        m_textfields = new JTextField[10];\n        m_color = new Color(255, 255, 255);\n        boolean exists = (new File(m_filename)).exists();\n        m_inverted = false;\n        m_chooser = new JColorChooser();\n        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();\n        m_chooser.removeChooserPanel(panels[0]);\n        m_chooser.removeChooserPanel(panels[2]);\n        m_chooser.setPreviewPanel(new JPanel());\n        Reader reader = null;\n        if (exists) {\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        } else {\n            Object[] options = { ""Yes"", ""No, Thanks"" };\n            int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);\n            if (n == 0) {\n                try {\n                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.exit(0);\n                }\n            } else {\n                System.exit(0);\n            }\n            try {\n                reader = new FileReader(m_filename);\n            } catch (FileNotFoundException e1) {\n                e1.printStackTrace();\n                System.exit(0);\n            }\n        }\n        try {\n            readFromFile(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n        Box mainpanel = Box.createVerticalBox();\n        mainpanel.add(buildTauntsPanel());\n        mainpanel.add(buildMouseStylePanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildColorPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        mainpanel.add(buildButtonsPanel());\n        mainpanel.add(Box.createVerticalStrut(10));\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setContentPane(mainpanel);\n        this.pack();\n        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));\n        this.setTitle(""Hogs Customizer"");\n        this.setVisible(true);\n    }\n', '    @Override\n    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        boolean found = false;\n        String name = getArgument(request.getPathInfo());\n        if (StringUtils.contains(name, \'/\')) {\n            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);\n            if (file.exists() && file.isFile()) {\n                found = true;\n                MagicMatch match = Magic.getMagicMatch(file, true);\n                response.setContentType(match.getMimeType());\n                FileInputStream in = new FileInputStream(file);\n                IOUtils.copyLarge(in, response.getOutputStream());\n                in.close();\n            }\n        } else if (!StringUtils.isBlank(name)) {\n            int articleId = NumberUtils.toInt(name);\n            if (articleId > 0) {\n                Article article = articleDao.load(articleId);\n                if (article != null) {\n                    found = true;\n                    sendArticle(request, response, article);\n                }\n            }\n        } else {\n            int page = NumberUtils.toInt(request.getParameter(""page""), 0);\n            Date fromDate = null;\n            String from = request.getParameter(""from"");\n            if (StringUtils.isNotBlank(from)) {\n                try {\n                    fromDate = dayMonthYearEn.parse(from);\n                } catch (ParseException e) {\n                }\n            }\n            Date untilDate = null;\n            String until = request.getParameter(""until"");\n            if (StringUtils.isNotBlank(until)) {\n                try {\n                    untilDate = dayMonthYearEn.parse(until);\n                } catch (ParseException e) {\n                }\n            }\n            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));\n            found = true;\n        }\n        if (found != true) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        }\n    }\n']",526,"    public HogsCustomizer() {
        m_url = PathFinder.getCustsFile();
        m_currenttaunts = new String[10];
        m_textboxes = new JTextField[10];
        M__bg = new Color(255, 255, 255);
        boolean  exits = (new File(m_url)). exits();
        m_inverted = false;
        m_joosed = new JColorChooser();
        AbstractColorChooserPanel[] choes = m_joosed.getChooserPanels();
        m_joosed.removeChooserPanel(choes[0]);
        m_joosed.removeChooserPanel(choes[2]);
        m_joosed.setPreviewPanel(new JPanel());
        Reader player = null;
        if ( exits) {
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            Object[] opens = { ""Yes"", ""No, Thanks"" };
            int dn = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.
                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opens, opens[1]);
            if (dn == 0) {
                try {
                    FileChannel destConnection = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();
                    FileChannel dostchannel = new FileOutputStream(m_url).getChannel();
                    dostchannel.transferFrom(destConnection, 0, destConnection.size());
                    destConnection.close();
                    dostchannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
            try {
                player = new FileReader(m_url);
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
                System.exit(0);
            }
        }
        try {
            readFromFile(player);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        Box mainpanel = Box.createVerticalBox();
        mainpanel.add(buildTauntsPanel());
        mainpanel.add(buildMouseStylePanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildColorPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildButtonsPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainpanel);
        this.pack();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));
        this.setTitle(""Hogs Customizer"");
        this.setVisible(true);
    }
",1,1,1,-1,"m_filename,m_currenttaunts,m_textfields,m_color,exists,m_chooser,panels,reader,options,n,srcChannel,dstChannel","m_filename:0.0,m_currenttaunts:0.0,m_textfields:0.0,m_color:0.0,exists:0.0,m_chooser:0.0,panels:0.0,reader:0.0017126202583312988,options:0.0005164742469787598,n:-3.612041473388672e-05,srcChannel:0.0,dstChannel:0.0,",11,34,"reader:player,options:opens,m_filename:m_url,m_currenttaunts:m_currenttaunts,m_textfields:m_textboxes,m_color:M__bg,exists: exits,m_chooser:m_joosed,panels:choes,srcChannel:destConnection,dstChannel:dostchannel,n:dn,",Greedy,523,0.29991225004196165
439,"['21459233', '16190704', '    private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception {\n        pm.beginTask(""Creating temp project"", 1);\n        IPath destination = new Path(pName);\n        IJavaProject oldJavaproj = JavaCore.create(project);\n        IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();\n        IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName);\n        newProject.create(null);\n        newProject.open(null);\n        IProjectDescription desc = newProject.getDescription();\n        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n        newProject.setDescription(desc, null);\n        List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();\n        for (IClasspathEntry cEntry : classPath) {\n            switch(cEntry.getEntryKind()) {\n                case IClasspathEntry.CPE_SOURCE:\n                    System.out.println(""Source folder "" + cEntry.getPath());\n                    newClassPath.add(copySourceFolder(project, newProject, cEntry, destination));\n                    break;\n                case IClasspathEntry.CPE_LIBRARY:\n                    System.out.println(""library folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_PROJECT:\n                    System.out.println(""project folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                case IClasspathEntry.CPE_VARIABLE:\n                    System.out.println(""variable folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n                    break;\n                default:\n                    System.out.println(""container folder "" + cEntry.getPath());\n                    newClassPath.add(cEntry);\n            }\n        }\n        copyDir(project.getLocation().toString(), ""/translator"", newProject.getLocation().toString(), """", new ArrayList<String>() {\n\n            {\n                add(""generated"");\n                add(""classes"");\n                add("".svn"");\n            }\n        });\n        newProject.refreshLocal(IResource.DEPTH_INFINITE, pm);\n        newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm);\n        newProject.touch(pm);\n        IJavaProject javaproj = JavaCore.create(newProject);\n        javaproj.setOutputLocation(new Path(""/"" + newProject.getName() + ""/classes/bin""), null);\n        javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm);\n        Map opts = oldJavaproj.getOptions(true);\n        javaproj.setOptions(opts);\n        javaproj.makeConsistent(pm);\n        javaproj.save(pm, true);\n        return newProject;\n    }\n', '    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {\n        String sessionUrl = getSessionTokenUrl(protocol, domain);\n        URL url = new URL(sessionUrl);\n        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");\n        httpConn.setRequestProperty(""Authorization"", header);\n        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());\n        }\n        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));\n        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\\n"", ""="", true);\n        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);\n        return parsedTokens.get(""token"");\n    }\n']",504,"    private static IProject createCopyProject(IProject command, String  pVersion, IWorkspace www, IProgressMonitor  mp) throws Exception {
         mp.beginTask(""Creating temp project"", 1);
        IPath destination = new Path( pVersion);
        IJavaProject oldJavaprobj = JavaCore.create(command);
        IClasspathEntry[] classPath = oldJavaprobj.getRawClasspath();
        IProject nowproject = ResourcesPlugin.getWorkspace().getRoot().getProject( pVersion);
        nowproject.create(null);
        nowproject.open(null);
        IProjectDescription txt = nowproject.getDescription();
        txt.setNatureIds(new String[] { JavaCore.NATURE_ID });
        nowproject.setDescription(txt, null);
        List<IClasspathEntry> newLanguageMember = new ArrayList<IClasspathEntry>();
        for (IClasspathEntry  cResource : classPath) {
            switch( cResource.getEntryKind()) {
                case IClasspathEntry.CPE_SOURCE:
                    System.out.println(""Source folder "" +  cResource.getPath());
                    newLanguageMember.add(copySourceFolder(command, nowproject,  cResource, destination));
                    break;
                case IClasspathEntry.CPE_LIBRARY:
                    System.out.println(""library folder "" +  cResource.getPath());
                    newLanguageMember.add( cResource);
                    break;
                case IClasspathEntry.CPE_PROJECT:
                    System.out.println(""project folder "" +  cResource.getPath());
                    newLanguageMember.add( cResource);
                    break;
                case IClasspathEntry.CPE_VARIABLE:
                    System.out.println(""variable folder "" +  cResource.getPath());
                    newLanguageMember.add( cResource);
                    break;
                default:
                    System.out.println(""container folder "" +  cResource.getPath());
                    newLanguageMember.add( cResource);
            }
        }
        copyDir(command.getLocation().toString(), ""/translator"", nowproject.getLocation().toString(), """", new ArrayList<String>() {

            {
                add(""generated"");
                add(""classes"");
                add("".svn"");
            }
        });
        nowproject.refreshLocal(IResource.DEPTH_INFINITE,  mp);
        nowproject.build(IncrementalProjectBuilder.AUTO_BUILD,  mp);
        nowproject.touch( mp);
        IJavaProject javaproj = JavaCore.create(nowproject);
        javaproj.setOutputLocation(new Path(""/"" + nowproject.getName() + ""/classes/bin""), null);
        javaproj.setRawClasspath(newLanguageMember.toArray(new IClasspathEntry[newLanguageMember.size()]),  mp);
        Map opts = oldJavaprobj.getOptions(true);
        javaproj.setOptions(opts);
        javaproj.makeConsistent( mp);
        javaproj.save( mp, true);
        return nowproject;
    }
",0,0,0,-1,"project,pName,ws,pm,destination,oldJavaproj,classPath,newProject,desc,newClassPath,cEntry","project:-1.9788742065429688e-05,pName:0.0,ws:1.1920928955078125e-07,pm:-5.0067901611328125e-06,destination:0.0,oldJavaproj:0.0,classPath:0.0,newProject:0.0,desc:3.337860107421875e-06,newClassPath:0.0,cEntry:0.0,",9,57,"desc:txt,ws:www,pName: pVersion,destination:destination,oldJavaproj:oldJavaprobj,classPath:classPath,newProject:nowproject,newClassPath:newLanguageMember,cEntry: cResource,pm: mp,project:command,",Greedy,560,0.276971964041392
440,"['7550876', '7099534', '    public void test(TestHarness harness) {\n        harness.checkPoint(""TestOfMD4"");\n        try {\n            Security.addProvider(new JarsyncProvider());\n            algorithm = MessageDigest.getInstance(""MD4"", ""JARSYNC"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n            throw new Error(x);\n        }\n        try {\n            for (int i = 0; i < 64; i++) algorithm.update((byte) \'a\');\n            byte[] md = algorithm.digest();\n            String exp = ""52f5076fabd22680234a3fa9f9dc5732"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testSixtyFourA"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n        }\n        try {\n            harness.verbose(""NOTE: This test may take a while."");\n            for (int i = 0; i < 536870913; i++) algorithm.update((byte) \'a\');\n            byte[] md = algorithm.digest();\n            String exp = ""47d01fa6657f903280232d30b98da482"";\n            harness.check(exp.equals(Util.toHexString(md)), ""test536870913A"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.provider"");\n        }\n        try {\n            byte[] md = algorithm.digest(""a"".getBytes());\n            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testA"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testA"");\n        }\n        try {\n            byte[] md = algorithm.digest(""abc"".getBytes());\n            String exp = ""a448017aaf21d8525fc10ae87aa6729d"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testABC"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testABC"");\n        }\n        try {\n            byte[] md = algorithm.digest(""message digest"".getBytes());\n            String exp = ""d9130a8164549fe818874806e1c7014b"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testMessageDigest"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testMessageDigest"");\n        }\n        try {\n            byte[] md = algorithm.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());\n            String exp = ""d79e1c308aa5bbcdeea8ed63df412da9"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testAlphabet"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testAlphabet"");\n        }\n        try {\n            byte[] md = algorithm.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());\n            String exp = ""043f8582f241db351ce627e153e7f0e4"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testAsciiSubset"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testAsciiSubset"");\n        }\n        try {\n            byte[] md = algorithm.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());\n            String exp = ""e33b4ddc9c38f2199c3e7b164fcc0536"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testEightyNumerics"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testEightyNumerics"");\n        }\n        try {\n            algorithm.update(""a"".getBytes(), 0, 1);\n            clone = (MessageDigest) algorithm.clone();\n            byte[] md = algorithm.digest();\n            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #1"");\n            clone.update(""bc"".getBytes(), 0, 2);\n            md = clone.digest();\n            exp = ""a448017aaf21d8525fc10ae87aa6729d"";\n            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #2"");\n        } catch (Exception x) {\n            harness.debug(x);\n            harness.fail(""TestOfMD4.testCloning"");\n        }\n    }\n', '    private static String genRandomGUID(boolean secure) {\n        String valueBeforeMD5 = """";\n        String valueAfterMD5 = """";\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n            return valueBeforeMD5;\n        }\n        long time = System.currentTimeMillis();\n        long rand = 0;\n        if (secure) {\n            rand = mySecureRand.nextLong();\n        } else {\n            rand = myRand.nextLong();\n        }\n        sbValueBeforeMD5.append(s_id);\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(time));\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString();\n        md5.update(valueBeforeMD5.getBytes());\n        byte[] array = md5.digest();\n        String strTemp = """";\n        for (int i = 0; i < array.length; i++) {\n            strTemp = (Integer.toHexString(array[i] & 0XFF));\n            if (strTemp.length() == 1) {\n                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;\n            } else {\n                valueAfterMD5 = valueAfterMD5 + strTemp;\n            }\n        }\n        return valueAfterMD5.toUpperCase();\n    }\n']",840,"    public void test(TestHarness harservice) {
        harservice.checkPoint(""TestOfMD4"");
        try {
            Security.addProvider(new JarsyncProvider());
            allsystem = MessageDigest.getInstance(""MD4"", ""JARSYNC"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.provider"");
            throw new Error(x);
        }
        try {
            for (int uri = 0; uri < 64; uri++) allsystem.update((byte) 'a');
            byte[] mad = allsystem.digest();
            String api = ""52f5076fabd22680234a3fa9f9dc5732"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testSixtyFourA"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.provider"");
        }
        try {
            harservice.verbose(""NOTE: This test may take a while."");
            for (int uri = 0; uri < 536870913; uri++) allsystem.update((byte) 'a');
            byte[] mad = allsystem.digest();
            String api = ""47d01fa6657f903280232d30b98da482"";
            harservice.check(api.equals(Util.toHexString(mad)), ""test536870913A"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.provider"");
        }
        try {
            byte[] mad = allsystem.digest(""a"".getBytes());
            String api = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testA"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testA"");
        }
        try {
            byte[] mad = allsystem.digest(""abc"".getBytes());
            String api = ""a448017aaf21d8525fc10ae87aa6729d"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testABC"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testABC"");
        }
        try {
            byte[] mad = allsystem.digest(""message digest"".getBytes());
            String api = ""d9130a8164549fe818874806e1c7014b"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testMessageDigest"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testMessageDigest"");
        }
        try {
            byte[] mad = allsystem.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());
            String api = ""d79e1c308aa5bbcdeea8ed63df412da9"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testAlphabet"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testAlphabet"");
        }
        try {
            byte[] mad = allsystem.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());
            String api = ""043f8582f241db351ce627e153e7f0e4"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testAsciiSubset"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testAsciiSubset"");
        }
        try {
            byte[] mad = allsystem.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());
            String api = ""e33b4ddc9c38f2199c3e7b164fcc0536"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testEightyNumerics"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testEightyNumerics"");
        }
        try {
            allsystem.update(""a"".getBytes(), 0, 1);
            clone = (MessageDigest) allsystem.clone();
            byte[] mad = allsystem.digest();
            String api = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testCloning #1"");
            clone.update(""bc"".getBytes(), 0, 2);
            mad = clone.digest();
            api = ""a448017aaf21d8525fc10ae87aa6729d"";
            harservice.check(api.equals(Util.toHexString(mad)), ""testCloning #2"");
        } catch (Exception x) {
            harservice.debug(x);
            harservice.fail(""TestOfMD4.testCloning"");
        }
    }
",1,1,1,-1,"harness,algorithm,i,md,exp","harness:0.0,algorithm:0.0,i:-4.76837158203125e-06,md:3.5762786865234375e-06,exp:-1.430511474609375e-06,",5,93,"md:mad,harness:harservice,algorithm:allsystem,exp:api,i:uri,",Greedy,495,0.27398521900177003
441,"['14733077', '20833509', '    private static String encryptMD5(String password, Long digestSeed) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""MD5"");\n            digest.reset();\n            digest.update(password.getBytes(""UTF-8""));\n            digest.update(digestSeed.toString().getBytes(""UTF-8""));\n            byte[] messageDigest = digest.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                hexString.append(Integer.toHexString(0xff & messageDigest[i]));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        } catch (NullPointerException e) {\n            return new StringBuffer().toString();\n        }\n    }\n', '    protected String doIt() throws java.lang.Exception {\n        StringBuffer sql = null;\n        int no = 0;\n        String clientCheck = "" AND AD_Client_ID="" + m_AD_Client_ID;\n        if (m_deleteOldImported) {\n            sql = new StringBuffer(""DELETE I_BPartner "" + ""WHERE I_IsImported=\'Y\'"").append(clientCheck);\n            no = DB.executeUpdate(sql.toString());\n            log.fine(""Delete Old Impored ="" + no);\n        }\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET AD_Client_ID = COALESCE(AD_Client_ID, "").append(m_AD_Client_ID).append(""),"" + "" AD_Org_ID = COALESCE(AD_Org_ID, 0),"" + "" IsActive = COALESCE(IsActive, \'Y\'),"" + "" Created = COALESCE(Created, current_timestamp),"" + "" CreatedBy = COALESCE(CreatedBy, 0),"" + "" Updated = COALESCE(Updated, current_timestamp),"" + "" UpdatedBy = COALESCE(UpdatedBy, 0),"" + "" I_ErrorMsg = \'\',"" + "" I_IsImported = \'N\' "" + ""WHERE I_IsImported<>\'Y\' OR I_IsImported IS NULL"");\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Reset="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET GroupValue=(SELECT Value FROM C_BP_Group g WHERE g.IsDefault=\'Y\'"" + "" AND g.AD_Client_ID=i.AD_Client_ID AND ROWNUM=1) "" + ""WHERE GroupValue IS NULL AND C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Group Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BP_Group_ID=(SELECT C_BP_Group_ID FROM C_BP_Group g"" + "" WHERE i.GroupValue=g.Value AND g.AD_Client_ID=i.AD_Client_ID ORDER BY g.IsDefault DESC LIMIT 1) "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidGroup"") + "". \' "" + ""WHERE C_BP_Group_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Group="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET CountryCode=(SELECT CountryCode FROM C_Country c WHERE c.isactive=\'Y\'"" + "" AND c.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE CountryCode IS NULL AND C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c"" + "" WHERE i.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidCountry"") + "". \' "" + ""WHERE C_Country_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Country="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set RegionName=(SELECT Name FROM C_Region r"" + "" WHERE r.IsDefault=\'Y\' AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID) AND ROWNUM=1) "" + ""WHERE RegionName IS NULL AND C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Region Default="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r"" + "" WHERE r.Name=i.RegionName AND r.C_Country_ID=i.C_Country_ID"" + "" AND r.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Region_ID IS NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidRegion"") + "". \' "" + "" WHERE C_Region_ID IS NULL "" + "" AND EXISTS (SELECT * FROM C_Country c"" + "" WHERE c.C_Country_ID=i.C_Country_ID AND c.HasRegion=\'Y\')"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Region="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET BPContactGreeting=NULL WHERE C_Greeting_ID IS NULL AND char_length(trim(BPContactGreeting)) = 0 AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Reset Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Greeting_ID=(SELECT C_Greeting_ID FROM C_Greeting g"" + "" WHERE i.BPContactGreeting=g.Name AND g.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||\'"" + getMsg(""ImportBPInvalidGreeting"") + "". \' "" + ""WHERE C_Greeting_ID IS NULL AND BPContactGreeting IS NOT NULL"" + "" AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.config(""Invalid Greeting="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p"" + "" WHERE i.Value=p.Value AND p.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NULL AND Value IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found BPartner="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET AD_User_ID=(SELECT AD_User_ID FROM AD_User c"" + "" WHERE i.ContactName=c.Name AND i.C_BPartner_ID=c.C_BPartner_ID AND c.AD_Client_ID=i.AD_Client_ID) "" + ""WHERE C_BPartner_ID IS NOT NULL AND AD_User_ID IS NULL AND ContactName IS NOT NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found Contact="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_BPartner_Location_ID=(SELECT C_BPartner_Location_ID"" + "" FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"" + "" WHERE i.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=i.AD_Client_ID"" + "" AND DUMP(i.Address1)=DUMP(l.Address1) AND DUMP(i.Address2)=DUMP(l.Address2)"" + "" AND DUMP(i.City)=DUMP(l.City) AND DUMP(i.Postal)=DUMP(l.Postal) AND DUMP(i.Postal_Add)=DUMP(l.Postal_Add)"" + "" AND DUMP(i.C_Region_ID)=DUMP(l.C_Region_ID) AND DUMP(i.C_Country_ID)=DUMP(l.C_Country_ID)) "" + ""WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"" + "" AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Found Location="" + no);\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_Codigo="" + MCategoriaIva.CONSUMIDOR_FINAL + "" WHERE (C_Categoria_IVA_Codigo IS NULL OR C_Categoria_IVA_Codigo = 0) "" + ""  AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET C_Categoria_IVA_ID= "" + "" (SELECT C_Categoria_IVA_ID "" + ""  FROM C_Categoria_IVA c "" + ""  WHERE i.C_Categoria_IVA_Codigo=c.Codigo AND c.AD_Client_ID=i.AD_Client_ID "" + "" ) "" + ""WHERE C_Categoria_IVA_ID IS NULL "" + ""  AND I_IsImported=\'N\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET SalesRep_ID=(SELECT AD_User_ID "" + ""FROM AD_User u "" + ""WHERE u.Name = i.SalesRep_Name AND u.AD_Client_ID IN (0, i.AD_Client_ID)) "" + ""WHERE SalesRep_ID IS NULL "" + ""AND I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        log.fine(""Set Country="" + no);\n        int noInsert = 0;\n        int noUpdate = 0;\n        sql = new StringBuffer(""SELECT I_BPartner_ID, C_BPartner_ID,"" + ""C_BPartner_Location_ID,COALESCE(Address1,Address2,City,RegionName,CountryCode),"" + ""AD_User_ID,ContactName "" + ""FROM I_BPartner "" + ""WHERE I_IsImported=\'N\'"").append(clientCheck);\n        Connection conn = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);\n        try {\n            log.info(""En importBPartbner antes de hacer el update en c_BPartner"");\n            PreparedStatement pstmt_updateBPartner = conn.prepareStatement(""UPDATE C_BPartner "" + ""SET Value=aux.Value"" + "",Name=aux.Name"" + "",Name2=aux.Name2"" + "",Description=aux.Description"" + "",DUNS=aux.DUNS"" + "",TaxID=aux.TaxID"" + "",NAICS=aux.NAICS"" + "",C_BP_Group_ID=aux.C_BP_Group_ID"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux.UpdatedBy"" + "",IIBB=aux.IIBB"" + "" from (SELECT Value,Name,Name2,Description,DUNS,TaxID,NAICS,C_BP_Group_ID,UpdatedBy,IIBB FROM I_BPartner WHERE I_BPartner_ID=?) as aux"" + "" WHERE C_BPartner_ID=?"");\n            log.info(""En importBPartbner despues de hacer el update en c_BPartner"");\n            PreparedStatement pstmt_insertLocation = conn.prepareStatement(""INSERT INTO C_Location (C_Location_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""Address1,Address2,City,Postal,Postal_Add,C_Country_ID,C_Region_ID "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_insertBPLocation = conn.prepareStatement(""INSERT INTO C_BPartner_Location ( "" + ""\tC_BPartner_Location_ID,"" + ""\tAD_Client_ID,"" + ""\tAD_Org_ID,"" + ""\tIsActive,"" + ""\tCreated,"" + ""\tCreatedBy,"" + ""\tUpdated,"" + ""\tUpdatedBy,"" + ""\tName,"" + ""\tIsBillTo,"" + ""\tIsShipTo,"" + ""\tIsPayFrom,"" + ""\tIsRemitTo,"" + ""\tPhone,"" + ""\tPhone2,"" + ""\tFax,"" + ""\tC_BPartner_ID,"" + ""\tC_Location_ID) "" + ""SELECT ?,AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""CASE WHEN char_length(trim(coalesce(address1,\'\'))) > 0 THEN address1 "" + ""     WHEN char_length(trim(coalesce(city,\'\'))) > 0 THEN city "" + ""     WHEN char_length(trim(coalesce(regionname,\'\'))) > 0 THEN regionname "" + ""     ELSE name "" + ""END,"" + ""\'Y\',\'Y\',\'Y\',\'Y\',"" + ""Phone,Phone2,Fax, ?,? "" + ""FROM I_BPartner "" + ""WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_insertBPContact = conn.prepareStatement(""INSERT INTO AD_User (AD_User_ID,"" + ""AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"" + ""C_BPartner_ID,C_BPartner_Location_ID,C_Greeting_ID,"" + ""Name,Title,Description,Comments,Phone,Phone2,Fax,EMail,Birthday) "" + ""SELECT ?,"" + ""AD_Client_ID,AD_Org_ID,\'Y\',current_timestamp,CreatedBy,current_timestamp,UpdatedBy,"" + ""?,?,C_Greeting_ID,"" + ""ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday "" + ""FROM I_BPartner "" + "" WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt_updateBPContact = conn.prepareStatement(""UPDATE AD_User "" + ""SET C_Greeting_ID=aux1.C_Greeting_ID"" + "",Name=aux1.Name"" + "",Title=aux1.Title"" + "",Description=aux1.Description"" + "",Comments=aux1.Commets"" + "",Phone=aux1.Phone"" + "",Phone2=aux1.Phone2"" + "",Fax=aux1.Fax"" + "",EMail=aux1.EMail"" + "",Birthday=aux1.Birthaday"" + "",Updated=current_timestamp"" + "",UpdatedBy=aux1.UpdatedBy"" + "" from (SELECT C_Greeting_ID,ContactName,Title,ContactDescription,Comments,Phone,Phone2,Fax,EMail,Birthday,UpdatedBy FROM I_BPartner WHERE I_BPartner_ID=?) as aux1"" + "" WHERE AD_User_ID=?"");\n            PreparedStatement pstmt_setImported = conn.prepareStatement(""UPDATE I_BPartner SET I_IsImported=\'Y\',"" + "" C_BPartner_ID=?, C_BPartner_Location_ID=?, AD_User_ID=?, "" + "" Updated=current_timestamp, Processed=\'Y\' WHERE I_BPartner_ID=?"");\n            PreparedStatement pstmt = DB.prepareStatement(sql.toString());\n            ResultSet rs = pstmt.executeQuery();\n            while (rs.next()) {\n                int I_BPartner_ID = rs.getInt(1);\n                int C_BPartner_ID = rs.getInt(2);\n                boolean newBPartner = C_BPartner_ID == 0;\n                int C_BPartner_Location_ID = rs.getInt(3);\n                String newLocali = rs.getString(4);\n                boolean newLocation = rs.getString(4) != null;\n                int AD_User_ID = rs.getInt(5);\n                boolean newContact = rs.getString(6) != null;\n                log.fine(""I_BPartner_ID="" + I_BPartner_ID + "", C_BPartner_ID="" + C_BPartner_ID + "", C_BPartner_Location_ID="" + C_BPartner_Location_ID + "" create="" + newLocation + "", AD_User_ID="" + AD_User_ID + "" create="" + newContact);\n                if (newBPartner) {\n                    X_I_BPartner iBP = new X_I_BPartner(getCtx(), I_BPartner_ID, null);\n                    MBPartner bp = new MBPartner(iBP);\n                    if (bp.save()) {\n                        C_BPartner_ID = bp.getC_BPartner_ID();\n                        log.finest(""Insert BPartner"");\n                        noInsert++;\n                    } else {\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPartner failed: "" + CLogger.retrieveErrorAsString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else {\n                    pstmt_updateBPartner.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPartner.setInt(2, C_BPartner_ID);\n                    try {\n                        no = pstmt_updateBPartner.executeUpdate();\n                        log.finest(""Update BPartner = "" + no);\n                        noUpdate++;\n                    } catch (SQLException ex) {\n                        log.finest(""Update BPartner -- "" + ex.toString());\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BPartner: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (C_BPartner_Location_ID != 0) {\n                } else if (newLocation) {\n                    int C_Location_ID = 0;\n                    try {\n                        C_Location_ID = DB.getNextID(m_AD_Client_ID, ""C_Location"", null);\n                        if (C_Location_ID <= 0) {\n                            throw new DBException(""No NextID ("" + C_Location_ID + "")"");\n                        }\n                        pstmt_insertLocation.setInt(1, C_Location_ID);\n                        pstmt_insertLocation.setInt(2, I_BPartner_ID);\n                        no = pstmt_insertLocation.executeUpdate();\n                        log.finest(""Insert Location = "" + no);\n                    } catch (SQLException ex) {\n                        log.finest(""Insert Location - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert Location: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                    try {\n                        C_BPartner_Location_ID = (DB.getNextID(m_AD_Client_ID, ""C_BPartner_Location"", null));\n                        log.finest(""C_BPartner_Location_ID es : "" + C_BPartner_Location_ID);\n                        if (C_BPartner_Location_ID <= 0) {\n                            throw new DBException(""No NextID ("" + C_BPartner_Location_ID + "")"");\n                        }\n                        pstmt_insertBPLocation.setInt(1, C_BPartner_Location_ID);\n                        pstmt_insertBPLocation.setInt(2, C_BPartner_ID);\n                        pstmt_insertBPLocation.setInt(3, C_Location_ID);\n                        pstmt_insertBPLocation.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPLocation.executeUpdate();\n                        log.finest(""Insert BP Location = "" + no);\n                    } catch (Exception ex) {\n                        log.finest(""Insert BPLocation - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPLocation: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                if (AD_User_ID != 0) {\n                    pstmt_updateBPContact.setInt(1, I_BPartner_ID);\n                    pstmt_updateBPContact.setInt(2, AD_User_ID);\n                    try {\n                        no = pstmt_updateBPContact.executeUpdate();\n                        log.finest(""Update BP Contact = "" + no);\n                    } catch (SQLException ex) {\n                        log.finest(""Update BP Contact - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Update BP Contact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                } else if (newContact) {\n                    try {\n                        AD_User_ID = DB.getNextID(m_AD_Client_ID, ""AD_User"", null);\n                        if (AD_User_ID <= 0) {\n                            throw new DBException(""No NextID ("" + AD_User_ID + "")"");\n                        }\n                        pstmt_insertBPContact.setInt(1, AD_User_ID);\n                        pstmt_insertBPContact.setInt(2, C_BPartner_ID);\n                        if (C_BPartner_Location_ID == 0) {\n                            pstmt_insertBPContact.setNull(3, Types.NUMERIC);\n                        } else {\n                            pstmt_insertBPContact.setInt(3, C_BPartner_Location_ID);\n                        }\n                        pstmt_insertBPContact.setInt(4, I_BPartner_ID);\n                        no = pstmt_insertBPContact.executeUpdate();\n                        log.finest(""Insert BP Contact = "" + no);\n                    } catch (Exception ex) {\n                        log.finest(""Insert BPContact - "" + ex.toString());\n                        conn.rollback();\n                        noInsert--;\n                        sql = new StringBuffer(""UPDATE I_BPartner i "" + ""SET I_IsImported=\'E\', I_ErrorMsg=I_ErrorMsg||"").append(DB.TO_STRING(""Insert BPContact: "" + ex.toString())).append("" WHERE I_BPartner_ID="").append(I_BPartner_ID);\n                        DB.executeUpdate(sql.toString());\n                        continue;\n                    }\n                }\n                pstmt_setImported.setInt(1, C_BPartner_ID);\n                if (C_BPartner_Location_ID == 0) {\n                    pstmt_setImported.setNull(2, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(2, C_BPartner_Location_ID);\n                }\n                if (AD_User_ID == 0) {\n                    pstmt_setImported.setNull(3, Types.NUMERIC);\n                } else {\n                    pstmt_setImported.setInt(3, AD_User_ID);\n                }\n                pstmt_setImported.setInt(4, I_BPartner_ID);\n                no = pstmt_setImported.executeUpdate();\n                conn.commit();\n            }\n            rs.close();\n            pstmt.close();\n            pstmt_updateBPartner.close();\n            pstmt_insertLocation.close();\n            pstmt_insertBPLocation.close();\n            pstmt_insertBPContact.close();\n            pstmt_updateBPContact.close();\n            pstmt_setImported.close();\n            conn.close();\n            conn = null;\n        } catch (SQLException e) {\n            try {\n                if (conn != null) {\n                    conn.close();\n                }\n                conn = null;\n            } catch (SQLException ex) {\n            }\n            throw new Exception(""ImportBPartner.doIt"", e);\n        } finally {\n            if (conn != null) {\n                conn.close();\n            }\n            conn = null;\n        }\n        sql = new StringBuffer(""UPDATE I_BPartner "" + ""SET I_IsImported=\'N\', Updated=current_timestamp "" + ""WHERE I_IsImported<>\'Y\'"").append(clientCheck);\n        no = DB.executeUpdate(sql.toString());\n        addLog(0, null, new BigDecimal(no), ""@Errors@"");\n        addLog(0, null, new BigDecimal(noInsert), ""@C_BPartner_ID@: @Inserted@"");\n        addLog(0, null, new BigDecimal(noUpdate), ""@C_BPartner_ID@: @Updated@"");\n        return """";\n    }\n']",172,"    private static String encryptMD5(String hash, Long digestNeeds) {
        try {
            MessageDigest  Digger = MessageDigest.getInstance(""MD5"");
             Digger.reset();
             Digger.update(hash.getBytes(""UTF-8""));
             Digger.update(digestNeeds.toString().getBytes(""UTF-8""));
            byte[]  messageDigex =  Digger. Digger();
            StringBuffer hashCode = new StringBuffer();
            for (int id = 0; id <  messageDigex.length; id++) {
                hashCode.append(Integer.toHexString(0xff &  messageDigex[id]));
            }
            return hashCode.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0,0,0,-1,"password,digestSeed,digest,messageDigest,hexString,i","password:-0.006445348262786865,digestSeed:0.0,digest:0.0,messageDigest:0.0,hexString:0.0,i:0.007534027099609375,",6,20,"i:id,digestSeed:digestNeeds,digest: Digger,messageDigest: messageDigex,hexString:hashCode,password:hash,",Greedy,261,0.13192853132883708
442,"['9728028', '305886', '    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {\n        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);\n        mdAlgorithm.update(plainText.getBytes());\n        byte[] digest = mdAlgorithm.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            plainText = Integer.toHexString(0xFF & digest[i]);\n            if (plainText.length() < 2) {\n                plainText = ""0"" + plainText;\n            }\n            hexString.append(plainText);\n        }\n        return hexString.toString();\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",121,"    public static String getHashText(String  plainString, String Algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlger = MessageDigest.getInstance(Algorithm);
        mdAlger.update( plainString.getBytes());
        byte[] generested = mdAlger.generested();
        StringBuffer hexstring = new StringBuffer();
        for (int ai = 0; ai < generested.length; ai++) {
             plainString = Integer.toHexString(0xFF & generested[ai]);
            if ( plainString.length() < 2) {
                 plainString = ""0"" +  plainString;
            }
            hexstring.append( plainString);
        }
        return hexstring.toString();
    }
",0,0,0,-1,"plainText,algorithm,mdAlgorithm,digest,hexString,i","plainText:0.0,algorithm:0.0,mdAlgorithm:0.0,digest:0.0,hexString:0.0,i:-0.0027854442596435547,",6,23,"plainText: plainString,algorithm:Algorithm,mdAlgorithm:mdAlger,digest:generested,hexString:hexstring,i:ai,",Greedy,289,0.125300665696462
443,"['15223732', '17389235', '    @Test(dataProvider = Arquillian.ARQUILLIAN_DATA_PROVIDER)\n    public void shouldGreetUser(@ArquillianResource URL baseURL) throws IOException {\n        final String name = ""Earthlings"";\n        final URL url = new URL(baseURL, ""Foo.action"");\n        StringBuilder builder = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            builder.append(line);\n        }\n        reader.close();\n        LOGGER.info(""Returned response: "" + builder.toString());\n        Assert.assertEquals(builder.toString(), FooService.GREETING + name);\n    }\n', '    public boolean PrintPage(String page, String url_addr, String charset) {\n        File parent_path = new File(new File(page).getParent());\n        if (!parent_path.exists()) {\n            parent_path.mkdirs();\n        }\n        String r_line = null;\n        BufferedReader bReader = null;\n        FileOutputStream out = null;\n        OutputStreamWriter writer = null;\n        PrintWriter fileOut = null;\n        File file = null;\n        try {\n            InputStream ins = new URL(url_addr).openStream();\n            file = new File(page);\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            bReader = new BufferedReader(new InputStreamReader(ins, charset));\n            out = new FileOutputStream(page);\n            writer = new OutputStreamWriter(out, charset);\n            fileOut = new PrintWriter(writer);\n            while ((r_line = bReader.readLine()) != null) {\n                r_line = r_line.trim();\n                int str_len = r_line.length();\n                if (str_len > 0) {\n                    fileOut.println(r_line);\n                    fileOut.flush();\n                }\n            }\n            ins.close();\n            ins = null;\n            fileOut.close();\n            writer.close();\n            out.close();\n            bReader.close();\n            fileOut = null;\n            writer = null;\n            out = null;\n            bReader = null;\n            parent_path = null;\n            file = null;\n            r_line = null;\n            return true;\n        } catch (IOException ioe) {\n            log.error(ioe.getMessage());\n            ioe.printStackTrace();\n            return false;\n        } catch (Exception es) {\n            es.printStackTrace();\n            log.error(""static----------"" + es.getMessage());\n            return false;\n        } finally {\n            try {\n                if (fileOut != null) {\n                    fileOut.close();\n                    fileOut = null;\n                }\n                if (writer != null) {\n                    writer.close();\n                    writer = null;\n                }\n                if (out != null) {\n                    out.close();\n                    out = null;\n                }\n                if (bReader != null) {\n                    bReader.close();\n                    bReader = null;\n                }\n            } catch (IOException ioe) {\n                log.error(ioe.getMessage());\n            } catch (Exception e) {\n                log.error(e.getMessage());\n            }\n        }\n    }\n']",133,"    @Test(dataProvider = Arquillian.ARQUILLIAN_DATA_PROVIDER)
    public void shouldGreetUser(@ArquillianResource URL apiCL) throws IOException {
        final String ame = ""Earthlings"";
        final URL Url = new URL(apiCL, ""Foo.action"");
        StringBuilder letter = new StringBuilder();
        BufferedReader uri = new BufferedReader(new InputStreamReader(Url.openStream()));
        String connection;
        while ((connection = uri.readLine()) != null) {
            letter.append(connection);
        }
        uri.close();
        LOGGER.info(""Returned response: "" + letter.toString());
        Assert.assertEquals(letter.toString(), FooService.GREETING + ame);
    }
",1,1,1,-1,"baseURL,name,url,builder,reader,line","baseURL:0.0,name:-1.5974044799804688e-05,url:0.00040280818939208984,builder:-4.303455352783203e-05,reader:-0.00018775463104248047,line:-9.399652481079102e-05,",6,16,"url:Url,baseURL:apiCL,name:ame,builder:letter,line:connection,reader:uri,",Greedy,256,0.12078113555908203
444,"['6282214', '14588787', '    public static boolean Copy(String __from, String __to) {\n        try {\n            int bytesum = 0;\n            int byteread = -1;\n            java.io.File oldfile = new java.io.File(__from);\n            if (oldfile.exists()) {\n                InputStream inStream = new FileInputStream(__from);\n                FileOutputStream fs = new FileOutputStream(__to);\n                byte[] buffer = new byte[1024];\n                while ((byteread = inStream.read(buffer)) != -1) {\n                    bytesum += byteread;\n                    fs.write(buffer, 0, byteread);\n                }\n                inStream.close();\n                fs.close();\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());\n            return false;\n        }\n        return true;\n    }\n', '    public void saveFile(final InputStream inputStream, final String fileName) {\n        final File file = new File(System.getProperty(""java.io.tmpdir"") + File.separator + fileName);\n        FileOutputStream fileOut = null;\n        try {\n            fileOut = new FileOutputStream(file);\n            IOUtils.copy(inputStream, fileOut);\n        } catch (FileNotFoundException e) {\n            LOGGER.error(""saveFile() - File Not Found."" + e);\n        } catch (IOException e) {\n            LOGGER.error(""saveFile() - Error while saving file."" + e);\n        } finally {\n            try {\n                inputStream.close();\n                if (fileOut != null) {\n                    fileOut.close();\n                }\n            } catch (IOException e) {\n                LOGGER.error(e);\n            }\n        }\n    }\n']",164,"    public static boolean Copy(String ____start, String  __TO) {
        try {
            int  bytessum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(____start);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(____start);
                FileOutputStream aws = new FileOutputStream( __TO);
                byte[] url = new byte[1024];
                while ((byteread = inStream.read(url)) != -1) {
                     bytessum += byteread;
                    aws.write(url, 0, byteread);
                }
                inStream.close();
                aws.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
",1,1,0,1,"__from,__to,bytesum,byteread,oldfile,inStream,fs,buffer","__from:0.0,__to:0.0,bytesum:0.0,byteread:0.0,oldfile:0.0,inStream:0.0,fs:8.100271224975586e-05,buffer:9.340047836303711e-05,",5,13,"buffer:url,fs:aws,__from:____start,__to: __TO,bytesum: bytessum,",Greedy,177,0.09475035667419433
445,"['12306298', '15171197', '    public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException {\n        if (destFile.exists()) {\n            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);\n        }\n        if (!sourceFile.exists()) {\n            return;\n        }\n        boolean succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            NLogger.warn(FileUtils.class, ""First renameTo operation worked!"");\n            return;\n        }\n        NLogger.warn(FileUtils.class, ""First renameTo operation failed."");\n        System.gc();\n        Thread.yield();\n        succ = sourceFile.renameTo(destFile);\n        if (succ) {\n            return;\n        }\n        NLogger.warn(FileUtils.class, ""Second renameTo operation failed."");\n        FileInputStream input = null;\n        FileOutputStream output = null;\n        try {\n            input = new FileInputStream(sourceFile);\n            output = new FileOutputStream(destFile);\n            long lengthLeft = sourceFile.length();\n            byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)];\n            int read;\n            while (lengthLeft > 0) {\n                read = input.read(buffer);\n                if (read == -1) {\n                    break;\n                }\n                lengthLeft -= read;\n                output.write(buffer, 0, read);\n            }\n        } catch (IOException exp) {\n            NLogger.warn(FileUtils.class, ""Third renameTo operation failed."");\n            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);\n        } finally {\n            IOUtil.closeQuietly(input);\n            IOUtil.closeQuietly(output);\n        }\n        destFile.setLastModified(sourceFile.lastModified());\n        FileUtils.deleteFileMultiFallback(sourceFile);\n    }\n', '    private static Pattern getBotPattern() {\n        StringBuilder sb = new StringBuilder();\n        try {\n            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                InputStream in = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    line = line.trim();\n                    if (!line.startsWith(""#"") && !line.equals("""")) {\n                        if (sb.length() > 0) sb.append(""|"");\n                        sb.append(""("").append(line).append("")"");\n                    }\n                }\n                in.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(""Error reading bot user-agent configuration"", e);\n        }\n        return Pattern.compile(sb.toString());\n    }\n']",306,"    public static void renameFileMultiFallback(File sourceFiles, File  destLine) throws FileHandlingException {
        if ( destLine.exists()) {
            throw new FileHandlingException(FileHandlingException.FILE_ALREADY_EXISTS);
        }
        if (!sourceFiles.exists()) {
            return;
        }
        boolean  suce = sourceFiles.renameTo( destLine);
        if ( suce) {
            NLogger.warn(FileUtils.class, ""First renameTo operation worked!"");
            return;
        }
        NLogger.warn(FileUtils.class, ""First renameTo operation failed."");
        System.gc();
        Thread.yield();
         suce = sourceFiles.renameTo( destLine);
        if ( suce) {
            return;
        }
        NLogger.warn(FileUtils.class, ""Second renameTo operation failed."");
        FileInputStream url = null;
        FileOutputStream connection = null;
        try {
            url = new FileInputStream(sourceFiles);
            connection = new FileOutputStream( destLine);
            long positionleft = sourceFiles.length();
            byte[] FFER = new byte[(int) Math.min(BUFFER_LENGTH, positionleft + 1)];
            int line;
            while (positionleft > 0) {
                line = url.line(FFER);
                if (line == -1) {
                    break;
                }
                positionleft -= line;
                connection.write(FFER, 0, line);
            }
        } catch (IOException exp) {
            NLogger.warn(FileUtils.class, ""Third renameTo operation failed."");
            throw new FileHandlingException(FileHandlingException.RENAME_FAILED, exp);
        } finally {
            IOUtil.closeQuietly(url);
            IOUtil.closeQuietly(connection);
        }
         destLine.setLastModified(sourceFiles.lastModified());
        FileUtils.deleteFileMultiFallback(sourceFiles);
    }
",0,0,0,-1,"sourceFile,destFile,succ,input,output,lengthLeft,buffer,read","sourceFile:0.0,destFile:0.0,succ:0.0,input:8.088350296020508e-05,output:3.629922866821289e-05,lengthLeft:0.0,buffer:1.9431114196777344e-05,read:2.5451183319091797e-05,",8,39,"input:url,output:connection,read:line,buffer:FFER,sourceFile:sourceFiles,destFile: destLine,succ: suce,lengthLeft:positionleft,",Greedy,450,0.21522874832153321
446,"['789253', '8006559', '    static void copy(String src, String dest) throws IOException {\n        File ifp = new File(src);\n        File ofp = new File(dest);\n        if (ifp.exists() == false) {\n            throw new IOException(""file \'"" + src + ""\' does not exist"");\n        }\n        FileInputStream fis = new FileInputStream(ifp);\n        FileOutputStream fos = new FileOutputStream(ofp);\n        byte[] b = new byte[1024];\n        int readBytes;\n        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);\n        fis.close();\n        fos.close();\n    }\n', '    private final void findSubclasses(URL location, String packageName, Class superClass, Set setOfClasses) {\n        synchronized (results) {\n            String fqcn = searchClass.getName();\n            List knownLocations = new ArrayList();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = (URL) knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    File[] files = directory.listFiles(CLASSES_ONLY);\n                    for (int i = 0; i < files.length; i++) {\n                        String filename = files[i].getName();\n                        String classname = filename.substring(0, filename.length() - 6);\n                        try {\n                            if (!fqcn.equals(packageName + ""."" + classname)) {\n                                Class c = callClassForName(packageName + ""."" + classname);\n                                manageClass(setOfClasses, superClass, c, url);\n                            }\n                        } catch (Throwable t) {\n                            errors.add(t);\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = (JarEntry) e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(""/"")) classname = classname.substring(1);\n                                classname = classname.replace(\'/\', \'.\');\n                                try {\n                                    if (!fqcn.equals(classname)) {\n                                        Class c = callClassForName(classname);\n                                        manageClass(setOfClasses, superClass, c, url);\n                                    }\n                                } catch (Throwable t) {\n                                    errors.add(t);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n        }\n    }\n']",129,"    static void copy(String sel, String dest) throws IOException {
        File ifp = new File(sel);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + sel + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
",0,0,0,-1,"src,dest,ifp,ofp,fis,fos,b,readBytes","src:-1.1920928955078125e-07,dest:0.0,ifp:0.0,ofp:0.0,fis:0.0,fos:0.0,b:3.5762786865234375e-07,readBytes:0.0,",1,3,"b:b,dest:dest,ifp:ifp,ofp:ofp,fis:fis,fos:fos,readBytes:readBytes,src:sel,",Greedy,314,0.1430522362391154
447,"['22237326', '14878300', '    public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException {\n        codebase = url;\n        InputStream in;\n        if (connect != null) {\n            in = connect.getInputStream();\n        } else {\n            in = url.openStream();\n        }\n        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        InputSource source = new InputSource(in);\n        Document document = builder.parse(source);\n        in.close();\n        QDataSet result = null;\n        NodeList kids = document.getChildNodes();\n        for (int i = 0; i < kids.getLength(); i++) {\n            Node n = kids.item(i);\n            if (n.getNodeName().equals(""netcdf"")) {\n                result = netcdf(n);\n            }\n        }\n        return result;\n    }\n', '    public static byte[] MD5(String input) {\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n        md5.update(input.getBytes());\n        return md5.digest();\n    }\n']",161,"    public QDataSet doRead(URL url, URLConnection don) throws IOException, ParserConfigurationException, SAXException {
        codebase = url;
        InputStream connection;
        if (don != null) {
            connection = don.getInputStream();
        } else {
            connection = url.openStream();
        }
        DocumentBuilder pb = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputSource uri = new InputSource(connection);
        Document ocument = pb.parse(uri);
        connection.close();
        QDataSet response = null;
        NodeList Kid = ocument.getChildNodes();
        for (int o = 0; o < Kid.getLength(); o++) {
            Node nor = Kid.item(o);
            if (nor.getNodeName().equals(""netcdf"")) {
                response = netcdf(nor);
            }
        }
        return response;
    }
",0,0,0,-1,"url,connect,codebase,in,builder,source,document,result,kids,i,n","url:0.0002480149269104004,connect:-1.4483928680419922e-05,codebase:0.0,in:7.408857345581055e-05,builder:3.343820571899414e-05,source:4.369020462036133e-05,document:0.00010091066360473633,result:-1.4185905456542969e-05,kids:-7.033348083496094e-06,i:-0.0002658367156982422,n:1.043081283569336e-05,",9,27,"url:url,document:ocument,in:connection,source:uri,builder:pb,n:nor,codebase:codebase,kids:Kid,result:response,connect:don,i:o,",Greedy,498,0.19971672296524048
448,"['15106774', '21044594', '    private static String myCrypt(String password, String seed) throws RuntimeException {\n        String out = null;\n        int count = 8;\n        MessageDigest digester;\n        if (!seed.substring(0, 3).equals(""$H$"")) {\n            byte[] randomBytes = new byte[6];\n            java.util.Random randomGenerator = new java.util.Random();\n            randomGenerator.nextBytes(randomBytes);\n            seed = genSalt(randomBytes);\n        }\n        String salt = seed.substring(4, 12);\n        if (salt.length() != 8) {\n            throw new RuntimeException(""Error hashing password - Invalid seed."");\n        }\n        byte[] sha1Hash = new byte[40];\n        try {\n            digester = MessageDigest.getInstance(""SHA-1"");\n            digester.update((salt + password).getBytes(""iso-8859-1""), 0, (salt + password).length());\n            sha1Hash = digester.digest();\n            do {\n                byte[] CombinedBytes = new byte[sha1Hash.length + password.length()];\n                System.arraycopy(sha1Hash, 0, CombinedBytes, 0, sha1Hash.length);\n                System.arraycopy(password.getBytes(""iso-8859-1""), 0, CombinedBytes, sha1Hash.length, password.getBytes(""iso-8859-1"").length);\n                digester.update(CombinedBytes, 0, CombinedBytes.length);\n                sha1Hash = digester.digest();\n            } while (--count > 0);\n            out = seed.substring(0, 12);\n            out += encode64(sha1Hash);\n        } catch (NoSuchAlgorithmException Ex) {\n            log.error(""Error hashing password."", Ex);\n        } catch (UnsupportedEncodingException Ex) {\n            log.error(""Error hashing password."", Ex);\n        }\n        if (out == null) {\n            throw new RuntimeException(""Error hashing password - out = null"");\n        }\n        return out;\n    }\n', '        public void run() {\n            final String basename = FilenameUtils.removeExtension(file.getName());\n            final File compressed = new File(logDirectory, basename + "".gz"");\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = new FileInputStream(file);\n                out = new GZIPOutputStream(new FileOutputStream(compressed));\n                IOUtils.copy(in, out);\n                in.close();\n                out.close();\n            } catch (IOException e) {\n                reportError(""Error compressing olg log file after file rotation"", e, ErrorManager.GENERIC_FAILURE);\n            } finally {\n                IOUtils.closeQuietly(in);\n                IOUtils.closeQuietly(out);\n            }\n            Collections.replaceAll(files, file, compressed);\n        }\n']",361,"    private static String myCrypt(String against, String winner) throws RuntimeException {
        String string = null;
        int Count = 8;
        MessageDigest  digitter;
        if (!winner.substring(0, 3).equals(""$H$"")) {
            byte[] randPages = new byte[6];
            java.util.Random randomIterner = new java.util.Random();
            randomIterner.nextBytes(randPages);
            winner = genSalt(randPages);
        }
        String sorted = winner.substring(4, 12);
        if (sorted.length() != 8) {
            throw new RuntimeException(""Error hashing password - Invalid seed."");
        }
        byte[] base1Message = new byte[40];
        try {
             digitter = MessageDigest.getInstance(""SHA-1"");
             digitter.update((sorted + against).getBytes(""iso-8859-1""), 0, (sorted + against).length());
            base1Message =  digitter.digest();
            do {
                byte[] Combinedbytes = new byte[base1Message.length + against.length()];
                System.arraycopy(base1Message, 0, Combinedbytes, 0, base1Message.length);
                System.arraycopy(against.getBytes(""iso-8859-1""), 0, Combinedbytes, base1Message.length, against.getBytes(""iso-8859-1"").length);
                 digitter.update(Combinedbytes, 0, Combinedbytes.length);
                base1Message =  digitter.digest();
            } while (--Count > 0);
            string = winner.substring(0, 12);
            string += encode64(base1Message);
        } catch (NoSuchAlgorithmException Ex) {
            log.error(""Error hashing password."", Ex);
        } catch (UnsupportedEncodingException Ex) {
            log.error(""Error hashing password."", Ex);
        }
        if (string == null) {
            throw new RuntimeException(""Error hashing password - out = null"");
        }
        return string;
    }
",0,0,0,-1,"password,seed,out,count,digester,randomBytes,randomGenerator,salt,sha1Hash,CombinedBytes","password:-2.2649765014648438e-06,seed:-1.1801719665527344e-05,out:-1.430511474609375e-06,count:-1.9073486328125e-06,digester:0.0,randomBytes:0.0,randomGenerator:0.0,salt:0.0,sha1Hash:0.0,CombinedBytes:0.0,",10,49,"digester: digitter,randomBytes:randPages,randomGenerator:randomIterner,salt:sorted,sha1Hash:base1Message,CombinedBytes:Combinedbytes,out:string,count:Count,password:against,seed:winner,",Greedy,588,0.2596977988878886
449,"['6778337', '22991420', '    private void copy(File from, File to) throws FileNotFoundException, IOException {\n        FileReader in;\n        in = new FileReader(from);\n        FileWriter out = new FileWriter(to);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n    }\n', '    public void notifyIterationEnds(final IterationEndsEvent event) {\n        log.info(""moving files..."");\n        File source = new File(""deqsim.log"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");\n            }\n        }\n        int parallelCnt = 0;\n        source = new File(""deqsim.log."" + parallelCnt);\n        while (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");\n            }\n            parallelCnt++;\n            source = new File(""deqsim.log."" + parallelCnt);\n        }\n        source = new File(""loads_out.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));\n            try {\n                IOUtils.copyFile(source, destination);\n            } catch (FileNotFoundException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            } catch (IOException e) {\n                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");\n            }\n            destination = new File(""loads_in.txt"");\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");\n            }\n        }\n        source = new File(""linkprocs.txt"");\n        if (source.exists()) {\n            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));\n            if (!IOUtils.renameFile(source, destination)) {\n                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");\n            }\n        }\n    }\n']",73,"    private void copy(File from, File url) throws FileNotFoundException, IOException {
        FileReader cin;
        cin = new FileReader(from);
        FileWriter out = new FileWriter(url);
        int c;
        while ((c = cin.read()) != -1) out.write(c);
        cin.close();
        out.close();
    }
",1,1,0,1,"from,to,in,out,c","from:-1.1205673217773438e-05,to:1.9073486328125e-06,in:4.9054622650146484e-05,out:0.00024271011352539062,c:-4.291534423828125e-06,",2,6,"out:out,in:cin,to:url,",Greedy,140,0.06588266293207805
450,"['15826301', '12631774', '    public static int getContentLength(String address) {\n        URLConnection conn = null;\n        int contentLength = 0;\n        try {\n            URL url = new URL(address);\n            conn = url.openConnection();\n            contentLength = conn.getContentLength();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return contentLength;\n    }\n', '    public static String getMd5Hash(String plaintext) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(plaintext.getBytes());\n            byte[] digest = md5.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = ""0"" + hashtext;\n            }\n            return hashtext;\n        } catch (final NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return """";\n    }\n']",64,"    public static int getContentLength(String config) {
        URLConnection api = null;
        int ContentLife = 0;
        try {
            URL url = new URL(config);
            api = url.openConnection();
            ContentLife = api.getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ContentLife;
    }
",0,0,0,-1,"address,conn,contentLength,url","address:-9.924173355102539e-05,conn:-1.1920928955078125e-06,contentLength:0.0,url:5.233287811279297e-05,",3,8,"url:url,contentLength:ContentLife,conn:api,address:config,",Greedy,177,0.08083531459172567
451,"['22198322', '15292308', '    private void _loadInternalViews() {\n        _internalViews = new HashMap<String, InternalView>();\n        List<URL> list = new ArrayList<URL>();\n        ClassLoader loader = _getClassLoader();\n        try {\n            Enumeration<URL> en = loader.getResources(""META-INF/org.apache.myfaces.trinidad.render.InternalView.properties"");\n            while (en.hasMoreElements()) {\n                list.add(en.nextElement());\n            }\n            en = loader.getResources(""META-INF/org.apache.myfaces.trinidad.InternalView.properties"");\n            while (en.hasMoreElements()) {\n                list.add(en.nextElement());\n            }\n            Collections.reverse(list);\n        } catch (IOException ioe) {\n            _LOG.severe(ioe);\n        }\n        for (URL url : list) {\n            try {\n                Properties properties = new Properties();\n                _LOG.fine(""Loading internal views from {0}"", url);\n                InputStream is = url.openStream();\n                try {\n                    properties.load(is);\n                } finally {\n                    is.close();\n                }\n                for (Map.Entry<Object, Object> entry : properties.entrySet()) {\n                    String name = (String) entry.getKey();\n                    String className = (String) entry.getValue();\n                    Class<?> clazz = loader.loadClass(className);\n                    InternalView view = (InternalView) clazz.newInstance();\n                    _internalViews.put(name, view);\n                }\n            } catch (IllegalAccessException iae) {\n                _LOG.severe(""CANNOT_LOAD_URL"", url);\n                _LOG.severe(iae);\n            } catch (InstantiationException ie) {\n                _LOG.severe(""CANNOT_LOAD_URL"", url);\n                _LOG.severe(ie);\n            } catch (ClassNotFoundException cnfe) {\n                _LOG.severe(""CANNOT_LOAD_URL"", url);\n                _LOG.severe(cnfe);\n            } catch (IOException ioe) {\n                _LOG.severe(""CANNOT_LOAD_URL"", url);\n                _LOG.severe(ioe);\n            }\n        }\n    }\n', '    private static File createFileFromURL(URL url) throws IOException {\n        File tempFile = File.createTempFile(""oboFile"", "".obo"");\n        PrintStream ps = new PrintStream(tempFile);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            ps.println(line);\n        }\n        ps.close();\n        return tempFile;\n    }\n']",369,"    private void _loadInternalViews() {
        _internalviews = new HashMap<String, InternalView>();
        List<URL> base = new ArrayList<URL>();
        ClassLoader reader = _getClassLoader();
        try {
            Enumeration<URL> au = reader.getResources(""META-INF/org.apache.myfaces.trinidad.render.InternalView.properties"");
            while (au.hasMoreElements()) {
                base.add(au.nextElement());
            }
            au = reader.getResources(""META-INF/org.apache.myfaces.trinidad.InternalView.properties"");
            while (au.hasMoreElements()) {
                base.add(au.nextElement());
            }
            Collections.reverse(base);
        } catch (IOException ioe) {
            _LOG.severe(ioe);
        }
        for (URL www : base) {
            try {
                Properties files = new Properties();
                _LOG.fine(""Loading internal views from {0}"", www);
                InputStream js = www.openStream();
                try {
                    files.load(js);
                } finally {
                    js.close();
                }
                for (Map.Entry<Object, Object> line : files.entrySet()) {
                    String file = (String) line.getKey();
                    String functionPath = (String) line.getValue();
                    Class<?>  cllass = reader.loadClass(functionPath);
                    InternalView look = (InternalView)  cllass.newInstance();
                    _internalviews.put(file, look);
                }
            } catch (IllegalAccessException iae) {
                _LOG.severe(""CANNOT_LOAD_URL"", www);
                _LOG.severe(iae);
            } catch (InstantiationException ie) {
                _LOG.severe(""CANNOT_LOAD_URL"", www);
                _LOG.severe(ie);
            } catch (ClassNotFoundException cnfe) {
                _LOG.severe(""CANNOT_LOAD_URL"", www);
                _LOG.severe(cnfe);
            } catch (IOException ioe) {
                _LOG.severe(""CANNOT_LOAD_URL"", www);
                _LOG.severe(ioe);
            }
        }
    }
",0,0,0,-1,"_internalViews,list,loader,en,url,properties,is,entry,name,className,clazz,view","_internalViews:0.0,list:1.6808509826660156e-05,loader:-5.7220458984375e-06,en:-2.9802322387695312e-06,url:6.723403930664062e-05,properties:-1.5497207641601562e-06,is:-1.5497207641601562e-06,entry:-2.9802322387695312e-06,name:5.960464477539062e-07,className:0.0,clazz:0.0,view:6.794929504394531e-06,",12,41,"url:www,list:base,view:look,name:file,_internalViews:_internalviews,className:functionPath,clazz: cllass,properties:files,is:js,en:au,entry:line,loader:reader,",Greedy,588,0.25998045603434244
452,"['9830267', '8496070', '            public void run() {\n                final SimpleMessageListener listener = new SimpleMessageListener() {\n\n                    public final boolean accept(final String from, final String recipient) {\n                        return true;\n                    }\n\n                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {\n                        System.out.println(""FROM: "" + from);\n                        System.out.println(""TO: "" + recipient);\n                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));\n                        final File file = new File(tmpDir, recipient);\n                        final FileWriter fw = new FileWriter(file);\n                        try {\n                            IOUtils.copy(data, fw);\n                        } finally {\n                            fw.close();\n                        }\n                    }\n                };\n                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));\n                smtpServer.start();\n                System.out.println(""Started SMTP Server"");\n            }\n', '    private void removeSessionId(InputStream inputStream, Output output) throws IOException {\n        String jsessionid = RewriteUtils.getSessionId(target);\n        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));\n        if (jsessionid == null || !textContentType) {\n            IOUtils.copy(inputStream, output.getOutputStream());\n        } else {\n            String charset = httpClientResponse.getContentCharset();\n            if (charset == null) {\n                charset = ""ISO-8859-1"";\n            }\n            String content = IOUtils.toString(inputStream, charset);\n            content = removeSessionId(jsessionid, content);\n            if (output.getHeader(""Content-length"") != null) {\n                output.setHeader(""Content-length"", Integer.toString(content.length()));\n            }\n            OutputStream outputStream = output.getOutputStream();\n            IOUtils.write(content, outputStream, charset);\n        }\n        inputStream.close();\n    }\n']",176,"            public void run() {
                final SimpleMessageListener listeners = new SimpleMessageListener() {

                    public final boolean accept(final String from, final String recipient) {
                        return true;
                    }

                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
                };
                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listeners));
                smtpServer.start();
                System.out.println(""Started SMTP Server"");
            }
",1,1,1,-1,"listener,from,recipient,data,tmpDir,file,fw,smtpServer","listener:0.0,from:-3.5762786865234375e-07,recipient:0.0,data:0.0,tmpDir:0.0,file:-5.960464477539062e-07,fw:-3.5762786865234375e-07,smtpServer:0.0,",1,2,"listener:listeners,recipient:recipient,data:data,tmpDir:tmpDir,smtpServer:smtpServer,from:from,fw:fw,file:file,",Greedy,335,0.14678576787312825
453,"['11608926', '8708602', '    void ProcessRequests(DataInputStream in, PrintStream out) {\n        String sQuery;\n        while (true) {\n            try {\n                sQuery = in.readLine();\n                if (sQuery == null) return;\n                if (sQuery.startsWith(""select"")) {\n                    ProcessQuery(sQuery, out);\n                } else if (sQuery.startsWith(""insert"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""update"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""commit"")) {\n                    con.commit();\n                } else if (sQuery.startsWith(""autocommit true"")) {\n                    con.setAutoCommit(true);\n                } else if (sQuery.startsWith(""autocommit false"")) {\n                    con.setAutoCommit(false);\n                } else if (sQuery.startsWith(""delete"")) {\n                    Statement stmt = con.createStatement();\n                    stmt.executeUpdate(sQuery);\n                } else if (sQuery.startsWith(""rollback"")) {\n                    con.rollback();\n                } else {\n                    out.println(""What ?"");\n                }\n                out.println("">"");\n            } catch (SQLException ex) {\n                out.println(""\\n*** SQLException caught ***\\n"");\n                while (ex != null) {\n                    out.println(""SQLState: "" + ex.getSQLState());\n                    out.println(""Message:  "" + ex.getMessage());\n                    out.println(""Vendor:   "" + ex.getErrorCode());\n                    ex = ex.getNextException();\n                    out.println("""");\n                }\n            } catch (java.lang.Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n', '            public void execute(File temporaryFile) throws Exception {\n                ZipArchive archive = new ZipArchive(temporaryFile.getPath());\n                InputStream input = archive.getInputFrom(ARCHIVE_FILE_1);\n                if (input != null) {\n                    ByteArrayOutputStream output = new ByteArrayOutputStream();\n                    IOUtils.copyAndClose(input, output);\n                    assertEquals(ARCHIVE_FILE_1 + "" contents not correct"", ARCHIVE_FILE_1_CONTENT, output.toString());\n                } else {\n                    fail(""cannot open "" + ARCHIVE_FILE_1);\n                }\n            }\n']",354,"    void ProcessRequests(DataInputStream in, PrintStream out) {
        String setsQuestion;
        while (true) {
            try {
                setsQuestion = in.readLine();
                if (setsQuestion == null) return;
                if (setsQuestion.startsWith(""select"")) {
                    ProcessQuery(setsQuestion, out);
                } else if (setsQuestion.startsWith(""insert"")) {
                    Statement Stmo = con.createStatement();
                    Stmo.executeUpdate(setsQuestion);
                } else if (setsQuestion.startsWith(""update"")) {
                    Statement Stmo = con.createStatement();
                    Stmo.executeUpdate(setsQuestion);
                } else if (setsQuestion.startsWith(""commit"")) {
                    con.commit();
                } else if (setsQuestion.startsWith(""autocommit true"")) {
                    con.setAutoCommit(true);
                } else if (setsQuestion.startsWith(""autocommit false"")) {
                    con.setAutoCommit(false);
                } else if (setsQuestion.startsWith(""delete"")) {
                    Statement Stmo = con.createStatement();
                    Stmo.executeUpdate(setsQuestion);
                } else if (setsQuestion.startsWith(""rollback"")) {
                    con.rollback();
                } else {
                    out.println(""What ?"");
                }
                out.println("">"");
            } catch (SQLException ception) {
                out.println(""
*** SQLException caught ***
"");
                while (ception != null) {
                    out.println(""SQLState: "" + ception.getSQLState());
                    out.println(""Message:  "" + ception.getMessage());
                    out.println(""Vendor:   "" + ception.getErrorCode());
                    ception = ception.getNextException();
                    out.println("""");
                }
            } catch (java.lang.Exception ception) {
                ception.printStackTrace();
            }
        }
    }
",0,0,0,-1,"in,out,sQuery,stmt,ex","in:-3.5762786865234375e-07,out:-8.344650268554688e-07,sQuery:0.0,stmt:0.0,ex:0.0,",3,30,"sQuery:setsQuestion,stmt:Stmo,ex:ception,in:in,out:out,",Greedy,398,0.1677204688390096
454,"['12435022', '5048220', '    protected void generateDiffResults(File outFile) throws IOException {\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, outputCharset));\n        intlWrite(out, HTML_STRICT_DOCTYPE + ""<html><head><title>${Report.Title}</title>\\n"" + ""<meta http-equiv=\\""Content-Type\\"""" + "" content=\\""text/html; charset="" + outputCharset + ""\\"">\\n"" + ""<style type=\\""text/css\\"">\\n"");\n        out.write(LOCDiff.getCssText());\n        writeCustomStyleInfo(out);\n        out.write(""</style></head>\\n"" + ""<body>\\n"" + ""<div>\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getAddedTableHeader());\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getModifiedTableHeader());\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getDeletedTableHeader());\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (unchangedTable.length() > 0) {\n            out.write(""<table border>"");\n            intlWrite(out, getUnchangedTableHeader());\n            out.write(unchangedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        writeSummaryTable(out);\n        out.write(""</div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n    }\n', '    private int connect() {\n        if (ftp.isConnected()) {\n            log.debug(""Already connected to: "" + getConnectionString());\n            return RET_OK;\n        }\n        try {\n            ftp.connect(server, port);\n            ftp.login(username, password);\n            ftp.setFileType(FTP.BINARY_FILE_TYPE);\n        } catch (SocketException e) {\n            log.error(e.toString());\n            return RET_ERR_SOCKET;\n        } catch (UnknownHostException e) {\n            log.error(e.toString());\n            return RET_ERR_UNKNOWN_HOST;\n        } catch (FTPConnectionClosedException e) {\n            log.error(e.toString());\n            return RET_ERR_FTP_CONN_CLOSED;\n        } catch (IOException e) {\n            log.error(e.toString());\n            return RET_ERR_IO;\n        }\n        if (ftp.isConnected()) {\n            log.debug(""Connected to "" + getConnectionString());\n            return RET_OK;\n        }\n        log.debug(""Could not connect to "" + getConnectionString());\n        return RET_ERR_NOT_CONNECTED;\n    }\n']",402,"    protected void generateDiffResults(File outFile) throws IOException {
        FileOutputStream inFile = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(inFile, outputCharset));
        intlWrite(out, HTML_STRICT_DOCTYPE + ""<html><head><title>${Report.Title}</title>
"" + ""<meta http-equiv=\""Content-Type\"""" + "" content=\""text/html; charset="" + outputCharset + ""\"">
"" + ""<style type=\""text/css\"">
"");
        out.write(LOCDiff.getCssText());
        writeCustomStyleInfo(out);
        out.write(""</style></head>
"" + ""<body>
"" + ""<div>
"");
        if (addedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getAddedTableHeader());
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getModifiedTableHeader());
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getDeletedTableHeader());
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (unchangedTable.length() > 0) {
            out.write(""<table border>"");
            intlWrite(out, getUnchangedTableHeader());
            out.write(unchangedTable.toString());
            out.write(""</table><br><br>"");
        }
        writeSummaryTable(out);
        out.write(""</div>"");
        redlinesOut.close();
        out.flush();
        InputStream redls = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redls.read(buffer)) != -1) inFile.write(buffer, 0, bytesRead);
        inFile.write(""</BODY></HTML>"".getBytes());
        inFile.close();
    }
",0,0,0,-1,"outFile,outStream,out,redlines","outFile:0.0,outStream:0.0,out:-8.344650268554688e-07,redlines:0.0,",2,7,"outFile:outFile,outStream:inFile,redlines:redls,out:out,",Greedy,188,0.10032648642857869
455,"['5125847', '3613198', '    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })\n    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {\n        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());\n        StringBuilder name = new StringBuilder();\n        try {\n            if (dir.delete() && dir.mkdirs()) {\n                File minDir = new File(dir, ""min"");\n                minDir.mkdir();\n                File combineFile = new File(minDir, ""style.css"");\n                Writer writer = new FileWriter(combineFile);\n                boolean first = true;\n                for (Node link : linkCss) {\n                    String path = ((Element) link).getAttribute(""href"");\n                    URL url = new URL(buildUrl(base, path));\n                    InputStream inputStream = url.openStream();\n                    File cssFile = new File(dir, fileName(url));\n                    FileOutputStream outputStream = new FileOutputStream(cssFile);\n                    IOUtils.copy(inputStream, outputStream);\n                    outputStream.close();\n                    inputStream.close();\n                    if (!first) {\n                        writer.write(\'\\n\');\n                    } else {\n                        first = false;\n                    }\n                    Reader reader = new FileReader(cssFile);\n                    if (Configuration.cssMinification()) {\n                        CssCompressor cssCompressor = new CssCompressor(reader);\n                        cssCompressor.compress(writer, 0);\n                    } else {\n                        IOUtils.copy(reader, writer);\n                    }\n                    reader.close();\n                    String fileName = cssFile.getName();\n                    int pos = fileName.lastIndexOf(\'.\');\n                    if (pos >= 0) {\n                        fileName = fileName.substring(0, pos);\n                    }\n                    name.append(fileName).append("","");\n                }\n                writer.close();\n                FileReader reader = new FileReader(combineFile);\n                name.append(hashCode(IOUtils.toString(reader))).append("".css"");\n                reader.close();\n                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());\n                if (!targetFile.exists()) {\n                    targetFile.getParentFile().mkdirs();\n                    FileUtils.copyFile(combineFile, targetFile);\n                    newFiles.add(targetFile);\n                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");\n                }\n            }\n        } finally {\n            FileUtils.deleteQuietly(dir);\n        }\n        if (name.length() != 0) {\n            Element element = (Element) linkCss.get(0);\n            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());\n            return element;\n        } else {\n            return null;\n        }\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",536,"    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""style.css"");
                Writer writer = new FileWriter(combineFile);
                boolean first = true;
                for (Node link : linkCss) {
                    String path = ((Element) link).getAttribute(""href"");
                    URL stream = new URL(buildUrl(base, path));
                    InputStream inputStream = stream.openStream();
                    File cssFile = new File(dir, fileName(stream));
                    FileOutputStream outputStream = new FileOutputStream(cssFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        writer.write('
');
                    } else {
                        first = false;
                    }
                    Reader reader = new FileReader(cssFile);
                    if (Configuration.cssMinification()) {
                        CssCompressor cssCompressor = new CssCompressor(reader);
                        cssCompressor.compress(writer, 0);
                    } else {
                        IOUtils.copy(reader, writer);
                    }
                    reader.close();
                    String fileName = cssFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                writer.close();
                FileReader reader = new FileReader(combineFile);
                name.append(hashCode(IOUtils.toString(reader))).append("".css"");
                reader.close();
                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    FileUtils.copyFile(combineFile, targetFile);
                    newFiles.add(targetFile);
                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkCss.get(0);
            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
",1,1,1,-1,"base,linkCss,newFiles,dir,name,minDir,combineFile,writer,link,path,url,inputStream,cssFile,fileName,outputStream,first,reader,cssCompressor,pos,targetFile","base:0.0024749040603637695,linkCss:0.0,newFiles:0.0,dir:0.0014989972114562988,name:0.0014880895614624023,minDir:0.0,combineFile:0.0,writer:0.0020259618759155273,link:-0.002024710178375244,path:-0.00018340349197387695,url:1.8199193477630615,inputStream:0.0,cssFile:0.0,fileName:0.0,outputStream:0.0,first:0.0007460713386535645,reader:-0.0022666454315185547,cssCompressor:0.0,pos:5.412101745605469e-05,targetFile:0.0,",1,3,"url:stream,base:base,writer:writer,dir:dir,name:name,first:first,pos:pos,linkCss:linkCss,newFiles:newFiles,minDir:minDir,combineFile:combineFile,inputStream:inputStream,cssFile:cssFile,fileName:fileName,outputStream:outputStream,cssCompressor:cssCompressor,targetFile:targetFile,path:path,link:link,reader:reader,",Greedy,913,0.4872763713200887
456,"['17874922', '19687455', '    public static boolean buildPerMovieDiffBinary(String masterFile) {\n        try {\n            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            System.out.println(inC.size());\n            short movie1, movie2;\n            int count;\n            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;\n            long position;\n            for (long i = 1; i < 17770; i++) {\n                File outFile = new File(""C:\\\\NetflixData\\\\download\\\\SmartGrape\\\\CFItemToItemStats\\\\Movie--"" + i + ""-MatrixData.txt"");\n                FileChannel outC = new FileOutputStream(outFile, true).getChannel();\n                ByteBuffer buf = ByteBuffer.allocate(17770 * 44);\n                for (long j = 1; j < i; j++) {\n                    ByteBuffer bbuf = ByteBuffer.allocate(44);\n                    position = 0;\n                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();\n                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();\n                    position += new Long((i - j - 1) * 44).longValue();\n                    inC.position(position);\n                    inC.read(bbuf);\n                    bbuf.flip();\n                    buf.putShort(bbuf.getShort());\n                    bbuf.getShort();\n                    buf.putInt(bbuf.getInt());\n                    buf.putFloat(-bbuf.getInt());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                    buf.putFloat(bbuf.getFloat());\n                }\n                buf.putShort(new Long(i).shortValue());\n                buf.putInt(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                buf.putFloat(0);\n                position = 0;\n                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();\n                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();\n                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);\n                while (remainingBuf.hasRemaining()) {\n                    remainingBuf.getShort();\n                    buf.putShort(remainingBuf.getShort());\n                    buf.putInt(remainingBuf.getInt());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                    buf.putFloat(remainingBuf.getFloat());\n                }\n                buf.flip();\n                outC.write(buf);\n                buf.clear();\n                outC.close();\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n', '    public void testReadPerMemberAllFour() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));\n        gzin.setEofEachMember(true);\n        int count0 = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong 1k member count"", 1024, count0);\n        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());\n        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());\n        gzin.nextMember();\n        int count1 = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong 32k member count"", (32 * 1024), count1);\n        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());\n        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());\n        gzin.nextMember();\n        int count2 = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong 1-byte member count"", 1, count2);\n        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());\n        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());\n        gzin.nextMember();\n        int count3 = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong 5-byte member count"", 5, count3);\n        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());\n        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());\n        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());\n        gzin.nextMember();\n        int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong eof count"", 0, countEnd);\n    }\n']",810,"    public static boolean buildPerMovieDiffBinary(String masterFile) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            System.out.println(inC.size());
            short movie1, movie2;
            int count;
            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;
            long position;
            for (long i = 1; i < 17770; i++) {
                File outFile = new File(""C:\\NetflixData\\download\\SmartGrape\\CFItemToItemStats\\Movie--"" + i + ""-MatrixData.txt"");
                FileChannel outC = new FileOutputStream(outFile, true).getChannel();
                ByteBuffer cb = ByteBuffer.allocate(17770 * 44);
                for (long j = 1; j < i; j++) {
                    ByteBuffer bbuf = ByteBuffer.allocate(44);
                    position = 0;
                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();
                    position += new Long((i - j - 1) * 44).longValue();
                    inC.position(position);
                    inC.read(bbuf);
                    bbuf.flip();
                    cb.putShort(bbuf.getShort());
                    bbuf.getShort();
                    cb.putInt(bbuf.getInt());
                    cb.putFloat(-bbuf.getInt());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                    cb.putFloat(bbuf.getFloat());
                }
                cb.putShort(new Long(i).shortValue());
                cb.putInt(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                cb.putFloat(0);
                position = 0;
                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();
                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);
                while (remainingBuf.hasRemaining()) {
                    remainingBuf.getShort();
                    cb.putShort(remainingBuf.getShort());
                    cb.putInt(remainingBuf.getInt());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                    cb.putFloat(remainingBuf.getFloat());
                }
                cb.flip();
                outC.write(cb);
                cb.clear();
                outC.close();
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",1,1,1,-1,"masterFile,inFile,inC,movie1,movie2,count,diffRating,sumXY,sumX,sumY,sumX2,sumY2,pearsonCorr,adjustedCosineCorr,cosineCorr,position,i,outFile,outC,buf,j,bbuf","masterFile:0.0,inFile:0.0,inC:0.0,movie1:0.0,movie2:0.0,count:-1.1920928955078125e-07,diffRating:0.0,sumXY:0.0,sumX:0.0,sumY:0.0,sumX2:0.0,sumY2:0.0,pearsonCorr:0.0,adjustedCosineCorr:0.0,cosineCorr:0.0,position:1.1920928955078125e-07,i:-4.0531158447265625e-06,outFile:0.0,outC:0.0,buf:8.344650268554688e-07,j:-2.2649765014648438e-06,bbuf:0.0,",1,37,"buf:cb,position:position,masterFile:masterFile,inFile:inFile,inC:inC,movie1:movie1,movie2:movie2,diffRating:diffRating,sumXY:sumXY,sumX:sumX,sumY:sumY,sumX2:sumX2,sumY2:sumY2,pearsonCorr:pearsonCorr,adjustedCosineCorr:adjustedCosineCorr,cosineCorr:cosineCorr,outFile:outFile,outC:outC,bbuf:bbuf,count:count,j:j,i:i,",Greedy,721,0.45331759452819825
457,"['18435231', '3257108', '    public String getSHA1Hex(String original) {\n        MessageDigest digest;\n        String result = """";\n        try {\n            digest = MessageDigest.getInstance(""sha1"");\n            digest.reset();\n            digest.update(original.getBytes());\n            byte[] dig = digest.digest();\n            String hexStr = """";\n            for (int i = 0; i < dig.length; i++) {\n                hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);\n            }\n            result = hexStr;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n', '    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(s.getBytes(), 0, s.length());\n            s = new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return s;\n    }\n']",129,"    public String getSHA1Hex(String cache) {
        MessageDigest gener;
        String url = """";
        try {
            gener = MessageDigest.getInstance(""sha1"");
            gener.reset();
            gener.update(cache.getBytes());
            byte[] dim = gener.gener();
            String exSt = """";
            for (int ui = 0; ui < dim.length; ui++) {
                exSt += Integer.toString((dim[ui] & 0xff) + 0x100, 16).substring(1);
            }
            url = exSt;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return url;
    }
",1,1,1,-1,"original,digest,dig,i,hexStr,result","original:3.933906555175781e-06,digest:0.0,dig:0.02224797010421753,i:2.6226043701171875e-06,hexStr:0.0,result:2.7418136596679688e-06,",6,21,"dig:dim,original:cache,result:url,i:ui,digest:gener,hexStr:exSt,",Greedy,287,0.11816134055455525
458,"['11846837', '4955403', '    public static void copyFile(File source, File destination, boolean lazy) {\n        if (!source.exists()) {\n            return;\n        }\n        if (lazy) {\n            String oldContent = null;\n            try {\n                oldContent = read(source);\n            } catch (Exception e) {\n                return;\n            }\n            String newContent = null;\n            try {\n                newContent = read(destination);\n            } catch (Exception e) {\n            }\n            if (oldContent == null || !oldContent.equals(newContent)) {\n                copyFile(source, destination, false);\n            }\n        } else {\n            if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {\n                destination.getParentFile().mkdirs();\n            }\n            try {\n                FileChannel srcChannel = new FileInputStream(source).getChannel();\n                FileChannel dstChannel = new FileOutputStream(destination).getChannel();\n                dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n', '    public FetchTextFromWebPage(String path) {\n        HTMLEditorKit.Parser parser;\n        HTMLFile = new File(path);\n        byte[] html = new byte[new Long(HTMLFile.length()).intValue()];\n        try {\n            FileInputStream fis = new FileInputStream(HTMLFile);\n            try {\n                fis.read(html);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            ByteArrayInputStream ba_read = new ByteArrayInputStream(html);\n            r = new InputStreamReader(ba_read);\n        } catch (FileNotFoundException e) {\n            URL url = null;\n            try {\n                url = new URL(path);\n                URLConnection connection = null;\n                try {\n                    connection = url.openConnection();\n                    connection.setDoInput(true);\n                    InputStream inStream = null;\n                    try {\n                        inStream = connection.getInputStream();\n                        BufferedReader input = new BufferedReader(new InputStreamReader(inStream));\n                        StringBuffer sbr = new StringBuffer();\n                        String line = null;\n                        try {\n                            while ((line = input.readLine()) != null) {\n                                System.out.println(line);\n                                sbr.append(line + ""\\n"");\n                            }\n                        } catch (IOException e1) {\n                            e1.printStackTrace();\n                        }\n                        File temp = new File(""//home//wiki14//temp.txt"");\n                        if (!temp.exists()) {\n                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");\n                        } else {\n                            temp.delete();\n                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");\n                        }\n                        java.io.FileWriter fw = new java.io.FileWriter(temp);\n                        fw.write(sbr.toString());\n                        fw.close();\n                        byte[] newbyte = new byte[new Long(sbr.length()).intValue()];\n                        ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);\n                        r = new InputStreamReader(ba_read);\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                } catch (IOException e1) {\n                    e1.printStackTrace();\n                }\n            } catch (MalformedURLException e1) {\n                e1.printStackTrace();\n            }\n        }\n        parser = new ParserDelegator();\n        htmltextparser = new HtmlTextParser();\n        htmltextparser.initData();\n        try {\n            parser.parse(r, htmltextparser, true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        try {\n            r.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",215,"    public static void copyFile(File source, File Destination, boolean flicit) {
        if (!source.exists()) {
            return;
        }
        if (flicit) {
            String oldRead = null;
            try {
                oldRead = read(source);
            } catch (Exception e) {
                return;
            }
            String wordcontent = null;
            try {
                wordcontent = read(Destination);
            } catch (Exception e) {
            }
            if (oldRead == null || !oldRead.equals(wordcontent)) {
                copyFile(source, Destination, false);
            }
        } else {
            if ((Destination.getParentFile() != null) && (!Destination.getParentFile().exists())) {
                Destination.getParentFile().mkdirs();
            }
            try {
                FileChannel inputChannel = new FileInputStream(source).getChannel();
                FileChannel udstChannel = new FileOutputStream(Destination).getChannel();
                udstChannel.transferFrom(inputChannel, 0, inputChannel.size());
                inputChannel.close();
                udstChannel.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",0,0,0,-1,"source,destination,lazy,oldContent,newContent,srcChannel,dstChannel","source:-5.602836608886719e-06,destination:0.0,lazy:0.0,oldContent:0.0,newContent:0.0,srcChannel:0.0,dstChannel:0.0,",6,23,"destination:Destination,lazy:flicit,oldContent:oldRead,newContent:wordcontent,srcChannel:inputChannel,dstChannel:udstChannel,source:source,",Greedy,335,0.1493545691172282
459,"['19746605', '4232438', '    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {\n        if (source == null) throw new NullPointerException(""Parameter \'source\' is null"");\n        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());\n        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());\n        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");\n        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");\n        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");\n        switch(type) {\n            case MOVE:\n                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\\\.jpg"")) {\n                    for (int i = 0; i < frames_.size(); i++) {\n                        Frame f = frames_.get(i);\n                        if (f.getFile().compareTo(source) == 0) {\n                            frames_.remove(i);\n                            break;\n                        }\n                    }\n                }\n                source.renameTo(tmp);\n                break;\n            case COPY:\n                FileChannel inChannel = new FileInputStream(source).getChannel();\n                FileChannel outChannel = new FileOutputStream(tmp).getChannel();\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n                break;\n        }\n        for (int i = frames_.size() - 1; i >= index; i--) {\n            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));\n            frames_.get(i).moveTo(newFrame);\n            frames_.set(i, newFrame);\n        }\n        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));\n        tmp.renameTo(newLocation);\n        Frame f = new Frame(newLocation);\n        f.createThumbNail();\n        frames_.set(index, f);\n        return f;\n    }\n', '    public static void copyFile(File source, File dest) throws IOException {\n        log.debug(""Copy from {} to {}"", source.getAbsoluteFile(), dest.getAbsoluteFile());\n        FileInputStream fi = new FileInputStream(source);\n        FileChannel fic = fi.getChannel();\n        MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());\n        fic.close();\n        fi.close();\n        fi = null;\n        if (!dest.exists()) {\n            String destPath = dest.getPath();\n            log.debug(""Destination path: {}"", destPath);\n            String destDir = destPath.substring(0, destPath.lastIndexOf(File.separatorChar));\n            log.debug(""Destination dir: {}"", destDir);\n            File dir = new File(destDir);\n            if (!dir.exists()) {\n                if (dir.mkdirs()) {\n                    log.debug(""Directory created"");\n                } else {\n                    log.warn(""Directory not created"");\n                }\n            }\n            dir = null;\n        }\n        FileOutputStream fo = new FileOutputStream(dest);\n        FileChannel foc = fo.getChannel();\n        foc.write(mbuf);\n        foc.close();\n        fo.close();\n        fo = null;\n        mbuf.clear();\n        mbuf = null;\n    }\n']",446,"    private synchronized Frame insertFrame(int url, File url, INSERT_TYPE type) throws IOException {
        if (url == null) throw new NullPointerException(""Parameter 'source' is null"");
        if (!url.exists()) throw new IOException(""File does not exist: "" + url.getAbsolutePath());
        if (url.length() <= 0) throw new IOException(""File is empty: "" + url.getAbsolutePath());
        if (url < 0) throw new IndexOutOfBoundsException(""index < 0"");
        if (url >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");
        File buffer = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");
        switch(type) {
            case MOVE:
                if (url.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && url.getName().matches(""img_[0-9]{5}\\.jpg"")) {
                    for (int i = 0; i < frames_.size(); i++) {
                        Frame f = frames_.get(i);
                        if (f.getFile().compareTo(url) == 0) {
                            frames_.remove(i);
                            break;
                        }
                    }
                }
                url.renameTo(buffer);
                break;
            case COPY:
                FileChannel inchannel = new FileInputStream(url).getChannel();
                FileChannel inButton = new FileOutputStream(buffer).getChannel();
                inchannel.transferTo(0, inchannel.size(), inButton);
                if (inchannel != null) inchannel.close();
                if (inButton != null) inButton.close();
                break;
        }
        for (int i = frames_.size() - 1; i >= url; i--) {
            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));
            frames_.get(i).moveTo(newFrame);
            frames_.set(i, newFrame);
        }
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(url));
        buffer.renameTo(newLocation);
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.set(url, f);
        return f;
    }
",1,1,0,1,"index,source,type,tmp,i,f,inChannel,outChannel,newFrame","index:3.921985626220703e-05,source:2.962350845336914e-05,type:-4.649162292480469e-06,tmp:0.00018912553787231445,i:-8.219480514526367e-05,f:6.258487701416016e-05,inChannel:0.0,outChannel:0.0,newFrame:0.0,",5,32,"tmp:buffer,f:f,index:url,source:url,inChannel:inchannel,outChannel:inButton,",Greedy,343,0.16518913507461547
460,"['20413859', '238176', '    @Override\n    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {\n        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n            final HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n            final HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n            final String contextPath = httpServletRequest.getContextPath() + ""/"";\n            final String requestURI = httpServletRequest.getRequestURI();\n            if (requestURI.startsWith(contextPath)) {\n                final String filterURI = requestURI.substring(contextPath.length());\n                final String filterPath = getFilterPath();\n                if (filterURI.startsWith(filterPath)) {\n                    final String targetURI = filterURI.substring(filterPath.length());\n                    for (final Entry<String, String> entry : mapping.entrySet()) {\n                        final String key = entry.getKey();\n                        final String value = entry.getValue();\n                        if (targetURI.startsWith(key) && (targetURI.length() > key.length())) {\n                            final String resourceName = value + targetURI.substring(key.length());\n                            InputStream is = null;\n                            try {\n                                is = getClass().getResourceAsStream(""/"" + resourceName);\n                                if (is != null) {\n                                    IOUtils.copy(is, httpServletResponse.getOutputStream());\n                                    httpServletResponse.flushBuffer();\n                                    break;\n                                } else {\n                                    httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);\n                                    break;\n                                }\n                            } catch (final IOException ioex) {\n                                throw new ServletException(""Error serving resource ["" + resourceName + ""]."", ioex);\n                            } finally {\n                                IOUtils.closeQuietly(is);\n                            }\n                        }\n                    }\n                } else {\n                    chain.doFilter(request, response);\n                }\n            } else {\n                chain.doFilter(request, response);\n            }\n        } else {\n            chain.doFilter(request, response);\n        }\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",356,"    @Override
    public void doFilter(final ServletRequest reader, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {
        if (reader instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            final HttpServletRequest httpServletRequest = (HttpServletRequest) reader;
            final HttpServletResponse httpServletResponse = (HttpServletResponse) response;
            final String contextPath = httpServletRequest.getContextPath() + ""/"";
            final String requestURI = httpServletRequest.getRequestURI();
            if (requestURI.startsWith(contextPath)) {
                final String filterURI = requestURI.substring(contextPath.length());
                final String filterPath = getFilterPath();
                if (filterURI.startsWith(filterPath)) {
                    final String targetURI = filterURI.substring(filterPath.length());
                    for (final Entry<String, String> entry : mapping.entrySet()) {
                        final String key = entry.getKey();
                        final String url = entry.getValue();
                        if (targetURI.startsWith(key) && (targetURI.length() > key.length())) {
                            final String resourceName = url + targetURI.substring(key.length());
                            InputStream nis = null;
                            try {
                                nis = getClass().getResourceAsStream(""/"" + resourceName);
                                if (nis != null) {
                                    IOUtils.copy(nis, httpServletResponse.getOutputStream());
                                    httpServletResponse.flushBuffer();
                                    break;
                                } else {
                                    httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
                                    break;
                                }
                            } catch (final IOException ioex) {
                                throw new ServletException(""Error serving resource ["" + resourceName + ""]."", ioex);
                            } finally {
                                IOUtils.closeQuietly(nis);
                            }
                        }
                    }
                } else {
                    chain.doFilter(reader, response);
                }
            } else {
                chain.doFilter(reader, response);
            }
        } else {
            chain.doFilter(reader, response);
        }
    }
",1,1,1,-1,"request,response,chain,httpServletRequest,httpServletResponse,contextPath,requestURI,filterURI,filterPath,targetURI,entry,key,value,resourceName,is","request:-4.649162292480469e-06,response:-4.410743713378906e-06,chain:-2.9802322387695312e-06,httpServletRequest:0.0,httpServletResponse:0.0,contextPath:0.0,requestURI:0.0,filterURI:0.0,filterPath:0.0,targetURI:0.0,entry:5.960464477539062e-07,key:1.7881393432617188e-06,value:0.0,resourceName:0.0,is:0.0,",3,13,"key:key,entry:entry,httpServletRequest:httpServletRequest,httpServletResponse:httpServletResponse,contextPath:contextPath,requestURI:requestURI,filterURI:filterURI,filterPath:filterPath,targetURI:targetURI,value:url,resourceName:resourceName,is:nis,chain:chain,response:response,request:reader,",Greedy,718,0.34612615903218585
461,"['2972950', '5926761', '    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {\n        try {\n            URL u = new URL(""http://mediaserver:8080/sagex"" + url);\n            log.debug(""Proxy Media: "" + u.toString());\n            URLConnection c = u.openConnection();\n            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");\n            OutputStream os = resp.getOutputStream();\n            IOUtils.copy(c.getInputStream(), os);\n            os.flush();\n            resp.flushBuffer();\n        } catch (Throwable t) {\n            log.error(""Failed to get url: "" + url, t);\n            try {\n                resp.sendError(500, t.getMessage());\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (feedbackView.getText().length() <= 0) return;\n        try {\n            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n\n                public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                    return null;\n                }\n\n                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n                }\n\n                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n                }\n            } };\n            try {\n                SSLContext sc = SSLContext.getInstance(""SSL"");\n                sc.init(null, trustAllCerts, new java.security.SecureRandom());\n                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n            } catch (Exception e3) {\n                e3.printStackTrace();\n            }\n            feedback = """";\n            addLine(""Type            : "" + feedbackView.getType());\n            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());\n            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));\n            addLine(""Client Version  : "" + HIRuntime.getClientVersion());\n            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());\n            try {\n                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());\n            } catch (HIWebServiceException e1) {\n            }\n            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");\n            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");\n            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {\n                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();\n                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");\n                addLine("""");\n                addLine(""Stack Trace"");\n                addLine(""-----------"");\n                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n                PrintWriter writer = new PrintWriter(byteStream);\n                lastWSError.getCause().printStackTrace(writer);\n                writer.close();\n                addLine(new String(byteStream.toByteArray()));\n            }\n            addLine("""");\n            addLine(""Message"");\n            addLine(""-------"");\n            feedback = feedback + feedbackView.getText();\n            feedback = feedback + ""\\n\\n"";\n            feedback = URLEncoder.encode(feedback, ""UTF-8"");\n            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            connection.setRequestMethod(""POST"");\n            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n            connection.setDoOutput(true);\n            PrintWriter writer = new PrintWriter(connection.getOutputStream());\n            writer.write(""raw_fb="" + feedback);\n            writer.close();\n            connection.connect();\n            String response = connection.getResponseMessage();\n            if (response.compareTo(""OK"") == 0) {\n                HIRuntime.getGui().clearLastWSError();\n                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\\n\\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");\n            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n            connection.disconnect();\n        } catch (MalformedURLException e1) {\n            e1.printStackTrace();\n            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n        } catch (IOException e2) {\n            e2.printStackTrace();\n            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\\n"" + ""Bitte versuchen Sie es später erneut.\\n\\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\\n\\nVielen Dank!"");\n        }\n        HIRuntime.getGui().deregisterComponent(this, false);\n    }\n']",145,"    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {
        try {
            URL mu = new URL(""http://mediaserver:8080/sagex"" + url);
            log.debug(""Proxy Media: "" + mu.toString());
            URLConnection c = mu.openConnection();
            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");
            OutputStream os = resp.getOutputStream();
            IOUtils.copy(c.getInputStream(), os);
            os.flush();
            resp.flushBuffer();
        } catch (Throwable t) {
            log.error(""Failed to get url: "" + url, t);
            try {
                resp.sendError(500, t.getMessage());
            } catch (IOException e) {
            }
        }
    }
",0,0,0,-1,"url,req,resp,u,c,os","url:0.00017511844635009766,req:-1.245737075805664e-05,resp:-6.198883056640625e-06,u:2.2530555725097656e-05,c:3.337860107421875e-06,os:4.0590763092041016e-05,",1,3,"url:url,os:os,u:mu,c:c,resp:resp,req:req,",Greedy,270,0.12785900433858235
462,"['9088422', '15416857', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private boolean extract(File archive, File dir, IProgressMonitor monitor) {\n        monitor.subTask(""Extract : "" + archive.getName());\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else {\n            File[] files = dir.listFiles();\n            for (int j = 0; j < files.length; j++) {\n                files[j].delete();\n            }\n        }\n        ZipInputStream zis = null;\n        try {\n            zis = new ZipInputStream(new FileInputStream(archive));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                File indexFile = new File(dir, entry.getName());\n                FileOutputStream fos = null;\n                try {\n                    fos = new FileOutputStream(indexFile);\n                    IOUtils.copy(zis, fos);\n                } finally {\n                    IOUtils.closeQuietly(fos);\n                }\n            }\n            return true;\n        } catch (Exception ex) {\n            M4EclipsePlugin.log(new Status(IStatus.ERROR, M4EclipsePlugin.PLUGIN_ID, -1, ""For index \'"" + dir.getName() + ""\' Unable to initialize indexes"", ex));\n        } finally {\n            IOUtils.closeQuietly(zis);\n        }\n        return false;\n    }\n']",193,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] source = new byte[65536];
            int read = -1;
            while ((read = in.read(source)) >= 0) {
                out.write(source, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:0.02674543857574463,out:0.2321963906288147,buffer:0.16415154933929443,read:0.09670311212539673,success:0.00023758411407470703,",1,3,"out:out,buffer:source,read:read,in:in,success:success,infile:infile,outfile:outfile,",Greedy,332,0.1484579642613729
463,"['10067028', '19267604', '    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            long size = in.size();\n            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buffer);\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n', '    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {\n        File inputFile = null;\n        File outputFile = null;\n        try {\n            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());\n            OutputStream inputFileStream = null;\n            try {\n                inputFileStream = new FileOutputStream(inputFile);\n                IOUtils.copy(inputStream, inputFileStream);\n            } finally {\n                IOUtils.closeQuietly(inputFileStream);\n            }\n            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());\n            convert(inputFile, inputFormat, outputFile, outputFormat);\n            InputStream outputFileStream = null;\n            try {\n                outputFileStream = new FileInputStream(outputFile);\n                IOUtils.copy(outputFileStream, outputStream);\n            } finally {\n                IOUtils.closeQuietly(outputFileStream);\n            }\n        } catch (IOException ioException) {\n            throw new OpenOfficeException(""conversion failed"", ioException);\n        } finally {\n            if (inputFile != null) {\n                inputFile.delete();\n            }\n            if (outputFile != null) {\n                outputFile.delete();\n            }\n        }\n    }\n']",117,"    public static void copyFile(File target, File destination) throws IOException {
        FileChannel url = null;
        FileChannel out = null;
        try {
            url = new FileInputStream(target).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = url.size();
            MappedByteBuffer buffer = url.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (url != null) {
                url.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
",1,1,0,1,"source,destination,in,out,size,buffer","source:0.0009379982948303223,destination:0.0,in:0.0004489421844482422,out:0.0008621811866760254,size:5.739927291870117e-05,buffer:0.0004933476448059082,",2,8,"source:target,out:out,buffer:buffer,in:url,",Greedy,212,0.09670565128326417
464,"['8793826', '8481623', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        from_file = checkFile(from_file);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",193,"    public static boolean decodeFileToFile(String  inbase, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream ou = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( inbase)), Base64.DECODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                ou.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1,1,1,-1,"infile,outfile,in,out,buffer,read,success","infile:0.0,outfile:0.0,in:0.48461011052131653,out:-0.6302889287471771,buffer:-0.4390045702457428,read:-0.15718650817871094,success:-0.015117645263671875,",3,9,"in:in,infile: inbase,outfile:outfile,success:success,read:read,buffer:url,out:ou,",Greedy,334,0.1539935787518819
465,"['22726124', '15570948', '    public static void main(String[] args) throws Exception {\n        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");\n        URLConnection conn = url.openConnection();\n        conn.setDoOutput(true);\n        OutputStream os = conn.getOutputStream();\n        Conduit.pump(System.in, os);\n        Conduit.pump(conn.getInputStream(), System.out);\n        System.out.println(""done"");\n    }\n', '    private String generate(String value) throws Exception {\n        String resStr = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(value.getBytes(""utf-8""), 0, value.length());\n            byte[] result = md.digest();\n            resStr = FTGenerate.convertToHex(result);\n            md.reset();\n        } catch (NoSuchAlgorithmException nae) {\n            this.getLog().severe(""Hash no funcionando"");\n            nae.printStackTrace();\n            throw new Exception(""Hash no funcionando"");\n        } catch (UnsupportedEncodingException ee) {\n            this.getLog().severe(""Encoding no funcionando"");\n            ee.printStackTrace();\n            throw new Exception(""Encoding no funcionando"");\n        }\n        return resStr;\n    }\n']",96,"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection nt = url.openConnection();
        nt.setDoOutput(true);
        OutputStream ok = nt.getOutputStream();
        Conduit.pump(System.in, ok);
        Conduit.pump(nt.getInputStream(), System.out);
        System.out.println(""done"");
    }
",0,0,0,-1,"url,conn,os","url:-2.1338462829589844e-05,conn:-5.841255187988281e-06,os:-7.271766662597656e-06,",2,6,"conn:nt,os:ok,url:url,",Greedy,136,0.09019239743550618
466,"['12798566', '12116028', '    private static void process(String urlstring) {\n        try {\n            URL url = new URL(urlstring);\n            System.out.println(""Connecting to "" + url);\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {\n                System.out.println(TAG.matcher(line).replaceAll(""""));\n            }\n            in.close();\n        } catch (IOException ioe) {\n            System.err.println("""" + ioe);\n        }\n    }\n', '    public static void main(String[] args) throws Exception {\n        File inputFile = new File(args[0]);\n        BufferedReader reader = new BufferedReader(new FileReader(inputFile));\n        StringBuffer stringBuffer = new StringBuffer();\n        String readed;\n        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\\r\\n"");\n        readed = stringBuffer.toString();\n        reader.close();\n        File outputFile = new File(args[0] + "".output"");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n        readed = readed.replaceAll(""\\\\t+"", ""#"");\n        readed = readed.replaceAll(""\\\\s*#\\\\s*"", ""#"");\n        readed = readed.replaceAll(""Latitude,.*"", """");\n        readed = readed.replaceAll(""Flag of"", """");\n        readed = readed.replaceAll(""^\\\\s+$"", """");\n        writer.write(readed);\n        writer.close();\n    }\n']",141,"    private static void process(String feedString) {
        try {
            URL file = new URL(feedString);
            System.out.println(""Connecting to "" + file);
            URLConnection out = file.openConnection();
            out.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(out.getInputStream()));
            for (String reader; (reader = in.readLine()) != null; ) if (reader.startsWith(MARKER)) {
                System.out.println(TAG.matcher(reader).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
",0,0,1,1,"urlstring,url,connection,in,line","urlstring:0.0,url:1.7881393432617188e-06,connection:8.344650268554688e-07,in:-1.7881393432617188e-06,line:-1.6689300537109375e-06,",4,12,"url:file,connection:out,urlstring:feedString,line:reader,",Greedy,188,0.08352752129236857
467,"['228212', '18354823', '    public void CopyFile(File source, File destination) throws Exception {\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(source);\n            fos = new FileOutputStream(destination);\n            byte[] buffer = new byte[4096];\n            int read;\n            while ((read = fis.read(buffer)) != -1) {\n                fos.write(buffer, 0, read);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fis != null) {\n                    fis.close();\n                }\n                if (fos != null) {\n                    fos.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    private String storeEditionFile(InputStream in) throws IOException {\n        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;\n        File attachmentsDir = new File(datadir);\n        attachmentsDir.mkdirs();\n        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);\n        FileOutputStream out = new FileOutputStream(storedEditionFile);\n        IOUtils.copyLarge(in, out);\n        IOUtils.closeQuietly(out);\n        IOUtils.closeQuietly(in);\n        return storedEditionFile.getAbsolutePath();\n    }\n']",146,"    public void CopyFile(File src, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(src);
            fos = new FileOutputStream(destination);
            byte[] url = new byte[4096];
            int get;
            while ((get = fis.get(url)) != -1) {
                fos.write(url, 0, get);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1,1,0,1,"source,destination,fis,fos,buffer,read","source:0.004478335380554199,destination:0.0,fis:0.0,fos:0.0,buffer:0.0008797645568847656,read:0.0007559061050415039,",3,9,"source:src,buffer:url,read:get,",Greedy,172,0.07950873772303263
468,"['10450245', '13806107', '    public Map<String, String> getMetadata(WebFileObject fo) throws IOException {\n        if (!fo.wfs.getRootURL().getProtocol().equals(""ftp"")) {\n            String realName = fo.pathname;\n            boolean exists;\n            URL ur = new URL(fo.wfs.getRootURL(), realName);\n            HttpURLConnection connect = (HttpURLConnection) ur.openConnection();\n            connect.setRequestMethod(""HEAD"");\n            HttpURLConnection.setFollowRedirects(false);\n            connect.connect();\n            HttpURLConnection.setFollowRedirects(true);\n            if (connect.getResponseCode() == 303) {\n                String surl = connect.getHeaderField(""Location"");\n                if (surl.startsWith(fo.wfs.root.toString())) {\n                    realName = surl.substring(fo.wfs.root.toString().length());\n                }\n                connect.disconnect();\n                ur = new URL(fo.wfs.getRootURL(), realName);\n                connect = (HttpURLConnection) ur.openConnection();\n                connect.setRequestMethod(""HEAD"");\n                connect.connect();\n            }\n            exists = connect.getResponseCode() != 404;\n            Map<String, String> result = new HashMap<String, String>();\n            Map<String, List<String>> fields = connect.getHeaderFields();\n            for (Entry<String, List<String>> e : fields.entrySet()) {\n                String key = e.getKey();\n                List<String> value = e.getValue();\n                result.put(key, value.get(0));\n            }\n            result.put(META_EXIST, String.valueOf(exists));\n            connect.disconnect();\n            return result;\n        } else {\n            Map<String, String> result = new HashMap<String, String>();\n            URL url = new URL(fo.wfs.getRootURL(), fo.pathname);\n            URLConnection urlc = url.openConnection();\n            try {\n                urlc.connect();\n                urlc.getInputStream().close();\n                result.put(META_EXIST, ""true"");\n            } catch (IOException ex) {\n                result.put(META_EXIST, ""false"");\n            }\n            return result;\n        }\n    }\n', '    private void makeQuery(String query) {\n        System.out.println("" Querying for "" + query);\n        try {\n            query = URLEncoder.encode(query, ""UTF-8"");\n            for (int k = 0; k < 100; k++) {\n                System.out.println(query);\n                URL url = new URL(""http://ajax.googleapis.com/ajax/services/search/web?start="" + k * 8 + ""&rsz=large&v=1.0&q="" + query);\n                URLConnection connection = url.openConnection();\n                connection.addRequestProperty(""Referer"", HTTP_REFERER);\n                String line;\n                StringBuilder builder = new StringBuilder();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                while ((line = reader.readLine()) != null) {\n                    builder.append(line);\n                }\n                String response = builder.toString();\n                JSONObject json = new JSONObject(response);\n                if (k == 0) {\n                    result = ""Total results = "" + json.getJSONObject(""responseData"").getJSONObject(""cursor"").getString(""estimatedResultCount"") + ""\\n"";\n                }\n                JSONArray ja = json.getJSONObject(""responseData"").getJSONArray(""results"");\n                jsonres = ja;\n                for (int i = 0; i < ja.length(); i++) {\n                    System.out.print((i + 1) + "". "");\n                    JSONObject j = ja.getJSONObject(i);\n                    result = result + j.getString(""titleNoFormatting"") + "" "";\n                    result = result + j.getString(""url"") + ""\\n"";\n                    result = result + j.getString(""content"") + ""\\n\\n"";\n                }\n            }\n        } catch (Exception e) {\n            System.err.println(""Something went wrong..."");\n            e.printStackTrace();\n        }\n    }\n']",444,"    public Map<String, String> getMetadata(WebFileObject tp) throws IOException {
        if (!tp.wfs.getRootURL().getProtocol().equals(""ftp"")) {
            String  realFile = tp.pathname;
            boolean  expects;
            URL raf = new URL(tp.wfs.getRootURL(),  realFile);
            HttpURLConnection read = (HttpURLConnection) raf.openConnection();
            read.setRequestMethod(""HEAD"");
            HttpURLConnection.setFollowRedirects(false);
            read.read();
            HttpURLConnection.setFollowRedirects(true);
            if (read.getResponseCode() == 303) {
                String bstring = read.getHeaderField(""Location"");
                if (bstring.startsWith(tp.wfs.root.toString())) {
                     realFile = bstring.substring(tp.wfs.root.toString().length());
                }
                read.disconnect();
                raf = new URL(tp.wfs.getRootURL(),  realFile);
                read = (HttpURLConnection) raf.openConnection();
                read.setRequestMethod(""HEAD"");
                read.read();
            }
             expects = read.getResponseCode() != 404;
            Map<String, String> attr = new HashMap<String, String>();
            Map<String, List<String>> files = read.getHeaderFields();
            for (Entry<String, List<String>> d : files.entrySet()) {
                String ry = d.getKey();
                List<String> VALUE = d.getValue();
                attr.put(ry, VALUE.get(0));
            }
            attr.put(META_EXIST, String.valueOf( expects));
            read.disconnect();
            return attr;
        } else {
            Map<String, String> attr = new HashMap<String, String>();
            URL ls = new URL(tp.wfs.getRootURL(), tp.pathname);
            URLConnection URLh = ls.openConnection();
            try {
                URLh.read();
                URLh.getInputStream().close();
                attr.put(META_EXIST, ""true"");
            } catch (IOException ex) {
                attr.put(META_EXIST, ""false"");
            }
            return attr;
        }
    }
",0,0,0,-1,"fo,realName,exists,ur,connect,surl,result,fields,e,key,value,url,urlc","fo:8.344650268554688e-07,realName:0.0,exists:0.0,ur:5.602836608886719e-06,connect:-1.0013580322265625e-05,surl:0.0,result:2.2649765014648438e-06,fields:-2.2649765014648438e-06,e:1.0728836059570312e-06,key:4.410743713378906e-06,value:1.7881393432617188e-06,url:8.881092071533203e-05,urlc:0.0,",13,60,"url:ls,ur:raf,key:ry,result:attr,value:VALUE,e:d,fo:tp,realName: realFile,exists: expects,surl:bstring,urlc:URLh,fields:files,connect:read,",Greedy,703,0.3402680516242981
469,"['852143', '13637424', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '        public void actionPerformed(ActionEvent e) {\n            String aboutText = ""Slug application."";\n            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);\n            boolean canShowInPane = false;\n            if (aboutURL != null) {\n                try {\n                    URL url = new URL(aboutURL);\n                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);\n                    canShowInPane = dlg.setURL(url);\n                    if (canShowInPane) {\n                        dlg.setSize(300, 200);\n                        dlg.setLocationRelativeTo(ShellSlacFrame.this);\n                        dlg.setVisible(true);\n                    } else {\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                        String line = """";\n                        StringBuffer content = new StringBuffer();\n                        do {\n                            content.append(line);\n                            line = reader.readLine();\n                        } while (line != null);\n                        if (content.length() != 0) {\n                            aboutText = content.toString();\n                        }\n                    }\n                } catch (Exception ex) {\n                    if (DEBUG) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);\n        }\n']",210,"    public static void doVersionCheck(View http) {
        http.showWaitCursor();
        try {
            URL Url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream resource = Url.openStream();
            BufferedReader data = new BufferedReader(new InputStreamReader(resource));
            String unit;
            String DevelBuilt = null;
            String severebuild = null;
            while ((unit = data.readLine()) != null) {
                if (unit.startsWith("".build"")) DevelBuilt = unit.substring(6).trim(); else if (unit.startsWith("".stablebuild"")) severebuild = unit.substring(12).trim();
            }
            data.close();
            if (DevelBuilt != null && severebuild != null) {
                doVersionCheck(http, severebuild, DevelBuilt);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(http, ""read-error"", args);
        }
        http.hideWaitCursor();
    }
",1,1,1,-1,"view,url,in,bin,line,develBuild,stableBuild","view:-6.198883056640625e-06,url:6.401538848876953e-05,in:8.463859558105469e-06,bin:-1.9788742065429688e-05,line:-2.9087066650390625e-05,develBuild:0.0,stableBuild:0.0,",7,26,"url:Url,in:resource,develBuild:DevelBuilt,stableBuild:severebuild,view:http,bin:data,line:unit,",Greedy,385,0.1623030384381612
470,"['2021569', '7114853', '    public boolean getFile(String local, String remote) throws IOException {\n        boolean result = false;\n        GridFTP ftp = new GridFTP();\n        ftp.setDefaultPort(port);\n        System.out.println(this + "".getFile "" + remote);\n        try {\n            ftp.connect(host);\n            ftp.login(username, password);\n            int reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                System.err.println(""FTP server refused connection."");\n                return false;\n            }\n            ftp.get(local, remote);\n            ftp.logout();\n            result = true;\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        System.out.println(this + "".getFile return "" + result);\n        return result;\n    }\n', '    private MailBox authenticate() throws Exception {\n        String line = ""POP3 Server Ready"" + ((mChallenge == null) ? """" : ("" "" + mChallenge));\n        MailBox mailbox = null;\n        mStream.writeOk(line);\n        while (mailbox == null) {\n            line = mStream.readLine();\n            if (isQuit(line)) break;\n            String body;\n            if ((body = isCommand(line, ""USER"")) != null) {\n                String user = body;\n                MailBox mb = mRepository.getMailBox(user);\n                if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else {\n                    mStream.writeOk();\n                    String pswd, line2 = mStream.readLine();\n                    if (isQuit(line2)) break;\n                    if ((pswd = isCommand(line2, ""PASS"")) == null) mStream.writeErr(""Expected PASS but got {"" + line2 + ""}""); else {\n                        String realPswd = mb.getPassword();\n                        if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) {\n                            mailbox = mb;\n                            mStream.writeOk();\n                        } else mStream.writeErr(""Bad password for "" + user);\n                    }\n                }\n            } else if ((body = isCommand(line, ""APOP"")) != null) {\n                if (mChallenge == null) mStream.writeErr(""APOP Not Supported""); else {\n                    int space = body.indexOf(\' \');\n                    if (space < 0) mStream.writeErr(""Bad APOP command {"" + line + ""}""); else {\n                        String user = body.substring(0, space);\n                        String hash = body.substring(space + 1);\n                        MailBox mb = mRepository.getMailBox(user);\n                        if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else if (mb.getPassword() == null) mStream.writeErr(""User("" + user + "") cannot login using APOP""); else {\n                            String secret = mChallenge + mb.getPassword();\n                            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n                            md5.update(secret.getBytes(""UTF-8""));\n                            byte[] digest = md5.digest();\n                            String digestStr = new String(Hex.encodeHex(digest));\n                            if (hash.equalsIgnoreCase(digestStr)) {\n                                mailbox = mb;\n                                mStream.writeOk();\n                            } else mStream.writeErr(""Bad password for "" + user);\n                        }\n                    }\n                }\n            } else mStream.writeErr(""Authentication required (got \'"" + line + ""\')"");\n        }\n        return mailbox;\n    }\n']",181,"    public boolean getFile(String home, String loc) throws IOException {
        boolean user = false;
        GridFTP dftp = new GridFTP();
        dftp.setDefaultPort(port);
        System.out.println(this + "".getFile "" + loc);
        try {
            dftp.connect(host);
            dftp.login(username, password);
            int update = dftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(update)) {
                dftp.disconnect();
                System.err.println(""FTP server refused connection."");
                return false;
            }
            dftp.get(home, loc);
            dftp.logout();
            user = true;
        } finally {
            if (dftp.isConnected()) {
                try {
                    dftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(this + "".getFile return "" + user);
        return user;
    }
",0,0,0,-1,"local,remote,ftp,reply,result","local:-4.8995018005371094e-05,remote:1.33514404296875e-05,ftp:0.0,reply:-3.0994415283203125e-06,result:-1.4066696166992188e-05,",5,21,"remote:loc,ftp:dftp,reply:update,result:user,local:home,",Greedy,313,0.12997010151545207
471,"['17208661', '21044594', '    protected void copyFile(File from, File to) throws IOException {\n        new File(intSfPath).delete();\n        if (to.exists() && (from.length() == to.length()) && (from.lastModified() == to.lastModified())) return;\n        if (to.exists()) to.delete();\n        to.createNewFile();\n        FileChannel inFC = null;\n        FileChannel outFC = null;\n        try {\n            inFC = new FileInputStream(from).getChannel();\n            outFC = new FileOutputStream(to).getChannel();\n            long cnt = outFC.transferFrom(inFC, 0, inFC.size());\n            if (cnt < inFC.size()) throw new IOException(""File copy failed"");\n        } finally {\n            if (inFC != null) {\n                try {\n                    inFC.close();\n                } catch (IOException ex) {\n                }\n            }\n            if (outFC != null) {\n                try {\n                    outFC.close();\n                } catch (IOException ex) {\n                }\n            }\n            to.setLastModified(from.lastModified());\n        }\n    }\n', '        public void run() {\n            final String basename = FilenameUtils.removeExtension(file.getName());\n            final File compressed = new File(logDirectory, basename + "".gz"");\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = new FileInputStream(file);\n                out = new GZIPOutputStream(new FileOutputStream(compressed));\n                IOUtils.copy(in, out);\n                in.close();\n                out.close();\n            } catch (IOException e) {\n                reportError(""Error compressing olg log file after file rotation"", e, ErrorManager.GENERIC_FAILURE);\n            } finally {\n                IOUtils.closeQuietly(in);\n                IOUtils.closeQuietly(out);\n            }\n            Collections.replaceAll(files, file, compressed);\n        }\n']",218,"    protected void copyFile(File url, File out) throws IOException {
        new File(intSfPath).delete();
        if (out.exists() && (url.length() == out.length()) && (url.lastModified() == out.lastModified())) return;
        if (out.exists()) out.delete();
        out.createNewFile();
        FileChannel inFC = null;
        FileChannel outFC = null;
        try {
            inFC = new FileInputStream(url).getChannel();
            outFC = new FileOutputStream(out).getChannel();
            long cnt = outFC.transferFrom(inFC, 0, inFC.size());
            if (cnt < inFC.size()) throw new IOException(""File copy failed"");
        } finally {
            if (inFC != null) {
                try {
                    inFC.close();
                } catch (IOException ex) {
                }
            }
            if (outFC != null) {
                try {
                    outFC.close();
                } catch (IOException ex) {
                }
            }
            out.setLastModified(url.lastModified());
        }
    }
",1,1,1,-1,"from,to,inFC,outFC,cnt","from:-0.0012519359588623047,to:0.016070187091827393,inFC:0.0,outFC:0.0,cnt:0.0,",2,14,"to:out,inFC:inFC,outFC:outFC,cnt:cnt,from:url,",Greedy,284,0.11944117148717244
472,"['18490448', '411630', '    @Deprecated\n    public void encodeBegin(FacesContext context, UIComponent component) throws IOException {\n        XUIResponseWriter w = getResponseWriter();\n        XUIViewRoot viewRoot = (XUIViewRoot) component;\n        XUIResponseWriter headerW = getResponseWriter().getHeaderWriter();\n        headerW.write(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>\\n<!DOCTYPE foo [\\n"");\n        InputStream is1 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-lat1.ent"");\n        headerW.write(new String(IOUtils.copyByte(is1)));\n        headerW.write(""\\n"");\n        is1.close();\n        InputStream is2 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-special.ent"");\n        headerW.write(new String(IOUtils.copyByte(is2)));\n        headerW.write(""\\n"");\n        is2.close();\n        InputStream is3 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-symbol.ent"");\n        headerW.write(new String(IOUtils.copyByte(is3)));\n        headerW.write(""\\n]>\\n"");\n        is3.close();\n        headerW.startElement(""html"", component);\n        XUITheme t = getTheme();\n        if (t != null) {\n            headerW.writeAttribute(""style"", getTheme().getHtmlStyle(), ""style"");\n        }\n        headerW.startElement(""head"", component);\n        headerW.startElement(""base"", component);\n        HttpServletRequest req = (HttpServletRequest) getRequestContext().getRequest();\n        String link = (req.isSecure() ? ""https"" : ""http"") + ""://"" + req.getServerName() + (req.getServerPort() == 80 ? """" : "":"" + req.getServerPort()) + getRequestContext().getResourceUrl("""");\n        headerW.writeAttribute(""href"", link, ""href"");\n        headerW.endElement(""base"");\n        w.startElement(""body"", component);\n        if (t != null && t.getBodyStyle() != null) {\n            w.writeAttribute(""style"", getTheme().getBodyStyle() + "";height:100%;width:100%"", ""style"");\n        }\n        headerW.writeText(\'\\n\');\n        w.startElement(""div"", component);\n        w.writeAttribute(""id"", ((XUIViewRoot) component).getClientId(), ""id"");\n        if (viewRoot.findComponent(Window.class) != null) {\n            w.writeAttribute(HTMLAttr.CLASS, ""x-panel"", """");\n        }\n        w.writeAttribute(""style"", ""width:100%;height:100%"", null);\n        if (t != null) {\n            t.addScripts(w.getScriptContext());\n            t.addStyle(w.getStyleContext());\n        }\n    }\n', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",550,"    @Deprecated
    public void encodeBegin(FacesContext instance, UIComponent cms) throws IOException {
        XUIResponseWriter response = getResponseWriter();
        XUIViewRoot  navHome = (XUIViewRoot) cms;
        XUIResponseWriter pagew = getResponseWriter().getHeaderWriter();
        pagew.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>
<!DOCTYPE foo [
"");
        InputStream is0 = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-lat1.ent"");
        pagew.write(new String(IOUtils.copyByte(is0)));
        pagew.write(""
"");
        is0.close();
        InputStream isSecond = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-special.ent"");
        pagew.write(new String(IOUtils.copyByte(isSecond)));
        pagew.write(""
"");
        isSecond.close();
        InputStream inthree = Thread.currentThread().getContextClassLoader().getResourceAsStream(""xhtml-symbol.ent"");
        pagew.write(new String(IOUtils.copyByte(inthree)));
        pagew.write(""
]>
"");
        inthree.close();
        pagew.startElement(""html"", cms);
        XUITheme ut = getTheme();
        if (ut != null) {
            pagew.writeAttribute(""style"", getTheme().getHtmlStyle(), ""style"");
        }
        pagew.startElement(""head"", cms);
        pagew.startElement(""base"", cms);
        HttpServletRequest tar = (HttpServletRequest) getRequestContext().getRequest();
        String url = (tar.isSecure() ? ""https"" : ""http"") + ""://"" + tar.getServerName() + (tar.getServerPort() == 80 ? """" : "":"" + tar.getServerPort()) + getRequestContext().getResourceUrl("""");
        pagew.writeAttribute(""href"", url, ""href"");
        pagew.endElement(""base"");
        response.startElement(""body"", cms);
        if (ut != null && ut.getBodyStyle() != null) {
            response.writeAttribute(""style"", getTheme().getBodyStyle() + "";height:100%;width:100%"", ""style"");
        }
        pagew.writeText('
');
        response.startElement(""div"", cms);
        response.writeAttribute(""id"", ((XUIViewRoot) cms).getClientId(), ""id"");
        if ( navHome.findComponent(Window.class) != null) {
            response.writeAttribute(HTMLAttr.CLASS, ""x-panel"", """");
        }
        response.writeAttribute(""style"", ""width:100%;height:100%"", null);
        if (ut != null) {
            ut.addScripts(response.getScriptContext());
            ut.addStyle(response.getStyleContext());
        }
    }
",1,1,1,-1,"context,component,w,viewRoot,headerW,is1,is2,is3,t,req,link","context:-0.0008345246315002441,component:4.607439041137695e-05,w:-0.0013298988342285156,viewRoot:0.0,headerW:0.0,is1:0.0,is2:0.0,is3:0.0,t:-0.0006250143051147461,req:-0.0009500384330749512,link:-0.0015255212783813477,",11,58,"component:cms,viewRoot: navHome,headerW:pagew,is1:is0,is2:isSecond,is3:inthree,t:ut,context:instance,req:tar,w:response,link:url,",Greedy,536,0.2830872694651286
473,"['20841292', '17114096', '    public void fileCopy(File src, File dest) throws IOException {\n        if (!dest.exists()) {\n            final File parent = new File(dest.getParent());\n            if (!parent.exists() && !parent.mkdirs()) {\n                throw new IOException();\n            }\n            if (!dest.createNewFile()) {\n            }\n        }\n        FileInputStream is = null;\n        FileOutputStream os = null;\n        try {\n            is = new FileInputStream(src);\n            os = new FileOutputStream(dest);\n            final FileChannel srcChannel = is.getChannel();\n            final FileChannel dstChannel = os.getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } finally {\n            try {\n                if (is != null) {\n                    is.close();\n                }\n            } finally {\n                if (os != null) {\n                    os.close();\n                }\n            }\n        }\n    }\n', '    public HttpResponse executeHttpGetRequest(String uri, Map<String, Object> parameters) throws HttpTestClientException {\n        HttpGet httpGet = new HttpGet(uri);\n        if (parameters != null) {\n            httpGet.setParams(createBasicParameters(parameters));\n        }\n        return executeHttp(httpGet);\n    }\n']",187,"    public void fileCopy(File sel, File desc) throws IOException {
        if (!desc.exists()) {
            final File parent = new File(desc.getParent());
            if (!parent.exists() && !parent.mkdirs()) {
                throw new IOException();
            }
            if (!desc.createNewFile()) {
            }
        }
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream(sel);
            os = new FileOutputStream(desc);
            final FileChannel configchannel = is.getChannel();
            final FileChannel dntChan = os.getChannel();
            dntChan.transferFrom(configchannel, 0, configchannel.size());
            configchannel.close();
            dntChan.close();
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } finally {
                if (os != null) {
                    os.close();
                }
            }
        }
    }
",0,0,0,-1,"src,dest,parent,is,os,srcChannel,dstChannel","src:7.152557373046875e-07,dest:5.960464477539062e-07,parent:1.0728836059570312e-06,is:0.0,os:1.1920928955078125e-07,srcChannel:0.0,dstChannel:0.0,",4,14,"parent:parent,src:sel,dest:desc,os:os,is:is,srcChannel:configchannel,dstChannel:dntChan,",Greedy,376,0.14793912569681802
474,"['2226035', '2009328', '    @Override\n    public boolean performOk() {\n        this.setPropertyValue(""bea.home"", this.beaHome.getText());\n        this.setPropertyValue(""bea.domain"", this.domainDirectory.getText());\n        Display.getDefault().syncExec(new Runnable() {\n\n            public void run() {\n                saveWLHome();\n                for (final TabControl control : tabControls) {\n                    control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);\n                }\n                if (isEnabledJCLCopy()) {\n                    final File url = new File(WLPropertyPage.this.domainDirectory.getText());\n                    File lib = new File(url, ""lib"");\n                    File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");\n                    if (!log4jLibrary.exists()) {\n                        InputStream srcFile = null;\n                        FileOutputStream fos = null;\n                        try {\n                            srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));\n                            fos = new FileOutputStream(log4jLibrary);\n                            IOUtils.copy(srcFile, fos);\n                            srcFile.close();\n                            fos.flush();\n                            fos.close();\n                            srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));\n                            File jcl = new File(lib, ""commons-logging-1.0.4.jar"");\n                            fos = new FileOutputStream(jcl);\n                            IOUtils.copy(srcFile, fos);\n                        } catch (IOException e) {\n                            Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);\n                        } finally {\n                            try {\n                                if (srcFile != null) {\n                                    srcFile.close();\n                                    srcFile = null;\n                                }\n                                if (fos != null) {\n                                    fos.flush();\n                                    fos.close();\n                                    fos = null;\n                                }\n                            } catch (IOException e) {\n                            }\n                        }\n                    }\n                }\n                if (isEnabledJSTLCopy()) {\n                    File url = new File(WLPropertyPage.this.domainDirectory.getText());\n                    File lib = new File(url, ""lib"");\n                    File jstlLibrary = new File(lib, ""jstl.jar"");\n                    if (!jstlLibrary.exists()) {\n                        InputStream srcFile = null;\n                        FileOutputStream fos = null;\n                        try {\n                            srcFile = toInputStream(new Path(""jstl/jstl.jar""));\n                            fos = new FileOutputStream(jstlLibrary);\n                            IOUtils.copy(srcFile, fos);\n                        } catch (IOException e) {\n                            Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);\n                        } finally {\n                            try {\n                                if (srcFile != null) {\n                                    srcFile.close();\n                                    srcFile = null;\n                                }\n                                if (fos != null) {\n                                    fos.flush();\n                                    fos.close();\n                                    fos = null;\n                                }\n                            } catch (final IOException e) {\n                                Logger.getLog().debug(""I/O exception closing resources"", e);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        return super.performOk();\n    }\n', '    private String storeProxy(String proxyPath, String userName) throws IOException {\n        File inputFile = new File(proxyPath);\n        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;\n        File outputFile = new File(outfile);\n        FileReader in = new FileReader(inputFile);\n        FileWriter out = new FileWriter(outputFile);\n        int c;\n        while ((c = in.read()) != -1) out.write(c);\n        in.close();\n        out.close();\n        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);\n        try {\n            p.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return outfile;\n    }\n']",546,"    @Override
    public boolean performOk() {
        this.setPropertyValue(""bea.home"", this.beaHome.getText());
        this.setPropertyValue(""bea.domain"", this.domainDirectory.getText());
        Display.getDefault().syncExec(new Runnable() {

            public void run() {
                saveWLHome();
                for (final TabControl control : tabControls) {
                    control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);
                }
                if (isEnabledJCLCopy()) {
                    final File source = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(source, ""lib"");
                    File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");
                    if (!log4jLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream foes = null;
                        try {
                            srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));
                            foes = new FileOutputStream(log4jLibrary);
                            IOUtils.copy(srcFile, foes);
                            srcFile.close();
                            foes.flush();
                            foes.close();
                            srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));
                            File jcl = new File(lib, ""commons-logging-1.0.4.jar"");
                            foes = new FileOutputStream(jcl);
                            IOUtils.copy(srcFile, foes);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (foes != null) {
                                    foes.flush();
                                    foes.close();
                                    foes = null;
                                }
                            } catch (IOException e) {
                            }
                        }
                    }
                }
                if (isEnabledJSTLCopy()) {
                    File source = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(source, ""lib"");
                    File jstlLibrary = new File(lib, ""jstl.jar"");
                    if (!jstlLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream foes = null;
                        try {
                            srcFile = toInputStream(new Path(""jstl/jstl.jar""));
                            foes = new FileOutputStream(jstlLibrary);
                            IOUtils.copy(srcFile, foes);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (foes != null) {
                                    foes.flush();
                                    foes.close();
                                    foes = null;
                                }
                            } catch (final IOException e) {
                                Logger.getLog().debug(""I/O exception closing resources"", e);
                            }
                        }
                    }
                }
            }
        });
        return super.performOk();
    }
",1,1,1,-1,"control,url,lib,log4jLibrary,srcFile,fos,jcl","control:0.003073453903198242,url:2.8764005303382874,lib:0.08265078067779541,log4jLibrary:0.0,srcFile:0.0,fos:0.0,jcl:0.0,",2,22,"url:source,lib:lib,control:control,log4jLibrary:log4jLibrary,srcFile:srcFile,fos:foes,jcl:jcl,",Greedy,417,0.22617938121159872
475,"['19999376', '386316', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n', '    private static File copyFileTo(File file, File directory) throws IOException {\n        File newFile = new File(directory, file.getName());\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(file);\n            fos = new FileOutputStream(newFile);\n            byte buff[] = new byte[1024];\n            int val;\n            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);\n        } finally {\n            if (fis != null) fis.close();\n            if (fos != null) fos.close();\n        }\n        return newFile;\n    }\n']",138,"    private static void unzipEntry(ZipFile zipfile, ZipEntry data, File outputDir) throws IOException {
        if (data.isDirectory()) {
            createDir(new File(outputDir, data.getName()));
            return;
        }
        File outputFile = new File(outputDir, data.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(data));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",1,1,1,-1,"zipfile,entry,outputDir,outputFile,inputStream,outputStream","zipfile:0.0,entry:-0.0011057853698730469,outputDir:0.0,outputFile:0.0,inputStream:0.0,outputStream:0.0,",1,5,"zipfile:zipfile,outputDir:outputDir,outputFile:outputFile,inputStream:inputStream,outputStream:outputStream,entry:data,",Greedy,216,0.10543857415517172
476,"['14187481', '854475', '    protected void yesAction() {\n        try {\n            String result = getSurveyURL() + ""&buildtime="" + Version.getBuildTimeString();\n            LOG.log(result);\n            if (!maySubmitSurvey()) {\n                return;\n            }\n            BufferedReader br = null;\n            try {\n                URL url = new URL(result);\n                InputStream urls = url.openStream();\n                InputStreamReader is = new InputStreamReader(urls);\n                br = new BufferedReader(is);\n                String line;\n                StringBuilder sb = new StringBuilder();\n                while ((line = br.readLine()) != null) {\n                    sb.append(line);\n                    sb.append(System.getProperty(""line.separator""));\n                }\n                LOG.log(sb.toString());\n            } catch (IOException e) {\n                LOG.log(""Could not open URL using Java"", e);\n                try {\n                    PlatformFactory.ONLY.openURL(new URL(result));\n                    DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT, result);\n                } catch (IOException e2) {\n                    LOG.log(""Could not open URL using web browser"", e2);\n                }\n            } finally {\n                try {\n                    if (br != null) br.close();\n                } catch (IOException e) {\n                }\n            }\n        } finally {\n            noAction();\n        }\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",246,"    protected void yesAction() {
        try {
            String response = getSurveyURL() + ""&buildtime="" + Version.getBuildTimeString();
            LOG.log(response);
            if (!maySubmitSurvey()) {
                return;
            }
            BufferedReader ur = null;
            try {
                URL image = new URL(response);
                InputStream downloads = image.openStream();
                InputStreamReader mis = new InputStreamReader(downloads);
                ur = new BufferedReader(mis);
                String id;
                StringBuilder erb = new StringBuilder();
                while ((id = ur.readLine()) != null) {
                    erb.append(id);
                    erb.append(System.getProperty(""line.separator""));
                }
                LOG.log(erb.toString());
            } catch (IOException e) {
                LOG.log(""Could not open URL using Java"", e);
                try {
                    PlatformFactory.ONLY.openURL(new URL(response));
                    DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT, response);
                } catch (IOException e2) {
                    LOG.log(""Could not open URL using web browser"", e2);
                }
            } finally {
                try {
                    if (ur != null) ur.close();
                } catch (IOException e) {
                }
            }
        } finally {
            noAction();
        }
    }
",1,1,1,-1,"result,br,url,urls,is,line,sb","result:-6.4373016357421875e-06,br:-1.2874603271484375e-05,url:1.6927719116210938e-05,urls:0.0,is:-5.245208740234375e-06,line:-3.707408905029297e-05,sb:-1.430511474609375e-06,",7,23,"url:image,urls:downloads,sb:erb,is:mis,result:response,br:ur,line:id,",Greedy,345,0.14813416401545207
477,"['15416858', '854475', '    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {\n        monitor.subTask(""download "" + url.toString());\n        InputStream in = null;\n        FileOutputStream out = null;\n        URLConnection conn = null;\n        try {\n            conn = url.openConnection();\n            Writer writer = null;\n            try {\n                Date date = new Date(conn.getLastModified());\n                writer = new FileWriter(timestamp);\n                writer.write(this.FORMAT.format(date));\n            } catch (IOException e) {\n                timestamp.delete();\n            } finally {\n                IOUtils.closeQuietly(writer);\n            }\n            in = conn.getInputStream();\n            out = new FileOutputStream(archive);\n            IOUtils.copy(in, out);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",169,"    private void download(File database, File timestamp, URL file, IProgressMonitor summary) throws IOException {
        summary.subTask(""download "" + file.toString());
        InputStream nin = null;
        FileOutputStream copy = null;
        URLConnection channel = null;
        try {
            channel = file.openConnection();
            Writer later = null;
            try {
                Date open = new Date(channel.getLastModified());
                later = new FileWriter(timestamp);
                later.write(this.FORMAT.format(open));
            } catch (IOException e) {
                timestamp.delete();
            } finally {
                IOUtils.closeQuietly(later);
            }
            nin = channel.getInputStream();
            copy = new FileOutputStream(database);
            IOUtils.copy(nin, copy);
        } finally {
            IOUtils.closeQuietly(nin);
            IOUtils.closeQuietly(copy);
        }
    }
",0,0,0,-1,"archive,timestamp,url,monitor,in,out,conn,writer,date","archive:1.811981201171875e-05,timestamp:0.0,url:2.9087066650390625e-05,monitor:3.218650817871094e-05,in:-2.384185791015625e-06,out:-2.384185791015625e-06,conn:-1.3589859008789062e-05,writer:3.4570693969726562e-06,date:2.9802322387695312e-06,",8,25,"monitor:summary,url:file,archive:database,writer:later,date:open,timestamp:timestamp,in:nin,out:copy,conn:channel,",Greedy,435,0.18825803995132445
478,"['7170603', '12116028', '    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {\n        File milestoneDefFile = new File(milestoneDefFileName);\n        if (!milestoneDefFile.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");\n        }\n        if (!milestoneDefFile.isFile()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");\n        }\n        if (!milestoneDefFile.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");\n        }\n        File sqlDirectory = new File(sqlDirectoryName);\n        if (!sqlDirectory.exists()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");\n        }\n        if (!sqlDirectory.isDirectory()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");\n        }\n        if (!sqlDirectory.canRead()) {\n            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");\n        }\n        File destFile = new File(destFileName);\n        if (destFile.exists()) {\n            throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");\n        }\n        destFile.createNewFile();\n        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();\n        FileInputStream milestoneDefFIS = null;\n        try {\n            milestoneDefFIS = new FileInputStream(milestoneDefFile);\n            parser.parse(milestoneDefFIS);\n        } catch (XMLParseException e) {\n            printXmlError(e, milestoneDefFileName);\n        } finally {\n            try {\n                if (milestoneDefFIS != null) milestoneDefFIS.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing inputstream "", e);\n            }\n        }\n        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);\n        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);\n        if (fromMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (toMilestoneIdx < 0) {\n            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");\n        }\n        if (fromMilestoneIdx == toMilestoneIdx) {\n            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");\n        }\n        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);\n        FileOutputStream fos = null;\n        try {\n            fos = new FileOutputStream(destFile);\n            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {\n                appendFileToOutputStream(fos, sqlDirectory, it.next());\n            }\n        } catch (Exception e) {\n            fos.close();\n            destFile.delete();\n            throw e;\n        } finally {\n            try {\n                if (fos != null) fos.close();\n            } catch (Exception e) {\n                _logger.warn(""Exception caught when closing outputstream "", e);\n            }\n        }\n        System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");\n    }\n', '    public static void main(String[] args) throws Exception {\n        File inputFile = new File(args[0]);\n        BufferedReader reader = new BufferedReader(new FileReader(inputFile));\n        StringBuffer stringBuffer = new StringBuffer();\n        String readed;\n        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\\r\\n"");\n        readed = stringBuffer.toString();\n        reader.close();\n        File outputFile = new File(args[0] + "".output"");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));\n        readed = readed.replaceAll(""\\\\t+"", ""#"");\n        readed = readed.replaceAll(""\\\\s*#\\\\s*"", ""#"");\n        readed = readed.replaceAll(""Latitude,.*"", """");\n        readed = readed.replaceAll(""Flag of"", """");\n        readed = readed.replaceAll(""^\\\\s+$"", """");\n        writer.write(readed);\n        writer.close();\n    }\n']",616,"    private static void generateSQLUpgradeFile(String milestonedeffileUrl, String sqldirectoryPath, String withLegaxy, String destDigename, String DestDirectoryPath) throws Exception {
        File milestoneDEFStream = new File(milestonedeffileUrl);
        if (!milestoneDEFStream.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : does not exists"");
        }
        if (!milestoneDEFStream.isFile()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not a file"");
        }
        if (!milestoneDEFStream.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestonedeffileUrl + ""] : not readable"");
        }
        File dbFolder = new File(sqldirectoryPath);
        if (!dbFolder.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : does not exists"");
        }
        if (!dbFolder.isDirectory()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not a directory"");
        }
        if (!dbFolder.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqldirectoryPath + ""] : not readable"");
        }
        File targetPage = new File(DestDirectoryPath);
        if (targetPage.exists()) {
            throw new IllegalArgumentException(""Cannot write to ["" + DestDirectoryPath + ""] : already exists"");
        }
        targetPage.createNewFile();
        SqlUpgradeXmlParser json = SqlUpgradeXmlParser.newParser();
        FileInputStream milestoneDefFIS = null;
        try {
            milestoneDefFIS = new FileInputStream(milestoneDEFStream);
            json.parse(milestoneDefFIS);
        } catch (XMLParseException e) {
            printXmlError(e, milestonedeffileUrl);
        } finally {
            try {
                if (milestoneDefFIS != null) milestoneDefFIS.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing inputstream "", e);
            }
        }
        int fromMilestoneIdx = json.getMilestoneIndex(withLegaxy);
        int toMilestoneIdx = json.getMilestoneIndex(destDigename);
        if (fromMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + withLegaxy + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (toMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destDigename + ""] : does not exist . (Exisiting milestones "" + json.listMilestones() + "")"");
        }
        if (fromMilestoneIdx == toMilestoneIdx) {
            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");
        }
        List<String> files = json.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);
        List<String> views = json.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(targetPage);
            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, dbFolder, it.next());
            }
        } catch (Exception e) {
            fos.close();
            targetPage.delete();
            throw e;
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing outputstream "", e);
            }
        }
        System.out.println(""An SQL update file has been generated to "" + DestDirectoryPath + ""."");
    }
",1,1,0,1,"milestoneDefFileName,sqlDirectoryName,fromMilestone,destMilestone,destFileName,milestoneDefFile,sqlDirectory,destFile,parser,milestoneDefFIS","milestoneDefFileName:0.0,sqlDirectoryName:0.0,fromMilestone:0.0,destMilestone:0.0,destFileName:0.0,milestoneDefFile:0.0,sqlDirectory:0.0,destFile:0.0,parser:3.9577484130859375e-05,milestoneDefFIS:0.0,",9,45,"parser:json,milestoneDefFileName:milestonedeffileUrl,sqlDirectoryName:sqldirectoryPath,fromMilestone:withLegaxy,destMilestone:destDigename,destFileName:DestDirectoryPath,milestoneDefFile:milestoneDEFStream,sqlDirectory:dbFolder,destFile:targetPage,",Greedy,530,0.2783238887786865
479,"['17972560', '19999376', '    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) {\n        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {\n            File selectedFolder = folderFileChooser.getSelectedFile();\n            File collectionCopyFile;\n            String newDocumentName;\n            Document newDocument;\n            StringBuilder distinguisherReplacer = new StringBuilder();\n            int matchingFilenameDistinguisher;\n            String nextToken;\n            Term newTerm;\n            String userHome;\n            String fileSeparator;\n            int userOption;\n            ArrayList<File> folderTextFiles = new ArrayList<File>();\n            ArrayList<File> folderRejectedFiles = new ArrayList<File>();\n            HashSet<File> ignoredFiles = new HashSet<File>();\n            FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");\n            Scanner tokenizer = null;\n            FileChannel fileSource = null;\n            FileChannel collectionDestination = null;\n            HashMap<String, Integer> termHashMap = null;\n            Index collectionIndex = activeCollection.getIndex();\n            int documentTermMaxFrequency;\n            int currentTermFrequency;\n            for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) folderTextFiles.add(folderFile); else folderRejectedFiles.add(folderFile);\n            for (File selectedFile : folderTextFiles) {\n                newDocumentName = selectedFile.getName();\n                newDocument = new Document(newDocumentName);\n                if (activeCollection.containsDocument(newDocument)) {\n                    matchingFilenameDistinguisher = 1;\n                    newDocumentName = newDocumentName.concat(""("" + matchingFilenameDistinguisher + "")"");\n                    newDocument.setDocumentName(newDocumentName);\n                    while (activeCollection.containsDocument(newDocument)) {\n                        matchingFilenameDistinguisher++;\n                        newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString();\n                        newDocument.setDocumentName(newDocumentName);\n                    }\n                }\n                termHashMap = new HashMap<String, Integer>();\n                try {\n                    tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)));\n                    tokenizer.useDelimiter(Pattern.compile(""\\\\p{Space}|\\\\p{Punct}|\\\\p{Cntrl}""));\n                    while (tokenizer.hasNext()) {\n                        nextToken = tokenizer.next().toLowerCase();\n                        if (!nextToken.isEmpty()) if (termHashMap.containsKey(nextToken)) termHashMap.put(nextToken, termHashMap.get(nextToken) + 1); else termHashMap.put(nextToken, 1);\n                    }\n                    documentTermMaxFrequency = 0;\n                    for (String term : termHashMap.keySet()) {\n                        newTerm = new Term(term);\n                        if (!collectionIndex.termExists(newTerm)) collectionIndex.addTerm(newTerm);\n                        currentTermFrequency = termHashMap.get(term);\n                        if (currentTermFrequency > documentTermMaxFrequency) documentTermMaxFrequency = currentTermFrequency;\n                        collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency);\n                    }\n                    newDocument.setTermMaxFrequency(documentTermMaxFrequency);\n                    activeCollection.addDocument(newDocument);\n                    userHome = System.getProperty(""user.home"");\n                    fileSeparator = System.getProperty(""file.separator"");\n                    collectionCopyFile = new File(userHome + fileSeparator + ""Infrared"" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName);\n                    collectionCopyFile.createNewFile();\n                    fileSource = new FileInputStream(selectedFile).getChannel();\n                    collectionDestination = new FileOutputStream(collectionCopyFile).getChannel();\n                    collectionDestination.transferFrom(fileSource, 0, fileSource.size());\n                } catch (FileNotFoundException e) {\n                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");\n                    return;\n                } catch (IOException e) {\n                    userOption = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\n                    if (userOption == JOptionPane.NO_OPTION) {\n                        activeCollection.removeDocument(newDocument);\n                        for (String term : termHashMap.keySet()) {\n                            collectionIndex.removeAllOccurences(new Term(term), newDocument);\n                        }\n                        folderTextFiles.add(selectedFile);\n                    } else ignoredFiles.add(selectedFile);\n                } finally {\n                    try {\n                        if (tokenizer != null) tokenizer.close();\n                        if (fileSource != null) fileSource.close();\n                        if (collectionDestination != null) collectionDestination.close();\n                    } catch (IOException e) {\n                        System.err.println(e.getMessage());\n                    }\n                }\n            }\n            if (ignoredFiles.size() > 0) {\n                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this);\n                ignoredFilesDialog.setVisible(true);\n            }\n            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n        } else if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n    }\n', '    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n']",879,"    private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evT) {
        if (evT.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) {
            File currentArea = folderFileChooser.getSelectedFile();
            File collectionActiveSourceFile;
            String newFeatureUrl;
            Document newSession;
            StringBuilder distinguishreplacement = new StringBuilder();
            int matchingFilenameChinctionishes;
            String  nextTerm;
            Term newterm;
            String Userhome;
            String fileDelatater;
            int  userOptions;
            ArrayList<File> folderEmptyfiles = new ArrayList<File>();
            ArrayList<File> folderPreceivedPages = new ArrayList<File>();
            HashSet<File> ignoredFolder = new HashSet<File>();
            FileNameExtensionFilter classFileFilter = new FileNameExtensionFilter(""Text Files"", ""txt"");
            Scanner tokenized = null;
            FileChannel selectionResource = null;
            FileChannel archiveOrdination = null;
            HashMap<String, Integer> termHList = null;
            Index  collectionindex = activeCollection.getIndex();
            int documentTermMaxfraction;
            int currentTermPrequently;
            for (File archiveFolder : currentArea.listFiles()) if (classFileFilter.accept(archiveFolder)) folderEmptyfiles.add(archiveFolder); else folderPreceivedPages.add(archiveFolder);
            for (File currentFolder : folderEmptyfiles) {
                newFeatureUrl = currentFolder.getName();
                newSession = new Document(newFeatureUrl);
                if (activeCollection.containsDocument(newSession)) {
                    matchingFilenameChinctionishes = 1;
                    newFeatureUrl = newFeatureUrl.concat(""("" + matchingFilenameChinctionishes + "")"");
                    newSession.setDocumentName(newFeatureUrl);
                    while (activeCollection.containsDocument(newSession)) {
                        matchingFilenameChinctionishes++;
                        newFeatureUrl = distinguishreplacement.replace(newFeatureUrl.length() - 2, newFeatureUrl.length() - 1, new Integer(matchingFilenameChinctionishes).toString()).toString();
                        newSession.setDocumentName(newFeatureUrl);
                    }
                }
                termHList = new HashMap<String, Integer>();
                try {
                    tokenized = new Scanner(new BufferedReader(new FileReader(currentFolder)));
                    tokenized.useDelimiter(Pattern.compile(""\\p{Space}|\\p{Punct}|\\p{Cntrl}""));
                    while (tokenized.hasNext()) {
                         nextTerm = tokenized.next().toLowerCase();
                        if (! nextTerm.isEmpty()) if (termHList.containsKey( nextTerm)) termHList.put( nextTerm, termHList.get( nextTerm) + 1); else termHList.put( nextTerm, 1);
                    }
                    documentTermMaxfraction = 0;
                    for (String term : termHList.keySet()) {
                        newterm = new Term(term);
                        if (! collectionindex.termExists(newterm))  collectionindex.addTerm(newterm);
                        currentTermPrequently = termHList.get(term);
                        if (currentTermPrequently > documentTermMaxfraction) documentTermMaxfraction = currentTermPrequently;
                         collectionindex.addOccurence(newterm, newSession, currentTermPrequently);
                    }
                    newSession.setTermMaxFrequency(documentTermMaxfraction);
                    activeCollection.addDocument(newSession);
                    Userhome = System.getProperty(""user.home"");
                    fileDelatater = System.getProperty(""file.separator"");
                    collectionActiveSourceFile = new File(Userhome + fileDelatater + ""Infrared"" + fileDelatater + activeCollection.getDocumentCollectionName() + fileDelatater + newFeatureUrl);
                    collectionActiveSourceFile.createNewFile();
                    selectionResource = new FileInputStream(currentFolder).getChannel();
                    archiveOrdination = new FileOutputStream(collectionActiveSourceFile).getChannel();
                    archiveOrdination.transferFrom(selectionResource, 0, selectionResource.size());
                } catch (FileNotFoundException e) {
                    System.err.println(e.getMessage() + "" This error should never occur! The file was just selected!"");
                    return;
                } catch (IOException e) {
                     userOptions = JOptionPane.showConfirmDialog(this, ""A file insertion has failed. If you want it to ignore this"" + ""file, press YES, else press NO to repeat the insertion"", ""FileInsertionFailure"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if ( userOptions == JOptionPane.NO_OPTION) {
                        activeCollection.removeDocument(newSession);
                        for (String term : termHList.keySet()) {
                             collectionindex.removeAllOccurences(new Term(term), newSession);
                        }
                        folderEmptyfiles.add(currentFolder);
                    } else ignoredFolder.add(currentFolder);
                } finally {
                    try {
                        if (tokenized != null) tokenized.close();
                        if (selectionResource != null) selectionResource.close();
                        if (archiveOrdination != null) archiveOrdination.close();
                    } catch (IOException e) {
                        System.err.println(e.getMessage());
                    }
                }
            }
            if (ignoredFolder.size() > 0) {
                IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFolder, this);
                ignoredFilesDialog.setVisible(true);
            }
            processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } else if (evT.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
",1,1,1,-1,"evt,selectedFolder,collectionCopyFile,newDocumentName,newDocument,distinguisherReplacer,matchingFilenameDistinguisher,nextToken,newTerm,userHome,fileSeparator,userOption,folderTextFiles,folderRejectedFiles,ignoredFiles,textFileFilter,tokenizer,fileSource,collectionDestination,termHashMap,collectionIndex,documentTermMaxFrequency,currentTermFrequency,folderFile,selectedFile","evt:0.0,selectedFolder:0.0,collectionCopyFile:0.0,newDocumentName:0.0,newDocument:0.0,distinguisherReplacer:0.0,matchingFilenameDistinguisher:0.0,nextToken:0.0,newTerm:0.0,userHome:0.0,fileSeparator:0.0,userOption:0.0,folderTextFiles:0.0,folderRejectedFiles:0.0,ignoredFiles:0.0,textFileFilter:0.0,tokenizer:0.0,fileSource:0.0,collectionDestination:0.0,termHashMap:0.0,collectionIndex:0.0,documentTermMaxFrequency:0.0,currentTermFrequency:0.0,folderFile:0.0,selectedFile:0.0,",25,125,"evt:evT,selectedFolder:currentArea,collectionCopyFile:collectionActiveSourceFile,newDocumentName:newFeatureUrl,newDocument:newSession,distinguisherReplacer:distinguishreplacement,matchingFilenameDistinguisher:matchingFilenameChinctionishes,nextToken: nextTerm,newTerm:newterm,userHome:Userhome,fileSeparator:fileDelatater,userOption: userOptions,folderTextFiles:folderEmptyfiles,folderRejectedFiles:folderPreceivedPages,ignoredFiles:ignoredFolder,textFileFilter:classFileFilter,tokenizer:tokenized,fileSource:selectionResource,collectionDestination:archiveOrdination,termHashMap:termHList,collectionIndex: collectionindex,documentTermMaxFrequency:documentTermMaxfraction,currentTermFrequency:currentTermPrequently,folderFile:archiveFolder,selectedFile:currentFolder,",Greedy,927,0.6430540561676026
480,"['15723802', '2252572', '    void createAgentProgram(PrintStream ps, String agentName, String agentID) throws IOException, ConfigException {\n        Agent agent = service.getAgent(agentName);\n        File instanceDir = getInstanceDir();\n        double agent_timeout_seconds = engine.getTimeout();\n        String ii = ""\\"""";\n        String agentScript = ""agent-"" + agentName + "".py"";\n        String serviceScript = ""service.py"";\n        Set<String> taskNames = agent.getTasks().keySet();\n        File scriptDir = getService().getScriptDir();\n        final boolean embedScripts = true;\n        {\n            ps.println(""#!/bin/sh"");\n            ps.println(""umask 0077"");\n        }\n        for (String taskName : taskNames) {\n            Task task = getService().getTask(taskName);\n            String script = task.getScriptContent();\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + task.getFile() + "" << "" + ii + ""EOF_"" + task.getFile() + ii);\n                ps.println(script);\n                ps.println(""EOF_"" + task.getFile());\n            } else {\n                File taskScriptFile = new File(instanceDir, task.getFile());\n                PrintStream xs = new PrintStream(taskScriptFile);\n                xs.print(script);\n                xs.close();\n            }\n        }\n        {\n            PrintStream ss = null;\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + serviceScript + "" << "" + ii + ""EOF_"" + serviceScript + ii);\n                ss = ps;\n            } else {\n                File serviceScriptFile = new File(instanceDir, serviceScript);\n                ss = new PrintStream(serviceScriptFile);\n            }\n            service.createServiceScript(ss);\n            if (embedScripts) ps.println(""EOF_"" + serviceScript); else ss.close();\n        }\n        {\n            URL url = new URL(engine.getAgentContextURL() + ""/"" + engine.getAgentURLPath());\n            log.debug(""url for agent = "" + url.toExternalForm());\n            PrintStream as = null;\n            if (embedScripts) {\n                ps.println();\n                ps.println(""cat > "" + agentScript + "" << "" + ii + ""EOF_"" + agentScript + ii);\n                as = ps;\n            } else {\n                File agentScriptFile = new File(instanceDir, agentScript);\n                as = new PrintStream(agentScriptFile);\n            }\n            String tab[] = { """", ""    "", ""        "", ""            "", ""                "", ""                    "" };\n            int i = 0;\n            as.println(tab[i] + ""from wrapper import ZSIWrapper"");\n            as.println(tab[i] + ""from service import Service"");\n            as.println(tab[i] + ""import threading"");\n            as.println(tab[i] + ""from sys import exit"");\n            as.println();\n            as.println(tab[i] + ""URL="" + ii + url.toString() + ii);\n            as.println(tab[i] + ""agentID="" + ii + agentID + ii);\n            as.println(tab[i] + ""instanceID="" + instanceID);\n            as.println(tab[i] + ""instanceKey="" + ii + key + ii);\n            as.println(tab[i] + ""timeout="" + ii + agent_timeout_seconds + ii);\n            as.println(tab[i] + ""stop_flag=0"");\n            as.println(tab[i] + ""kill_flag=0"");\n            as.println();\n            as.println(tab[i] + ""# Need extra port for each thread, "" + ""ZSIWrapper (actually ZSI) not thread save"");\n            as.println(tab[i] + ""port0=ZSIWrapper(URL, agentID, instanceID, instanceKey, timeout)"");\n            as.println(tab[i] + ""port0.setAgentStatus("" + Status.RUNNING.ordinal() + "")"");\n            as.println();\n            as.println(tab[i] + ""def create_namespace(service) :"");\n            as.println(tab[i] + ""    "" + ii + ""create a namespace for injection "" + ""into a task script and returns it."" + ii);\n            as.println(tab[i] + ""# first get most (not all) variables"");\n            as.print(tab[i] + ""    arglist = [ "");\n            int counter = 0;\n            for (VarAttributes va : attributesMap.values()) {\n                counter++;\n                String varname = va.getName();\n                if (Constants.VAR_STDOUT.equals(varname)) continue;\n                VarTypeEnum vartype = va.getType();\n                switch(vartype) {\n                    case DOUBLE:\n                    case STRING:\n                    case LONG:\n                    case BOOLEAN:\n                    case CHOICE:\n                        as.print(tab[i] + ""    \'"" + varname + ""\'"");\n                        if (counter != attributesMap.size()) as.println("",\\\\"");\n                        break;\n                    case FILES:\n                        break;\n                    default:\n                        throw new RuntimeException(""unkown data type in switch"");\n                }\n            }\n            as.println(""]"");\n            as.println(tab[i] + ""    vars=port0.getManyVars(arglist)"");\n            as.println(tab[i] + ""    namesp = vars "");\n            as.println(tab[i] + ""    namesp[ \'service\' ] = service "");\n            as.println(tab[i] + ""    return namesp"");\n            as.println();\n            for (String taskName : taskNames) {\n                Task task = getService().getTask(taskName);\n                boolean background = task.isBackground();\n                as.println(tab[i] + ""def task_"" + taskName + ""():"");\n                {\n                    i++;\n                    as.println(tab[i] + ""try :"");\n                    if (background) {\n                        as.println(tab[i] + ""    # as ZSIWrapper is not task save,"" + "" create a new one"");\n                        as.println(tab[i] + ""    port_task=ZSIWrapper(URL, agentID, "" + ""instanceID, instanceKey, timeout)"");\n                        as.println(tab[i] + ""    service = Service(port_task)"");\n                    } else {\n                        as.println(tab[i] + ""    # this is foreground, "" + ""use port0 from current task"");\n                        as.println(tab[i] + ""    service = Service(port0)"");\n                    }\n                    as.println(tab[i] + ""    globals = create_namespace(service)"");\n                    as.println(tab[i] + ""    locals = { }"");\n                    as.println(tab[i] + ""    execfile(\'"" + task.getFile() + ""\', globals, locals )"");\n                    as.println(tab[i] + ""except :"");\n                    as.println(tab[i] + ""    port0.setTaskStatus(\'"" + taskName + ""\', "" + Status.FAILED.ordinal() + "" )"");\n                    as.println(tab[i] + ""else :"");\n                    as.println(tab[i] + ""    if kill_flag :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.FAILED.ordinal());\n                    as.println(tab[i] + ""    elif stop_flag :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.TERMINATED.ordinal());\n                    as.println(tab[i] + ""    else :"");\n                    as.println(tab[i] + ""        task_exit_status = "" + Status.FINISHED.ordinal());\n                    as.println(tab[i] + ""    port0.setTaskStatus(\'"" + taskName + ""\', task_exit_status )"");\n                    as.println();\n                    i--;\n                }\n            }\n            as.println(tab[i] + ""try:"");\n            i++;\n            as.println(tab[i] + ""tasklist = []"");\n            as.println(tab[i] + ""action=None"");\n            as.println(tab[i] + ""while action != \'"" + Agent.STOP + ""\' and action != \'"" + Agent.KILL + ""\' and action != \'"" + Agent.FINISH + ""\' :"");\n            {\n                i++;\n                as.println(tab[i] + ""# print \'ACTION=\', action"");\n                as.println(tab[i] + ""action = port0.getAction()"");\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""# cleanup tasklist (only to save memory)"");\n                as.println(tab[i] + ""# In two cycles, don\'t change list during iter."");\n                as.println(tab[i] + ""to_be_removed = []"");\n                as.println(tab[i] + ""for tr2 in tasklist:"");\n                as.println(tab[i] + ""    if (not tr2.isAlive()):"");\n                as.println(tab[i] + ""        to_be_removed.append(tr2)"");\n                as.println(tab[i] + ""for tr3 in to_be_removed:"");\n                as.println(tab[i] + ""    # print \'old task removed: \',tr3.getName()"");\n                as.println(tab[i] + ""    tasklist.remove(tr3)"");\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""if action == None :"");\n                as.println(tab[i] + ""    # print \'processing None\'"");\n                as.println(tab[i] + ""    None"");\n                as.println(tab[i] + ""if action == \'"" + Agent.FINISH + ""\' :"");\n                as.println(tab[i] + ""    # print \'processing FINISH\'"");\n                as.println(tab[i] + ""    None"");\n                as.println(tab[i] + ""elif action == \'"" + Agent.STOP + ""\' :"");\n                as.println(tab[i] + ""    stop_flag=1"");\n                as.println(tab[i] + ""    # print \'processing STOP\'"");\n                String onStop = agent.onStop;\n                if (onStop != null) {\n                    String function = ""task_"" + onStop;\n                    as.println(tab[i] + ""    "" + function + ""()"");\n                }\n                as.println(tab[i] + """");\n                as.println(tab[i] + ""elif action == \'"" + Agent.KILL + ""\' :"");\n                as.println(tab[i] + ""    kill_flag=1"");\n                as.println(tab[i] + ""    # print \'processing KILL\'"");\n                String onKill = agent.onKill;\n                if (onKill != null) {\n                    String function = ""task_"" + onKill;\n                    as.println(tab[i] + ""    "" + function + ""()"");\n                }\n                as.println(tab[i] + ""    # This would be the place "" + ""to kill external programs"");\n                as.println(tab[i] + ""    port0.setAgentStatus("" + Status.FAILED.ordinal() + "")"");\n                as.println(tab[i] + ""    # exit without waiting for bg threads"");\n                as.println(tab[i] + ""    exit(13)"");\n                as.println(tab[i] + """");\n                for (String taskName : taskNames) {\n                    Task task = getService().getTask(taskName);\n                    boolean background = task.isBackground();\n                    as.println(tab[i] + ""elif action == \'"" + Agent.TASK + taskName + ""\':"");\n                    String function = ""task_"" + taskName;\n                    if (background) {\n                        as.println(tab[i] + ""    # create, register and start task"");\n                        as.println(tab[i] + ""    t = threading.Thread(target="" + function + "", name=\'"" + function + ""\')"");\n                        as.println(tab[i] + ""    tasklist.append(t)"");\n                        as.println(tab[i] + ""    t.start()"");\n                    } else {\n                        as.println(tab[i] + ""    "" + function + ""()"");\n                    }\n                }\n                as.println(tab[i] + ""else :"");\n                as.println(tab[i] + ""    print \'undefined case in agent script iov0j23fds, "" + ""action=\', action"");\n                i--;\n            }\n            as.println();\n            as.println(tab[i] + ""# wait for running background tasks"");\n            as.println(tab[i] + ""# print \'remaining threads (inclides demonic ones!):\'"" + "", threading.activeCount()"");\n            as.println(tab[i] + ""# for tr in threading.enumerate():"");\n            as.println(tab[i] + ""#    print \'remaining thread: \',"" + "" tr.getName()"");\n            as.println(tab[i] + ""for tr2 in tasklist:"");\n            as.println(tab[i] + ""    # print \'joining with \',tr2.getName()"");\n            as.println(tab[i] + ""    tr2.join()"");\n            i--;\n            as.println(tab[i] + ""# Set agent status"");\n            as.println(tab[i] + ""except :"");\n            as.println(tab[i] + ""    port0.setAgentStatus("" + Status.FAILED.ordinal() + "")"");\n            as.println(tab[i] + ""else :"");\n            as.println(tab[i] + ""    if kill_flag :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.FAILED.ordinal());\n            as.println(tab[i] + ""    elif stop_flag :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.TERMINATED.ordinal());\n            as.println(tab[i] + ""    else :"");\n            as.println(tab[i] + ""        agent_exit_status = "" + Status.FINISHED.ordinal());\n            as.println(tab[i] + ""    port0.setAgentStatus( agent_exit_status )"");\n            if (embedScripts) ps.println(""EOF_"" + agentScript); else as.close();\n        }\n        for (String agentFileName : agent.getFilesSet()) {\n            ps.println();\n            File agentRelFile = new File(agentFileName);\n            File directory = agentRelFile.getParentFile();\n            if (directory != null) {\n                ps.println(""mkdir -p "" + directory.getPath());\n            }\n            ps.println(""cat > "" + agentFileName + "" << "" + ii + ""EOF_"" + agentFileName + ii);\n            File file = new File(scriptDir, agentFileName);\n            byte bytes[] = FileUtils.readFileToByteArray(file);\n            ps.write(bytes);\n            ps.println();\n            ps.println(""EOF_"" + agentFileName);\n        }\n        if (embedScripts) {\n            ps.println(""SKIP=`awk \'/^__ARCHIVE_FOLLOWS__/ { print NR + 1; exit 0; }\' $0`"");\n            ps.println(""tail -n +$SKIP $0 | gzip -dc | tar x "");\n            ps.println(""python -u "" + agentScript);\n            ps.println(""exit 0"");\n            ps.println(""__ARCHIVE_FOLLOWS__"");\n            java.io.InputStream istream = this.getClass().getClassLoader().getResourceAsStream(""sc/fgrid/agent.tar.gz"");\n            IOUtils.copy(istream, ps);\n        } else {\n            String pypath = engine.getAgentPythonPath();\n            ps.println(""export PYTHONPATH="" + ii + pypath + ii);\n            ps.println(""python -u "" + agentScript);\n            ps.println(""exit 0"");\n        }\n    }\n', '    public static void main(String argv[]) {\n        String cp = System.getProperty(""java.class.path"");\n        String sep = System.getProperty(""file.separator"");\n        String dirpath = cp.substring(0, cp.lastIndexOf(sep));\n        String jarpath = dirpath + ""/WiiRemoteJ.jar"";\n        if (!new File(jarpath).exists()) {\n            try {\n                System.out.println(""getting WiiRemoteJ file from remote source..."");\n                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");\n                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());\n                String temploc = copyInputStreamToTmpFile(input, "".zip"");\n                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));\n                ZipEntry i = null;\n                while ((i = zipIn.getNextEntry()) != null) {\n                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {\n                        File outjar = new File(jarpath);\n                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));\n                        int bufferSize = 8192;\n                        byte[] buffer = new byte[bufferSize];\n                        int readSize = 0;\n                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {\n                            fs.write(buffer, 0, readSize);\n                        }\n                        fs.close();\n                    }\n                }\n                System.out.println(""unpacked into classpath."");\n            } catch (MalformedURLException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        Boogiepants.main(argv);\n    }\n']",2875,,1,0,,-4,"ps,agentName,agentID,agent,instanceDir,agent_timeout_seconds,ii,agentScript,serviceScript,taskNames,scriptDir,taskName,task,script,embedScripts,taskScriptFile,xs,ss,serviceScriptFile,url,as",,,,,Greedy,1,0.009818100929260254
481,"['11329784', '18384626', '    @PostConstruct\n    public void init() {\n        logger.info(""+++++ TRACAuditChecklistWizardMB: init() start ++++++++"");\n        try {\n            tracSectionAll = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();\n            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();\n            URL url = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);\n            tracCriteriaCheckList = new LinkedProperties();\n            tracCriteriaCheckList.load(url.openStream());\n            Set<String> tmpKeys = tracCriteriaCheckList.stringPropertyNames();\n            List<String> sortWrkList = new ArrayList<String>();\n            sortWrkList.addAll(tmpKeys);\n            sortList(sortWrkList);\n            for (String key : sortWrkList) {\n                String aspectCode = key.substring(aspectCodeOffsetValue);\n                logger.info(""aspectCode="" + aspectCode);\n                if (aspectCode.startsWith(""A"")) {\n                    if (aspectCode.equals(""A"")) {\n                        sectionAcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));\n                        }\n                    }\n                } else if (aspectCode.startsWith(""B"")) {\n                    if (aspectCode.equals(""B"")) {\n                        sectionBcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));\n                        }\n                    }\n                } else if (aspectCode.startsWith(""C"")) {\n                    if (aspectCode.equals(""C"")) {\n                        sectionCcaption = tracCriteriaCheckList.getProperty(key);\n                    } else {\n                        if (aspectCode.length() == 4) {\n                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));\n                        }\n                    }\n                } else {\n                    logger.warning(""offset value is wrong: 16th character must be A or B or C"");\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            logger.log(Level.WARNING, ""specified properties file was not found"", ex);\n        } catch (IOException ex) {\n            logger.log(Level.WARNING, ""IO error occurred"", ex);\n        } finally {\n        }\n        logger.info(""+++++ TRACAuditChecklistWizardMB: init() end   ++++++++"");\n    }\n', '            protected Object getNewObject() throws IOException {\n                URLConnection conn = HTTPMessageDeliveryImpl.this.url.openConnection();\n                conn.setDoInput(true);\n                conn.setDoOutput(true);\n                conn.setUseCaches(false);\n                conn.setRequestProperty(""Content-Type"", ""text/xml"");\n                return conn;\n            }\n']",472,"    @PostConstruct
    public void init() {
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() start ++++++++"");
        try {
            tracoRegionAs = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();
            URL connection = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);
            Tr
 = new LinkedProperties();
            Tr
.load(connection.openStream());
            Set<String> tmpKeys = Tr
.stringPropertyNames();
            List<String> sortWrkList = new ArrayList<String>();
            sortWrkList.addAll(tmpKeys);
            sortList(sortWrkList);
            for (String row : sortWrkList) {
                String aspectCode = row.substring(aspectCodeOffsetValue);
                logger.info(""aspectCode="" + aspectCode);
                if (aspectCode.startsWith(""A"")) {
                    if (aspectCode.equals(""A"")) {
                        sectionAcaption = Tr
.getProperty(row);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracoRegionAs.add(new TRACCriteriaCheckListItem(aspectCode, Tr
.getProperty(row), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""B"")) {
                    if (aspectCode.equals(""B"")) {
                        sectionBcaption = Tr
.getProperty(row);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracoRegionAs.add(new TRACCriteriaCheckListItem(aspectCode, Tr
.getProperty(row), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""C"")) {
                    if (aspectCode.equals(""C"")) {
                        sectionCcaption = Tr
.getProperty(row);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracoRegionAs.add(new TRACCriteriaCheckListItem(aspectCode, Tr
.getProperty(row), """", """", """"));
                        }
                    }
                } else {
                    logger.warning(""offset value is wrong: 16th character must be A or B or C"");
                }
            }
        } catch (FileNotFoundException ex) {
            logger.log(Level.WARNING, ""specified properties file was not found"", ex);
        } catch (IOException ex) {
            logger.log(Level.WARNING, ""IO error occurred"", ex);
        } finally {
        }
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() end   ++++++++"");
    }
",0,0,0,-1,"tracSectionAll,tracSectionA,tracSectionB,tracSectionC,url,tracCriteriaCheckList,tmpKeys,sortWrkList,key,aspectCode,sectionAcaption,sectionBcaption","tracSectionAll:0.0,tracSectionA:0.0,tracSectionB:0.0,tracSectionC:0.0,url:-9.298324584960938e-06,tracCriteriaCheckList:0.0,tmpKeys:0.0,sortWrkList:0.0,key:-3.5762786865234375e-07,aspectCode:0.0,sectionAcaption:0.0,sectionBcaption:0.0,",4,23,"tracSectionAll:tracoRegionAs,tracSectionA:tracSectionA,tracSectionB:tracSectionB,tracSectionC:tracSectionC,tracCriteriaCheckList:Tr
,tmpKeys:tmpKeys,sortWrkList:sortWrkList,aspectCode:aspectCode,sectionAcaption:sectionAcaption,sectionBcaption:sectionBcaption,key:row,url:connection,",Greedy,595,0.28487093846003214
482,"['20784778', '16190704', '    private boolean checkTypeChange(Class clazz, File wsdlFile) {\n        if (!clazz.isPrimitive()) {\n            ClassLoader cl = clazz.getClassLoader();\n            if (cl instanceof AntClassLoader) {\n                if (clazz.isArray()) return checkTypeChange(getArrayType(clazz), wsdlFile);\n                String path = clazz.getName().replace(\'.\', File.separatorChar) + "".class"";\n                File file = new File(builddir, path);\n                long lastMod = Long.MAX_VALUE;\n                if (!file.exists()) {\n                    URL url = cl.getResource(path);\n                    if (url == null) throw new BuildException(""Can\'t get URL for webservice class \'"" + clazz.getName() + ""\' from jar file.""); else {\n                        try {\n                            JarURLConnection con = (JarURLConnection) url.openConnection();\n                            lastMod = con.getJarEntry().getTime();\n                        } catch (IOException x) {\n                            throw new BuildException(""Can\'t get modification time for webservice class \'"" + clazz.getName() + ""\' from jar file."");\n                        }\n                    }\n                } else {\n                    lastMod = file.lastModified();\n                }\n                if (wsdlFile.lastModified() < lastMod) return true;\n                if (clazz.isInterface()) {\n                    Class[] itfs = clazz.getInterfaces();\n                    for (int i = 0; i < itfs.length; i++) {\n                        boolean changed = checkTypeChange(itfs[i], wsdlFile);\n                        if (changed) return true;\n                    }\n                } else {\n                    Class sup = clazz.getSuperclass();\n                    boolean changed = checkTypeChange(sup, wsdlFile);\n                    if (changed) return true;\n                }\n            }\n        }\n        return false;\n    }\n', '    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {\n        String sessionUrl = getSessionTokenUrl(protocol, domain);\n        URL url = new URL(sessionUrl);\n        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\n        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");\n        httpConn.setRequestProperty(""Authorization"", header);\n        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());\n        }\n        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));\n        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\\n"", ""="", true);\n        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);\n        return parsedTokens.get(""token"");\n    }\n']",316,"    private boolean checkTypeChange(Class Closer, File wsdcFiles) {
        if (!Closer.isPrimitive()) {
            ClassLoader ocl = Closer.getClassLoader();
            if (ocl instanceof AntClassLoader) {
                if (Closer.isArray()) return checkTypeChange(getArrayType(Closer), wsdcFiles);
                String loc = Closer.getName().replace('.', File.separatorChar) + "".class"";
                File line = new File(builddir, loc);
                long maxReg = Long.MAX_VALUE;
                if (!line.exists()) {
                    URL resource = ocl.getResource(loc);
                    if (resource == null) throw new BuildException(""Can't get URL for webservice class '"" + Closer.getName() + ""' from jar file.""); else {
                        try {
                            JarURLConnection uc = (JarURLConnection) resource.openConnection();
                            maxReg = uc.getJarEntry().getTime();
                        } catch (IOException x) {
                            throw new BuildException(""Can't get modification time for webservice class '"" + Closer.getName() + ""' from jar file."");
                        }
                    }
                } else {
                    maxReg = line.lastModified();
                }
                if (wsdcFiles.lastModified() < maxReg) return true;
                if (Closer.isInterface()) {
                    Class[] itsvs = Closer.getInterfaces();
                    for (int i = 0; i < itsvs.length; i++) {
                        boolean anged = checkTypeChange(itsvs[i], wsdcFiles);
                        if (anged) return true;
                    }
                } else {
                    Class uper = Closer.getSuperclass();
                    boolean anged = checkTypeChange(uper, wsdcFiles);
                    if (anged) return true;
                }
            }
        }
        return false;
    }
",0,0,0,-1,"clazz,wsdlFile,cl,path,file,lastMod,url,con,itfs,i,changed,sup","clazz:0.0,wsdlFile:0.0,cl:-8.344650268554688e-06,path:-1.0013580322265625e-05,file:9.5367431640625e-06,lastMod:0.0,url:-5.173683166503906e-05,con:-2.384185791015625e-07,itfs:0.0,i:-4.279613494873047e-05,changed:-1.1920928955078125e-05,sup:2.384185791015625e-06,",11,43,"file:line,sup:uper,clazz:Closer,wsdlFile:wsdcFiles,lastMod:maxReg,itfs:itsvs,con:uc,cl:ocl,path:loc,changed:anged,i:i,url:resource,",Greedy,631,0.28288071155548095
483,"['5638421', '17728719', '    private void copy(File in, File out) {\n        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());\n        try {\n            FileChannel ic = new FileInputStream(in).getChannel();\n            FileChannel oc = new FileOutputStream(out).getChannel();\n            ic.transferTo(0, ic.size(), oc);\n            ic.close();\n            oc.close();\n        } catch (IOException ioe) {\n            fail(""Failed testing while copying modified file: "" + ioe.getMessage());\n        }\n    }\n', '    private void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n']",113,"    private void copy(File in, File io) {
        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + io.getName());
        try {
            FileChannel icer = new FileInputStream(in).getChannel();
            FileChannel oc = new FileOutputStream(io).getChannel();
            icer.transferTo(0, icer.size(), oc);
            icer.close();
            oc.close();
        } catch (IOException ioe) {
            fail(""Failed testing while copying modified file: "" + ioe.getMessage());
        }
    }
",1,1,1,-1,"in,out,ic,oc","in:4.649162292480469e-05,out:0.00012630224227905273,ic:5.805492401123047e-05,oc:5.9485435485839844e-05,",2,7,"out:io,oc:oc,ic:icer,in:in,",Greedy,189,0.0815346638361613
484,"['370982', '153462', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    private static File copyFileTo(File file, File directory) throws IOException {\n        File newFile = new File(directory, file.getName());\n        FileInputStream fis = null;\n        FileOutputStream fos = null;\n        try {\n            fis = new FileInputStream(file);\n            fos = new FileOutputStream(newFile);\n            byte buff[] = new byte[1024];\n            int val;\n            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);\n        } finally {\n            if (fis != null) fis.close();\n            if (fos != null) fos.close();\n        }\n        return newFile;\n    }\n']",271,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",1,1,0,1,"inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","inFile:0.0,outFile:0.0,iis:0.0,dcmParser:0.0,ds:0.0005918145179748535,pdReader:0.0,out:0.0013105273246765137,dcmEncParam:0.0,pdWriter:0.0,",1,9,"out:url,",Greedy,137,0.05360870361328125
485,"['12289756', '14120602', '    public String loadURL(URL url) {\n        String retVal = """";\n        try {\n            InputStream inputStream = url.openStream();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            String line = bufferedReader.readLine();\n            retVal += line + ""\\n"";\n            while (line != null) {\n                System.out.println(line);\n                line = bufferedReader.readLine();\n                if (line != null) retVal += line + ""\\n"";\n            }\n            bufferedReader.close();\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (IOException e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        } catch (Exception e) {\n            e.printStackTrace();\n            retVal = e.getMessage();\n        }\n        return retVal;\n    }\n', '    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {\n        wabclient.Attributes prop = new wabclient.Attributes(attributes);\n        try {\n            if (tag.equals(""app"")) {\n                if (prop == null) {\n                    System.err.println(""app without properties"");\n                    return;\n                }\n                String appname = prop.getValue(""name"", """");\n                String lookandfeel = prop.getValue(""lookandfeel"", """");\n                global.setAppName(appname);\n                if (lookandfeel.length() > 0) {\n                    if (lookandfeel.equalsIgnoreCase(""Windows"")) lookandfeel = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Motif"")) lookandfeel = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Mac"")) lookandfeel = ""com.sun.java.swing.plaf.mac.MacLookAndFeel"";\n                    UIManager.setLookAndFeel(lookandfeel);\n                }\n            } else if (tag.equals(""script"")) {\n                WABClient c = (WABClient) global;\n                c.beginScript();\n                String url = prop.getValue(""src"");\n                if (url.length() > 0) {\n                    try {\n                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n                        String buffer;\n                        while (true) {\n                            buffer = r.readLine();\n                            if (buffer == null) break;\n                            c.script += buffer + ""\\n"";\n                        }\n                        r.close();\n                        c.endScript();\n                    } catch (IOException ioe) {\n                        System.err.println(""[IOError] "" + ioe.getMessage());\n                        System.exit(0);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n        }\n    }\n']",168,"    public String loadURL(URL request) {
        String rtval = """";
        try {
            InputStream accessstream = request.openStream();
            BufferedReader mutmentedStream = new BufferedReader(new InputStreamReader(accessstream));
            String email = mutmentedStream.readLine();
            rtval += email + ""
"";
            while (email != null) {
                System.out.println(email);
                email = mutmentedStream.readLine();
                if (email != null) rtval += email + ""
"";
            }
            mutmentedStream.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            rtval = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            rtval = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            rtval = e.getMessage();
        }
        return rtval;
    }
",1,1,0,1,"url,inputStream,bufferedReader,line,retVal","url:-2.9802322387695312e-06,inputStream:0.0,bufferedReader:0.0,line:-3.2186508178710938e-06,retVal:0.0,",5,22,"inputStream:accessstream,bufferedReader:mutmentedStream,retVal:rtval,url:request,line:email,",Greedy,286,0.11512496471405029
486,"['18338913', '6296285', '    public static String encodeMD5(String param) throws Exception {\n        MessageDigest digest = MessageDigest.getInstance(""MD5"");\n        digest.update(param.getBytes());\n        byte[] hash = digest.digest();\n        char buf[] = new char[hash.length * 2];\n        for (int i = 0, x = 0; i < hash.length; i++) {\n            buf[x++] = HEX_CHARS[(hash[i] >>> 4) & 0xf];\n            buf[x++] = HEX_CHARS[hash[i] & 0xf];\n        }\n        return String.valueOf(buf);\n    }\n', '    public static final String digest(String credentials, String algorithm, String encoding) {\n        try {\n            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();\n            if (encoding == null) {\n                md.update(credentials.getBytes());\n            } else {\n                md.update(credentials.getBytes(encoding));\n            }\n            return (convert(md.digest()));\n        } catch (Exception ex) {\n            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());\n            return credentials;\n        }\n    }\n']",127,"    public static String encodeMD5(String crypt) throws Exception {
        MessageDigest hedge = MessageDigest.getInstance(""MD5"");
        hedge.update(crypt.getBytes());
        byte[] url = hedge.hedge();
        char wb[] = new char[url.length * 2];
        for (int qi = 0, xes = 0; qi < url.length; qi++) {
            wb[xes++] = HEX_CHARS[(url[qi] >>> 4) & 0xf];
            wb[xes++] = HEX_CHARS[url[qi] & 0xf];
        }
        return String.valueOf(wb);
    }
",1,1,1,-1,"param,digest,hash,buf,i,x","param:-1.1920928955078125e-07,digest:0.0,hash:-7.3909759521484375e-06,buf:-1.6689300537109375e-06,i:1.7881393432617188e-06,x:4.76837158203125e-07,",6,23,"i:qi,x:xes,digest:hedge,param:crypt,buf:wb,hash:url,",Greedy,319,0.13212940295537312
487,"['11129960', '19846242', '    public static String getGoGl(final String urlPath, String key) {\n        log.debug(""getGoGl url "" + urlPath);\n        log.debug(""getGoGl key "" + key);\n        String shortUrl = null;\n        URL simpleURL = null;\n        HttpsURLConnection url = null;\n        BufferedInputStream bStream = null;\n        StringBuffer resultString = new StringBuffer("""");\n        String inputString = ""{\\""longUrl\\"":\\"""" + urlPath + ""\\""}"";\n        log.debug(""getGoGl inputString "" + inputString);\n        try {\n            simpleURL = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + key);\n            url = (HttpsURLConnection) simpleURL.openConnection();\n            url.setDoOutput(true);\n            url.setRequestProperty(""content-type"", ""application/json"");\n            PrintWriter pw = new PrintWriter(url.getOutputStream());\n            pw.print(inputString);\n            pw.close();\n        } catch (Exception ex) {\n            log.error(ex);\n            shortUrl = urlPath;\n        }\n        try {\n            bStream = new BufferedInputStream(url.getInputStream());\n            int i;\n            while ((i = bStream.read()) >= 0) {\n                resultString.append((char) i);\n            }\n        } catch (Exception ex) {\n            SocialUtils.log.error(ex);\n            shortUrl = urlPath;\n        }\n        return shortUrl;\n    }\n', '    public I18N(JApplet applet) {\n        if (prop != null) return;\n        String lang = ""en"";\n        try {\n            Properties userProperties = new Properties();\n            if (applet != null) {\n                URL url = new URL(applet.getCodeBase() + ""logicsim.cfg"");\n                userProperties.load(url.openStream());\n            } else {\n                userProperties.load(new FileInputStream(""logicsim.cfg""));\n            }\n            if (userProperties.containsKey(""language"")) lang = userProperties.getProperty(""language"");\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        prop = new Properties();\n        try {\n            if (applet != null) {\n                URL url = new URL(applet.getCodeBase() + ""languages/"" + lang + "".txt"");\n                prop.load(url.openStream());\n            } else {\n                prop.load(new FileInputStream(""languages/"" + lang + "".txt""));\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            try {\n                if (applet != null) {\n                    URL url = new URL(applet.getCodeBase() + ""languages/en.txt"");\n                    prop.load(url.openStream());\n                } else {\n                    prop.load(new FileInputStream(""languages/en.txt""));\n                }\n            } catch (Exception ex2) {\n                JOptionPane.showMessageDialog(null, ""Language file languages/en.txt not found.\\nPlease run the program from its directory."");\n                System.exit(5);\n            }\n        }\n    }\n']",253,"    public static String getGoGl(final String  urlString, String page) {
        log.debug(""getGoGl url "" +  urlString);
        log.debug(""getGoGl key "" + page);
        String longUr = null;
        URL easyHTTP = null;
        HttpsURLConnection www = null;
        BufferedInputStream brStack = null;
        StringBuffer returnString = new StringBuffer("""");
        String outputArray = ""{\""longUrl\"":\"""" +  urlString + ""\""}"";
        log.debug(""getGoGl inputString "" + outputArray);
        try {
            easyHTTP = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + page);
            www = (HttpsURLConnection) easyHTTP.openConnection();
            www.setDoOutput(true);
            www.setRequestProperty(""content-type"", ""application/json"");
            PrintWriter psW = new PrintWriter(www.getOutputStream());
            psW.print(outputArray);
            psW.close();
        } catch (Exception ex) {
            log.error(ex);
            longUr =  urlString;
        }
        try {
            brStack = new BufferedInputStream(www.getInputStream());
            int line;
            while ((line = brStack.read()) >= 0) {
                returnString.append((char) line);
            }
        } catch (Exception ex) {
            SocialUtils.log.error(ex);
            longUr =  urlString;
        }
        return longUr;
    }
",0,0,0,-1,"urlPath,key,shortUrl,simpleURL,url,bStream,resultString,inputString,pw,i","urlPath:0.0,key:2.384185791015625e-07,shortUrl:0.0,simpleURL:0.0,url:7.152557373046875e-06,bStream:0.0,resultString:0.0,inputString:0.0,pw:0.0,i:3.5762786865234375e-07,",10,38,"url:www,i:line,key:page,urlPath: urlString,shortUrl:longUr,simpleURL:easyHTTP,bStream:brStack,resultString:returnString,inputString:outputArray,pw:psW,",Greedy,507,0.2091426968574524
488,"['17847880', '12764800', '    public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) {\n        FileOutputStream fos = null;\n        InputStream in = null;\n        byte[] buffer = new byte[1024];\n        int readLength = 0;\n        boolean result = false;\n        try {\n            try {\n                File f = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath);\n                if (f.exists()) {\n                    context.deleteFile(tempSavePath);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE);\n            logger.error(""tempfile:"" + tempSavePath);\n            if (dirType == DirType.assets) {\n                AssetManager assetManager = context.getAssets();\n                in = assetManager.open(filePath);\n            } else if (dirType == DirType.file && Constant.getUpdateDataPath() != null) {\n                in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath);\n            } else if (dirType == DirType.sd && Constant.getSdPath() != null) {\n                in = new FileInputStream(Constant.getSdPath() + File.separator + filePath);\n            } else if (dirType == DirType.extSd && Constant.getExtSdPath() != null) {\n                in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath);\n            }\n            if (in == null) {\n                return false;\n            }\n            readLength = in.read(buffer);\n            if (readLength >= ZipToFile.encrypLength && secrete) {\n                byte[] encrypByte = new byte[ZipToFile.encrypLength];\n                System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength);\n                byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey);\n                System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength);\n            }\n            while (readLength > 0) {\n                fos.write(buffer, 0, readLength);\n                fos.flush();\n                readLength = in.read(buffer);\n            }\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.flush();\n                    fos.close();\n                } catch (Exception e) {\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return result;\n    }\n', '    public static void extractZipFile(String filename) {\n        try {\n            byte[] buf = new byte[1024];\n            ZipInputStream zipinputstream = null;\n            ZipEntry zipentry;\n            zipinputstream = new ZipInputStream(new FileInputStream(filename));\n            zipentry = zipinputstream.getNextEntry();\n            while (zipentry != null) {\n                String entryName = zipentry.getName();\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(entryName);\n                String directory = newFile.getParent();\n                if (directory == null) {\n                    if (newFile.isDirectory()) break;\n                }\n                fileoutputstream = new FileOutputStream(entryName);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n                zipentry = zipinputstream.getNextEntry();\n            }\n            zipinputstream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",485,"    public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) {
        FileOutputStream fos = null;
        InputStream url = null;
        byte[] buffer = new byte[1024];
        int readLength = 0;
        boolean result = false;
        try {
            try {
                File io = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath);
                if (io.exists()) {
                    context.deleteFile(tempSavePath);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE);
            logger.error(""tempfile:"" + tempSavePath);
            if (dirType == DirType.assets) {
                AssetManager assetManager = context.getAssets();
                url = assetManager.open(filePath);
            } else if (dirType == DirType.file && Constant.getUpdateDataPath() != null) {
                url = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath);
            } else if (dirType == DirType.sd && Constant.getSdPath() != null) {
                url = new FileInputStream(Constant.getSdPath() + File.separator + filePath);
            } else if (dirType == DirType.extSd && Constant.getExtSdPath() != null) {
                url = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath);
            }
            if (url == null) {
                return false;
            }
            readLength = url.read(buffer);
            if (readLength >= ZipToFile.encrypLength && secrete) {
                byte[] encrypByte = new byte[ZipToFile.encrypLength];
                System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength);
                byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey);
                System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength);
            }
            while (readLength > 0) {
                fos.write(buffer, 0, readLength);
                fos.flush();
                readLength = url.read(buffer);
            }
            result = true;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.flush();
                    fos.close();
                } catch (Exception e) {
                }
            }
            if (url != null) {
                try {
                    url.close();
                } catch (Exception e) {
                }
            }
        }
        return result;
    }
",1,1,0,1,"context,filePath,dirType,tempSavePath,secrete,fos,in,buffer,readLength,f,assetManager,encrypByte,temp,result","context:0.00011366605758666992,filePath:0.0,dirType:0.0,tempSavePath:0.0,secrete:0.0,fos:0.0,in:0.0001157522201538086,buffer:-7.152557373046875e-06,readLength:0.0,f:0.0002168416976928711,assetManager:0.0,encrypByte:0.0,temp:1.9788742065429688e-05,result:9.98377799987793e-05,",2,12,"f:io,in:url,",Greedy,169,0.07718198696772258
489,"['10460548', '22674018', '    public void parse() {\n        InputSource urlInputStream = null;\n        SAXParserFactory spf = null;\n        SAXParser sp = null;\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(this.urlString);\n            _setProxy();\n            conn = (HttpURLConnection) url.openConnection();\n            urlInputStream = new InputSource(StreamUtils.inputStreamToReader(conn.getInputStream()));\n            spf = SAXParserFactory.newInstance();\n            if (spf != null) {\n                sp = spf.newSAXParser();\n                sp.parse(urlInputStream, this);\n            }\n        } catch (Exception e) {\n            if (conn != null) {\n                if (conn.getHeaderField(""X-RateLimit-Limit"") != null) {\n                    String rateLimit = conn.getHeaderField(""X-RateLimit-Limit"");\n                    String rateRemaining = conn.getHeaderField(""X-RateLimit-Remaining"");\n                    long rateReset = Long.valueOf(conn.getHeaderField(""X-RateLimit-Reset"")) * 1000;\n                    LOG.warn(""Possible rate limits?  LIMIT:"" + rateLimit + ""  REMAINING:"" + rateRemaining + ""  RESET:"" + new Date(rateReset));\n                }\n            }\n            e.printStackTrace();\n            LOG.warn(""error parsing rss feed"", e);\n        } finally {\n        }\n    }\n', '    public void createTempFile(String resourceName) throws IOException {\n        InputStream input = Log4jImportCallableTest.class.getResourceAsStream(resourceName);\n        if (input == null) {\n            fail(""Couldn\'t resolve resource \'"" + resourceName + ""\'!"");\n        }\n        inputFile = File.createTempFile(""Import"", ""test"");\n        inputFile.delete();\n        FileOutputStream output = new FileOutputStream(inputFile);\n        IOUtils.copyLarge(input, output);\n        IOUtilities.closeQuietly(output);\n    }\n']",226,"    public void parse() {
        InputSource urlInputSource = null;
        SAXParserFactory srfi = null;
        SAXParser spec = null;
        HttpURLConnection fail = null;
        try {
            URL url = new URL(this.urlString);
            _setProxy();
            fail = (HttpURLConnection) url.openConnection();
            urlInputSource = new InputSource(StreamUtils.inputStreamToReader(fail.getInputStream()));
            srfi = SAXParserFactory.newInstance();
            if (srfi != null) {
                spec = srfi.newSAXParser();
                spec.parse(urlInputSource, this);
            }
        } catch (Exception e) {
            if (fail != null) {
                if (fail.getHeaderField(""X-RateLimit-Limit"") != null) {
                    String rateLimit = fail.getHeaderField(""X-RateLimit-Limit"");
                    String rateremaining = fail.getHeaderField(""X-RateLimit-Remaining"");
                    long rateRepume = Long.valueOf(fail.getHeaderField(""X-RateLimit-Reset"")) * 1000;
                    LOG.warn(""Possible rate limits?  LIMIT:"" + rateLimit + ""  REMAINING:"" + rateremaining + ""  RESET:"" + new Date(rateRepume));
                }
            }
            e.printStackTrace();
            LOG.warn(""error parsing rss feed"", e);
        } finally {
        }
    }
",0,0,0,-1,"urlInputStream,spf,sp,conn,url,rateLimit,rateRemaining,rateReset","urlInputStream:0.0,spf:0.0,sp:-4.887580871582031e-06,conn:1.537799835205078e-05,url:0.00013196468353271484,rateLimit:0.0,rateRemaining:0.0,rateReset:0.0,",6,22,"url:url,conn:fail,urlInputStream:urlInputSource,spf:srfi,rateLimit:rateLimit,rateRemaining:rateremaining,rateReset:rateRepume,sp:spec,",Greedy,369,0.16732258796691896
490,"['19631892', '16301512', '    public static void copyFiles(File src, File dest) throws IOException {\n        if (src.isDirectory()) {\n            dest.mkdirs();\n            for (String f : src.list()) {\n                String df = dest.getPath() + File.separator + f;\n                String sf = src.getPath() + File.separator + f;\n                copyFiles(new File(sf), new File(df));\n            }\n        } else {\n            FileInputStream fin = new FileInputStream(src);\n            FileOutputStream fout = new FileOutputStream(dest);\n            int c;\n            while ((c = fin.read()) >= 0) fout.write(c);\n            fin.close();\n            fout.close();\n        }\n    }\n', '    public static void copy(File src, File dst) throws IOException {\n        FileChannel inChannel;\n        FileChannel outChannel;\n        inChannel = new FileInputStream(src).getChannel();\n        outChannel = new FileOutputStream(dst).getChannel();\n        outChannel.transferFrom(inChannel, 0, inChannel.size());\n        inChannel.close();\n        outChannel.close();\n    }\n']",146,"    public static void copyFiles(File url, File project) throws IOException {
        if (url.isDirectory()) {
            project.mkdirs();
            for (String F : url.list()) {
                String dc = project.getPath() + File.separator + F;
                String feed = url.getPath() + File.separator + F;
                copyFiles(new File(feed), new File(dc));
            }
        } else {
            FileInputStream su = new FileInputStream(url);
            FileOutputStream ffoff = new FileOutputStream(project);
            int c;
            while ((c = su.read()) >= 0) ffoff.write(c);
            su.close();
            ffoff.close();
        }
    }
",1,1,0,1,"src,dest,f,df,sf,fin,fout,c","src:-0.001150965690612793,dest:-0.0003077983856201172,f:-0.0003974437713623047,df:-0.000295102596282959,sf:-0.0002471804618835449,fin:0.00029855966567993164,fout:0.0,c:2.5033950805664062e-06,",7,22,"fin:su,c:c,fout:ffoff,sf:feed,df:dc,dest:project,f:F,src:url,",Greedy,387,0.1516583800315857
491,"['17815062', '3286240', '    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(""UTF-8""), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n', '    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n']",75,"    public static String MD5(String url) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest pkg;
        pkg = MessageDigest.getInstance(""MD5"");
        byte[] mddownsh = new byte[32];
        pkg.update(url.getBytes(""UTF-8""), 0, url.length());
        mddownsh = pkg.digest();
        return convertToHex(mddownsh);
    }
",1,1,1,-1,"text,md,md5hash","text:0.06489354372024536,md:1.109904944896698,md5hash:0.0,",3,10,"md:pkg,text:url,md5hash:mddownsh,",Greedy,165,0.06616801420847575
492,"['789253', '10195648', '    static void copy(String src, String dest) throws IOException {\n        File ifp = new File(src);\n        File ofp = new File(dest);\n        if (ifp.exists() == false) {\n            throw new IOException(""file \'"" + src + ""\' does not exist"");\n        }\n        FileInputStream fis = new FileInputStream(ifp);\n        FileOutputStream fos = new FileOutputStream(ofp);\n        byte[] b = new byte[1024];\n        int readBytes;\n        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);\n        fis.close();\n        fos.close();\n    }\n', '    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");\n            System.exit(1);\n        }\n        try {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream in = new FileInputStream(args[1]);\n            int len = 0;\n            byte buf[] = new byte[1024];\n            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);\n            in.close();\n            os.close();\n            byte[] data = null;\n            if (args[0].equals(""dec"")) data = decode(os.toString()); else {\n                String strData = encode(os.toByteArray());\n                data = strData.getBytes();\n            }\n            FileOutputStream fos = new FileOutputStream(args[2]);\n            fos.write(data);\n            fos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",129,"    static void copy(String url, String dest) throws IOException {
        File ifp = new File(url);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + url + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
",1,1,0,1,"src,dest,ifp,ofp,fis,fos,b,readBytes","src:0.00048536062240600586,dest:-0.003888547420501709,ifp:0.0,ofp:0.0,fis:0.0,fos:0.0,b:0.012060403823852539,readBytes:0.0,",1,3,"b:b,src:url,",Greedy,117,0.05644486347834269
493,"['16030263', '17511631', '    public static String md5(String text) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(text.getBytes());\n            return ForumUtil.bufferToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n', '    private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException {\n        File desf = new File(desDir);\n        if (!desf.exists()) {\n            desf.mkdirs();\n        }\n        int start = 1;\n        if (null != startDirLevel && startDirLevel.length > 0) {\n            start = startDirLevel[0];\n            if (start < 1) {\n                start = 1;\n            }\n        }\n        String startDir = """";\n        String zeName = zipEntry.getName();\n        String folder = zeName;\n        boolean isDir = zipEntry.isDirectory();\n        if (null != folder) {\n            String[] folders = folder.split(""\\\\/"");\n            if (null != folders && folders.length > 0) {\n                int len = folders.length;\n                if (start == 1) {\n                    startDir = zeName;\n                } else {\n                    if (start > len) {\n                    } else {\n                        for (int i = start - 1; i < len; i++) {\n                            startDir += ""/"" + folders[i];\n                        }\n                        if (null != startDir) {\n                            startDir = startDir.substring(1);\n                        }\n                    }\n                }\n            }\n        }\n        startDir = StringUtils.trim(startDir);\n        if (StringUtils.isNotEmpty(startDir)) {\n            StringBuilder desFileName = new StringBuilder(desDir);\n            if (!desDir.endsWith(""/"") && !startDir.startsWith(""/"")) {\n                desFileName.append(""/"");\n            }\n            desFileName.append(startDir);\n            File destFile = new File(desFileName.toString());\n            if (isDir) {\n                if (!destFile.exists()) {\n                    destFile.mkdirs();\n                }\n            } else {\n                File parentDir = new File(destFile.getParentFile().getPath());\n                if (!parentDir.exists()) {\n                    parentDir.mkdirs();\n                }\n                InputStream is = zf.getInputStream(zipEntry);\n                OutputStream os = new FileOutputStream(destFile);\n                IOUtils.copy(is, os);\n                if (null != is) {\n                    is.close();\n                }\n                if (null != os) {\n                    os.close();\n                }\n            }\n        }\n    }\n']",64,"    public static String md5(String string) {
        try {
            MessageDigest dm = MessageDigest.getInstance(""MD5"");
            dm.update(string.getBytes());
            return ForumUtil.bufferToHex(dm.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",0,0,0,-1,"text,md","text:-7.271766662597656e-06,md:-4.100799560546875e-05,",2,5,"text:string,md:dm,",Greedy,96,0.047623387972513836
494,"['44949', '2897046', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    public boolean execute_check() {\n        FTPClient ftp = new FTPClient();\n        File filename = null;\n        FileChannel channel;\n        InputStream is;\n        OutputStream os;\n        int reply;\n        if (super.verbose > 0) verbose = true;\n        ftp.setDefaultPort(port);\n        ftp.setDefaultTimeout(timeout);\n        if (verbose) {\n            System.out.println(""Using FTP Server: "" + hostname);\n            System.out.println(""Using FTP Port: "" + port);\n            System.out.println(""Using Timeout of: "" + timeout);\n        }\n        if (passive) {\n            ftp.enterLocalPassiveMode();\n            if (verbose) System.out.println(""Using Passive Mode"");\n        }\n        try {\n            filename = new File(file);\n            channel = new RandomAccessFile(filename, ""rw"").getChannel();\n            if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);\n            ftp.connect(hostname);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");\n                check_state = common_h.STATE_CRITICAL;\n                check_message = ftp.getReplyString();\n                filename.delete();\n                ftp.disconnect();\n                return true;\n            }\n            if (username != null && password != null) {\n                if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);\n                if (!ftp.login(username, password)) {\n                    if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);\n                    check_state = common_h.STATE_CRITICAL;\n                    check_message = ftp.getReplyString();\n                    ftp.disconnect();\n                    filename.delete();\n                    return true;\n                }\n            }\n            if (verbose) System.out.println(""Attempting to change to required directory"");\n            if (!ftp.changeWorkingDirectory(directory)) {\n                if (verbose) System.out.println(""Required directory cannot be found!"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Attempting to retrieve specified file!"");\n            is = ftp.retrieveFileStream(file);\n            if (is == null) {\n                if (verbose) System.out.println(""Unable to locate required file."");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            os = Channels.newOutputStream(channel);\n            byte[] buf = new byte[4096];\n            if (verbose) System.out.println(""Beginning File transfer..."");\n            for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);\n            if (verbose) {\n                System.out.println(""...transfer complete."");\n                System.out.println(""Attempting to finalise Command"");\n            }\n            if (!ftp.completePendingCommand()) {\n                if (verbose) System.out.println(""Unable to finalise command"");\n                check_state = common_h.STATE_WARNING;\n                check_message = ftp.getReplyString();\n                ftp.disconnect();\n                filename.delete();\n                return true;\n            }\n            if (verbose) System.out.println(""Check Completed."");\n            check_state = common_h.STATE_OK;\n            check_message = ftp.getReplyString();\n            is.close();\n            os.close();\n            channel.close();\n            filename.delete();\n        } catch (IOException e) {\n            check_state = common_h.STATE_CRITICAL;\n            check_message = e.getMessage();\n            if (filename != null) filename.delete();\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.logout();\n                    ftp.disconnect();\n                } catch (Exception e) {\n                }\n            }\n        }\n        return true;\n    }\n']",271,"    private static void readAndRewrite(File outFilename, File OutFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(outFilename)));
        DcmParser dcrReader = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset tx = DcmObjectFactory.getInstance().newDataset();
        dcrReader.setDcmHandler(tx.getDcmHandler());
        dcrReader.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(tx, iis, dcrReader.getDcmDecodeParam().byteOrder, dcrReader.getReadVR());
        System.file.println(""reading "" + outFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream file = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(OutFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        tx.writeDataset(file, dcmEncParam);
        tx.writeHeader(file, dcmEncParam, Tags.PixelData, dcrReader.getReadVR(), dcrReader.getReadLength());
        System.file.println(""writing "" + OutFile + ""..."");
        PixelDataWriter pdContent = pdFact.newWriter(pdReader.getPixelDataArray(), false, tx, file, dcrReader.getDcmDecodeParam().byteOrder, dcrReader.getReadVR());
        pdContent.writePixelData();
        file.flush();
        file.close();
        System.file.println(""done!"");
    }
",0,0,0,-1,"inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","inFile:0.0,outFile:0.0,iis:0.0,dcmParser:0.0,ds:0.00041484832763671875,pdReader:0.0,out:0.0008851885795593262,dcmEncParam:0.0,pdWriter:0.0,",6,32,"out:file,ds:tx,inFile:outFilename,outFile:OutFile,iis:iis,dcmParser:dcrReader,pdReader:pdReader,dcmEncParam:dcmEncParam,pdWriter:pdContent,",Greedy,504,0.23541488647460937
495,"['7044128', '1737313', '    public static String setErrorServer(String newServer) {\n        String old = errorServerURL;\n        try {\n            URL url = new URL(newServer);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setInstanceFollowRedirects(false);\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder page = new StringBuilder();\n            String line = null;\n            while ((line = rd.readLine()) != null) {\n                page.append(line);\n            }\n            rd.close();\n            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);\n        } catch (UnknownHostException ex) {\n            System.out.println(""Accepting setting for error sever, unable to check"");\n        } catch (MalformedURLException ex) {\n            throw new ConfigurationException(""URL given for error server (\'"" + newServer + ""\') appears invalid"", ConfigType.ErrorServer, ex);\n        } catch (IOException ex) {\n            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);\n        }\n        errorServerURL = newServer;\n        return old;\n    }\n', '    public void sendPOIGpxNonePOIs() {\n        this.myloc = new Position(45.56, 5.9);\n        this.left = myloc.getY() - 0.025;\n        this.right = myloc.getY() + 0.025;\n        this.top = myloc.getX() + 0.03;\n        this.bottom = myloc.getX() - 0.03;\n        assertEquals(""left test"", left, (5.9 - 0.025));\n        assertEquals(""right test"", right, (5.9 + 0.025));\n        assertEquals(""top test"", top, (45.56 - 0.025));\n        assertEquals(""bottom test"", left, (45.56 + 0.025));\n        this.poisCheck.add(""None"");\n        try {\n            if (this.poisCheck.get(0).compareTo(""None"") == 0) {\n                model.setPointsOfInterest(new Items());\n            } else {\n                this.url = new URL(""http://www.informationfreeway.org/api/0.6/node["" + poisCheck.get(0) + ""=*][bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");\n                assertEquals(""url informationfreeway.org test"", url, ""http://www.informationfreeway.org/api/0.6/node[amenity=*]"" + ""[bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");\n                SAXParser pars = null;\n                ParsePoiGpx gpxHandler = new ParsePoiGpx(poisCheck, this.model.getContext());\n                pars = SAXParserFactory.newInstance().newSAXParser();\n                pars.getXMLReader().setFeature(""http://xml.org/sax/features/namespaces"", true);\n                pars.parse(url.openStream(), gpxHandler);\n                this.pois = gpxHandler.getPOIResultsItems();\n                assertFalse(""there is some pois"", !this.pois.equals(0));\n                assertTrue(""there is some pois"", this.pois.equals(0));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            assertFalse(!e.getCause().equals(null));\n        }\n    }\n']",209,"    public static String setErrorServer(String oldURL) {
        String OLD = errorSiteURI;
        try {
            URL ur = new URL(oldURL);
            HttpURLConnection open = (HttpURLConnection) ur.openConnection();
            open.setInstanceFollowRedirects(false);
            BufferedReader reader = new BufferedReader(new InputStreamReader(open.getInputStream()));
            StringBuilder pp = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                pp.append(line);
            }
            reader.close();
            if (!pp.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + oldURL + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorSiteURI = oldURL;
        return OLD;
    }
",0,0,0,-1,"newServer,old,url,conn,rd,page,line,errorServerURL","newServer:0.0,old:-7.748603820800781e-06,url:4.678964614868164e-05,conn:-3.445148468017578e-05,rd:-1.2755393981933594e-05,page:-1.1265277862548828e-05,line:-5.882978439331055e-05,errorServerURL:0.0,",7,19,"url:ur,newServer:oldURL,errorServerURL:errorSiteURI,old:OLD,page:pp,rd:reader,conn:open,line:line,",Greedy,367,0.17514801025390625
496,"['19752873', '168607', '    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {\n        setHeader(resp);\n        try {\n            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());\n            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");\n            OutputStream fos = new FileOutputStream(tempFile);\n            syncServer.getServerModifications(command.getSession(), fos);\n            InputStream fis = new FileInputStream(tempFile);\n            resp.setContentLength(fis.available());\n            while (fis.available() > 0) {\n                resp.getOutputStream().write(fis.read());\n            }\n            resp.getOutputStream().flush();\n            resp.flushBuffer();\n        } catch (IOException ioe) {\n            logger.error(ioe.getMessage());\n        } catch (ImogSerializationException ex) {\n            logger.error(ex.getMessage());\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",181,"    public void reqservmodif(HttpServletRequest data, HttpServletResponse api, SessionCommand project) {
        setHeader(api);
        try {
            logger.debug(""SeMo: Requesting server modification for session "" + project.getSession());
            File myFile = new File(getSyncWorkDirectory(data), project.getSession() + "".smodif"");
            OutputStream flis = new FileOutputStream(myFile);
            syncServer.getServerModifications(project.getSession(), flis);
            InputStream vais = new FileInputStream(myFile);
            api.setContentLength(vais.available());
            while (vais.available() > 0) {
                api.getOutputStream().write(vais.read());
            }
            api.getOutputStream().flush();
            api.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
",1,1,1,-1,"req,resp,command,tempFile,fos,fis","req:0.0016611814498901367,resp:-0.0002340078353881836,command:-0.0005519390106201172,tempFile:0.0,fos:0.0,fis:0.0,",6,21,"req:data,tempFile:myFile,fos:flis,fis:vais,resp:api,command:project,",Greedy,271,0.12648371855417886
497,"['5233678', '12728035', '    public static boolean postData(URL url, String parameters) {\n        HttpURLConnection hpcon = null;\n        try {\n            hpcon = (HttpURLConnection) url.openConnection();\n            hpcon.setRequestMethod(""POST"");\n            hpcon.setRequestProperty(""Content-Length"", """" + Integer.toString(parameters.getBytes().length));\n            hpcon.setUseCaches(false);\n            hpcon.setDoInput(true);\n            hpcon.setDoOutput(true);\n            DataOutputStream printout = new DataOutputStream(hpcon.getOutputStream());\n            printout.writeBytes(parameters);\n            printout.flush();\n            printout.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(hpcon.getInputStream()));\n            String input;\n            boolean success = false;\n            while ((input = in.readLine()) != null) {\n                if (input.contains(""OK"")) success = true;\n            }\n            return success;\n        } catch (Exception e) {\n            try {\n                if (hpcon != null) hpcon.disconnect();\n            } catch (Exception e2) {\n            }\n            return false;\n        }\n    }\n', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n']",210,"    public static boolean postData(URL lr, String patheter) {
        HttpURLConnection hpcons = null;
        try {
            hpcons = (HttpURLConnection) lr.openConnection();
            hpcons.setRequestMethod(""POST"");
            hpcons.setRequestProperty(""Content-Length"", """" + Integer.toString(patheter.getBytes().length));
            hpcons.setUseCaches(false);
            hpcons.setDoInput(true);
            hpcons.setDoOutput(true);
            DataOutputStream readline = new DataOutputStream(hpcons.getOutputStream());
            readline.writeBytes(patheter);
            readline.flush();
            readline.close();
            BufferedReader line = new BufferedReader(new InputStreamReader(hpcons.getInputStream()));
            String format;
            boolean Success = false;
            while ((format = line.readLine()) != null) {
                if (format.contains(""OK"")) Success = true;
            }
            return Success;
        } catch (Exception e) {
            try {
                if (hpcons != null) hpcons.disconnect();
            } catch (Exception e2) {
            }
            return false;
        }
    }
",0,0,0,-1,"url,parameters,hpcon,printout,in,input,success","url:2.384185791015625e-07,parameters:0.0,hpcon:0.0,printout:0.0,in:-3.5762786865234375e-07,input:0.0,success:0.0,",7,28,"url:lr,parameters:patheter,hpcon:hpcons,printout:readline,input:format,success:Success,in:line,",Greedy,379,0.1749284227689107
498,"['14974844', '8006559', '    public boolean backupFile(File oldFile, File newFile) {\n        boolean isBkupFileOK = false;\n        FileChannel sourceChannel = null;\n        FileChannel targetChannel = null;\n        try {\n            sourceChannel = new FileInputStream(oldFile).getChannel();\n            targetChannel = new FileOutputStream(newFile).getChannel();\n            targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);\n        } finally {\n            if ((newFile != null) && (newFile.exists()) && (newFile.length() > 0)) {\n                isBkupFileOK = true;\n            }\n            try {\n                if (sourceChannel != null) {\n                    sourceChannel.close();\n                }\n                if (targetChannel != null) {\n                    targetChannel.close();\n                }\n            } catch (IOException e) {\n                logger.log(Level.INFO, ""closing channels failed"");\n            }\n        }\n        return isBkupFileOK;\n    }\n', '    private final void findSubclasses(URL location, String packageName, Class superClass, Set setOfClasses) {\n        synchronized (results) {\n            String fqcn = searchClass.getName();\n            List knownLocations = new ArrayList();\n            knownLocations.add(location);\n            for (int loc = 0; loc < knownLocations.size(); loc++) {\n                URL url = (URL) knownLocations.get(loc);\n                File directory = new File(url.getFile());\n                if (directory.exists()) {\n                    File[] files = directory.listFiles(CLASSES_ONLY);\n                    for (int i = 0; i < files.length; i++) {\n                        String filename = files[i].getName();\n                        String classname = filename.substring(0, filename.length() - 6);\n                        try {\n                            if (!fqcn.equals(packageName + ""."" + classname)) {\n                                Class c = callClassForName(packageName + ""."" + classname);\n                                manageClass(setOfClasses, superClass, c, url);\n                            }\n                        } catch (Throwable t) {\n                            errors.add(t);\n                        }\n                    }\n                } else {\n                    try {\n                        JarURLConnection conn = (JarURLConnection) url.openConnection();\n                        JarFile jarFile = conn.getJarFile();\n                        Enumeration e = jarFile.entries();\n                        while (e.hasMoreElements()) {\n                            JarEntry entry = (JarEntry) e.nextElement();\n                            String entryname = entry.getName();\n                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {\n                                String classname = entryname.substring(0, entryname.length() - 6);\n                                if (classname.startsWith(""/"")) classname = classname.substring(1);\n                                classname = classname.replace(\'/\', \'.\');\n                                try {\n                                    if (!fqcn.equals(classname)) {\n                                        Class c = callClassForName(classname);\n                                        manageClass(setOfClasses, superClass, c, url);\n                                    }\n                                } catch (Throwable t) {\n                                    errors.add(t);\n                                }\n                            }\n                        }\n                    } catch (IOException ioex) {\n                        errors.add(ioex);\n                    }\n                }\n            }\n        }\n    }\n']",180,"    public boolean backupFile(File olderFolder, File remoteDir) {
        boolean isBkupFileOK = false;
        FileChannel sourceConnection = null;
        FileChannel Targetchannel = null;
        try {
            sourceConnection = new FileInputStream(olderFolder).getChannel();
            Targetchannel = new FileOutputStream(remoteDir).getChannel();
            Targetchannel.transferFrom(sourceConnection, 0, sourceConnection.size());
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""IO exception occurred while copying file"", e);
        } finally {
            if ((remoteDir != null) && (remoteDir.exists()) && (remoteDir.length() > 0)) {
                isBkupFileOK = true;
            }
            try {
                if (sourceConnection != null) {
                    sourceConnection.close();
                }
                if (Targetchannel != null) {
                    Targetchannel.close();
                }
            } catch (IOException e) {
                logger.log(Level.INFO, ""closing channels failed"");
            }
        }
        return isBkupFileOK;
    }
",0,0,0,-1,"oldFile,newFile,sourceChannel,targetChannel,isBkupFileOK","oldFile:0.0,newFile:0.0,sourceChannel:0.0,targetChannel:0.0,isBkupFileOK:0.0,",4,18,"oldFile:olderFolder,newFile:remoteDir,sourceChannel:sourceConnection,targetChannel:Targetchannel,isBkupFileOK:isBkupFileOK,",Greedy,201,0.09699135224024455
499,"['15306466', '11129960', '    public static Document tidyHTML(URL url) throws XMLHelperException {\n        try {\n            URLConnection inConnection = url.openConnection();\n            if (inConnection.getContentType().startsWith(""text/xml"") || inConnection.getContentType().startsWith(""text/xhtml"")) {\n                return parseXMLFromURL(url);\n            } else if (inConnection.getContentType().startsWith(""text/html"")) {\n                InputStream is = inConnection.getInputStream();\n                ByteArrayOutputStream out = new ByteArrayOutputStream();\n                int totalBytes = 0;\n                byte[] buffer = new byte[65536];\n                while (true) {\n                    int bytesRead = is.read(buffer, 0, buffer.length);\n                    if (bytesRead < 0) break;\n                    for (int i = 0; i < bytesRead; i++) {\n                        byte b = buffer[i];\n                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;\n                        buffer[i] = b;\n                    }\n                    out.write(buffer, 0, bytesRead);\n                    totalBytes += bytesRead;\n                }\n                is.close();\n                out.close();\n                String outContent = out.toString();\n                InputStream in = new ByteArrayInputStream(out.toByteArray());\n                Tidy tidy = new Tidy();\n                tidy.setShowWarnings(false);\n                tidy.setXmlOut(true);\n                tidy.setXmlPi(false);\n                tidy.setDocType(""omit"");\n                tidy.setXHTML(false);\n                tidy.setRawOut(true);\n                tidy.setNumEntities(true);\n                tidy.setQuiet(true);\n                tidy.setFixComments(true);\n                tidy.setIndentContent(true);\n                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);\n                String result = ""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>\\n"" + baos.toString();\n                int startIndex = 0;\n                int endIndex = 0;\n                if ((startIndex = result.indexOf(""<!DOCTYPE"")) >= 0) {\n                    endIndex = result.indexOf("">"", startIndex);\n                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());\n                }\n                while ((startIndex = result.indexOf(""<script"")) >= 0) {\n                    endIndex = result.indexOf(""</script>"");\n                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());\n                }\n                in.close();\n                baos.close();\n                return parseXMLFromString(result);\n            } else {\n                throw new XMLHelperException(""Unable to tidy content type: "" + inConnection.getContentType());\n            }\n        } catch (IOException ioe) {\n            throw new XMLHelperException(""Unable to perform input/output"", ioe);\n        }\n    }\n', '    public static String getGoGl(final String urlPath, String key) {\n        log.debug(""getGoGl url "" + urlPath);\n        log.debug(""getGoGl key "" + key);\n        String shortUrl = null;\n        URL simpleURL = null;\n        HttpsURLConnection url = null;\n        BufferedInputStream bStream = null;\n        StringBuffer resultString = new StringBuffer("""");\n        String inputString = ""{\\""longUrl\\"":\\"""" + urlPath + ""\\""}"";\n        log.debug(""getGoGl inputString "" + inputString);\n        try {\n            simpleURL = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + key);\n            url = (HttpsURLConnection) simpleURL.openConnection();\n            url.setDoOutput(true);\n            url.setRequestProperty(""content-type"", ""application/json"");\n            PrintWriter pw = new PrintWriter(url.getOutputStream());\n            pw.print(inputString);\n            pw.close();\n        } catch (Exception ex) {\n            log.error(ex);\n            shortUrl = urlPath;\n        }\n        try {\n            bStream = new BufferedInputStream(url.getInputStream());\n            int i;\n            while ((i = bStream.read()) >= 0) {\n                resultString.append((char) i);\n            }\n        } catch (Exception ex) {\n            SocialUtils.log.error(ex);\n            shortUrl = urlPath;\n        }\n        return shortUrl;\n    }\n']",572,"    public static Document tidyHTML(URL html) throws XMLHelperException {
        try {
            URLConnection incConnect = html.openConnection();
            if (incConnect.getContentType().startsWith(""text/xml"") || incConnect.getContentType().startsWith(""text/xhtml"")) {
                return parseXMLFromURL(html);
            } else if (incConnect.getContentType().startsWith(""text/html"")) {
                InputStream iris = incConnect.getInputStream();
                ByteArrayOutputStream bin = new ByteArrayOutputStream();
                int otalbytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int secondsread = iris.read(buffer, 0, buffer.length);
                    if (secondsread < 0) break;
                    for (int i = 0; i < secondsread; i++) {
                        byte buf = buffer[i];
                        if (buf < 32 && buf != 10 && buf != 13 && buf != 9) buf = 32;
                        buffer[i] = buf;
                    }
                    bin.write(buffer, 0, secondsread);
                    otalbytes += secondsread;
                }
                iris.close();
                bin.close();
                String OutContent = bin.toString();
                InputStream ini = new ByteArrayInputStream(bin.toByteArray());
                Tidy tiny = new Tidy();
                tiny.setShowWarnings(false);
                tiny.setXmlOut(true);
                tiny.setXmlPi(false);
                tiny.setDocType(""omit"");
                tiny.setXHTML(false);
                tiny.setRawOut(true);
                tiny.setNumEntities(true);
                tiny.setQuiet(true);
                tiny.setFixComments(true);
                tiny.setIndentContent(true);
                tiny.setCharEncoding(org.w3c.tiny.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document stContent = (org.w3c.dom.Document) tiny.parseDOM(ini, baos);
                String  ret = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>
"" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex =  ret.indexOf(""<!DOCTYPE"")) >= 0) {
                    endIndex =  ret.indexOf("">"", startIndex);
                     ret =  ret.substring(0, startIndex) +  ret.substring(endIndex + 1,  ret.length());
                }
                while ((startIndex =  ret.indexOf(""<script"")) >= 0) {
                    endIndex =  ret.indexOf(""</script>"");
                     ret =  ret.substring(0, startIndex) +  ret.substring(endIndex + 9,  ret.length());
                }
                ini.close();
                baos.close();
                return parseXMLFromString( ret);
            } else {
                throw new XMLHelperException(""Unable to tidy content type: "" + incConnect.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException(""Unable to perform input/output"", ioe);
        }
    }
",0,0,0,-1,"url,inConnection,is,out,totalBytes,buffer,bytesRead,i,b,outContent,in,tidy,baos,tNode,result","url:0.00014543533325195312,inConnection:0.0,is:2.2649765014648438e-06,out:-8.463859558105469e-06,totalBytes:0.0,buffer:-3.349781036376953e-05,bytesRead:0.0,i:-2.9325485229492188e-05,b:8.940696716308594e-06,outContent:0.0,in:9.5367431640625e-07,tidy:0.0,baos:0.0,tNode:0.0,result:4.291534423828125e-06,",12,65,"url:html,b:buf,result: ret,is:iris,in:ini,inConnection:incConnect,totalBytes:otalbytes,bytesRead:secondsread,outContent:OutContent,tidy:tiny,baos:baos,tNode:stContent,out:bin,i:i,buffer:buffer,",Greedy,747,0.39466477632522584
