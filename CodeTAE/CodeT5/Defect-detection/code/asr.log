12/11/2024 12:16:18 - WARNING - __main__ -   Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
12/11/2024 12:16:20 - INFO - __main__ -   Training/evaluation parameters Namespace(train_data_file='../preprocess/dataset/train.jsonl', output_dir='./saved_models', eval_data_file='../preprocess/dataset/valid.jsonl', test_data_file='../preprocess/dataset/test_subs_0_400.jsonl', adv_data_file='train_adv_codebert.jsonl', model_type='t5', model_name_or_path='Salesforce/codet5-base-multi-sum', mlm=False, mlm_probability=0.15, config_name='Salesforce/codet5-base-multi-sum', tokenizer_name='Salesforce/codet5-base-multi-sum', cache_dir='', block_size=510, do_train=False, do_eval=False, do_test=False, do_asr=True, do_sim=False, evaluate_during_training=True, do_lower_case=False, train_batch_size=24, eval_batch_size=64, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, num_train_epochs=1.0, max_steps=-1, warmup_steps=0, logging_steps=50, save_steps=50, save_total_limit=None, eval_all_checkpoints=False, no_cuda=False, overwrite_output_dir=False, overwrite_cache=False, seed=123456, epoch=5, fp16=False, fp16_opt_level='O1', local_rank=-1, server_ip='', server_port='', n_gpu=1, device=device(type='cuda'), per_gpu_train_batch_size=24, per_gpu_eval_batch_size=64, start_epoch=0, start_step=0)
/data/yjx/code_for_first_task/CodeTAE/CodeT5/Defect-detection/code/run.py:706: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(output_dir))
/data/yjx/code_for_first_task/CodeTAE/CodeT5/Defect-detection/code/run.py:107: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.examples = torch.load(cache_file_path)
12/11/2024 12:16:24 - INFO - __main__ -   Creating features from dataset file at ../preprocess/dataset/test_subs_0_400.jsonl
12/11/2024 12:16:25 - INFO - __main__ -   Saving features into cached file ../preprocess/dataset/cached_test_subs_0_400
12/11/2024 12:16:25 - INFO - __main__ -   ***** Attack Success Rate *****
12/11/2024 12:16:25 - INFO - __main__ -     Num examples = 400
Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.
12/11/2024 12:16:44 - INFO - __main__ -   ***** Attack results *****
12/11/2024 12:16:44 - INFO - __main__ -     ASR = 0.2828
12/11/2024 12:16:44 - INFO - __main__ -     attack_success_num = 69
12/11/2024 12:16:44 - INFO - __main__ -     total_num = 244
12/11/2024 12:16:44 - INFO - __main__ -   ***** Attack results *****
12/11/2024 12:16:44 - INFO - __main__ -     ASR = 0.2828
12/11/2024 12:16:44 - INFO - __main__ -     attack_success_num = 69
12/11/2024 12:16:44 - INFO - __main__ -     total_num = 244

 cached_features_file:  ../preprocess/dataset/cached_test_subs_0_400
adv codes num:  400
